// <autogenerated>
//   This file was generated by T4 code generator GenerateItemIssuanceMvoDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ItemIssuanceMvo;
using Dddml.Wms.Domain.Shipment;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.ItemIssuanceMvo.NHibernate
{

	public class NHibernateItemIssuanceMvoEventStore : NHibernateEventStoreBase
	{
		public override object GetEventId(IEventStoreAggregateId eventStoreAggregateId, long version)
		{
			return new ItemIssuanceMvoEventId((ShipmentItemIssuanceId)(eventStoreAggregateId as EventStoreAggregateId).Id, (long)version);
		}

		public override Type GetSupportedStateEventType()
		{
			return typeof(ItemIssuanceMvoStateEventBase);
		}

        [Transaction(ReadOnly = true)]
        public override EventStream LoadEventStream(Type eventType, IEventStoreAggregateId eventStoreAggregateId, long version)
        {
            Type supportedEventType = typeof(ItemIssuanceMvoStateEventBase);
            if (!eventType.IsAssignableFrom(supportedEventType))
            {
                throw new NotSupportedException();
            }
            ShipmentItemIssuanceId idObj = (ShipmentItemIssuanceId)(eventStoreAggregateId as EventStoreAggregateId).Id;
            var criteria = CurrentSession.CreateCriteria<ItemIssuanceMvoStateEventBase>();
            criteria.Add(Restrictions.Eq("ItemIssuanceMvoEventId.ShipmentItemIssuanceIdShipmentId", idObj.ShipmentId));
            criteria.Add(Restrictions.Eq("ItemIssuanceMvoEventId.ShipmentItemIssuanceIdItemIssuanceSeqId", idObj.ItemIssuanceSeqId));
            criteria.Add(Restrictions.Le("ItemIssuanceMvoEventId.ShipmentVersion", version));
            criteria.AddOrder(global::NHibernate.Criterion.Order.Asc("ItemIssuanceMvoEventId.ShipmentVersion"));
            var es = criteria.List<IEvent>();
            foreach (ItemIssuanceMvoStateEventBase e in es)
            {
                e.EventReadOnly = true;
            }
            return new EventStream()
            {
                SteamVersion = es.Count > 0 ? ((ItemIssuanceMvoStateEventBase)es.Last()).ItemIssuanceMvoEventId.ShipmentVersion : default(long),
                Events = es
            };
        }

	}

}

