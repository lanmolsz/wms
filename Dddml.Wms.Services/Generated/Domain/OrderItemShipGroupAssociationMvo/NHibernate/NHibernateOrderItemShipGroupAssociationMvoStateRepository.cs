// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderItemShipGroupAssociationMvoDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderItemShipGroupAssociationMvo;
using Dddml.Wms.Domain.Order;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;
using Dddml.Support.Criterion;
using NHibernateICriterion = NHibernate.Criterion.ICriterion;
using NHibernateRestrictions = NHibernate.Criterion.Restrictions;
using NHibernateDisjunction = NHibernate.Criterion.Disjunction;

namespace Dddml.Wms.Domain.OrderItemShipGroupAssociationMvo.NHibernate
{

	public partial class NHibernateOrderItemShipGroupAssociationMvoStateRepository : IOrderItemShipGroupAssociationMvoStateRepository
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

        private static readonly ISet<string> _readOnlyPropertyNames = new SortedSet<string>(new String[] { "OrderItemShipGroupAssociationId", "Quantity", "CancelQuantity", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted", "OrderShipGroupShipmentMethodTypeId", "OrderShipGroupSupplierPartyId", "OrderShipGroupVendorPartyId", "OrderShipGroupCarrierPartyId", "OrderShipGroupCarrierRoleTypeId", "OrderShipGroupFacilityId", "OrderShipGroupContactMechId", "OrderShipGroupTelecomContactMechId", "OrderShipGroupTrackingNumber", "OrderShipGroupShippingInstructions", "OrderShipGroupMaySplit", "OrderShipGroupGiftMessage", "OrderShipGroupIsGift", "OrderShipGroupShipAfterDate", "OrderShipGroupShipByDate", "OrderShipGroupEstimatedShipDate", "OrderShipGroupEstimatedDeliveryDate", "OrderShipGroupPickwaveId", "OrderShipGroupOrderItemShipGroupAssociations", "OrderShipGroupVersion", "OrderShipGroupCreatedBy", "OrderShipGroupCreatedAt", "OrderShipGroupUpdatedBy", "OrderShipGroupUpdatedAt", "OrderShipGroupActive", "OrderShipGroupDeleted", "OrderOrderTypeId", "OrderOrderName", "OrderExternalId", "OrderSalesChannelEnumId", "OrderOrderDate", "OrderPriority", "OrderEntryDate", "OrderPickSheetPrintedDate", "OrderStatusId", "OrderCurrencyUom", "OrderSyncStatusId", "OrderBillingAccountId", "OrderOriginFacilityId", "OrderWebSiteId", "OrderProductStoreId", "OrderTerminalId", "OrderTransactionId", "OrderAutoOrderShoppingListId", "OrderNeedsInventoryIssuance", "OrderIsRushOrder", "OrderInternalCode", "OrderRemainingSubTotal", "OrderGrandTotal", "OrderInvoicePerShipment", "OrderOrderItems", "OrderOrderRoles", "OrderOrderShipGroups", "OrderVersion", "OrderCreatedBy", "OrderCreatedAt", "OrderUpdatedBy", "OrderUpdatedAt", "OrderActive" });
    
        public IReadOnlyProxyGenerator ReadOnlyProxyGenerator { get; set; }

		public NHibernateOrderItemShipGroupAssociationMvoStateRepository()
		{
		}

		[Transaction (ReadOnly = true)]
		public IOrderItemShipGroupAssociationMvoState Get(OrderItemShipGroupAssociationId id, bool nullAllowed)
		{
			IOrderItemShipGroupAssociationMvoState state = CurrentSession.Get<OrderItemShipGroupAssociationMvoState> (id);
			if (!nullAllowed && state == null) {
				state = new OrderItemShipGroupAssociationMvoState ();
				(state as OrderItemShipGroupAssociationMvoState).OrderItemShipGroupAssociationId = id;
			}
            if (ReadOnlyProxyGenerator != null && state != null)
            {
                return ReadOnlyProxyGenerator.CreateProxy<IOrderItemShipGroupAssociationMvoState>(state, new Type[] {  }, _readOnlyPropertyNames);
            }
			return state;
		}

		[Transaction]
		public void Save(IOrderItemShipGroupAssociationMvoState state)
		{
            IOrderItemShipGroupAssociationMvoState s = state;
            if (ReadOnlyProxyGenerator != null)
            {
                s = ReadOnlyProxyGenerator.GetTarget<IOrderItemShipGroupAssociationMvoState>(state);
            }
			CurrentSession.SaveOrUpdate (s);

			var saveable = s as ISaveable;
			if (saveable != null) {
				saveable.Save ();
			}
            CurrentSession.Flush();
		}

        //protected static void AddNotDeletedRestriction(ICriteria criteria)
        //{
        //    criteria.Add(NHibernateRestrictions.Eq("Deleted", false));
        //}

	}
}

