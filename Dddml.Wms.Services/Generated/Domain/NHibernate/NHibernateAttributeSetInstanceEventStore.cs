// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainNHibernateAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.NHibernate
{

	public class NHibernateAttributeSetInstanceEventStore : IEventStore
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

		public NHibernateAttributeSetInstanceEventStore()
		{
		}

		[Transaction (ReadOnly = true)]
        public EventStream LoadEventStream(IEventStoreAggregateId eventStoreAggregateId)
		{
			throw new NotImplementedException ();
		}

		[Transaction]
        public void AppendEvents(IEventStoreAggregateId eventStoreAggregateId, long version, ICollection<IEvent> events, Action afterEventsAppended)
		{
            foreach (IEvent e in events) 
            {
                if (e is AttributeSetInstanceStateCreated)
                {
                    AttributeSetInstanceState s = ((AttributeSetInstanceStateCreated)e).AttributeSetInstanceState;
                    CurrentSession.Save(s);
                }
                else
                {
                    CurrentSession.Save(e);
                }
                var saveable = e as ISaveable;
                if (saveable != null)
                {
                    saveable.Save();
                }
            }

            //Console.WriteLine("####################################################");
            afterEventsAppended();
            //Console.WriteLine("####################################################");

        }

        [Transaction(ReadOnly = true)]
        public virtual IEvent FindLastEvent(Type eventType, IEventStoreAggregateId eventStoreAggregateId, long version)
        {
            Type supportedEventType = typeof(AttributeSetInstanceStateCreated);
            if (!eventType.IsAssignableFrom(supportedEventType))
            {
                throw new NotSupportedException();
            }
            return GetStateEvent(eventStoreAggregateId, version);
        }

        [Transaction(ReadOnly = true)]
        public virtual IEvent GetStateEvent(IEventStoreAggregateId eventStoreAggregateId, long version)
        {
            object idObj = ((EventStoreAggregateId)eventStoreAggregateId).Id;
            AttributeSetInstanceState state = CurrentSession.Get<AttributeSetInstanceState>(idObj);
            return new AttributeSetInstanceStateCreated(state);
        }

        [Transaction(ReadOnly = true)]
        public virtual EventStream LoadEventStream(Type eventType, IEventStoreAggregateId eventStoreAggregateId, long version)
        {
            Type supportedEventType = typeof(AttributeSetInstanceStateCreated);
            if (!eventType.IsAssignableFrom(supportedEventType))
            {
                throw new NotSupportedException();
            }
            IEvent e = GetStateEvent(eventStoreAggregateId, version);
            return new EventStream()
            {
                Events = e != null ? (new IEvent[]{ e }).ToList() : new List<IEvent>()
            };
        }

	}

}

