// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Order;
using Dddml.Wms.Domain.PartyRole;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.Order.NHibernate
{

	public class NHibernateOrderItemStateDao : IOrderItemStateDao
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

        private static readonly ISet<string> _readOnlyPropertyNames = new SortedSet<string>(new String[] { "OrderItemSeqId", "ProductId", "ExternalProductId", "Quantity", "CancelQuantity", "SelectedAmount", "ExternalId", "OrderItemTypeId", "OrderItemGroupSeqId", "IsItemGroupPrimary", "FromInventoryItemId", "IsPromo", "QuoteId", "QuoteItemSeqId", "ShoppingListId", "ShoppingListItemSeqId", "UnitPrice", "UnitListPrice", "UnitAverageCost", "UnitRecurringPrice", "IsModifiedPrice", "RecurringFreqUomId", "ItemDescription", "Comments", "CorrespondingPoId", "StatusId", "SyncStatusId", "EstimatedShipDate", "EstimatedDeliveryDate", "AutoCancelDate", "DontCancelSetDate", "DontCancelSetBy", "ShipBeforeDate", "ShipAfterDate", "CancelBackOrderDate", "OverrideGlAccountId", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted", "OrderId" });
    
        public IReadOnlyProxyGenerator ReadOnlyProxyGenerator { get; set; }

		public NHibernateOrderItemStateDao()
		{
		}

        [Transaction(ReadOnly = true)]
        public IOrderItemState Get(OrderItemId id, bool nullAllowed)
        {
            IOrderItemState state = CurrentSession.Get<OrderItemState>(id);
            if (!nullAllowed && state == null)
            {
                state = new OrderItemState();
                (state as OrderItemState).OrderItemId = id;
            }
            if (ReadOnlyProxyGenerator != null && state != null)
            {
                return ReadOnlyProxyGenerator.CreateProxy<IOrderItemState>(state, new Type[] {  }, _readOnlyPropertyNames);
            }
            return state;
        }

       
        public void Save(IOrderItemState state)
        {
            IOrderItemState s = state;
            if (ReadOnlyProxyGenerator != null)
            {
                s = ReadOnlyProxyGenerator.GetTarget<IOrderItemState>(state);
            }
            CurrentSession.SaveOrUpdate(s);
            var saveable = s as ISaveable;
            if (saveable != null)
            {
                saveable.Save();
            }
        }


        public void Delete(IOrderItemState state)
        {
            IOrderItemState s = state;
            if (ReadOnlyProxyGenerator != null)
            {
                s = ReadOnlyProxyGenerator.GetTarget<IOrderItemState>(state);
            }
            var saveable = s as ISaveable;
            if (saveable != null)
            {
                saveable.Save();
            }
            CurrentSession.Delete(s);
        }


        [Transaction(ReadOnly = true)]
        public IEnumerable<IOrderItemState> FindByOrderId(string orderId)
        {
            var criteria = CurrentSession.CreateCriteria<OrderItemState>();
            var partIdCondition = Restrictions.Conjunction()
                .Add(Restrictions.Eq("OrderItemId.OrderId", orderId))
                ;

            return criteria.Add(partIdCondition).List<OrderItemState>();
        }

    }

	
}

