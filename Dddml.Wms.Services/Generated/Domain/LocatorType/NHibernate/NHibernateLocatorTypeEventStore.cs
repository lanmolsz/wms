// <autogenerated>
//   This file was generated by T4 code generator GenerateLocatorTypeDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.LocatorType;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.LocatorType.NHibernate
{

	public class NHibernateLocatorTypeEventStore : NHibernateEventStoreBase
	{
		public override object GetEventId(IEventStoreAggregateId eventStoreAggregateId, long version)
		{
			return new LocatorTypeEventId((string)(eventStoreAggregateId as EventStoreAggregateId).Id, (long)version);
		}

		public override Type GetSupportedStateEventType()
		{
			return typeof(LocatorTypeStateEventBase);
		}

        [Transaction(ReadOnly = true)]
        public override EventStream LoadEventStream(Type eventType, IEventStoreAggregateId eventStoreAggregateId, long version)
        {
            Type supportedEventType = typeof(LocatorTypeStateEventBase);
            if (!eventType.IsAssignableFrom(supportedEventType))
            {
                throw new NotSupportedException();
            }
            string idObj = (string)(eventStoreAggregateId as EventStoreAggregateId).Id;
            var criteria = CurrentSession.CreateCriteria<LocatorTypeStateEventBase>();
            criteria.Add(Restrictions.Eq("LocatorTypeEventId.LocatorTypeId", idObj));
            criteria.Add(Restrictions.Le("LocatorTypeEventId.Version", version));
            criteria.AddOrder(global::NHibernate.Criterion.Order.Asc("LocatorTypeEventId.Version"));
            var es = criteria.List<IEvent>();
            foreach (LocatorTypeStateEventBase e in es)
            {
                e.EventReadOnly = true;
            }
            return new EventStream()
            {
                SteamVersion = es.Count > 0 ? ((LocatorTypeStateEventBase)es.Last()).LocatorTypeEventId.Version : default(long),
                Events = es
            };
        }

	}

}

