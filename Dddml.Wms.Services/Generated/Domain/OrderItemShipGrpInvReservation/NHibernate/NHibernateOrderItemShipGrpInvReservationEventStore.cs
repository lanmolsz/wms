// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderItemShipGrpInvReservationDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderItemShipGrpInvReservation;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.OrderItemShipGrpInvReservation.NHibernate
{

	public class NHibernateOrderItemShipGrpInvReservationEventStore : NHibernateEventStoreBase
	{
		public override object GetEventId(IEventStoreAggregateId eventStoreAggregateId, long version)
		{
			return new OrderItemShipGrpInvReservationEventId((OrderItemShipGrpInvResId)(eventStoreAggregateId as EventStoreAggregateId).Id, (long)version);
		}

		public override Type GetSupportedEventType()
		{
			return typeof(OrderItemShipGrpInvReservationEventBase);
		}

        [Transaction(ReadOnly = true)]
        public override EventStream LoadEventStream(Type eventType, IEventStoreAggregateId eventStoreAggregateId, long version)
        {
            Type supportedEventType = typeof(OrderItemShipGrpInvReservationEventBase);
            if (!eventType.IsAssignableFrom(supportedEventType))
            {
                throw new NotSupportedException();
            }
            OrderItemShipGrpInvResId idObj = (OrderItemShipGrpInvResId)(eventStoreAggregateId as EventStoreAggregateId).Id;
            var criteria = CurrentSession.CreateCriteria<OrderItemShipGrpInvReservationEventBase>();
            criteria.Add(Restrictions.Eq("OrderItemShipGrpInvReservationEventId.OrderItemShipGrpInvResIdOrderId", idObj.OrderId));
            criteria.Add(Restrictions.Eq("OrderItemShipGrpInvReservationEventId.OrderItemShipGrpInvResIdShipGroupSeqId", idObj.ShipGroupSeqId));
            criteria.Add(Restrictions.Eq("OrderItemShipGrpInvReservationEventId.OrderItemShipGrpInvResIdOrderItemSeqId", idObj.OrderItemSeqId));
            criteria.Add(Restrictions.Eq("OrderItemShipGrpInvReservationEventId.OrderItemShipGrpInvResIdProductId", idObj.ProductId));
            criteria.Add(Restrictions.Eq("OrderItemShipGrpInvReservationEventId.OrderItemShipGrpInvResIdLocatorId", idObj.LocatorId));
            criteria.Add(Restrictions.Eq("OrderItemShipGrpInvReservationEventId.OrderItemShipGrpInvResIdAttributeSetInstanceId", idObj.AttributeSetInstanceId));
            criteria.Add(Restrictions.Le("OrderItemShipGrpInvReservationEventId.Version", version));
            criteria.AddOrder(global::NHibernate.Criterion.Order.Asc("OrderItemShipGrpInvReservationEventId.Version"));
            var es = criteria.List<IEvent>();
            foreach (OrderItemShipGrpInvReservationEventBase e in es)
            {
                e.EventReadOnly = true;
            }
            return new EventStream()
            {
                SteamVersion = es.Count > 0 ? ((OrderItemShipGrpInvReservationEventBase)es.Last()).OrderItemShipGrpInvReservationEventId.Version : default(long),
                Events = es
            };
        }

	}

}

