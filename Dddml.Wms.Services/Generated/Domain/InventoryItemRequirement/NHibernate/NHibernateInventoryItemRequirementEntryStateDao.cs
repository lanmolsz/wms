// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.InventoryItemRequirement.NHibernate
{

	public class NHibernateInventoryItemRequirementEntryStateDao : IInventoryItemRequirementEntryStateDao
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

        private static readonly ISet<string> _readOnlyPropertyNames = new SortedSet<string>(new String[] { "EntrySeqId", "Quantity", "SourceEventId", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted", "InventoryItemRequirementId" });
    
        public IReadOnlyProxyGenerator ReadOnlyProxyGenerator { get; set; }

		public NHibernateInventoryItemRequirementEntryStateDao()
		{
		}

        [Transaction(ReadOnly = true)]
        public IInventoryItemRequirementEntryState Get(InventoryItemRequirementEntryId id, bool nullAllowed)
        {
            IInventoryItemRequirementEntryState state = CurrentSession.Get<InventoryItemRequirementEntryState>(id);
            if (!nullAllowed && state == null)
            {
                state = new InventoryItemRequirementEntryState();
                (state as InventoryItemRequirementEntryState).InventoryItemRequirementEntryId = id;
            }
            return state;
        }

       
        public void Save(IInventoryItemRequirementEntryState state)
        {
            IInventoryItemRequirementEntryState s = state;
            CurrentSession.SaveOrUpdate(s);
            var saveable = s as ISaveable;
            if (saveable != null)
            {
                saveable.Save();
            }
        }


        public void Delete(IInventoryItemRequirementEntryState state)
        {
            IInventoryItemRequirementEntryState s = state;
            var saveable = s as ISaveable;
            if (saveable != null)
            {
                saveable.Save();
            }
            CurrentSession.Delete(s);
        }


        [Transaction(ReadOnly = true)]
        public IEnumerable<IInventoryItemRequirementEntryState> FindByInventoryItemRequirementId(InventoryItemId inventoryItemRequirementId)
        {
            var criteria = CurrentSession.CreateCriteria<InventoryItemRequirementEntryState>();
            var partIdCondition = Restrictions.Conjunction()
                .Add(Restrictions.Eq("InventoryItemRequirementEntryId.InventoryItemRequirementIdProductId", inventoryItemRequirementId.ProductId))
                .Add(Restrictions.Eq("InventoryItemRequirementEntryId.InventoryItemRequirementIdLocatorId", inventoryItemRequirementId.LocatorId))
                .Add(Restrictions.Eq("InventoryItemRequirementEntryId.InventoryItemRequirementIdAttributeSetInstanceId", inventoryItemRequirementId.AttributeSetInstanceId))
                ;

            return criteria.Add(partIdCondition).List<InventoryItemRequirementEntryState>();
        }

    }

	
}

