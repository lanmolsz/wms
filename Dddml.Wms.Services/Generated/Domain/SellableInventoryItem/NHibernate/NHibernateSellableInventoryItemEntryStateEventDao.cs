// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.SellableInventoryItem.NHibernate
{

	public class NHibernateSellableInventoryItemEntryStateEventDao : ISellableInventoryItemEntryStateEventDao
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

		public NHibernateSellableInventoryItemEntryStateEventDao ()
		{
		}

		public void Save(ISellableInventoryItemEntryStateEvent stateEvent)
		{
            SellableInventoryItemEntryState state = ((SellableInventoryItemEntryStateCreated)stateEvent).SellableInventoryItemEntryState;
			CurrentSession.Save(state);
            var saveable = stateEvent as ISaveable;
            if (saveable != null)
            {
                saveable.Save();
            }
        }

        [Transaction(ReadOnly = true)]
        public IEnumerable<ISellableInventoryItemEntryStateEvent> FindBySellableInventoryItemStateEventId(SellableInventoryItemStateEventId sellableInventoryItemStateEventId)
        {
            var criteria = CurrentSession.CreateCriteria<SellableInventoryItemEntryState>();
            var partIdCondition = Restrictions.Conjunction()
                .Add(Restrictions.Eq("SellableInventoryItemEntryId.SellableInventoryItemIdProductId", sellableInventoryItemStateEventId.SellableInventoryItemId.ProductId))
                .Add(Restrictions.Eq("SellableInventoryItemEntryId.SellableInventoryItemIdLocatorId", sellableInventoryItemStateEventId.SellableInventoryItemId.LocatorId))
                .Add(Restrictions.Eq("SellableInventoryItemEntryId.SellableInventoryItemIdAttributeSetInstanceId", sellableInventoryItemStateEventId.SellableInventoryItemId.AttributeSetInstanceId))
                ;

            return criteria.Add(partIdCondition).List<SellableInventoryItemEntryState>().Select(s => new SellableInventoryItemEntryStateCreated(s));
        }

	}
}

