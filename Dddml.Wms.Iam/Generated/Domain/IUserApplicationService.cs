// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.User;
using Dddml.Support.Criterion;

namespace Dddml.Wms.Domain.User
{

	public partial interface IUserApplicationService : IApplicationService
	{
		void When(ICreateUser c);

		void When(IMergePatchUser c);

		void When(IDeleteUser c);

 		IUserState Get(string userId);

        IEnumerable<IUserState> GetAll(int firstResult, int maxResults);

        IEnumerable<IUserState> Get(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IUserState> Get(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IUserState> GetByProperty(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        long GetCount(IEnumerable<KeyValuePair<string, object>> filter);

        long GetCount(ICriterion filter);

        IUserStateEvent GetStateEvent(string userId, long version);

        IUserState GetHistoryState(string userId, long version);

        IUserRoleState GetUserRole(string userId, string roleId);

        IUserClaimState GetUserClaim(string userId, int claimId);

        IUserPermissionState GetUserPermission(string userId, string permissionId);

        IUserLoginState GetUserLogin(string userId, LoginKey loginKey);


	}

    public static partial class UserApplicationServiceExtension
    {
        public static IEnumerable<IUserState> GetByProperty(this IUserApplicationService applicationService,
            System.Linq.Expressions.Expression<Func<IUserState, object>> propertySelector, 
            object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return applicationService.GetByProperty(ReflectUtils.GetPropertyName<IUserState>(propertySelector), propertyValue, orders, firstResult, maxResults);
        }

        public static IEnumerable<IUserState> GetByProperty<TPropertyType>(this IUserApplicationService applicationService,
            System.Linq.Expressions.Expression<Func<IUserState, TPropertyType>> propertySelector,
            TPropertyType propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return applicationService.GetByProperty(ReflectUtils.GetPropertyName<IUserState, TPropertyType>(propertySelector), propertyValue, orders, firstResult, maxResults);
        }
    }

}

