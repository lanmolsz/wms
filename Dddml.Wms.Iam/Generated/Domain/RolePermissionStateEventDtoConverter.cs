// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.RolePermission;

namespace Dddml.Wms.Domain.RolePermission
{

    public class RolePermissionStateEventDtoConverter
    {
        public virtual RolePermissionStateCreatedOrMergePatchedOrDeletedDto ToRolePermissionStateEventDto(IRolePermissionEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IRolePermissionStateCreated)stateEvent;
                return ToRolePermissionStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IRolePermissionStateMergePatched)stateEvent;
                return ToRolePermissionStateMergePatchedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.Deleted)
            {
                var e = (IRolePermissionStateDeleted)stateEvent;
                return ToRolePermissionStateDeletedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual RolePermissionStateCreatedDto ToRolePermissionStateCreatedDto(IRolePermissionStateCreated e)
        {
            var dto = new RolePermissionStateCreatedDto();
            dto.RolePermissionEventId = e.RolePermissionEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Active = e.Active;
            return dto;
        }

        public virtual RolePermissionStateMergePatchedDto ToRolePermissionStateMergePatchedDto(IRolePermissionStateMergePatched e)
        {
            var dto = new RolePermissionStateMergePatchedDto();
            dto.RolePermissionEventId = e.RolePermissionEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Active = e.Active;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual RolePermissionStateDeletedDto ToRolePermissionStateDeletedDto(IRolePermissionStateDeleted e)
        {
            var dto = new RolePermissionStateDeletedDto();
            dto.RolePermissionEventId = e.RolePermissionEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

