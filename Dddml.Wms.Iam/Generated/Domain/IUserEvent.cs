// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.User;

namespace Dddml.Wms.Domain.User
{
	public interface IUserEvent : IEvent, IEventDto, IGlobalIdentity<UserEventId>, ICreated<string>
	{
		UserEventId UserEventId { get; }

        bool ReadOnly { get; set; }

	}

    public interface IUserStateEvent : IUserEvent
    {
		string UserName { get; set; }

		int? AccessFailedCount { get; set; }

		string Email { get; set; }

		bool? EmailConfirmed { get; set; }

		bool? LockoutEnabled { get; set; }

		DateTime? LockoutEndDateUtc { get; set; }

		string PasswordHash { get; set; }

		string PhoneNumber { get; set; }

		bool? PhoneNumberConfirmed { get; set; }

		bool? TwoFactorEnabled { get; set; }

		string SecurityStamp { get; set; }

		bool? Active { get; set; }

    }
   
	public interface IUserStateCreated : IUserStateEvent
	{
		IEnumerable<IUserRoleStateCreated> UserRoleEvents { get; }
		
		void AddUserRoleEvent(IUserRoleStateCreated e);

		IUserRoleStateCreated NewUserRoleStateCreated(string roleId);

		IEnumerable<IUserClaimStateCreated> UserClaimEvents { get; }
		
		void AddUserClaimEvent(IUserClaimStateCreated e);

		IUserClaimStateCreated NewUserClaimStateCreated(int claimId);

		IEnumerable<IUserPermissionStateCreated> UserPermissionEvents { get; }
		
		void AddUserPermissionEvent(IUserPermissionStateCreated e);

		IUserPermissionStateCreated NewUserPermissionStateCreated(string permissionId);

		IEnumerable<IUserLoginStateCreated> UserLoginEvents { get; }
		
		void AddUserLoginEvent(IUserLoginStateCreated e);

		IUserLoginStateCreated NewUserLoginStateCreated(LoginKey loginKey);

	
	}


	public interface IUserStateMergePatched : IUserStateEvent
	{
		bool IsPropertyUserNameRemoved { get; set; }

		bool IsPropertyAccessFailedCountRemoved { get; set; }

		bool IsPropertyEmailRemoved { get; set; }

		bool IsPropertyEmailConfirmedRemoved { get; set; }

		bool IsPropertyLockoutEnabledRemoved { get; set; }

		bool IsPropertyLockoutEndDateUtcRemoved { get; set; }

		bool IsPropertyPasswordHashRemoved { get; set; }

		bool IsPropertyPhoneNumberRemoved { get; set; }

		bool IsPropertyPhoneNumberConfirmedRemoved { get; set; }

		bool IsPropertyTwoFactorEnabledRemoved { get; set; }

		bool IsPropertySecurityStampRemoved { get; set; }

		bool IsPropertyActiveRemoved { get; set; }

		IEnumerable<IUserRoleEvent> UserRoleEvents { get; }
		
		void AddUserRoleEvent(IUserRoleEvent e);

		IUserRoleStateCreated NewUserRoleStateCreated(string roleId);

		IUserRoleStateMergePatched NewUserRoleStateMergePatched(string roleId);

		IUserRoleStateRemoved NewUserRoleStateRemoved(string roleId);

		IEnumerable<IUserClaimEvent> UserClaimEvents { get; }
		
		void AddUserClaimEvent(IUserClaimEvent e);

		IUserClaimStateCreated NewUserClaimStateCreated(int claimId);

		IUserClaimStateMergePatched NewUserClaimStateMergePatched(int claimId);

		IUserClaimStateRemoved NewUserClaimStateRemoved(int claimId);

		IEnumerable<IUserPermissionEvent> UserPermissionEvents { get; }
		
		void AddUserPermissionEvent(IUserPermissionEvent e);

		IUserPermissionStateCreated NewUserPermissionStateCreated(string permissionId);

		IUserPermissionStateMergePatched NewUserPermissionStateMergePatched(string permissionId);

		IUserPermissionStateRemoved NewUserPermissionStateRemoved(string permissionId);

		IEnumerable<IUserLoginEvent> UserLoginEvents { get; }
		
		void AddUserLoginEvent(IUserLoginEvent e);

		IUserLoginStateCreated NewUserLoginStateCreated(LoginKey loginKey);

		IUserLoginStateMergePatched NewUserLoginStateMergePatched(LoginKey loginKey);

		IUserLoginStateRemoved NewUserLoginStateRemoved(LoginKey loginKey);


	}

	public interface IUserStateDeleted : IUserStateEvent
	{
		IEnumerable<IUserRoleStateRemoved> UserRoleEvents { get; }
		
		void AddUserRoleEvent(IUserRoleStateRemoved e);
		
		IUserRoleStateRemoved NewUserRoleStateRemoved(string roleId);

		IEnumerable<IUserClaimStateRemoved> UserClaimEvents { get; }
		
		void AddUserClaimEvent(IUserClaimStateRemoved e);
		
		IUserClaimStateRemoved NewUserClaimStateRemoved(int claimId);

		IEnumerable<IUserPermissionStateRemoved> UserPermissionEvents { get; }
		
		void AddUserPermissionEvent(IUserPermissionStateRemoved e);
		
		IUserPermissionStateRemoved NewUserPermissionStateRemoved(string permissionId);

		IEnumerable<IUserLoginStateRemoved> UserLoginEvents { get; }
		
		void AddUserLoginEvent(IUserLoginStateRemoved e);
		
		IUserLoginStateRemoved NewUserLoginStateRemoved(LoginKey loginKey);

	}


}

