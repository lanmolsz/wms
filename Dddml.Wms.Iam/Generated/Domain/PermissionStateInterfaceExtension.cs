// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Permission;

namespace Dddml.Wms.Domain.Permission
{

	public static partial class PermissionStateInterfaceExtension
	{

        public static IPermissionCommand ToCreateOrMergePatchPermission<TCreatePermission, TMergePatchPermission>(this IPermissionState state)
            where TCreatePermission : ICreatePermission, new()
            where TMergePatchPermission : IMergePatchPermission, new()
        {
            bool bUnsaved = ((IPermissionState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreatePermission<TCreatePermission>();
            }
            else 
            {
                return state.ToMergePatchPermission<TMergePatchPermission>();
            }
        }

        public static TDeletePermission ToDeletePermission<TDeletePermission>(this IPermissionState state)
            where TDeletePermission : IDeletePermission, new()
        {
            var cmd = new TDeletePermission();
            cmd.PermissionId = state.PermissionId;
            cmd.Version = ((IPermissionStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchPermission ToMergePatchPermission<TMergePatchPermission>(this IPermissionState state)
            where TMergePatchPermission : IMergePatchPermission, new()
        {
            var cmd = new TMergePatchPermission();

            cmd.Version = ((IPermissionStateProperties)state).Version;

            cmd.PermissionId = state.PermissionId;
            cmd.Name = state.Name;
            cmd.ParentPermissionId = state.ParentPermissionId;
            cmd.Description = state.Description;
            cmd.Active = ((IPermissionStateProperties)state).Active;
            
            if (state.Name == null) { cmd.IsPropertyNameRemoved = true; }
            if (state.ParentPermissionId == null) { cmd.IsPropertyParentPermissionIdRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreatePermission ToCreatePermission<TCreatePermission>(this IPermissionState state)
            where TCreatePermission : ICreatePermission, new()
        {
            var cmd = new TCreatePermission();

            cmd.Version = ((IPermissionStateProperties)state).Version;

            cmd.PermissionId = state.PermissionId;
            cmd.Name = state.Name;
            cmd.ParentPermissionId = state.ParentPermissionId;
            cmd.Description = state.Description;
            cmd.Active = ((IPermissionStateProperties)state).Active;
            return cmd;
        }
		

	}

}

