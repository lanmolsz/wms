// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.User;

namespace Dddml.Wms.Domain.User
{

	public abstract class UserClaimCommandDtoBase : ICommandDto, ICreateUserClaim, IMergePatchUserClaim, IRemoveUserClaim
	{

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual int ClaimId { get; set; }

		public virtual string ClaimType { get; set; }

		public virtual string ClaimValue { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string UserId { get; set; }

		public virtual bool? IsPropertyClaimTypeRemoved { get; set; }

        bool IMergePatchUserClaim.IsPropertyClaimTypeRemoved
        {
            get
            {
                var b = this.IsPropertyClaimTypeRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyClaimTypeRemoved = value;
            }
        }

		public virtual bool? IsPropertyClaimValueRemoved { get; set; }

        bool IMergePatchUserClaim.IsPropertyClaimValueRemoved
        {
            get
            {
                var b = this.IsPropertyClaimValueRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyClaimValueRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchUserClaim.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrRemoveUserClaimDto : UserClaimCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateUserClaimDto : CreateOrMergePatchOrRemoveUserClaimDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchUserClaimDto : CreateOrMergePatchOrRemoveUserClaimDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class RemoveUserClaimDto : CreateOrMergePatchOrRemoveUserClaimDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Remove;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}


    public partial class CreateOrMergePatchOrRemoveUserClaimDtos : IUserClaimCommands, ICreateUserClaimCommands, IEnumerable<CreateOrMergePatchOrRemoveUserClaimDto>
    {
        private List<CreateOrMergePatchOrRemoveUserClaimDto> _innerCommands = new List<CreateOrMergePatchOrRemoveUserClaimDto>();

        public virtual CreateOrMergePatchOrRemoveUserClaimDto[] ToArray()
        {
            return _innerCommands.ToArray();
        }

        public virtual void Clear()
        {
            _innerCommands.Clear();
        }

        public virtual void AddRange(IEnumerable<CreateOrMergePatchOrRemoveUserClaimDto> cs)
        {
            _innerCommands.AddRange(cs);
        }

        void IUserClaimCommands.Add(IUserClaimCommand c)
        {
            _innerCommands.Add((CreateOrMergePatchOrRemoveUserClaimDto)c);
        }

        void IUserClaimCommands.Remove(IUserClaimCommand c)
        {
            _innerCommands.Remove((CreateOrMergePatchOrRemoveUserClaimDto)c);
        }


        IEnumerator<CreateOrMergePatchOrRemoveUserClaimDto> IEnumerable<CreateOrMergePatchOrRemoveUserClaimDto>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        IEnumerator<IUserClaimCommand> IEnumerable<IUserClaimCommand>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        void ICreateUserClaimCommands.Add(ICreateUserClaim c)
        {
            _innerCommands.Add((CreateUserClaimDto)c);
        }

        void ICreateUserClaimCommands.Remove(ICreateUserClaim c)
        {
            _innerCommands.Remove((CreateUserClaimDto)c);
        }

        IEnumerator<ICreateUserClaim> IEnumerable<ICreateUserClaim>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

}

