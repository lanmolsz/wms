// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.User;

namespace Dddml.Wms.Domain.User
{

	public abstract class UserEventBase : IUserEvent
	{

		public virtual UserEventId UserEventId { get; set; }

        public virtual string UserId
        {
            get { return UserEventId.UserId; }
            set { UserEventId.UserId = value; }
        }

		public virtual string UserName { get; set; }

		public virtual int? AccessFailedCount { get; set; }

		public virtual string Email { get; set; }

		public virtual bool? EmailConfirmed { get; set; }

		public virtual bool? LockoutEnabled { get; set; }

		public virtual DateTime? LockoutEndDateUtc { get; set; }

		public virtual string PasswordHash { get; set; }

		public virtual string PhoneNumber { get; set; }

		public virtual bool? PhoneNumberConfirmed { get; set; }

		public virtual bool? TwoFactorEnabled { get; set; }

		public virtual string SecurityStamp { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		UserEventId IGlobalIdentity<UserEventId>.GlobalId {
			get
			{
				return this.UserEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IUserEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected UserEventBase()
        {
        }

        protected UserEventBase(UserEventId stateEventId)
        {
            this.UserEventId = stateEventId;
        }

		protected IUserRoleEventDao UserRoleEventDao
		{
			get { return ApplicationContext.Current["UserRoleEventDao"] as IUserRoleEventDao; }
		}

        protected UserRoleEventId NewUserRoleEventId(string roleId)
        {
            var stateEventId = new UserRoleEventId(this.UserEventId.UserId, roleId, this.UserEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IUserRoleEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IUserEvent oe, IUserRoleEvent e)
		{
			if (!oe.UserEventId.UserId.Equals(e.UserRoleEventId.UserId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id UserId {0} but inner id UserId {1}", 
					oe.UserEventId.UserId, e.UserRoleEventId.UserId);
			}
		}


		protected IUserClaimEventDao UserClaimEventDao
		{
			get { return ApplicationContext.Current["UserClaimEventDao"] as IUserClaimEventDao; }
		}

        protected UserClaimEventId NewUserClaimEventId(int claimId)
        {
            var stateEventId = new UserClaimEventId(this.UserEventId.UserId, claimId, this.UserEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IUserClaimEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IUserEvent oe, IUserClaimEvent e)
		{
			if (!oe.UserEventId.UserId.Equals(e.UserClaimEventId.UserId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id UserId {0} but inner id UserId {1}", 
					oe.UserEventId.UserId, e.UserClaimEventId.UserId);
			}
		}


		protected IUserPermissionEventDao UserPermissionEventDao
		{
			get { return ApplicationContext.Current["UserPermissionEventDao"] as IUserPermissionEventDao; }
		}

        protected UserPermissionEventId NewUserPermissionEventId(string permissionId)
        {
            var stateEventId = new UserPermissionEventId(this.UserEventId.UserId, permissionId, this.UserEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IUserPermissionEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IUserEvent oe, IUserPermissionEvent e)
		{
			if (!oe.UserEventId.UserId.Equals(e.UserPermissionEventId.UserId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id UserId {0} but inner id UserId {1}", 
					oe.UserEventId.UserId, e.UserPermissionEventId.UserId);
			}
		}


		protected IUserLoginEventDao UserLoginEventDao
		{
			get { return ApplicationContext.Current["UserLoginEventDao"] as IUserLoginEventDao; }
		}

        protected UserLoginEventId NewUserLoginEventId(LoginKey loginKey)
        {
            var stateEventId = new UserLoginEventId(this.UserEventId.UserId, loginKey, this.UserEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IUserLoginEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IUserEvent oe, IUserLoginEvent e)
		{
			if (!oe.UserEventId.UserId.Equals(e.UserLoginEventId.UserId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id UserId {0} but inner id UserId {1}", 
					oe.UserEventId.UserId, e.UserLoginEventId.UserId);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

	public class UserStateCreated : UserEventBase, IUserStateCreated, ISaveable
	{
		public UserStateCreated () : this(new UserEventId())
		{
		}

		public UserStateCreated (UserEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<UserRoleEventId, IUserRoleStateCreated> _userRoleEvents = new Dictionary<UserRoleEventId, IUserRoleStateCreated>();
        
        private IEnumerable<IUserRoleStateCreated> _readOnlyUserRoleEvents;

        public virtual IEnumerable<IUserRoleStateCreated> UserRoleEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userRoleEvents.Values;
                }
                else
                {
                    if (_readOnlyUserRoleEvents != null) { return _readOnlyUserRoleEvents; }
                    var eventDao = UserRoleEventDao;
                    var eL = new List<IUserRoleStateCreated>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserRoleStateCreated)e);
                    }
                    return (_readOnlyUserRoleEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserRoleEvent(e);
                    }
                }
                else { this._userRoleEvents.Clear(); }
            }
        }
    
		public virtual void AddUserRoleEvent(IUserRoleStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userRoleEvents[e.UserRoleEventId] = e;
		}

        public virtual IUserRoleStateCreated NewUserRoleStateCreated(string roleId)
        {
            var stateEvent = new UserRoleStateCreated(NewUserRoleEventId(roleId));
            return stateEvent;
        }

		private Dictionary<UserClaimEventId, IUserClaimStateCreated> _userClaimEvents = new Dictionary<UserClaimEventId, IUserClaimStateCreated>();
        
        private IEnumerable<IUserClaimStateCreated> _readOnlyUserClaimEvents;

        public virtual IEnumerable<IUserClaimStateCreated> UserClaimEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userClaimEvents.Values;
                }
                else
                {
                    if (_readOnlyUserClaimEvents != null) { return _readOnlyUserClaimEvents; }
                    var eventDao = UserClaimEventDao;
                    var eL = new List<IUserClaimStateCreated>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserClaimStateCreated)e);
                    }
                    return (_readOnlyUserClaimEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserClaimEvent(e);
                    }
                }
                else { this._userClaimEvents.Clear(); }
            }
        }
    
		public virtual void AddUserClaimEvent(IUserClaimStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userClaimEvents[e.UserClaimEventId] = e;
		}

        public virtual IUserClaimStateCreated NewUserClaimStateCreated(int claimId)
        {
            var stateEvent = new UserClaimStateCreated(NewUserClaimEventId(claimId));
            return stateEvent;
        }

		private Dictionary<UserPermissionEventId, IUserPermissionStateCreated> _userPermissionEvents = new Dictionary<UserPermissionEventId, IUserPermissionStateCreated>();
        
        private IEnumerable<IUserPermissionStateCreated> _readOnlyUserPermissionEvents;

        public virtual IEnumerable<IUserPermissionStateCreated> UserPermissionEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userPermissionEvents.Values;
                }
                else
                {
                    if (_readOnlyUserPermissionEvents != null) { return _readOnlyUserPermissionEvents; }
                    var eventDao = UserPermissionEventDao;
                    var eL = new List<IUserPermissionStateCreated>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserPermissionStateCreated)e);
                    }
                    return (_readOnlyUserPermissionEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserPermissionEvent(e);
                    }
                }
                else { this._userPermissionEvents.Clear(); }
            }
        }
    
		public virtual void AddUserPermissionEvent(IUserPermissionStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userPermissionEvents[e.UserPermissionEventId] = e;
		}

        public virtual IUserPermissionStateCreated NewUserPermissionStateCreated(string permissionId)
        {
            var stateEvent = new UserPermissionStateCreated(NewUserPermissionEventId(permissionId));
            return stateEvent;
        }

		private Dictionary<UserLoginEventId, IUserLoginStateCreated> _userLoginEvents = new Dictionary<UserLoginEventId, IUserLoginStateCreated>();
        
        private IEnumerable<IUserLoginStateCreated> _readOnlyUserLoginEvents;

        public virtual IEnumerable<IUserLoginStateCreated> UserLoginEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userLoginEvents.Values;
                }
                else
                {
                    if (_readOnlyUserLoginEvents != null) { return _readOnlyUserLoginEvents; }
                    var eventDao = UserLoginEventDao;
                    var eL = new List<IUserLoginStateCreated>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserLoginStateCreated)e);
                    }
                    return (_readOnlyUserLoginEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserLoginEvent(e);
                    }
                }
                else { this._userLoginEvents.Clear(); }
            }
        }
    
		public virtual void AddUserLoginEvent(IUserLoginStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userLoginEvents[e.UserLoginEventId] = e;
		}

        public virtual IUserLoginStateCreated NewUserLoginStateCreated(LoginKey loginKey)
        {
            var stateEvent = new UserLoginStateCreated(NewUserLoginEventId(loginKey));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IUserRoleStateCreated e in this.UserRoleEvents) {
				UserRoleEventDao.Save(e);
			}
			foreach (IUserClaimStateCreated e in this.UserClaimEvents) {
				UserClaimEventDao.Save(e);
			}
			foreach (IUserPermissionStateCreated e in this.UserPermissionEvents) {
				UserPermissionEventDao.Save(e);
			}
			foreach (IUserLoginStateCreated e in this.UserLoginEvents) {
				UserLoginEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class UserStateMergePatched : UserEventBase, IUserStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyUserNameRemoved { get; set; }

		public virtual bool IsPropertyAccessFailedCountRemoved { get; set; }

		public virtual bool IsPropertyEmailRemoved { get; set; }

		public virtual bool IsPropertyEmailConfirmedRemoved { get; set; }

		public virtual bool IsPropertyLockoutEnabledRemoved { get; set; }

		public virtual bool IsPropertyLockoutEndDateUtcRemoved { get; set; }

		public virtual bool IsPropertyPasswordHashRemoved { get; set; }

		public virtual bool IsPropertyPhoneNumberRemoved { get; set; }

		public virtual bool IsPropertyPhoneNumberConfirmedRemoved { get; set; }

		public virtual bool IsPropertyTwoFactorEnabledRemoved { get; set; }

		public virtual bool IsPropertySecurityStampRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public UserStateMergePatched ()
		{
		}

		public UserStateMergePatched (UserEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<UserRoleEventId, IUserRoleEvent> _userRoleEvents = new Dictionary<UserRoleEventId, IUserRoleEvent>();

        private IEnumerable<IUserRoleEvent> _readOnlyUserRoleEvents;
        
        public virtual IEnumerable<IUserRoleEvent> UserRoleEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userRoleEvents.Values;
                }
                else
                {
                    if (_readOnlyUserRoleEvents != null) { return _readOnlyUserRoleEvents; }
                    var eventDao = UserRoleEventDao;
                    var eL = new List<IUserRoleEvent>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserRoleEvent)e);
                    }
                    return (_readOnlyUserRoleEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserRoleEvent(e);
                    }
                }
                else { this._userRoleEvents.Clear(); }
            }
        }

		public virtual void AddUserRoleEvent(IUserRoleEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userRoleEvents[e.UserRoleEventId] = e;
		}

        public virtual IUserRoleStateCreated NewUserRoleStateCreated(string roleId)
        {
            var stateEvent = new UserRoleStateCreated(NewUserRoleEventId(roleId));
            return stateEvent;
        }

        public virtual IUserRoleStateMergePatched NewUserRoleStateMergePatched(string roleId)
        {
            var stateEvent = new UserRoleStateMergePatched(NewUserRoleEventId(roleId));
            return stateEvent;
        }

        public virtual IUserRoleStateRemoved NewUserRoleStateRemoved(string roleId)
        {
            var stateEvent = new UserRoleStateRemoved(NewUserRoleEventId(roleId));
            return stateEvent;
        }

		private Dictionary<UserClaimEventId, IUserClaimEvent> _userClaimEvents = new Dictionary<UserClaimEventId, IUserClaimEvent>();

        private IEnumerable<IUserClaimEvent> _readOnlyUserClaimEvents;
        
        public virtual IEnumerable<IUserClaimEvent> UserClaimEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userClaimEvents.Values;
                }
                else
                {
                    if (_readOnlyUserClaimEvents != null) { return _readOnlyUserClaimEvents; }
                    var eventDao = UserClaimEventDao;
                    var eL = new List<IUserClaimEvent>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserClaimEvent)e);
                    }
                    return (_readOnlyUserClaimEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserClaimEvent(e);
                    }
                }
                else { this._userClaimEvents.Clear(); }
            }
        }

		public virtual void AddUserClaimEvent(IUserClaimEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userClaimEvents[e.UserClaimEventId] = e;
		}

        public virtual IUserClaimStateCreated NewUserClaimStateCreated(int claimId)
        {
            var stateEvent = new UserClaimStateCreated(NewUserClaimEventId(claimId));
            return stateEvent;
        }

        public virtual IUserClaimStateMergePatched NewUserClaimStateMergePatched(int claimId)
        {
            var stateEvent = new UserClaimStateMergePatched(NewUserClaimEventId(claimId));
            return stateEvent;
        }

        public virtual IUserClaimStateRemoved NewUserClaimStateRemoved(int claimId)
        {
            var stateEvent = new UserClaimStateRemoved(NewUserClaimEventId(claimId));
            return stateEvent;
        }

		private Dictionary<UserPermissionEventId, IUserPermissionEvent> _userPermissionEvents = new Dictionary<UserPermissionEventId, IUserPermissionEvent>();

        private IEnumerable<IUserPermissionEvent> _readOnlyUserPermissionEvents;
        
        public virtual IEnumerable<IUserPermissionEvent> UserPermissionEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userPermissionEvents.Values;
                }
                else
                {
                    if (_readOnlyUserPermissionEvents != null) { return _readOnlyUserPermissionEvents; }
                    var eventDao = UserPermissionEventDao;
                    var eL = new List<IUserPermissionEvent>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserPermissionEvent)e);
                    }
                    return (_readOnlyUserPermissionEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserPermissionEvent(e);
                    }
                }
                else { this._userPermissionEvents.Clear(); }
            }
        }

		public virtual void AddUserPermissionEvent(IUserPermissionEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userPermissionEvents[e.UserPermissionEventId] = e;
		}

        public virtual IUserPermissionStateCreated NewUserPermissionStateCreated(string permissionId)
        {
            var stateEvent = new UserPermissionStateCreated(NewUserPermissionEventId(permissionId));
            return stateEvent;
        }

        public virtual IUserPermissionStateMergePatched NewUserPermissionStateMergePatched(string permissionId)
        {
            var stateEvent = new UserPermissionStateMergePatched(NewUserPermissionEventId(permissionId));
            return stateEvent;
        }

        public virtual IUserPermissionStateRemoved NewUserPermissionStateRemoved(string permissionId)
        {
            var stateEvent = new UserPermissionStateRemoved(NewUserPermissionEventId(permissionId));
            return stateEvent;
        }

		private Dictionary<UserLoginEventId, IUserLoginEvent> _userLoginEvents = new Dictionary<UserLoginEventId, IUserLoginEvent>();

        private IEnumerable<IUserLoginEvent> _readOnlyUserLoginEvents;
        
        public virtual IEnumerable<IUserLoginEvent> UserLoginEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userLoginEvents.Values;
                }
                else
                {
                    if (_readOnlyUserLoginEvents != null) { return _readOnlyUserLoginEvents; }
                    var eventDao = UserLoginEventDao;
                    var eL = new List<IUserLoginEvent>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserLoginEvent)e);
                    }
                    return (_readOnlyUserLoginEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserLoginEvent(e);
                    }
                }
                else { this._userLoginEvents.Clear(); }
            }
        }

		public virtual void AddUserLoginEvent(IUserLoginEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userLoginEvents[e.UserLoginEventId] = e;
		}

        public virtual IUserLoginStateCreated NewUserLoginStateCreated(LoginKey loginKey)
        {
            var stateEvent = new UserLoginStateCreated(NewUserLoginEventId(loginKey));
            return stateEvent;
        }

        public virtual IUserLoginStateMergePatched NewUserLoginStateMergePatched(LoginKey loginKey)
        {
            var stateEvent = new UserLoginStateMergePatched(NewUserLoginEventId(loginKey));
            return stateEvent;
        }

        public virtual IUserLoginStateRemoved NewUserLoginStateRemoved(LoginKey loginKey)
        {
            var stateEvent = new UserLoginStateRemoved(NewUserLoginEventId(loginKey));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IUserRoleEvent e in this.UserRoleEvents) {
				UserRoleEventDao.Save(e);
			}
			foreach (IUserClaimEvent e in this.UserClaimEvents) {
				UserClaimEventDao.Save(e);
			}
			foreach (IUserPermissionEvent e in this.UserPermissionEvents) {
				UserPermissionEventDao.Save(e);
			}
			foreach (IUserLoginEvent e in this.UserLoginEvents) {
				UserLoginEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class UserStateDeleted : UserEventBase, IUserStateDeleted, ISaveable
	{
		public UserStateDeleted ()
		{
		}

		public UserStateDeleted (UserEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

		private Dictionary<UserRoleEventId, IUserRoleStateRemoved> _userRoleEvents = new Dictionary<UserRoleEventId, IUserRoleStateRemoved>();
		
        private IEnumerable<IUserRoleStateRemoved> _readOnlyUserRoleEvents;

        public virtual IEnumerable<IUserRoleStateRemoved> UserRoleEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userRoleEvents.Values;
                }
                else
                {
                    if (_readOnlyUserRoleEvents != null) { return _readOnlyUserRoleEvents; }
                    var eventDao = UserRoleEventDao;
                    var eL = new List<IUserRoleStateRemoved>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserRoleStateRemoved)e);
                    }
                    return (_readOnlyUserRoleEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserRoleEvent(e);
                    }
                }
                else { this._userRoleEvents.Clear(); }
            }
        }
	
		public virtual void AddUserRoleEvent(IUserRoleStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userRoleEvents[e.UserRoleEventId] = e;
		}

        public virtual IUserRoleStateRemoved NewUserRoleStateRemoved(string roleId)
        {
            var stateEvent = new UserRoleStateRemoved(NewUserRoleEventId(roleId));
            return stateEvent;
        }

		private Dictionary<UserClaimEventId, IUserClaimStateRemoved> _userClaimEvents = new Dictionary<UserClaimEventId, IUserClaimStateRemoved>();
		
        private IEnumerable<IUserClaimStateRemoved> _readOnlyUserClaimEvents;

        public virtual IEnumerable<IUserClaimStateRemoved> UserClaimEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userClaimEvents.Values;
                }
                else
                {
                    if (_readOnlyUserClaimEvents != null) { return _readOnlyUserClaimEvents; }
                    var eventDao = UserClaimEventDao;
                    var eL = new List<IUserClaimStateRemoved>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserClaimStateRemoved)e);
                    }
                    return (_readOnlyUserClaimEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserClaimEvent(e);
                    }
                }
                else { this._userClaimEvents.Clear(); }
            }
        }
	
		public virtual void AddUserClaimEvent(IUserClaimStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userClaimEvents[e.UserClaimEventId] = e;
		}

        public virtual IUserClaimStateRemoved NewUserClaimStateRemoved(int claimId)
        {
            var stateEvent = new UserClaimStateRemoved(NewUserClaimEventId(claimId));
            return stateEvent;
        }

		private Dictionary<UserPermissionEventId, IUserPermissionStateRemoved> _userPermissionEvents = new Dictionary<UserPermissionEventId, IUserPermissionStateRemoved>();
		
        private IEnumerable<IUserPermissionStateRemoved> _readOnlyUserPermissionEvents;

        public virtual IEnumerable<IUserPermissionStateRemoved> UserPermissionEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userPermissionEvents.Values;
                }
                else
                {
                    if (_readOnlyUserPermissionEvents != null) { return _readOnlyUserPermissionEvents; }
                    var eventDao = UserPermissionEventDao;
                    var eL = new List<IUserPermissionStateRemoved>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserPermissionStateRemoved)e);
                    }
                    return (_readOnlyUserPermissionEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserPermissionEvent(e);
                    }
                }
                else { this._userPermissionEvents.Clear(); }
            }
        }
	
		public virtual void AddUserPermissionEvent(IUserPermissionStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userPermissionEvents[e.UserPermissionEventId] = e;
		}

        public virtual IUserPermissionStateRemoved NewUserPermissionStateRemoved(string permissionId)
        {
            var stateEvent = new UserPermissionStateRemoved(NewUserPermissionEventId(permissionId));
            return stateEvent;
        }

		private Dictionary<UserLoginEventId, IUserLoginStateRemoved> _userLoginEvents = new Dictionary<UserLoginEventId, IUserLoginStateRemoved>();
		
        private IEnumerable<IUserLoginStateRemoved> _readOnlyUserLoginEvents;

        public virtual IEnumerable<IUserLoginStateRemoved> UserLoginEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._userLoginEvents.Values;
                }
                else
                {
                    if (_readOnlyUserLoginEvents != null) { return _readOnlyUserLoginEvents; }
                    var eventDao = UserLoginEventDao;
                    var eL = new List<IUserLoginStateRemoved>();
                    foreach (var e in eventDao.FindByUserEventId(this.UserEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IUserLoginStateRemoved)e);
                    }
                    return (_readOnlyUserLoginEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddUserLoginEvent(e);
                    }
                }
                else { this._userLoginEvents.Clear(); }
            }
        }
	
		public virtual void AddUserLoginEvent(IUserLoginStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._userLoginEvents[e.UserLoginEventId] = e;
		}

        public virtual IUserLoginStateRemoved NewUserLoginStateRemoved(LoginKey loginKey)
        {
            var stateEvent = new UserLoginStateRemoved(NewUserLoginEventId(loginKey));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IUserRoleStateRemoved e in this.UserRoleEvents) {
				UserRoleEventDao.Save(e);
			}
			foreach (IUserClaimStateRemoved e in this.UserClaimEvents) {
				UserClaimEventDao.Save(e);
			}
			foreach (IUserPermissionStateRemoved e in this.UserPermissionEvents) {
				UserPermissionEventDao.Save(e);
			}
			foreach (IUserLoginStateRemoved e in this.UserLoginEvents) {
				UserLoginEventDao.Save(e);
			}
		}


	}



}

