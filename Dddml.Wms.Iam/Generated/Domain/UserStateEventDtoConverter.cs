// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.User;

namespace Dddml.Wms.Domain.User
{

    public class UserStateEventDtoConverter
    {
        public virtual UserStateCreatedOrMergePatchedOrDeletedDto ToUserStateEventDto(IUserStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IUserStateCreated)stateEvent;
                return ToUserStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IUserStateMergePatched)stateEvent;
                return ToUserStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (IUserStateDeleted)stateEvent;
                return ToUserStateDeletedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual UserStateCreatedDto ToUserStateCreatedDto(IUserStateCreated e)
        {
            var dto = new UserStateCreatedDto();
            dto.StateEventId = new UserStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.UserName = e.UserName;
            dto.AccessFailedCount = e.AccessFailedCount;
            dto.Email = e.Email;
            dto.EmailConfirmed = e.EmailConfirmed;
            dto.LockoutEnabled = e.LockoutEnabled;
            dto.LockoutEndDateUtc = e.LockoutEndDateUtc;
            dto.PasswordHash = e.PasswordHash;
            dto.PhoneNumber = e.PhoneNumber;
            dto.PhoneNumberConfirmed = e.PhoneNumberConfirmed;
            dto.TwoFactorEnabled = e.TwoFactorEnabled;
            dto.SecurityStamp = e.SecurityStamp;
            dto.Active = e.Active;
            var userRoleEvents = new List<UserRoleStateCreatedDto>();
            foreach (var ee in e.UserRoleEvents)
            {
                UserRoleStateCreatedDto eeDto = UserRoleStateEventDtoConverter.ToUserRoleStateCreatedDto(ee);
                userRoleEvents.Add(eeDto);
            }
            dto.UserRoleEvents = userRoleEvents.ToArray();

            var userClaimEvents = new List<UserClaimStateCreatedDto>();
            foreach (var ee in e.UserClaimEvents)
            {
                UserClaimStateCreatedDto eeDto = UserClaimStateEventDtoConverter.ToUserClaimStateCreatedDto(ee);
                userClaimEvents.Add(eeDto);
            }
            dto.UserClaimEvents = userClaimEvents.ToArray();

            var userPermissionEvents = new List<UserPermissionStateCreatedDto>();
            foreach (var ee in e.UserPermissionEvents)
            {
                UserPermissionStateCreatedDto eeDto = UserPermissionStateEventDtoConverter.ToUserPermissionStateCreatedDto(ee);
                userPermissionEvents.Add(eeDto);
            }
            dto.UserPermissionEvents = userPermissionEvents.ToArray();

            var userLoginEvents = new List<UserLoginStateCreatedDto>();
            foreach (var ee in e.UserLoginEvents)
            {
                UserLoginStateCreatedDto eeDto = UserLoginStateEventDtoConverter.ToUserLoginStateCreatedDto(ee);
                userLoginEvents.Add(eeDto);
            }
            dto.UserLoginEvents = userLoginEvents.ToArray();

            return dto;
        }

        public virtual UserStateMergePatchedDto ToUserStateMergePatchedDto(IUserStateMergePatched e)
        {
            var dto = new UserStateMergePatchedDto();
            dto.StateEventId = new UserStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.UserName = e.UserName;
            dto.AccessFailedCount = e.AccessFailedCount;
            dto.Email = e.Email;
            dto.EmailConfirmed = e.EmailConfirmed;
            dto.LockoutEnabled = e.LockoutEnabled;
            dto.LockoutEndDateUtc = e.LockoutEndDateUtc;
            dto.PasswordHash = e.PasswordHash;
            dto.PhoneNumber = e.PhoneNumber;
            dto.PhoneNumberConfirmed = e.PhoneNumberConfirmed;
            dto.TwoFactorEnabled = e.TwoFactorEnabled;
            dto.SecurityStamp = e.SecurityStamp;
            dto.Active = e.Active;
            dto.IsPropertyUserNameRemoved = e.IsPropertyUserNameRemoved;
            dto.IsPropertyAccessFailedCountRemoved = e.IsPropertyAccessFailedCountRemoved;
            dto.IsPropertyEmailRemoved = e.IsPropertyEmailRemoved;
            dto.IsPropertyEmailConfirmedRemoved = e.IsPropertyEmailConfirmedRemoved;
            dto.IsPropertyLockoutEnabledRemoved = e.IsPropertyLockoutEnabledRemoved;
            dto.IsPropertyLockoutEndDateUtcRemoved = e.IsPropertyLockoutEndDateUtcRemoved;
            dto.IsPropertyPasswordHashRemoved = e.IsPropertyPasswordHashRemoved;
            dto.IsPropertyPhoneNumberRemoved = e.IsPropertyPhoneNumberRemoved;
            dto.IsPropertyPhoneNumberConfirmedRemoved = e.IsPropertyPhoneNumberConfirmedRemoved;
            dto.IsPropertyTwoFactorEnabledRemoved = e.IsPropertyTwoFactorEnabledRemoved;
            dto.IsPropertySecurityStampRemoved = e.IsPropertySecurityStampRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var userRoleEvents = new List<UserRoleStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.UserRoleEvents)
            {
                UserRoleStateCreatedOrMergePatchedOrRemovedDto eeDto = UserRoleStateEventDtoConverter.ToUserRoleStateEventDto(ee);
                userRoleEvents.Add(eeDto);
            }
            dto.UserRoleEvents = userRoleEvents.ToArray();

            var userClaimEvents = new List<UserClaimStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.UserClaimEvents)
            {
                UserClaimStateCreatedOrMergePatchedOrRemovedDto eeDto = UserClaimStateEventDtoConverter.ToUserClaimStateEventDto(ee);
                userClaimEvents.Add(eeDto);
            }
            dto.UserClaimEvents = userClaimEvents.ToArray();

            var userPermissionEvents = new List<UserPermissionStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.UserPermissionEvents)
            {
                UserPermissionStateCreatedOrMergePatchedOrRemovedDto eeDto = UserPermissionStateEventDtoConverter.ToUserPermissionStateEventDto(ee);
                userPermissionEvents.Add(eeDto);
            }
            dto.UserPermissionEvents = userPermissionEvents.ToArray();

            var userLoginEvents = new List<UserLoginStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.UserLoginEvents)
            {
                UserLoginStateCreatedOrMergePatchedOrRemovedDto eeDto = UserLoginStateEventDtoConverter.ToUserLoginStateEventDto(ee);
                userLoginEvents.Add(eeDto);
            }
            dto.UserLoginEvents = userLoginEvents.ToArray();


            return dto;
        }


        public virtual UserStateDeletedDto ToUserStateDeletedDto(IUserStateDeleted e)
        {
            var dto = new UserStateDeletedDto();
            dto.StateEventId = new UserStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            var userRoleEvents = new List<UserRoleStateRemovedDto>();
            foreach (var ee in e.UserRoleEvents)
            {
                UserRoleStateRemovedDto eeDto = UserRoleStateEventDtoConverter.ToUserRoleStateRemovedDto(ee);
                userRoleEvents.Add(eeDto);
            }
            dto.UserRoleEvents = userRoleEvents.ToArray();

            var userClaimEvents = new List<UserClaimStateRemovedDto>();
            foreach (var ee in e.UserClaimEvents)
            {
                UserClaimStateRemovedDto eeDto = UserClaimStateEventDtoConverter.ToUserClaimStateRemovedDto(ee);
                userClaimEvents.Add(eeDto);
            }
            dto.UserClaimEvents = userClaimEvents.ToArray();

            var userPermissionEvents = new List<UserPermissionStateRemovedDto>();
            foreach (var ee in e.UserPermissionEvents)
            {
                UserPermissionStateRemovedDto eeDto = UserPermissionStateEventDtoConverter.ToUserPermissionStateRemovedDto(ee);
                userPermissionEvents.Add(eeDto);
            }
            dto.UserPermissionEvents = userPermissionEvents.ToArray();

            var userLoginEvents = new List<UserLoginStateRemovedDto>();
            foreach (var ee in e.UserLoginEvents)
            {
                UserLoginStateRemovedDto eeDto = UserLoginStateEventDtoConverter.ToUserLoginStateRemovedDto(ee);
                userLoginEvents.Add(eeDto);
            }
            dto.UserLoginEvents = userLoginEvents.ToArray();


            return dto;
        }

        protected virtual UserRoleStateEventDtoConverter UserRoleStateEventDtoConverter
        {
            get
            {
                return new UserRoleStateEventDtoConverter();
            }
        }

        protected virtual UserClaimStateEventDtoConverter UserClaimStateEventDtoConverter
        {
            get
            {
                return new UserClaimStateEventDtoConverter();
            }
        }

        protected virtual UserPermissionStateEventDtoConverter UserPermissionStateEventDtoConverter
        {
            get
            {
                return new UserPermissionStateEventDtoConverter();
            }
        }

        protected virtual UserLoginStateEventDtoConverter UserLoginStateEventDtoConverter
        {
            get
            {
                return new UserLoginStateEventDtoConverter();
            }
        }


    }


}

