// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.User;

namespace Dddml.Wms.Domain.User
{

	public static partial class UserRoleStateInterfaceExtension
	{

        public static IUserRoleCommand ToCreateOrMergePatchUserRole<TCreateUserRole, TMergePatchUserRole>(this IUserRoleState state)
            where TCreateUserRole : ICreateUserRole, new()
            where TMergePatchUserRole : IMergePatchUserRole, new()
        {
            bool bUnsaved = ((IUserRoleState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateUserRole<TCreateUserRole>();
            }
            else 
            {
                return state.ToMergePatchUserRole<TMergePatchUserRole>();
            }
        }

        public static TRemoveUserRole ToRemoveUserRole<TRemoveUserRole>(this IUserRoleState state)
            where TRemoveUserRole : IRemoveUserRole, new()
        {
            var cmd = new TRemoveUserRole();
            cmd.RoleId = state.RoleId;
            return cmd;
        }

        public static TMergePatchUserRole ToMergePatchUserRole<TMergePatchUserRole>(this IUserRoleState state)
            where TMergePatchUserRole : IMergePatchUserRole, new()
        {
            var cmd = new TMergePatchUserRole();

            cmd.RoleId = state.RoleId;
            cmd.Active = ((IUserRoleStateProperties)state).Active;
            cmd.UserId = state.UserId;
            
            return cmd;
        }

        public static TCreateUserRole ToCreateUserRole<TCreateUserRole>(this IUserRoleState state)
            where TCreateUserRole : ICreateUserRole, new()
        {
            var cmd = new TCreateUserRole();

            cmd.RoleId = state.RoleId;
            cmd.Active = ((IUserRoleStateProperties)state).Active;
            cmd.UserId = state.UserId;
            return cmd;
        }
		

	}

}

