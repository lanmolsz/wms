// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.RolePermission;

namespace Dddml.Wms.Domain.RolePermission
{

	public static partial class RolePermissionStateInterfaceExtension
	{

        public static IRolePermissionCommand ToCreateOrMergePatchRolePermission<TCreateRolePermission, TMergePatchRolePermission>(this IRolePermissionState state)
            where TCreateRolePermission : ICreateRolePermission, new()
            where TMergePatchRolePermission : IMergePatchRolePermission, new()
        {
            bool bUnsaved = ((IRolePermissionState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateRolePermission<TCreateRolePermission>();
            }
            else 
            {
                return state.ToMergePatchRolePermission<TMergePatchRolePermission>();
            }
        }

        public static TDeleteRolePermission ToDeleteRolePermission<TDeleteRolePermission>(this IRolePermissionState state)
            where TDeleteRolePermission : IDeleteRolePermission, new()
        {
            var cmd = new TDeleteRolePermission();
            cmd.Id = state.Id;
            cmd.Version = ((IRolePermissionStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchRolePermission ToMergePatchRolePermission<TMergePatchRolePermission>(this IRolePermissionState state)
            where TMergePatchRolePermission : IMergePatchRolePermission, new()
        {
            var cmd = new TMergePatchRolePermission();

            cmd.Version = ((IRolePermissionStateProperties)state).Version;

            cmd.Id = state.Id;
            cmd.Active = ((IRolePermissionStateProperties)state).Active;
            
            return cmd;
        }

        public static TCreateRolePermission ToCreateRolePermission<TCreateRolePermission>(this IRolePermissionState state)
            where TCreateRolePermission : ICreateRolePermission, new()
        {
            var cmd = new TCreateRolePermission();

            cmd.Version = ((IRolePermissionStateProperties)state).Version;

            cmd.Id = state.Id;
            cmd.Active = ((IRolePermissionStateProperties)state).Active;
            return cmd;
        }
		

	}

}

