// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.User;

namespace Dddml.Wms.Domain.User
{

	public static partial class UserPermissionStateInterfaceExtension
	{

        public static IUserPermissionCommand ToCreateOrMergePatchUserPermission<TCreateUserPermission, TMergePatchUserPermission>(this IUserPermissionState state)
            where TCreateUserPermission : ICreateUserPermission, new()
            where TMergePatchUserPermission : IMergePatchUserPermission, new()
        {
            bool bUnsaved = ((IUserPermissionState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateUserPermission<TCreateUserPermission>();
            }
            else 
            {
                return state.ToMergePatchUserPermission<TMergePatchUserPermission>();
            }
        }

        public static TRemoveUserPermission ToRemoveUserPermission<TRemoveUserPermission>(this IUserPermissionState state)
            where TRemoveUserPermission : IRemoveUserPermission, new()
        {
            var cmd = new TRemoveUserPermission();
            cmd.PermissionId = state.PermissionId;
            return cmd;
        }

        public static TMergePatchUserPermission ToMergePatchUserPermission<TMergePatchUserPermission>(this IUserPermissionState state)
            where TMergePatchUserPermission : IMergePatchUserPermission, new()
        {
            var cmd = new TMergePatchUserPermission();

            cmd.PermissionId = state.PermissionId;
            cmd.Active = ((IUserPermissionStateProperties)state).Active;
            cmd.UserId = state.UserId;
            
            return cmd;
        }

        public static TCreateUserPermission ToCreateUserPermission<TCreateUserPermission>(this IUserPermissionState state)
            where TCreateUserPermission : ICreateUserPermission, new()
        {
            var cmd = new TCreateUserPermission();

            cmd.PermissionId = state.PermissionId;
            cmd.Active = ((IUserPermissionStateProperties)state).Active;
            cmd.UserId = state.UserId;
            return cmd;
        }
		

	}

}

