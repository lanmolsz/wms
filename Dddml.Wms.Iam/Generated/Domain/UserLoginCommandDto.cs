// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.User;

namespace Dddml.Wms.Domain.User
{

	public abstract class UserLoginCommandDtoBase : ICommandDto, ICreateUserLogin, IMergePatchUserLogin, IRemoveUserLogin
	{

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual LoginKeyDto LoginKey { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string UserId { get; set; }


        LoginKey IUserLoginCommand.LoginKey
        {
            get 
            {
                return this.LoginKey.ToLoginKey();
            }
            set 
            {
                this.LoginKey = new LoginKeyDtoWrapper(value);
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchUserLogin.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrRemoveUserLoginDto : UserLoginCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateUserLoginDto : CreateOrMergePatchOrRemoveUserLoginDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchUserLoginDto : CreateOrMergePatchOrRemoveUserLoginDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class RemoveUserLoginDto : CreateOrMergePatchOrRemoveUserLoginDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Remove;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}


    public partial class CreateOrMergePatchOrRemoveUserLoginDtos : IUserLoginCommands, ICreateUserLoginCommands, IEnumerable<CreateOrMergePatchOrRemoveUserLoginDto>
    {
        private List<CreateOrMergePatchOrRemoveUserLoginDto> _innerCommands = new List<CreateOrMergePatchOrRemoveUserLoginDto>();

        public virtual CreateOrMergePatchOrRemoveUserLoginDto[] ToArray()
        {
            return _innerCommands.ToArray();
        }

        public virtual void Clear()
        {
            _innerCommands.Clear();
        }

        public virtual void AddRange(IEnumerable<CreateOrMergePatchOrRemoveUserLoginDto> cs)
        {
            _innerCommands.AddRange(cs);
        }

        void IUserLoginCommands.Add(IUserLoginCommand c)
        {
            _innerCommands.Add((CreateOrMergePatchOrRemoveUserLoginDto)c);
        }

        void IUserLoginCommands.Remove(IUserLoginCommand c)
        {
            _innerCommands.Remove((CreateOrMergePatchOrRemoveUserLoginDto)c);
        }


        IEnumerator<CreateOrMergePatchOrRemoveUserLoginDto> IEnumerable<CreateOrMergePatchOrRemoveUserLoginDto>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        IEnumerator<IUserLoginCommand> IEnumerable<IUserLoginCommand>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        void ICreateUserLoginCommands.Add(ICreateUserLogin c)
        {
            _innerCommands.Add((CreateUserLoginDto)c);
        }

        void ICreateUserLoginCommands.Remove(ICreateUserLogin c)
        {
            _innerCommands.Remove((CreateUserLoginDto)c);
        }

        IEnumerator<ICreateUserLogin> IEnumerable<ICreateUserLogin>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

}

