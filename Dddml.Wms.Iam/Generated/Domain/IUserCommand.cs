// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{
	public interface IUserCommand : IAggregateCommand<string, long>, ICommandDto
	{
		long Version { get; set; }

		string UserId { get; set; }

	}


	public interface ICreateOrMergePatchOrDeleteUser : IUserCommand
	{

		string UserName { get; set; }

		int? AccessFailedCount { get; set; }

		string Email { get; set; }

		bool? EmailConfirmed { get; set; }

		bool? LockoutEnabled { get; set; }

		DateTime? LockoutEndDateUtc { get; set; }

		string PasswordHash { get; set; }

		string PhoneNumber { get; set; }

		bool? PhoneNumberConfirmed { get; set; }

		bool? TwoFactorEnabled { get; set; }

		string SecurityStamp { get; set; }

		bool? Active { get; set; }


	}

	public interface ICreateUser : ICreateOrMergePatchOrDeleteUser
	{
        ICreateUserRoleCommands UserRoles { get; }

        ICreateUserRole NewCreateUserRole();

        ICreateUserClaimCommands UserClaims { get; }

        ICreateUserClaim NewCreateUserClaim();

        ICreateUserPermissionCommands UserPermissions { get; }

        ICreateUserPermission NewCreateUserPermission();

        ICreateUserLoginCommands UserLogins { get; }

        ICreateUserLogin NewCreateUserLogin();

	}

	public interface IMergePatchUser : ICreateOrMergePatchOrDeleteUser
	{

		bool IsPropertyUserNameRemoved { get; set; }

		bool IsPropertyAccessFailedCountRemoved { get; set; }

		bool IsPropertyEmailRemoved { get; set; }

		bool IsPropertyEmailConfirmedRemoved { get; set; }

		bool IsPropertyLockoutEnabledRemoved { get; set; }

		bool IsPropertyLockoutEndDateUtcRemoved { get; set; }

		bool IsPropertyPasswordHashRemoved { get; set; }

		bool IsPropertyPhoneNumberRemoved { get; set; }

		bool IsPropertyPhoneNumberConfirmedRemoved { get; set; }

		bool IsPropertyTwoFactorEnabledRemoved { get; set; }

		bool IsPropertySecurityStampRemoved { get; set; }

		bool IsPropertyActiveRemoved { get; set; }

        IUserRoleCommands UserRoleCommands { get; }

        ICreateUserRole NewCreateUserRole();

        IMergePatchUserRole NewMergePatchUserRole();

        IRemoveUserRole NewRemoveUserRole();

        IUserClaimCommands UserClaimCommands { get; }

        ICreateUserClaim NewCreateUserClaim();

        IMergePatchUserClaim NewMergePatchUserClaim();

        IRemoveUserClaim NewRemoveUserClaim();

        IUserPermissionCommands UserPermissionCommands { get; }

        ICreateUserPermission NewCreateUserPermission();

        IMergePatchUserPermission NewMergePatchUserPermission();

        IRemoveUserPermission NewRemoveUserPermission();

        IUserLoginCommands UserLoginCommands { get; }

        ICreateUserLogin NewCreateUserLogin();

        IMergePatchUserLogin NewMergePatchUserLogin();

        IRemoveUserLogin NewRemoveUserLogin();


	}

	public interface IDeleteUser : ICreateOrMergePatchOrDeleteUser
	{
	}

    public interface ICreateUserRoleCommands : IEnumerable<ICreateUserRole>
    {
        void Add(ICreateUserRole c);

        void Remove(ICreateUserRole c);

        void Clear();

    }

    public interface IUserRoleCommands : IEnumerable<IUserRoleCommand>
    {
        void Add(IUserRoleCommand c);

        void Remove(IUserRoleCommand c);

        void Clear();

    }

    public interface ICreateUserClaimCommands : IEnumerable<ICreateUserClaim>
    {
        void Add(ICreateUserClaim c);

        void Remove(ICreateUserClaim c);

        void Clear();

    }

    public interface IUserClaimCommands : IEnumerable<IUserClaimCommand>
    {
        void Add(IUserClaimCommand c);

        void Remove(IUserClaimCommand c);

        void Clear();

    }

    public interface ICreateUserPermissionCommands : IEnumerable<ICreateUserPermission>
    {
        void Add(ICreateUserPermission c);

        void Remove(ICreateUserPermission c);

        void Clear();

    }

    public interface IUserPermissionCommands : IEnumerable<IUserPermissionCommand>
    {
        void Add(IUserPermissionCommand c);

        void Remove(IUserPermissionCommand c);

        void Clear();

    }

    public interface ICreateUserLoginCommands : IEnumerable<ICreateUserLogin>
    {
        void Add(ICreateUserLogin c);

        void Remove(ICreateUserLogin c);

        void Clear();

    }

    public interface IUserLoginCommands : IEnumerable<IUserLoginCommand>
    {
        void Add(IUserLoginCommand c);

        void Remove(IUserLoginCommand c);

        void Clear();

    }


}

