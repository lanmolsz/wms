// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextTreeApplicationServices.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Permission;
using Dddml.Support.Criterion;

namespace Dddml.Wms.Domain
{

	public partial class PermissionTreeApplicationService : IPermissionTreeApplicationService
	{

        public IPermissionTreeRepository PermissionTreeRepository { get; set; }

        public virtual IEnumerable<IPermissionState> GetRoots(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var trees = PermissionTreeRepository.GetRoots(filter, orders, firstResult, maxResults);
            return ToContentCollection(trees);
        }

        public virtual IEnumerable<IPermissionState> GetChildren(string parentId, ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var trees = PermissionTreeRepository.GetChildren(parentId, filter, orders, firstResult, maxResults);
            return ToContentCollection(trees);
        }

        public virtual IEnumerable<string> GetRootIds(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var ids = PermissionTreeRepository.GetRootIds(filter, orders, firstResult, maxResults);
            return ids;
        }

        public virtual IEnumerable<string> GetChildIds(string parentId, ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var ids = PermissionTreeRepository.GetChildIds(parentId, filter, orders, firstResult, maxResults);
            return ids;
        }

        public virtual IEnumerable<IPermissionState> GetRoots(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var trees = PermissionTreeRepository.GetRoots(filter, orders, firstResult, maxResults);
            return ToContentCollection(trees);
        }

        public virtual IEnumerable<IPermissionState> GetChildren(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var trees = PermissionTreeRepository.GetChildren(parentId, filter, orders, firstResult, maxResults);
            return ToContentCollection(trees);
        }

        public virtual IEnumerable<string> GetRootIds(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var ids = PermissionTreeRepository.GetRootIds(filter, orders, firstResult, maxResults);
            return ids;
        }

        public virtual IEnumerable<string> GetChildIds(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var ids = PermissionTreeRepository.GetChildIds(parentId, filter, orders, firstResult, maxResults);
            return ids;
        }

        private static IEnumerable<IPermissionState> ToContentCollection(IEnumerable<IPermissionTreeNode> trees)
        {
            var states = new List<IPermissionState>();
            foreach (var t in trees)
            {
                states.Add(t.Content);
            }
            return states;
        }

	}

	public partial class PermissionTreeApplicationServiceFactory : IPermissionTreeApplicationServiceFactory
	{
        public virtual IPermissionTreeApplicationService PermissionTreeApplicationService 
        {
		    get
		    {
			    return ApplicationContext.Current["PermissionTreeApplicationService"] as IPermissionTreeApplicationService;
		    }
        }
	}

}

