// <autogenerated>
//   This file was generated by T4 code generator GenerateNHibernateTrees.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Permission;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.NHibernate
{

    public partial class NHibernatePermissionTreeRepository : IPermissionTreeRepository
    {

        private IPermissionStateQueryRepository _permissionStateQueryRepository;

        public IPermissionStateQueryRepository PermissionStateQueryRepository
        {
            get { return this._permissionStateQueryRepository; }
            set { this._permissionStateQueryRepository = value; }
        }



        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<IPermissionTreeNode> GetRoots(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = PermissionStateQueryRepository.GetPermissionTreeRoots(filter, orders, firstResult, maxResults);
            return ToPermissionTreeNodeCollection(states);
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<IPermissionTreeNode> GetChildren(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = PermissionStateQueryRepository.GetPermissionTreeChildren(parentId, filter, orders, firstResult, maxResults);
            return ToPermissionTreeNodeCollection(states);
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<string> GetRootIds(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = PermissionStateQueryRepository.GetPermissionTreeRoots(filter, orders, firstResult, maxResults);
            return ToIdCollection(states);
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<string> GetChildIds(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = PermissionStateQueryRepository.GetPermissionTreeChildren(parentId, filter, orders, firstResult, maxResults);
            return ToIdCollection(states);
        }



        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<IPermissionTreeNode> GetRoots(Dddml.Support.Criterion.ICriterion filter, IList<string> orders, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = PermissionStateQueryRepository.GetPermissionTreeRoots(filter, orders, firstResult, maxResults);
            return ToPermissionTreeNodeCollection(states);
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<IPermissionTreeNode> GetChildren(string parentId, Dddml.Support.Criterion.ICriterion filter, IList<string> orders, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = PermissionStateQueryRepository.GetPermissionTreeChildren(parentId, filter, orders, firstResult, maxResults);
            return ToPermissionTreeNodeCollection(states);
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<string> GetRootIds(Dddml.Support.Criterion.ICriterion filter, IList<string> orders, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = PermissionStateQueryRepository.GetPermissionTreeRoots(filter, orders, firstResult, maxResults);
            return ToIdCollection(states);
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<string> GetChildIds(string parentId, Dddml.Support.Criterion.ICriterion filter, IList<string> orders, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var states = PermissionStateQueryRepository.GetPermissionTreeChildren(parentId, filter, orders, firstResult, maxResults);
            return ToIdCollection(states);
        }


        private IEnumerable<IPermissionTreeNode> ToPermissionTreeNodeCollection(IEnumerable<IPermissionState> states)
        {
            var trees = new List<PermissionTreeNode>();
            foreach (var state in states)
            {
                trees.Add(new PermissionTreeNode(state, this));
            }
            return trees;
        }

        private IEnumerable<string> ToIdCollection(IEnumerable<IPermissionState> states)
        {
            var ids = new List<string>();
            foreach (var state in states)
            {
                ids.Add(state.PermissionId);
            }
            return ids;
        }


    }

}

