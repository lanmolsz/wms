// <autogenerated>
//   This file was generated by T4 code generator GenerateRamlClientProxies.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ProductCategory;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using System.Net.Http;
using System.Web.Http;
using Dddml.Wms.HttpServices.ClientProxies.Raml;
using Dddml.Wms.HttpServices.ClientProxies.Raml.Models;
using System.Text;
using System.ComponentModel;
using RAML.Api.Core;
using Newtonsoft.Json.Linq;
using Dddml.Support.Criterion;
using Dddml.Wms.Specialization.HttpServices.ClientProxies;


namespace Dddml.Wms.HttpServices.ClientProxies
{

    public partial class ProductCategoryApplicationServiceProxy : IProductCategoryApplicationService
    {

        private DddmlWmsRamlClient _ramlClient;

        public ProductCategoryApplicationServiceProxy(ProxyTemplate proxyTemplate)
            : this(proxyTemplate.GetEndpointUrl())
        {
            _ramlClient.GetAuthenticationHeaderValue = proxyTemplate.GetAuthenticationHeaderValue;
        }

        public ProductCategoryApplicationServiceProxy(string endpointUrl)
        {
            _ramlClient = new DddmlWmsRamlClient(endpointUrl);
        }

        public ProductCategoryApplicationServiceProxy(HttpClient httpClient)
        {
            _ramlClient = new DddmlWmsRamlClient(httpClient);
        }

        public async Task WhenAsync(CreateProductCategoryDto c)
        {
            var idObj = (c as ICreateProductCategory).ProductCategoryId;
            var uriParameters = new ProductCategoryUriParameters();
            uriParameters.Id = idObj;

            var req = new ProductCategoryPutRequest(uriParameters, (CreateProductCategoryDto)c);
                
            var resp = await _ramlClient.ProductCategory.Put(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
        }

        public void When(CreateProductCategoryDto c)
        {
            WhenAsync(c).GetAwaiter().GetResult();
        }

        public async Task WhenAsync(MergePatchProductCategoryDto c)
        {
            var idObj = (c as IMergePatchProductCategory).ProductCategoryId;
            var uriParameters = new ProductCategoryUriParameters();
            uriParameters.Id = idObj;

            var req = new ProductCategoryPatchRequest(uriParameters, (MergePatchProductCategoryDto)c);
            var resp = await _ramlClient.ProductCategory.Patch(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
        }

        public void When(MergePatchProductCategoryDto c)
        {
            WhenAsync(c).GetAwaiter().GetResult();
        }

        public async Task WhenAsync(DeleteProductCategoryDto c)
        {
            var idObj = (c as IDeleteProductCategory).ProductCategoryId;
            var uriParameters = new ProductCategoryUriParameters();
            uriParameters.Id = idObj;

            var q = new ProductCategoryDeleteQuery();
            q.CommandId = c.CommandId;
            q.RequesterId = c.RequesterId;
            q.Version = Convert.ToString(c.Version);
                
            var req = new ProductCategoryDeleteRequest(uriParameters);
            req.Query = q;

            var resp = await _ramlClient.ProductCategory.Delete(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
        }

        public void When(DeleteProductCategoryDto c)
        {
            WhenAsync(c).GetAwaiter().GetResult();
        }
		
        void IProductCategoryApplicationService.When(ICreateProductCategory c)
        {
            this.When((CreateProductCategoryDto)c);
        }

        void IProductCategoryApplicationService.When(IMergePatchProductCategory c)
        {
            this.When((MergePatchProductCategoryDto)c);
        }

        void IProductCategoryApplicationService.When(IDeleteProductCategory c)
        {
            this.When((DeleteProductCategoryDto)c);
        }

        public async Task<IProductCategoryState> GetAsync(string productCategoryId)
        {
            IProductCategoryState state = null;
            var idObj = productCategoryId;
            var uriParameters = new ProductCategoryUriParameters();
            uriParameters.Id = idObj;

            var req = new ProductCategoryGetRequest(uriParameters);

            var resp = await _ramlClient.ProductCategory.Get(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
            state = (resp.Content == null) ? null : resp.Content.ToProductCategoryState();
            return state;
        }

        public IProductCategoryState Get(string productCategoryId)
        {
            return GetAsync(productCategoryId).GetAwaiter().GetResult();
        }


        public IEnumerable<IProductCategoryState> GetAll(int firstResult, int maxResults)
        {
            return Get((IDictionary<string, object>)null, null, firstResult, maxResults);
        }

        public IEnumerable<IProductCategoryState> Get(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return Get(filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<IProductCategoryState>> GetAsync(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<IProductCategoryState> states = null;
			var q = new ProductCategoriesGetQuery();
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = ProductCategoryProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = ProductCategoryProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.FilterTag = ProductCategoryProxyUtils.GetFilterTagQueryValueString(filter);
            var req = new ProductCategoriesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.ProductCategories.Get(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
            states = (resp.Content == null) ? null : resp.Content.Select(e => e.ToProductCategoryState());
            return states;
        }

        public IEnumerable<IProductCategoryState> Get(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetAsync(filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public IEnumerable<IProductCategoryState> GetByProperty(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetByProperty(propertyName, propertyValue, orders, firstResult, maxResults, null);
        }

        public IEnumerable<IProductCategoryState> GetByProperty(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            var filter = Restrictions.Eq(propertyName, propertyValue);
            return Get(filter, orders, firstResult, maxResults, fields);
        }

        public virtual void Execute(object command)
        {
            ((dynamic)this).When((dynamic)command);
        }

        public IEnumerable<IProductCategoryState> Get(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return Get(filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<IProductCategoryState>> GetAsync(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<IProductCategoryState> states = null;
			var q = new ProductCategoriesGetQuery();
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = ProductCategoryProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = ProductCategoryProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.Filter = ProductCategoryProxyUtils.GetFilterQueryValueString(filter);
            var req = new ProductCategoriesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.ProductCategories.Get(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
            states = (resp.Content == null) ? null : resp.Content.Select(e => e.ToProductCategoryState());
            return states;
        }

        public IEnumerable<IProductCategoryState> Get(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetAsync(filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public async virtual Task<long> GetCountAsync(IEnumerable<KeyValuePair<string, object>> filter)
		{
			var q = new ProductCategoriesCountGetQuery();
            q.FilterTag = ProductCategoryProxyUtils.GetFilterTagQueryValueString(filter);
            var req = new ProductCategoriesCountGetRequest();
            req.Query = q;
            var resp = await _ramlClient.ProductCategoriesCount.Get(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
            string str = await resp.RawContent.ReadAsStringAsync();
            if (str.StartsWith("\"")) { str = str.Substring(1); }
            if (str.EndsWith("\"")) { str = str.Substring(0, str.Length - 1); }
            return long.Parse(str);
		}

        public virtual long GetCount(IEnumerable<KeyValuePair<string, object>> filter)
		{
		    return GetCountAsync(filter).GetAwaiter().GetResult();
		}

        public async virtual Task<long> GetCountAsync(ICriterion filter)
		{
			var q = new ProductCategoriesCountGetQuery();
            q.Filter = ProductCategoryProxyUtils.GetFilterQueryValueString(filter);
            var req = new ProductCategoriesCountGetRequest();
            req.Query = q;
            var resp = await _ramlClient.ProductCategoriesCount.Get(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
            string str = await resp.RawContent.ReadAsStringAsync();
            if (str.StartsWith("\"")) { str = str.Substring(1); }
            if (str.EndsWith("\"")) { str = str.Substring(0, str.Length - 1); }
            return long.Parse(str);
		}

        public virtual long GetCount(ICriterion filter)
		{
		    return GetCountAsync(filter).GetAwaiter().GetResult();
		}

        public async Task<IProductCategoryEvent> GetStateEventAsync(string productCategoryId, long version)
        {
            var idObj = productCategoryId;
            var uriParameters = new ProductCategoryStateEventUriParameters();
            uriParameters.Id = idObj;
            uriParameters.Version = version.ToString();

            var req = new ProductCategoryStateEventGetRequest(uriParameters);
            var resp = await _ramlClient.ProductCategoryStateEvent.Get(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
            return resp.Content;
        }

        public IProductCategoryEvent GetEvent(string productCategoryId, long version)
        {
            return GetStateEventAsync(productCategoryId, version).GetAwaiter().GetResult();
        }


        public async Task<IProductCategoryState> GetHistoryStateAsync(string productCategoryId, long version)
        {
            var idObj = productCategoryId;
            var uriParameters = new ProductCategoryHistoryStateUriParameters();
            uriParameters.Id = idObj;
            uriParameters.Version = version.ToString();

            var req = new ProductCategoryHistoryStateGetRequest(uriParameters);
            var resp = await _ramlClient.ProductCategoryHistoryState.Get(req);
            ProductCategoryProxyUtils.ThrowOnHttpResponseError(resp);
            return (resp.Content == null) ? null : resp.Content.ToProductCategoryState();
        }

        public virtual IProductCategoryState GetHistoryState(string productCategoryId, long version)
        {
            return GetHistoryStateAsync(productCategoryId, version).GetAwaiter().GetResult();
        }

        public IEnumerable<IProductCategoryState> GetChildProductCategories(string productCategoryId)
        {
            throw new NotImplementedException();//todo
        }


        protected virtual string QueryFieldValueSeparator
        {
            get { return ","; }
        }

        protected virtual string QueryOrderSeparator
        {
            get { return ","; }
        }

    }


    public partial class ProductCategoryApplicationServiceProxyFactory : ProxyFactoryBase, IProductCategoryApplicationServiceFactory
    {

        public ProductCategoryApplicationServiceProxyFactory() : base()
        {}

        public ProductCategoryApplicationServiceProxyFactory(string endpointUrl) : base(endpointUrl)
        {}

        public IProductCategoryApplicationService ProductCategoryApplicationService
        {
            get
            {
                return new ProductCategoryApplicationServiceProxy(ProxyTemplate);
            }
        }
		
        public ICreateProductCategory NewCreateProductCategory()
        {
            return new CreateProductCategoryDto();
        }

        public IMergePatchProductCategory NewMergePatchProductCategory()
        {
            return new MergePatchProductCategoryDto();
        }

        public IDeleteProductCategory NewDeleteProductCategory()
        {
            return new DeleteProductCategoryDto();
        }
    }

    public static class ProductCategoryProxyUtils
    {

        private class ProxyTypeConverter : Dddml.Support.Criterion.ITypeConverter
        {
            public T ConvertFromString<T>(string text)
            {
                throw new NotSupportedException();
            }

            public object ConvertFromString(Type type, string text)
            {
                throw new NotSupportedException();
            }

            public string ConvertToString<T>(T value)
            {
                return ApplicationContext.Current.TypeConverter.ConvertToString(typeof(T), value);
            }

            public string ConvertToString(object value)
            {
                return ApplicationContext.Current.TypeConverter.ConvertToString(value.GetType(), value);
            }

            public string[] ConvertToStringArray(object[] values)
            {
                var list = new List<string>();
                foreach (var o in values)
                {
                    list.Add(ConvertToString(o));
                }
                return list.ToArray();
            }
        }


        public static string GetFilterQueryValueString(ICriterion filter)
        {
            if (filter == null) { return null; }
            return WebUtility.UrlEncode(JObject.FromObject(new CriterionDto(filter, new ProxyTypeConverter())).ToString());
        }

        public static string GetFilterTagQueryValueString(IEnumerable<KeyValuePair<string, object>> filter)
        {
            if (filter == null) { return null; }
            StringBuilder sb = new StringBuilder();
            sb.Append(DateTime.Now.Ticks);
            foreach (var p in filter)
            {
                var k = p.Key;
                var v = p.Value;
                sb.Append("&");
                sb.Append(k);
                sb.Append("=");
                if (v != null)
                {
                    string valStr = ApplicationContext.Current.TypeConverter.ConvertToString(v.GetType(), v);
                    sb.Append(WebUtility.UrlEncode(valStr));
                }

            }
            return sb.ToString();
        }

        public static string GetReturnedFieldsQueryValueString(IList<string> fields, string separator)
        {
            if (fields == null) { return null; }
            StringBuilder sb = new StringBuilder();
            foreach (var f in fields)
            {
                sb.Append(WebUtility.UrlEncode(f));
                sb.Append(separator);
            }
            return sb.ToString();
        }

        public static string GetOrdersQueryValueString(IList<string> orders)
        {
            if (orders == null) { return null; }
            StringBuilder sb = new StringBuilder();
            foreach (var ord in orders)
            {
                sb.Append(WebUtility.UrlEncode(ord));
                sb.Append(",");
            }
            return sb.ToString();
        }

        public static void ThrowOnHttpResponseError(ApiResponse resp)
        {
            var httpResponseMessage = new HttpResponseMessage()
            {
                StatusCode = resp.StatusCode,
                Content = resp.RawContent,
                ReasonPhrase = resp.ReasonPhrase
            };
            if (httpResponseMessage.IsSuccessStatusCode)
            {
                return;
            }
            try
            {
                if (resp.StatusCode == HttpStatusCode.InternalServerError)
                {
                    IEnumerable<string> headerValues = new List<string>();
                    if (resp.RawContent != null && resp.RawContent.Headers != null)
                        resp.RawContent.Headers.TryGetValues("Content-Type", out headerValues);
                    if (headerValues.Any(hv => hv.ToLowerInvariant().Contains("json")))
                    {
                        JObject jObj = JObject.Parse(httpResponseMessage.Content.ReadAsStringAsync().GetAwaiter().GetResult());
                        var errorName = jObj.GetValue("ErrorName").ToObject<string>();
                        var errorMessage = jObj.GetValue("ErrorMessage").ToObject<string>();
                        throw DomainError.Named(errorName, errorMessage);
                    }
                }
                throw new HttpResponseException(httpResponseMessage);
            }
            catch
            {
                throw new HttpResponseException(httpResponseMessage);
            }
        }

        public static IEnumerable<string> ToIdCollection(IEnumerable<IProductCategoryState> states)
        {
            var ids = new List<string>();
            foreach (var s in states)
            {
                ids.Add(s.ProductCategoryId);
            }
            return ids;
        }

    }

}

