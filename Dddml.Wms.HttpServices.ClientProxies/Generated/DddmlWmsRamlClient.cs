// <autogenerated>
//   This file was generated by T4 code generator GenerateRamlClientProxies.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RAML.Api.Core;
//using Raml.Common;
using Dddml.Wms.HttpServices.ClientProxies.Raml.Models;
using Dddml.Wms.Domain.Attribute;
using Dddml.Wms.Domain.AttributeSet;
using Dddml.Wms.Domain.AttributeSetInstance;
using Dddml.Wms.Domain.AttributeSetInstanceExtensionFieldGroup;
using Dddml.Wms.Domain.AttributeSetInstanceExtensionFieldMvo;
using Dddml.Wms.Domain.AttributeUseMvo;
using Dddml.Wms.Domain.AttributeValueMvo;
using Dddml.Wms.Domain.DocumentType;
using Dddml.Wms.Domain.InOut;
using Dddml.Wms.Domain.InOutLineMvo;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryPostingRule;
using Dddml.Wms.Domain.InventoryPRTriggered;
using Dddml.Wms.Domain.Locator;
using Dddml.Wms.Domain.MovementType;
using Dddml.Wms.Domain.OrderHeader;
using Dddml.Wms.Domain.OrderItem;
using Dddml.Wms.Domain.OrderShipment;
using Dddml.Wms.Domain.Organization;
using Dddml.Wms.Domain.OrganizationStructure;
using Dddml.Wms.Domain.OrganizationStructureType;
using Dddml.Wms.Domain.Product;
using Dddml.Wms.Domain.ProductCategory;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.SellableInventoryItemEntryMvo;
using Dddml.Wms.Domain.Shipment;
using Dddml.Wms.Domain.ShipmentItem;
using Dddml.Wms.Domain.ShipmentType;
using Dddml.Wms.Domain.StatusItem;
using Dddml.Wms.Domain.SupplierProduct;
using Dddml.Wms.Domain.Warehouse;

namespace Dddml.Wms.HttpServices.ClientProxies.Raml
{
    public partial class Attribute
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Attribute(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeGetResponse> Get(Models.AttributeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributePutRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributePatchRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeDeleteRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Attributes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Attributes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributesGetResponse> Get(Models.AttributesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributesCountGetRequest request)
        {

            var url = "Attributes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeStateEventGetResponse> Get(Models.AttributeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeHistoryStateGetResponse> Get(Models.AttributeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValue
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValue(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueGetResponse> Get(Models.AttributeValueGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{attributeId}/AttributeValues/{value}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.AttributeId == null)
				throw new InvalidOperationException("Uri Parameter AttributeId cannot be null");

            url = url.Replace("{attributeId}", request.UriParameters.AttributeId.ToString());

			if(request.UriParameters.Value == null)
				throw new InvalidOperationException("Uri Parameter Value cannot be null");

            url = url.Replace("{value}", request.UriParameters.Value.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSet
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSet(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetGetResponse> Get(Models.AttributeSetGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetPutRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetPatchRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetDeleteRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSets
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSets(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetsGetResponse> Get(Models.AttributeSetsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetsCountGetRequest request)
        {

            var url = "AttributeSets/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetStateEventGetResponse> Get(Models.AttributeSetStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetHistoryStateGetResponse> Get(Models.AttributeSetHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUse
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUse(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseGetResponse> Get(Models.AttributeUseGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{attributeSetId}/AttributeUses/{attributeId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.AttributeSetId == null)
				throw new InvalidOperationException("Uri Parameter AttributeSetId cannot be null");

            url = url.Replace("{attributeSetId}", request.UriParameters.AttributeSetId.ToString());

			if(request.UriParameters.AttributeId == null)
				throw new InvalidOperationException("Uri Parameter AttributeId cannot be null");

            url = url.Replace("{attributeId}", request.UriParameters.AttributeId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DocumentTypeGetResponse> Get(Models.DocumentTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DocumentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DocumentTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DocumentTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.DocumentTypePutRequest request)
        {

            var url = "DocumentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateDocumentTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DocumentTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.DocumentTypePatchRequest request)
        {

            var url = "DocumentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchDocumentTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DocumentTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.DocumentTypeDeleteRequest request)
        {

            var url = "DocumentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DocumentTypesGetResponse> Get(Models.DocumentTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DocumentTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DocumentTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.DocumentTypesCountGetRequest request)
        {

            var url = "DocumentTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DocumentTypeStateEventGetResponse> Get(Models.DocumentTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DocumentTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DocumentTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DocumentTypeHistoryStateGetResponse> Get(Models.DocumentTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DocumentTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DocumentTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOut
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOut(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutGetResponse> Get(Models.InOutGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InOutPutRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInOutDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InOutPatchRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInOutDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InOutDeleteRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOuts
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOuts(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutsGetResponse> Get(Models.InOutsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InOutsCountGetRequest request)
        {

            var url = "InOuts/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutStateEventGetResponse> Get(Models.InOutStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutHistoryStateGetResponse> Get(Models.InOutHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLine
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLine(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineGetResponse> Get(Models.InOutLineGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{inOutDocumentNumber}/InOutLines/{lineNumber}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.InOutDocumentNumber == null)
				throw new InvalidOperationException("Uri Parameter InOutDocumentNumber cannot be null");

            url = url.Replace("{inOutDocumentNumber}", request.UriParameters.InOutDocumentNumber.ToString());

			if(request.UriParameters.LineNumber == null)
				throw new InvalidOperationException("Uri Parameter LineNumber cannot be null");

            url = url.Replace("{lineNumber}", request.UriParameters.LineNumber.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemGetResponse> Get(Models.InventoryItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InventoryItemPutRequest request)
        {

            var url = "InventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInventoryItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InventoryItemPatchRequest request)
        {

            var url = "InventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInventoryItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InventoryItemDeleteRequest request)
        {

            var url = "InventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItems
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItems(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemsGetResponse> Get(Models.InventoryItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InventoryItemsCountGetRequest request)
        {

            var url = "InventoryItems/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemStateEventGetResponse> Get(Models.InventoryItemStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemHistoryStateGetResponse> Get(Models.InventoryItemHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemEntry
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemEntry(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemEntryGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemEntryGetResponse> Get(Models.InventoryItemEntryGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems/{inventoryItemId}/InventoryItemEntries/{entrySeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.InventoryItemId == null)
				throw new InvalidOperationException("Uri Parameter InventoryItemId cannot be null");

            url = url.Replace("{inventoryItemId}", request.UriParameters.InventoryItemId.ToString());

			if(request.UriParameters.EntrySeqId == null)
				throw new InvalidOperationException("Uri Parameter EntrySeqId cannot be null");

            url = url.Replace("{entrySeqId}", request.UriParameters.EntrySeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemEntryGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemGetResponse> Get(Models.SellableInventoryItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.SellableInventoryItemPutRequest request)
        {

            var url = "SellableInventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateSellableInventoryItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.SellableInventoryItemPatchRequest request)
        {

            var url = "SellableInventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchSellableInventoryItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.SellableInventoryItemDeleteRequest request)
        {

            var url = "SellableInventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItems
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItems(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemsGetResponse> Get(Models.SellableInventoryItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.SellableInventoryItemsCountGetRequest request)
        {

            var url = "SellableInventoryItems/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemStateEventGetResponse> Get(Models.SellableInventoryItemStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemHistoryStateGetResponse> Get(Models.SellableInventoryItemHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemEntry
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemEntry(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemEntryGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemEntryGetResponse> Get(Models.SellableInventoryItemEntryGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems/{sellableInventoryItemId}/SellableInventoryItemEntries/{entrySeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.SellableInventoryItemId == null)
				throw new InvalidOperationException("Uri Parameter SellableInventoryItemId cannot be null");

            url = url.Replace("{sellableInventoryItemId}", request.UriParameters.SellableInventoryItemId.ToString());

			if(request.UriParameters.EntrySeqId == null)
				throw new InvalidOperationException("Uri Parameter EntrySeqId cannot be null");

            url = url.Replace("{entrySeqId}", request.UriParameters.EntrySeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemEntryGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRule
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRule(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRuleGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPostingRuleGetResponse> Get(Models.InventoryPostingRuleGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPostingRules/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPostingRuleGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPostingRulePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InventoryPostingRulePutRequest request)
        {

            var url = "InventoryPostingRules/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInventoryPostingRuleDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPostingRulePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InventoryPostingRulePatchRequest request)
        {

            var url = "InventoryPostingRules/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInventoryPostingRuleDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPostingRuleDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InventoryPostingRuleDeleteRequest request)
        {

            var url = "InventoryPostingRules/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRules
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRules(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRulesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPostingRulesGetResponse> Get(Models.InventoryPostingRulesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPostingRules";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPostingRulesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRulesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRulesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRulesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InventoryPostingRulesCountGetRequest request)
        {

            var url = "InventoryPostingRules/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRuleStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRuleStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRuleStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPostingRuleStateEventGetResponse> Get(Models.InventoryPostingRuleStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPostingRules/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPostingRuleStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRuleHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRuleHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRuleHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPostingRuleHistoryStateGetResponse> Get(Models.InventoryPostingRuleHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPostingRules/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPostingRuleHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggered
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggered(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPRTriggeredGetResponse> Get(Models.InventoryPRTriggeredGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPRTriggereds/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPRTriggeredGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPRTriggeredPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InventoryPRTriggeredPutRequest request)
        {

            var url = "InventoryPRTriggereds/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInventoryPRTriggeredDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPRTriggeredPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InventoryPRTriggeredPatchRequest request)
        {

            var url = "InventoryPRTriggereds/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInventoryPRTriggeredDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPRTriggeredDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InventoryPRTriggeredDeleteRequest request)
        {

            var url = "InventoryPRTriggereds/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggereds
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggereds(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPRTriggeredsGetResponse> Get(Models.InventoryPRTriggeredsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPRTriggereds";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPRTriggeredsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggeredsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggeredsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InventoryPRTriggeredsCountGetRequest request)
        {

            var url = "InventoryPRTriggereds/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggeredStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggeredStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPRTriggeredStateEventGetResponse> Get(Models.InventoryPRTriggeredStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPRTriggereds/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPRTriggeredStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggeredHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggeredHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPRTriggeredHistoryStateGetResponse> Get(Models.InventoryPRTriggeredHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPRTriggereds/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPRTriggeredHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementTypeGetResponse> Get(Models.MovementTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.MovementTypePutRequest request)
        {

            var url = "MovementTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateMovementTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.MovementTypePatchRequest request)
        {

            var url = "MovementTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchMovementTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.MovementTypeDeleteRequest request)
        {

            var url = "MovementTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementTypesGetResponse> Get(Models.MovementTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.MovementTypesCountGetRequest request)
        {

            var url = "MovementTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementTypeStateEventGetResponse> Get(Models.MovementTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementTypeHistoryStateGetResponse> Get(Models.MovementTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderHeader
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderHeader(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderHeaderGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderHeaderGetResponse> Get(Models.OrderHeaderGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderHeaders/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderHeaderGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderHeaderPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrderHeaderPutRequest request)
        {

            var url = "OrderHeaders/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrderHeaderDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderHeaderPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrderHeaderPatchRequest request)
        {

            var url = "OrderHeaders/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrderHeaderDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderHeaderDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrderHeaderDeleteRequest request)
        {

            var url = "OrderHeaders/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderHeaders
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderHeaders(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderHeadersGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderHeadersGetResponse> Get(Models.OrderHeadersGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderHeaders";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderHeadersGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderHeadersCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderHeadersCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderHeadersCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrderHeadersCountGetRequest request)
        {

            var url = "OrderHeaders/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderHeaderStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderHeaderStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderHeaderStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderHeaderStateEventGetResponse> Get(Models.OrderHeaderStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderHeaders/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderHeaderStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderHeaderHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderHeaderHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderHeaderHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderHeaderHistoryStateGetResponse> Get(Models.OrderHeaderHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderHeaders/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderHeaderHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemGetResponse> Get(Models.OrderItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderItemPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrderItemPutRequest request)
        {

            var url = "OrderItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrderItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderItemPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrderItemPatchRequest request)
        {

            var url = "OrderItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrderItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderItemDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrderItemDeleteRequest request)
        {

            var url = "OrderItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItems
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItems(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemsGetResponse> Get(Models.OrderItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderItems";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrderItemsCountGetRequest request)
        {

            var url = "OrderItems/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemStateEventGetResponse> Get(Models.OrderItemStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderItems/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemHistoryStateGetResponse> Get(Models.OrderItemHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderItems/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipment
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipment(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipmentGetResponse> Get(Models.OrderShipmentGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderShipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipmentGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderShipmentPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrderShipmentPutRequest request)
        {

            var url = "OrderShipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrderShipmentDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderShipmentPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrderShipmentPatchRequest request)
        {

            var url = "OrderShipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrderShipmentDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderShipmentDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrderShipmentDeleteRequest request)
        {

            var url = "OrderShipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipments
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipments(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipmentsGetResponse> Get(Models.OrderShipmentsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderShipments";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipmentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipmentsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipmentsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrderShipmentsCountGetRequest request)
        {

            var url = "OrderShipments/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipmentStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipmentStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipmentStateEventGetResponse> Get(Models.OrderShipmentStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderShipments/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipmentStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipmentHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipmentHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipmentHistoryStateGetResponse> Get(Models.OrderShipmentHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderShipments/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipmentHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Organization
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Organization(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationGetResponse> Get(Models.OrganizationGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Organizations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrganizationPutRequest request)
        {

            var url = "Organizations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrganizationDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrganizationPatchRequest request)
        {

            var url = "Organizations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrganizationDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrganizationDeleteRequest request)
        {

            var url = "Organizations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Organizations
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Organizations(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationsGetResponse> Get(Models.OrganizationsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Organizations";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrganizationsCountGetRequest request)
        {

            var url = "Organizations/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStateEventGetResponse> Get(Models.OrganizationStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Organizations/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationHistoryStateGetResponse> Get(Models.OrganizationHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Organizations/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeGetResponse> Get(Models.OrganizationStructureTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrganizationStructureTypePutRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrganizationStructureTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrganizationStructureTypePatchRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrganizationStructureTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrganizationStructureTypeDeleteRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypesGetResponse> Get(Models.OrganizationStructureTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrganizationStructureTypesCountGetRequest request)
        {

            var url = "OrganizationStructureTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeStateEventGetResponse> Get(Models.OrganizationStructureTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeHistoryStateGetResponse> Get(Models.OrganizationStructureTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructure
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructure(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureGetResponse> Get(Models.OrganizationStructureGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructurePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrganizationStructurePutRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrganizationStructureDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructurePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrganizationStructurePatchRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrganizationStructureDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrganizationStructureDeleteRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructures
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructures(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructuresGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructuresGetResponse> Get(Models.OrganizationStructuresGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructuresGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructuresCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructuresCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructuresCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrganizationStructuresCountGetRequest request)
        {

            var url = "OrganizationStructures/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureStateEventGetResponse> Get(Models.OrganizationStructureStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureHistoryStateGetResponse> Get(Models.OrganizationStructureHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Product
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Product(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductGetResponse> Get(Models.ProductGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ProductPutRequest request)
        {

            var url = "Products/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateProductDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ProductPatchRequest request)
        {

            var url = "Products/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchProductDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ProductDeleteRequest request)
        {

            var url = "Products/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Products
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Products(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductsGetResponse> Get(Models.ProductsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ProductsCountGetRequest request)
        {

            var url = "Products/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductStateEventGetResponse> Get(Models.ProductStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductHistoryStateGetResponse> Get(Models.ProductHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategory
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategory(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryGetResponse> Get(Models.ProductCategoryGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ProductCategoryPutRequest request)
        {

            var url = "ProductCategories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateProductCategoryDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ProductCategoryPatchRequest request)
        {

            var url = "ProductCategories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchProductCategoryDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ProductCategoryDeleteRequest request)
        {

            var url = "ProductCategories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategories
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategories(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoriesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoriesGetResponse> Get(Models.ProductCategoriesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategories";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoriesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoriesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoriesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoriesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ProductCategoriesCountGetRequest request)
        {

            var url = "ProductCategories/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryStateEventGetResponse> Get(Models.ProductCategoryStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategories/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryHistoryStateGetResponse> Get(Models.ProductCategoryHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategories/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Shipment
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Shipment(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentGetResponse> Get(Models.ShipmentGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ShipmentPutRequest request)
        {

            var url = "Shipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateShipmentDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ShipmentPatchRequest request)
        {

            var url = "Shipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchShipmentDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ShipmentDeleteRequest request)
        {

            var url = "Shipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Shipments
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Shipments(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentsGetResponse> Get(Models.ShipmentsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ShipmentsCountGetRequest request)
        {

            var url = "Shipments/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentStateEventGetResponse> Get(Models.ShipmentStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentHistoryStateGetResponse> Get(Models.ShipmentHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentItemGetResponse> Get(Models.ShipmentItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentItemPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ShipmentItemPutRequest request)
        {

            var url = "ShipmentItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateShipmentItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentItemPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ShipmentItemPatchRequest request)
        {

            var url = "ShipmentItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchShipmentItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentItemDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ShipmentItemDeleteRequest request)
        {

            var url = "ShipmentItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentItems
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentItems(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentItemsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentItemsGetResponse> Get(Models.ShipmentItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentItems";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentItemsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentItemsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentItemsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ShipmentItemsCountGetRequest request)
        {

            var url = "ShipmentItems/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentItemStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentItemStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentItemStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentItemStateEventGetResponse> Get(Models.ShipmentItemStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentItems/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentItemStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentItemHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentItemHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentItemHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentItemHistoryStateGetResponse> Get(Models.ShipmentItemHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentItems/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentItemHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentTypeGetResponse> Get(Models.ShipmentTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ShipmentTypePutRequest request)
        {

            var url = "ShipmentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateShipmentTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ShipmentTypePatchRequest request)
        {

            var url = "ShipmentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchShipmentTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ShipmentTypeDeleteRequest request)
        {

            var url = "ShipmentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentTypesGetResponse> Get(Models.ShipmentTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ShipmentTypesCountGetRequest request)
        {

            var url = "ShipmentTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentTypeStateEventGetResponse> Get(Models.ShipmentTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentTypeHistoryStateGetResponse> Get(Models.ShipmentTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.StatusItemGetResponse> Get(Models.StatusItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "StatusItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.StatusItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.StatusItemPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.StatusItemPutRequest request)
        {

            var url = "StatusItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateStatusItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.StatusItemPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.StatusItemPatchRequest request)
        {

            var url = "StatusItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchStatusItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.StatusItemDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.StatusItemDeleteRequest request)
        {

            var url = "StatusItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItems
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItems(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.StatusItemsGetResponse> Get(Models.StatusItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "StatusItems";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.StatusItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItemsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItemsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.StatusItemsCountGetRequest request)
        {

            var url = "StatusItems/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItemStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItemStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.StatusItemStateEventGetResponse> Get(Models.StatusItemStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "StatusItems/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.StatusItemStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItemHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItemHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.StatusItemHistoryStateGetResponse> Get(Models.StatusItemHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "StatusItems/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.StatusItemHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProduct
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProduct(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SupplierProductGetResponse> Get(Models.SupplierProductGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SupplierProducts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SupplierProductGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SupplierProductPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.SupplierProductPutRequest request)
        {

            var url = "SupplierProducts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateSupplierProductDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SupplierProductPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.SupplierProductPatchRequest request)
        {

            var url = "SupplierProducts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchSupplierProductDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SupplierProductDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.SupplierProductDeleteRequest request)
        {

            var url = "SupplierProducts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProducts
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProducts(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SupplierProductsGetResponse> Get(Models.SupplierProductsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SupplierProducts";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SupplierProductsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProductsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProductsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.SupplierProductsCountGetRequest request)
        {

            var url = "SupplierProducts/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProductStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProductStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SupplierProductStateEventGetResponse> Get(Models.SupplierProductStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SupplierProducts/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SupplierProductStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProductHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProductHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SupplierProductHistoryStateGetResponse> Get(Models.SupplierProductHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SupplierProducts/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SupplierProductHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Warehouse
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Warehouse(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseGetResponse> Get(Models.WarehouseGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehousePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.WarehousePutRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateWarehouseDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehousePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.WarehousePatchRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchWarehouseDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehouseDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.WarehouseDeleteRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Warehouses
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Warehouses(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehousesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehousesGetResponse> Get(Models.WarehousesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehousesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehousesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehousesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehousesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.WarehousesCountGetRequest request)
        {

            var url = "Warehouses/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehouseStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehouseStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseStateEventGetResponse> Get(Models.WarehouseStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehouseHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehouseHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseHistoryStateGetResponse> Get(Models.WarehouseHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Locator
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Locator(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorGetResponse> Get(Models.LocatorGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.LocatorPutRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateLocatorDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.LocatorPatchRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchLocatorDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.LocatorDeleteRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Locators
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Locators(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorsGetResponse> Get(Models.LocatorsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.LocatorsCountGetRequest request)
        {

            var url = "Locators/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorStateEventGetResponse> Get(Models.LocatorStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorHistoryStateGetResponse> Get(Models.LocatorHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstance
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstance(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceGetResponse> Get(Models.AttributeSetInstanceGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstancePutRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstancePatchRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceDeleteRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstances
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstances(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstancesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstancesGetResponse> Get(Models.AttributeSetInstancesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstancesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancesPostRequest</param>
        public virtual async Task<ApiResponse> Post(Models.AttributeSetInstancesPostRequest request)
        {

            var url = "AttributeSetInstances";

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Post, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstancesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstancesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstancesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstancesCountGetRequest request)
        {

            var url = "AttributeSetInstances/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceStateEventGetResponse> Get(Models.AttributeSetInstanceStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceHistoryStateGetResponse> Get(Models.AttributeSetInstanceHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroup
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroup(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstanceExtensionFieldGroupPutRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceExtensionFieldGroupDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstanceExtensionFieldGroupPatchRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceExtensionFieldGroupDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceExtensionFieldGroupDeleteRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroups
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroups(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupsGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupsCountGetRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupStateEventGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionField
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionField(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{groupId}/AttributeSetInstanceExtensionFields/{index}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.GroupId == null)
				throw new InvalidOperationException("Uri Parameter GroupId cannot be null");

            url = url.Replace("{groupId}", request.UriParameters.GroupId.ToString());

			if(request.UriParameters.Index == null)
				throw new InvalidOperationException("Uri Parameter Index cannot be null");

            url = url.Replace("{index}", request.UriParameters.Index.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueMvoGetResponse> Get(Models.AttributeValueMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeValueMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeValueMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeValueMvoPutRequest request)
        {

            var url = "AttributeValueMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeValueMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeValueMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeValueMvoPatchRequest request)
        {

            var url = "AttributeValueMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeValueMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeValueMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeValueMvoDeleteRequest request)
        {

            var url = "AttributeValueMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueMvosGetResponse> Get(Models.AttributeValueMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeValueMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeValueMvosCountGetRequest request)
        {

            var url = "AttributeValueMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueMvoStateEventGetResponse> Get(Models.AttributeValueMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeValueMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueMvoHistoryStateGetResponse> Get(Models.AttributeValueMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeValueMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseMvoGetResponse> Get(Models.AttributeUseMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeUseMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeUseMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeUseMvoPutRequest request)
        {

            var url = "AttributeUseMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeUseMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeUseMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeUseMvoPatchRequest request)
        {

            var url = "AttributeUseMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeUseMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeUseMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeUseMvoDeleteRequest request)
        {

            var url = "AttributeUseMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseMvosGetResponse> Get(Models.AttributeUseMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeUseMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeUseMvosCountGetRequest request)
        {

            var url = "AttributeUseMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseMvoStateEventGetResponse> Get(Models.AttributeUseMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeUseMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseMvoHistoryStateGetResponse> Get(Models.AttributeUseMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeUseMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineMvoGetResponse> Get(Models.InOutLineMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOutLineMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutLineMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InOutLineMvoPutRequest request)
        {

            var url = "InOutLineMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInOutLineMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutLineMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InOutLineMvoPatchRequest request)
        {

            var url = "InOutLineMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInOutLineMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutLineMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InOutLineMvoDeleteRequest request)
        {

            var url = "InOutLineMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineMvosGetResponse> Get(Models.InOutLineMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOutLineMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InOutLineMvosCountGetRequest request)
        {

            var url = "InOutLineMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineMvoStateEventGetResponse> Get(Models.InOutLineMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOutLineMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineMvoHistoryStateGetResponse> Get(Models.InOutLineMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOutLineMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemEntryMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemEntryMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemEntryMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemEntryMvoGetResponse> Get(Models.InventoryItemEntryMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemEntryMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemEntryMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemEntryMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InventoryItemEntryMvoPutRequest request)
        {

            var url = "InventoryItemEntryMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInventoryItemEntryMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemEntryMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InventoryItemEntryMvoPatchRequest request)
        {

            var url = "InventoryItemEntryMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInventoryItemEntryMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemEntryMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InventoryItemEntryMvoDeleteRequest request)
        {

            var url = "InventoryItemEntryMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemEntryMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemEntryMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemEntryMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemEntryMvosGetResponse> Get(Models.InventoryItemEntryMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemEntryMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemEntryMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemEntryMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemEntryMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemEntryMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InventoryItemEntryMvosCountGetRequest request)
        {

            var url = "InventoryItemEntryMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemEntryMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemEntryMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemEntryMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemEntryMvoStateEventGetResponse> Get(Models.InventoryItemEntryMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemEntryMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemEntryMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemEntryMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemEntryMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemEntryMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemEntryMvoHistoryStateGetResponse> Get(Models.InventoryItemEntryMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemEntryMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemEntryMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemEntryMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemEntryMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemEntryMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemEntryMvoGetResponse> Get(Models.SellableInventoryItemEntryMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItemEntryMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemEntryMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemEntryMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.SellableInventoryItemEntryMvoPutRequest request)
        {

            var url = "SellableInventoryItemEntryMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateSellableInventoryItemEntryMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemEntryMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.SellableInventoryItemEntryMvoPatchRequest request)
        {

            var url = "SellableInventoryItemEntryMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchSellableInventoryItemEntryMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemEntryMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.SellableInventoryItemEntryMvoDeleteRequest request)
        {

            var url = "SellableInventoryItemEntryMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemEntryMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemEntryMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemEntryMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemEntryMvosGetResponse> Get(Models.SellableInventoryItemEntryMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItemEntryMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemEntryMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemEntryMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemEntryMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemEntryMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.SellableInventoryItemEntryMvosCountGetRequest request)
        {

            var url = "SellableInventoryItemEntryMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemEntryMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemEntryMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemEntryMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemEntryMvoStateEventGetResponse> Get(Models.SellableInventoryItemEntryMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItemEntryMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemEntryMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemEntryMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemEntryMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemEntryMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemEntryMvoHistoryStateGetResponse> Get(Models.SellableInventoryItemEntryMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItemEntryMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemEntryMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldMvoGetResponse> Get(Models.AttributeSetInstanceExtensionFieldMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstanceExtensionFieldMvoPutRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceExtensionFieldMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstanceExtensionFieldMvoPatchRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceExtensionFieldMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceExtensionFieldMvoDeleteRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldMvosGetResponse> Get(Models.AttributeSetInstanceExtensionFieldMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstanceExtensionFieldMvosCountGetRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldMvoStateEventGetResponse> Get(Models.AttributeSetInstanceExtensionFieldMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldMvoHistoryStateGetResponse> Get(Models.AttributeSetInstanceExtensionFieldMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationTrees
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationTrees(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationTreesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationTreesGetResponse> Get(Models.OrganizationTreesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationTrees";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.ParentId != null)
                    url += "&parentId=" + request.Query.ParentId;
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationTreesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorTrees
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorTrees(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorTreesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorTreesGetResponse> Get(Models.LocatorTreesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "LocatorTrees";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.ParentId != null)
                    url += "&parentId=" + request.Query.ParentId;
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorTreesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    /// <summary>
    /// Main class for grouping root resources. Nested resources are defined as properties. The constructor can optionally receive an URL and HttpClient instance to override the default ones.
    /// </summary>
    public partial class DddmlWmsRamlClient
    {

        //public const string BaseUri = "/api/";

		public SchemaValidationSettings SchemaValidation { get; private set; } 

        protected readonly HttpClient client;

        internal HttpClient Client { get { return client; } }

        public Func<Tuple<string, string>> GetAuthenticationHeaderValue { get; set; }


        public DddmlWmsRamlClient(string endpointUrl)
        {
			if(string.IsNullOrWhiteSpace(endpointUrl))
                throw new ArgumentException("You must specify the endpoint URL", "endpointUrl");

			if (endpointUrl.Contains("{"))
			{
				var regex = new Regex(@"\{([^\}]+)\}");
				var matches = regex.Matches(endpointUrl);
				var parameters = new List<string>();
				foreach (Match match in matches)
				{
					parameters.Add(match.Groups[1].Value);
				}
				throw new InvalidOperationException("Please replace parameter/s " + string.Join(", ", parameters) + " in the URL before passing it to the constructor ");
			}

            client = new HttpClient {BaseAddress = new Uri(endpointUrl)};

            InitSchemaValidation();
        }

        public DddmlWmsRamlClient(HttpClient httpClient)
        {
            if(httpClient.BaseAddress == null)
                throw new InvalidOperationException("You must set the BaseAddress property of the HttpClient instance");

            client = httpClient;

            InitSchemaValidation();
        }

        private void InitSchemaValidation()
        {
            SchemaValidation = new SchemaValidationSettings
            {
                Enabled = true,
                RaiseExceptions = true
            };
        }

        public void SetAuthenticationHeader(HttpRequestMessage req)
        {
            if (this.GetAuthenticationHeaderValue != null)
            {
                var authHeader = this.GetAuthenticationHeaderValue();
                if (authHeader != null)
                {
                    req.Headers.Authorization = new AuthenticationHeaderValue(authHeader.Item1, authHeader.Item2);
                }
            }
        }

        public JsonMediaTypeFormatter GetJsonMediaTypeFormatter()
        {
            var formatter = new JsonMediaTypeFormatter();
            formatter.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
            formatter.SerializerSettings.Formatting = Formatting.None;
            formatter.SerializerSettings.DateFormatHandling = DateFormatHandling.IsoDateFormat;
            formatter.SerializerSettings.Converters.Add(new Dddml.Wms.HttpServices.JsonConverters.LongConverter());
            formatter.SerializerSettings.Converters.Add(new Dddml.Wms.HttpServices.JsonConverters.DecimalConverter());
            formatter.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver();
            return formatter;
        }


        public virtual Attribute Attribute
        {
            get { return new Attribute(this); }
        }
                

        public virtual AttributeSet AttributeSet
        {
            get { return new AttributeSet(this); }
        }
                

        public virtual DocumentType DocumentType
        {
            get { return new DocumentType(this); }
        }
                

        public virtual InOut InOut
        {
            get { return new InOut(this); }
        }
                

        public virtual InventoryItem InventoryItem
        {
            get { return new InventoryItem(this); }
        }
                

        public virtual SellableInventoryItem SellableInventoryItem
        {
            get { return new SellableInventoryItem(this); }
        }
                

        public virtual InventoryPostingRule InventoryPostingRule
        {
            get { return new InventoryPostingRule(this); }
        }
                

        public virtual InventoryPRTriggered InventoryPRTriggered
        {
            get { return new InventoryPRTriggered(this); }
        }
                

        public virtual MovementType MovementType
        {
            get { return new MovementType(this); }
        }
                

        public virtual OrderHeader OrderHeader
        {
            get { return new OrderHeader(this); }
        }
                

        public virtual OrderItem OrderItem
        {
            get { return new OrderItem(this); }
        }
                

        public virtual OrderShipment OrderShipment
        {
            get { return new OrderShipment(this); }
        }
                

        public virtual Organization Organization
        {
            get { return new Organization(this); }
        }
                

        public virtual OrganizationStructureType OrganizationStructureType
        {
            get { return new OrganizationStructureType(this); }
        }
                

        public virtual OrganizationStructure OrganizationStructure
        {
            get { return new OrganizationStructure(this); }
        }
                

        public virtual Product Product
        {
            get { return new Product(this); }
        }
                

        public virtual ProductCategory ProductCategory
        {
            get { return new ProductCategory(this); }
        }
                

        public virtual Shipment Shipment
        {
            get { return new Shipment(this); }
        }
                

        public virtual ShipmentItem ShipmentItem
        {
            get { return new ShipmentItem(this); }
        }
                

        public virtual ShipmentType ShipmentType
        {
            get { return new ShipmentType(this); }
        }
                

        public virtual StatusItem StatusItem
        {
            get { return new StatusItem(this); }
        }
                

        public virtual SupplierProduct SupplierProduct
        {
            get { return new SupplierProduct(this); }
        }
                

        public virtual Warehouse Warehouse
        {
            get { return new Warehouse(this); }
        }
                

        public virtual Locator Locator
        {
            get { return new Locator(this); }
        }
                

        public virtual AttributeSetInstance AttributeSetInstance
        {
            get { return new AttributeSetInstance(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroup AttributeSetInstanceExtensionFieldGroup
        {
            get { return new AttributeSetInstanceExtensionFieldGroup(this); }
        }
                

        public virtual AttributeValueMvo AttributeValueMvo
        {
            get { return new AttributeValueMvo(this); }
        }
                

        public virtual AttributeUseMvo AttributeUseMvo
        {
            get { return new AttributeUseMvo(this); }
        }
                

        public virtual InOutLineMvo InOutLineMvo
        {
            get { return new InOutLineMvo(this); }
        }
                

        public virtual InventoryItemEntryMvo InventoryItemEntryMvo
        {
            get { return new InventoryItemEntryMvo(this); }
        }
                

        public virtual SellableInventoryItemEntryMvo SellableInventoryItemEntryMvo
        {
            get { return new SellableInventoryItemEntryMvo(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvo AttributeSetInstanceExtensionFieldMvo
        {
            get { return new AttributeSetInstanceExtensionFieldMvo(this); }
        }
                

        public virtual Attributes Attributes
        {
            get { return new Attributes(this); }
        }
                

        public virtual AttributeSets AttributeSets
        {
            get { return new AttributeSets(this); }
        }
                

        public virtual DocumentTypes DocumentTypes
        {
            get { return new DocumentTypes(this); }
        }
                

        public virtual InOuts InOuts
        {
            get { return new InOuts(this); }
        }
                

        public virtual InventoryItems InventoryItems
        {
            get { return new InventoryItems(this); }
        }
                

        public virtual SellableInventoryItems SellableInventoryItems
        {
            get { return new SellableInventoryItems(this); }
        }
                

        public virtual InventoryPostingRules InventoryPostingRules
        {
            get { return new InventoryPostingRules(this); }
        }
                

        public virtual InventoryPRTriggereds InventoryPRTriggereds
        {
            get { return new InventoryPRTriggereds(this); }
        }
                

        public virtual MovementTypes MovementTypes
        {
            get { return new MovementTypes(this); }
        }
                

        public virtual OrderHeaders OrderHeaders
        {
            get { return new OrderHeaders(this); }
        }
                

        public virtual OrderItems OrderItems
        {
            get { return new OrderItems(this); }
        }
                

        public virtual OrderShipments OrderShipments
        {
            get { return new OrderShipments(this); }
        }
                

        public virtual Organizations Organizations
        {
            get { return new Organizations(this); }
        }
                

        public virtual OrganizationStructureTypes OrganizationStructureTypes
        {
            get { return new OrganizationStructureTypes(this); }
        }
                

        public virtual OrganizationStructures OrganizationStructures
        {
            get { return new OrganizationStructures(this); }
        }
                

        public virtual Products Products
        {
            get { return new Products(this); }
        }
                

        public virtual ProductCategories ProductCategories
        {
            get { return new ProductCategories(this); }
        }
                

        public virtual Shipments Shipments
        {
            get { return new Shipments(this); }
        }
                

        public virtual ShipmentItems ShipmentItems
        {
            get { return new ShipmentItems(this); }
        }
                

        public virtual ShipmentTypes ShipmentTypes
        {
            get { return new ShipmentTypes(this); }
        }
                

        public virtual StatusItems StatusItems
        {
            get { return new StatusItems(this); }
        }
                

        public virtual SupplierProducts SupplierProducts
        {
            get { return new SupplierProducts(this); }
        }
                

        public virtual Warehouses Warehouses
        {
            get { return new Warehouses(this); }
        }
                

        public virtual Locators Locators
        {
            get { return new Locators(this); }
        }
                

        public virtual AttributeSetInstances AttributeSetInstances
        {
            get { return new AttributeSetInstances(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroups AttributeSetInstanceExtensionFieldGroups
        {
            get { return new AttributeSetInstanceExtensionFieldGroups(this); }
        }
                

        public virtual AttributeValueMvos AttributeValueMvos
        {
            get { return new AttributeValueMvos(this); }
        }
                

        public virtual AttributeUseMvos AttributeUseMvos
        {
            get { return new AttributeUseMvos(this); }
        }
                

        public virtual InOutLineMvos InOutLineMvos
        {
            get { return new InOutLineMvos(this); }
        }
                

        public virtual InventoryItemEntryMvos InventoryItemEntryMvos
        {
            get { return new InventoryItemEntryMvos(this); }
        }
                

        public virtual SellableInventoryItemEntryMvos SellableInventoryItemEntryMvos
        {
            get { return new SellableInventoryItemEntryMvos(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvos AttributeSetInstanceExtensionFieldMvos
        {
            get { return new AttributeSetInstanceExtensionFieldMvos(this); }
        }
                

        public virtual AttributesCount AttributesCount
        {
            get { return new AttributesCount(this); }
        }
                

        public virtual AttributeSetsCount AttributeSetsCount
        {
            get { return new AttributeSetsCount(this); }
        }
                

        public virtual DocumentTypesCount DocumentTypesCount
        {
            get { return new DocumentTypesCount(this); }
        }
                

        public virtual InOutsCount InOutsCount
        {
            get { return new InOutsCount(this); }
        }
                

        public virtual InventoryItemsCount InventoryItemsCount
        {
            get { return new InventoryItemsCount(this); }
        }
                

        public virtual SellableInventoryItemsCount SellableInventoryItemsCount
        {
            get { return new SellableInventoryItemsCount(this); }
        }
                

        public virtual InventoryPostingRulesCount InventoryPostingRulesCount
        {
            get { return new InventoryPostingRulesCount(this); }
        }
                

        public virtual InventoryPRTriggeredsCount InventoryPRTriggeredsCount
        {
            get { return new InventoryPRTriggeredsCount(this); }
        }
                

        public virtual MovementTypesCount MovementTypesCount
        {
            get { return new MovementTypesCount(this); }
        }
                

        public virtual OrderHeadersCount OrderHeadersCount
        {
            get { return new OrderHeadersCount(this); }
        }
                

        public virtual OrderItemsCount OrderItemsCount
        {
            get { return new OrderItemsCount(this); }
        }
                

        public virtual OrderShipmentsCount OrderShipmentsCount
        {
            get { return new OrderShipmentsCount(this); }
        }
                

        public virtual OrganizationsCount OrganizationsCount
        {
            get { return new OrganizationsCount(this); }
        }
                

        public virtual OrganizationStructureTypesCount OrganizationStructureTypesCount
        {
            get { return new OrganizationStructureTypesCount(this); }
        }
                

        public virtual OrganizationStructuresCount OrganizationStructuresCount
        {
            get { return new OrganizationStructuresCount(this); }
        }
                

        public virtual ProductsCount ProductsCount
        {
            get { return new ProductsCount(this); }
        }
                

        public virtual ProductCategoriesCount ProductCategoriesCount
        {
            get { return new ProductCategoriesCount(this); }
        }
                

        public virtual ShipmentsCount ShipmentsCount
        {
            get { return new ShipmentsCount(this); }
        }
                

        public virtual ShipmentItemsCount ShipmentItemsCount
        {
            get { return new ShipmentItemsCount(this); }
        }
                

        public virtual ShipmentTypesCount ShipmentTypesCount
        {
            get { return new ShipmentTypesCount(this); }
        }
                

        public virtual StatusItemsCount StatusItemsCount
        {
            get { return new StatusItemsCount(this); }
        }
                

        public virtual SupplierProductsCount SupplierProductsCount
        {
            get { return new SupplierProductsCount(this); }
        }
                

        public virtual WarehousesCount WarehousesCount
        {
            get { return new WarehousesCount(this); }
        }
                

        public virtual LocatorsCount LocatorsCount
        {
            get { return new LocatorsCount(this); }
        }
                

        public virtual AttributeSetInstancesCount AttributeSetInstancesCount
        {
            get { return new AttributeSetInstancesCount(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupsCount AttributeSetInstanceExtensionFieldGroupsCount
        {
            get { return new AttributeSetInstanceExtensionFieldGroupsCount(this); }
        }
                

        public virtual AttributeValueMvosCount AttributeValueMvosCount
        {
            get { return new AttributeValueMvosCount(this); }
        }
                

        public virtual AttributeUseMvosCount AttributeUseMvosCount
        {
            get { return new AttributeUseMvosCount(this); }
        }
                

        public virtual InOutLineMvosCount InOutLineMvosCount
        {
            get { return new InOutLineMvosCount(this); }
        }
                

        public virtual InventoryItemEntryMvosCount InventoryItemEntryMvosCount
        {
            get { return new InventoryItemEntryMvosCount(this); }
        }
                

        public virtual SellableInventoryItemEntryMvosCount SellableInventoryItemEntryMvosCount
        {
            get { return new SellableInventoryItemEntryMvosCount(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvosCount AttributeSetInstanceExtensionFieldMvosCount
        {
            get { return new AttributeSetInstanceExtensionFieldMvosCount(this); }
        }
                

        public virtual AttributeStateEvent AttributeStateEvent
        {
            get { return new AttributeStateEvent(this); }
        }
                

        public virtual AttributeSetStateEvent AttributeSetStateEvent
        {
            get { return new AttributeSetStateEvent(this); }
        }
                

        public virtual DocumentTypeStateEvent DocumentTypeStateEvent
        {
            get { return new DocumentTypeStateEvent(this); }
        }
                

        public virtual InOutStateEvent InOutStateEvent
        {
            get { return new InOutStateEvent(this); }
        }
                

        public virtual InventoryItemStateEvent InventoryItemStateEvent
        {
            get { return new InventoryItemStateEvent(this); }
        }
                

        public virtual SellableInventoryItemStateEvent SellableInventoryItemStateEvent
        {
            get { return new SellableInventoryItemStateEvent(this); }
        }
                

        public virtual InventoryPostingRuleStateEvent InventoryPostingRuleStateEvent
        {
            get { return new InventoryPostingRuleStateEvent(this); }
        }
                

        public virtual InventoryPRTriggeredStateEvent InventoryPRTriggeredStateEvent
        {
            get { return new InventoryPRTriggeredStateEvent(this); }
        }
                

        public virtual MovementTypeStateEvent MovementTypeStateEvent
        {
            get { return new MovementTypeStateEvent(this); }
        }
                

        public virtual OrderHeaderStateEvent OrderHeaderStateEvent
        {
            get { return new OrderHeaderStateEvent(this); }
        }
                

        public virtual OrderItemStateEvent OrderItemStateEvent
        {
            get { return new OrderItemStateEvent(this); }
        }
                

        public virtual OrderShipmentStateEvent OrderShipmentStateEvent
        {
            get { return new OrderShipmentStateEvent(this); }
        }
                

        public virtual OrganizationStateEvent OrganizationStateEvent
        {
            get { return new OrganizationStateEvent(this); }
        }
                

        public virtual OrganizationStructureTypeStateEvent OrganizationStructureTypeStateEvent
        {
            get { return new OrganizationStructureTypeStateEvent(this); }
        }
                

        public virtual OrganizationStructureStateEvent OrganizationStructureStateEvent
        {
            get { return new OrganizationStructureStateEvent(this); }
        }
                

        public virtual ProductStateEvent ProductStateEvent
        {
            get { return new ProductStateEvent(this); }
        }
                

        public virtual ProductCategoryStateEvent ProductCategoryStateEvent
        {
            get { return new ProductCategoryStateEvent(this); }
        }
                

        public virtual ShipmentStateEvent ShipmentStateEvent
        {
            get { return new ShipmentStateEvent(this); }
        }
                

        public virtual ShipmentItemStateEvent ShipmentItemStateEvent
        {
            get { return new ShipmentItemStateEvent(this); }
        }
                

        public virtual ShipmentTypeStateEvent ShipmentTypeStateEvent
        {
            get { return new ShipmentTypeStateEvent(this); }
        }
                

        public virtual StatusItemStateEvent StatusItemStateEvent
        {
            get { return new StatusItemStateEvent(this); }
        }
                

        public virtual SupplierProductStateEvent SupplierProductStateEvent
        {
            get { return new SupplierProductStateEvent(this); }
        }
                

        public virtual WarehouseStateEvent WarehouseStateEvent
        {
            get { return new WarehouseStateEvent(this); }
        }
                

        public virtual LocatorStateEvent LocatorStateEvent
        {
            get { return new LocatorStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceStateEvent AttributeSetInstanceStateEvent
        {
            get { return new AttributeSetInstanceStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupStateEvent AttributeSetInstanceExtensionFieldGroupStateEvent
        {
            get { return new AttributeSetInstanceExtensionFieldGroupStateEvent(this); }
        }
                

        public virtual AttributeValueMvoStateEvent AttributeValueMvoStateEvent
        {
            get { return new AttributeValueMvoStateEvent(this); }
        }
                

        public virtual AttributeUseMvoStateEvent AttributeUseMvoStateEvent
        {
            get { return new AttributeUseMvoStateEvent(this); }
        }
                

        public virtual InOutLineMvoStateEvent InOutLineMvoStateEvent
        {
            get { return new InOutLineMvoStateEvent(this); }
        }
                

        public virtual InventoryItemEntryMvoStateEvent InventoryItemEntryMvoStateEvent
        {
            get { return new InventoryItemEntryMvoStateEvent(this); }
        }
                

        public virtual SellableInventoryItemEntryMvoStateEvent SellableInventoryItemEntryMvoStateEvent
        {
            get { return new SellableInventoryItemEntryMvoStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvoStateEvent AttributeSetInstanceExtensionFieldMvoStateEvent
        {
            get { return new AttributeSetInstanceExtensionFieldMvoStateEvent(this); }
        }
                

        public virtual AttributeHistoryState AttributeHistoryState
        {
            get { return new AttributeHistoryState(this); }
        }
                

        public virtual AttributeSetHistoryState AttributeSetHistoryState
        {
            get { return new AttributeSetHistoryState(this); }
        }
                

        public virtual DocumentTypeHistoryState DocumentTypeHistoryState
        {
            get { return new DocumentTypeHistoryState(this); }
        }
                

        public virtual InOutHistoryState InOutHistoryState
        {
            get { return new InOutHistoryState(this); }
        }
                

        public virtual InventoryItemHistoryState InventoryItemHistoryState
        {
            get { return new InventoryItemHistoryState(this); }
        }
                

        public virtual SellableInventoryItemHistoryState SellableInventoryItemHistoryState
        {
            get { return new SellableInventoryItemHistoryState(this); }
        }
                

        public virtual InventoryPostingRuleHistoryState InventoryPostingRuleHistoryState
        {
            get { return new InventoryPostingRuleHistoryState(this); }
        }
                

        public virtual InventoryPRTriggeredHistoryState InventoryPRTriggeredHistoryState
        {
            get { return new InventoryPRTriggeredHistoryState(this); }
        }
                

        public virtual MovementTypeHistoryState MovementTypeHistoryState
        {
            get { return new MovementTypeHistoryState(this); }
        }
                

        public virtual OrderHeaderHistoryState OrderHeaderHistoryState
        {
            get { return new OrderHeaderHistoryState(this); }
        }
                

        public virtual OrderItemHistoryState OrderItemHistoryState
        {
            get { return new OrderItemHistoryState(this); }
        }
                

        public virtual OrderShipmentHistoryState OrderShipmentHistoryState
        {
            get { return new OrderShipmentHistoryState(this); }
        }
                

        public virtual OrganizationHistoryState OrganizationHistoryState
        {
            get { return new OrganizationHistoryState(this); }
        }
                

        public virtual OrganizationStructureTypeHistoryState OrganizationStructureTypeHistoryState
        {
            get { return new OrganizationStructureTypeHistoryState(this); }
        }
                

        public virtual OrganizationStructureHistoryState OrganizationStructureHistoryState
        {
            get { return new OrganizationStructureHistoryState(this); }
        }
                

        public virtual ProductHistoryState ProductHistoryState
        {
            get { return new ProductHistoryState(this); }
        }
                

        public virtual ProductCategoryHistoryState ProductCategoryHistoryState
        {
            get { return new ProductCategoryHistoryState(this); }
        }
                

        public virtual ShipmentHistoryState ShipmentHistoryState
        {
            get { return new ShipmentHistoryState(this); }
        }
                

        public virtual ShipmentItemHistoryState ShipmentItemHistoryState
        {
            get { return new ShipmentItemHistoryState(this); }
        }
                

        public virtual ShipmentTypeHistoryState ShipmentTypeHistoryState
        {
            get { return new ShipmentTypeHistoryState(this); }
        }
                

        public virtual StatusItemHistoryState StatusItemHistoryState
        {
            get { return new StatusItemHistoryState(this); }
        }
                

        public virtual SupplierProductHistoryState SupplierProductHistoryState
        {
            get { return new SupplierProductHistoryState(this); }
        }
                

        public virtual WarehouseHistoryState WarehouseHistoryState
        {
            get { return new WarehouseHistoryState(this); }
        }
                

        public virtual LocatorHistoryState LocatorHistoryState
        {
            get { return new LocatorHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceHistoryState AttributeSetInstanceHistoryState
        {
            get { return new AttributeSetInstanceHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupHistoryState AttributeSetInstanceExtensionFieldGroupHistoryState
        {
            get { return new AttributeSetInstanceExtensionFieldGroupHistoryState(this); }
        }
                

        public virtual AttributeValueMvoHistoryState AttributeValueMvoHistoryState
        {
            get { return new AttributeValueMvoHistoryState(this); }
        }
                

        public virtual AttributeUseMvoHistoryState AttributeUseMvoHistoryState
        {
            get { return new AttributeUseMvoHistoryState(this); }
        }
                

        public virtual InOutLineMvoHistoryState InOutLineMvoHistoryState
        {
            get { return new InOutLineMvoHistoryState(this); }
        }
                

        public virtual InventoryItemEntryMvoHistoryState InventoryItemEntryMvoHistoryState
        {
            get { return new InventoryItemEntryMvoHistoryState(this); }
        }
                

        public virtual SellableInventoryItemEntryMvoHistoryState SellableInventoryItemEntryMvoHistoryState
        {
            get { return new SellableInventoryItemEntryMvoHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvoHistoryState AttributeSetInstanceExtensionFieldMvoHistoryState
        {
            get { return new AttributeSetInstanceExtensionFieldMvoHistoryState(this); }
        }
                

        public virtual AttributeValue AttributeValue
        {
            get { return new AttributeValue(this); }
        }
                

        public virtual AttributeUse AttributeUse
        {
            get { return new AttributeUse(this); }
        }
                

        public virtual InOutLine InOutLine
        {
            get { return new InOutLine(this); }
        }
                

        public virtual InventoryItemEntry InventoryItemEntry
        {
            get { return new InventoryItemEntry(this); }
        }
                

        public virtual SellableInventoryItemEntry SellableInventoryItemEntry
        {
            get { return new SellableInventoryItemEntry(this); }
        }
                

        public virtual AttributeSetInstanceExtensionField AttributeSetInstanceExtensionField
        {
            get { return new AttributeSetInstanceExtensionField(this); }
        }
                

        public virtual OrganizationTrees OrganizationTrees
        {
            get { return new OrganizationTrees(this); }
        }
                

        public virtual LocatorTrees LocatorTrees
        {
            get { return new LocatorTrees(this); }
        }
                


		public void AddDefaultRequestHeader(string name, string value)
		{
			client.DefaultRequestHeaders.Add(name, value);
		}

		public void AddDefaultRequestHeader(string name, IEnumerable<string> values)
		{
			client.DefaultRequestHeaders.Add(name, values);
		}


    }

} // end namespace









namespace Dddml.Wms.HttpServices.ClientProxies.Raml.Models
{
    public partial class  AttributeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DocumentTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  DocumentTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  DocumentTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DocumentTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InOutDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InOutsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryItemGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InventoryItemDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InventoryItemsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryItemsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SellableInventoryItemGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  SellableInventoryItemDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  SellableInventoryItemsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SellableInventoryItemsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryPostingRuleGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InventoryPostingRuleDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InventoryPostingRulesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryPostingRulesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryPRTriggeredGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InventoryPRTriggeredDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InventoryPRTriggeredsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryPRTriggeredsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  MovementTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  MovementTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  MovementTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  MovementTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderHeaderGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrderHeaderDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrderHeadersGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderHeadersCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderItemGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrderItemDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrderItemsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderItemsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderShipmentGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrderShipmentDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrderShipmentsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderShipmentsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrganizationDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrganizationsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrganizationStructureTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrganizationStructureTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrganizationStructureDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrganizationStructuresGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructuresCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ProductDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ProductsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductCategoryGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ProductCategoryDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ProductCategoriesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductCategoriesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ShipmentDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ShipmentsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentItemGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ShipmentItemDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ShipmentItemsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentItemsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ShipmentTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ShipmentTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  StatusItemGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  StatusItemDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  StatusItemsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  StatusItemsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SupplierProductGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  SupplierProductDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  SupplierProductsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SupplierProductsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  WarehouseGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  WarehouseDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  WarehousesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  WarehousesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  LocatorDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  LocatorsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstancesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstancesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeValueMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeValueMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeValueMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeValueMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeUseMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeUseMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeUseMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeUseMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutLineMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InOutLineMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InOutLineMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutLineMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryItemEntryMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InventoryItemEntryMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InventoryItemEntryMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryItemEntryMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SellableInventoryItemEntryMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  SellableInventoryItemEntryMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  SellableInventoryItemEntryMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SellableInventoryItemEntryMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationTreesGetQuery 
    {
		[JsonProperty("parentId")]
        public string ParentId { get; set; }

		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorTreesGetQuery 
    {
		[JsonProperty("parentId")]
        public string ParentId { get; set; }

		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}
    /// </summary>
    public partial class  AttributeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{attributeId}/AttributeValues/{value}
    /// </summary>
    public partial class  AttributeValueUriParameters 
    {
		[JsonProperty("attributeId")]
        public string AttributeId { get; set; }

		[JsonProperty("value")]
        public string Value { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}
    /// </summary>
    public partial class  AttributeSetUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{attributeSetId}/AttributeUses/{attributeId}
    /// </summary>
    public partial class  AttributeUseUriParameters 
    {
		[JsonProperty("attributeSetId")]
        public string AttributeSetId { get; set; }

		[JsonProperty("attributeId")]
        public string AttributeId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DocumentTypes/{id}
    /// </summary>
    public partial class  DocumentTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DocumentTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  DocumentTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DocumentTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  DocumentTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}
    /// </summary>
    public partial class  InOutUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InOutStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InOutHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{inOutDocumentNumber}/InOutLines/{lineNumber}
    /// </summary>
    public partial class  InOutLineUriParameters 
    {
		[JsonProperty("inOutDocumentNumber")]
        public string InOutDocumentNumber { get; set; }

		[JsonProperty("lineNumber")]
        public long? LineNumber { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItems/{id}
    /// </summary>
    public partial class  InventoryItemUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItems/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InventoryItemStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItems/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InventoryItemHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItems/{inventoryItemId}/InventoryItemEntries/{entrySeqId}
    /// </summary>
    public partial class  InventoryItemEntryUriParameters 
    {
		[JsonProperty("inventoryItemId")]
        public string InventoryItemId { get; set; }

		[JsonProperty("entrySeqId")]
        public long? EntrySeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItems/{id}
    /// </summary>
    public partial class  SellableInventoryItemUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItems/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  SellableInventoryItemStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItems/{id}/_historyStates/{version}
    /// </summary>
    public partial class  SellableInventoryItemHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItems/{sellableInventoryItemId}/SellableInventoryItemEntries/{entrySeqId}
    /// </summary>
    public partial class  SellableInventoryItemEntryUriParameters 
    {
		[JsonProperty("sellableInventoryItemId")]
        public string SellableInventoryItemId { get; set; }

		[JsonProperty("entrySeqId")]
        public long? EntrySeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPostingRules/{id}
    /// </summary>
    public partial class  InventoryPostingRuleUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPostingRules/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InventoryPostingRuleStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPostingRules/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InventoryPostingRuleHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPRTriggereds/{id}
    /// </summary>
    public partial class  InventoryPRTriggeredUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPRTriggereds/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InventoryPRTriggeredStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPRTriggereds/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InventoryPRTriggeredHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementTypes/{id}
    /// </summary>
    public partial class  MovementTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  MovementTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  MovementTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderHeaders/{id}
    /// </summary>
    public partial class  OrderHeaderUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderHeaders/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrderHeaderStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderHeaders/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrderHeaderHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderItems/{id}
    /// </summary>
    public partial class  OrderItemUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderItems/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrderItemStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderItems/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrderItemHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderShipments/{id}
    /// </summary>
    public partial class  OrderShipmentUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderShipments/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrderShipmentStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderShipments/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrderShipmentHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Organizations/{id}
    /// </summary>
    public partial class  OrganizationUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Organizations/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrganizationStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Organizations/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrganizationHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}
    /// </summary>
    public partial class  OrganizationStructureTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrganizationStructureTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrganizationStructureTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}
    /// </summary>
    public partial class  OrganizationStructureUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrganizationStructureStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrganizationStructureHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Products/{id}
    /// </summary>
    public partial class  ProductUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Products/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ProductStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Products/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ProductHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategories/{id}
    /// </summary>
    public partial class  ProductCategoryUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategories/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ProductCategoryStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategories/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ProductCategoryHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{id}
    /// </summary>
    public partial class  ShipmentUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ShipmentStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ShipmentHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentItems/{id}
    /// </summary>
    public partial class  ShipmentItemUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentItems/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ShipmentItemStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentItems/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ShipmentItemHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentTypes/{id}
    /// </summary>
    public partial class  ShipmentTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ShipmentTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ShipmentTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /StatusItems/{id}
    /// </summary>
    public partial class  StatusItemUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /StatusItems/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  StatusItemStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /StatusItems/{id}/_historyStates/{version}
    /// </summary>
    public partial class  StatusItemHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SupplierProducts/{id}
    /// </summary>
    public partial class  SupplierProductUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SupplierProducts/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  SupplierProductStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SupplierProducts/{id}/_historyStates/{version}
    /// </summary>
    public partial class  SupplierProductHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}
    /// </summary>
    public partial class  WarehouseUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  WarehouseStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}/_historyStates/{version}
    /// </summary>
    public partial class  WarehouseHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}
    /// </summary>
    public partial class  LocatorUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  LocatorStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}/_historyStates/{version}
    /// </summary>
    public partial class  LocatorHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}
    /// </summary>
    public partial class  AttributeSetInstanceUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{groupId}/AttributeSetInstanceExtensionFields/{index}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldUriParameters 
    {
		[JsonProperty("groupId")]
        public string GroupId { get; set; }

		[JsonProperty("index")]
        public string Index { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeValueMvos/{id}
    /// </summary>
    public partial class  AttributeValueMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeValueMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeValueMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeValueMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeValueMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeUseMvos/{id}
    /// </summary>
    public partial class  AttributeUseMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeUseMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeUseMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeUseMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeUseMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOutLineMvos/{id}
    /// </summary>
    public partial class  InOutLineMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOutLineMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InOutLineMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOutLineMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InOutLineMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItemEntryMvos/{id}
    /// </summary>
    public partial class  InventoryItemEntryMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItemEntryMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InventoryItemEntryMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItemEntryMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InventoryItemEntryMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItemEntryMvos/{id}
    /// </summary>
    public partial class  SellableInventoryItemEntryMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItemEntryMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  SellableInventoryItemEntryMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItemEntryMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  SellableInventoryItemEntryMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldMvos/{id}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Request object for method Get of class Attribute
    /// </summary>
    public partial class AttributeGetRequest : ApiRequest
    {
        public AttributeGetRequest(AttributeUriParameters UriParameters, AttributeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Attribute
    /// </summary>
    public partial class AttributePutRequest : ApiRequest
    {
        public AttributePutRequest(AttributeUriParameters UriParameters, CreateAttributeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Attribute
    /// </summary>
    public partial class AttributePatchRequest : ApiRequest
    {
        public AttributePatchRequest(AttributeUriParameters UriParameters, MergePatchAttributeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Attribute
    /// </summary>
    public partial class AttributeDeleteRequest : ApiRequest
    {
        public AttributeDeleteRequest(AttributeUriParameters UriParameters, AttributeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Attributes
    /// </summary>
    public partial class AttributesGetRequest : ApiRequest
    {
        public AttributesGetRequest(AttributesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributesCount
    /// </summary>
    public partial class AttributesCountGetRequest : ApiRequest
    {
        public AttributesCountGetRequest(AttributesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeStateEvent
    /// </summary>
    public partial class AttributeStateEventGetRequest : ApiRequest
    {
        public AttributeStateEventGetRequest(AttributeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeHistoryState
    /// </summary>
    public partial class AttributeHistoryStateGetRequest : ApiRequest
    {
        public AttributeHistoryStateGetRequest(AttributeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValue
    /// </summary>
    public partial class AttributeValueGetRequest : ApiRequest
    {
        public AttributeValueGetRequest(AttributeValueUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSet
    /// </summary>
    public partial class AttributeSetGetRequest : ApiRequest
    {
        public AttributeSetGetRequest(AttributeSetUriParameters UriParameters, AttributeSetGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSet
    /// </summary>
    public partial class AttributeSetPutRequest : ApiRequest
    {
        public AttributeSetPutRequest(AttributeSetUriParameters UriParameters, CreateAttributeSetDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSet
    /// </summary>
    public partial class AttributeSetPatchRequest : ApiRequest
    {
        public AttributeSetPatchRequest(AttributeSetUriParameters UriParameters, MergePatchAttributeSetDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSet
    /// </summary>
    public partial class AttributeSetDeleteRequest : ApiRequest
    {
        public AttributeSetDeleteRequest(AttributeSetUriParameters UriParameters, AttributeSetDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSets
    /// </summary>
    public partial class AttributeSetsGetRequest : ApiRequest
    {
        public AttributeSetsGetRequest(AttributeSetsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetsCount
    /// </summary>
    public partial class AttributeSetsCountGetRequest : ApiRequest
    {
        public AttributeSetsCountGetRequest(AttributeSetsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetStateEvent
    /// </summary>
    public partial class AttributeSetStateEventGetRequest : ApiRequest
    {
        public AttributeSetStateEventGetRequest(AttributeSetStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetHistoryState
    /// </summary>
    public partial class AttributeSetHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetHistoryStateGetRequest(AttributeSetHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUse
    /// </summary>
    public partial class AttributeUseGetRequest : ApiRequest
    {
        public AttributeUseGetRequest(AttributeUseUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentType
    /// </summary>
    public partial class DocumentTypeGetRequest : ApiRequest
    {
        public DocumentTypeGetRequest(DocumentTypeUriParameters UriParameters, DocumentTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DocumentTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class DocumentType
    /// </summary>
    public partial class DocumentTypePutRequest : ApiRequest
    {
        public DocumentTypePutRequest(DocumentTypeUriParameters UriParameters, CreateDocumentTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateDocumentTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class DocumentType
    /// </summary>
    public partial class DocumentTypePatchRequest : ApiRequest
    {
        public DocumentTypePatchRequest(DocumentTypeUriParameters UriParameters, MergePatchDocumentTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchDocumentTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class DocumentType
    /// </summary>
    public partial class DocumentTypeDeleteRequest : ApiRequest
    {
        public DocumentTypeDeleteRequest(DocumentTypeUriParameters UriParameters, DocumentTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DocumentTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentTypes
    /// </summary>
    public partial class DocumentTypesGetRequest : ApiRequest
    {
        public DocumentTypesGetRequest(DocumentTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DocumentTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentTypesCount
    /// </summary>
    public partial class DocumentTypesCountGetRequest : ApiRequest
    {
        public DocumentTypesCountGetRequest(DocumentTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DocumentTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentTypeStateEvent
    /// </summary>
    public partial class DocumentTypeStateEventGetRequest : ApiRequest
    {
        public DocumentTypeStateEventGetRequest(DocumentTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentTypeHistoryState
    /// </summary>
    public partial class DocumentTypeHistoryStateGetRequest : ApiRequest
    {
        public DocumentTypeHistoryStateGetRequest(DocumentTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOut
    /// </summary>
    public partial class InOutGetRequest : ApiRequest
    {
        public InOutGetRequest(InOutUriParameters UriParameters, InOutGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InOut
    /// </summary>
    public partial class InOutPutRequest : ApiRequest
    {
        public InOutPutRequest(InOutUriParameters UriParameters, CreateInOutDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInOutDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InOut
    /// </summary>
    public partial class InOutPatchRequest : ApiRequest
    {
        public InOutPatchRequest(InOutUriParameters UriParameters, MergePatchInOutDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInOutDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InOut
    /// </summary>
    public partial class InOutDeleteRequest : ApiRequest
    {
        public InOutDeleteRequest(InOutUriParameters UriParameters, InOutDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOuts
    /// </summary>
    public partial class InOutsGetRequest : ApiRequest
    {
        public InOutsGetRequest(InOutsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutsCount
    /// </summary>
    public partial class InOutsCountGetRequest : ApiRequest
    {
        public InOutsCountGetRequest(InOutsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutStateEvent
    /// </summary>
    public partial class InOutStateEventGetRequest : ApiRequest
    {
        public InOutStateEventGetRequest(InOutStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutHistoryState
    /// </summary>
    public partial class InOutHistoryStateGetRequest : ApiRequest
    {
        public InOutHistoryStateGetRequest(InOutHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLine
    /// </summary>
    public partial class InOutLineGetRequest : ApiRequest
    {
        public InOutLineGetRequest(InOutLineUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItem
    /// </summary>
    public partial class InventoryItemGetRequest : ApiRequest
    {
        public InventoryItemGetRequest(InventoryItemUriParameters UriParameters, InventoryItemGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InventoryItem
    /// </summary>
    public partial class InventoryItemPutRequest : ApiRequest
    {
        public InventoryItemPutRequest(InventoryItemUriParameters UriParameters, CreateInventoryItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInventoryItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InventoryItem
    /// </summary>
    public partial class InventoryItemPatchRequest : ApiRequest
    {
        public InventoryItemPatchRequest(InventoryItemUriParameters UriParameters, MergePatchInventoryItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInventoryItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InventoryItem
    /// </summary>
    public partial class InventoryItemDeleteRequest : ApiRequest
    {
        public InventoryItemDeleteRequest(InventoryItemUriParameters UriParameters, InventoryItemDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItems
    /// </summary>
    public partial class InventoryItemsGetRequest : ApiRequest
    {
        public InventoryItemsGetRequest(InventoryItemsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemsCount
    /// </summary>
    public partial class InventoryItemsCountGetRequest : ApiRequest
    {
        public InventoryItemsCountGetRequest(InventoryItemsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemStateEvent
    /// </summary>
    public partial class InventoryItemStateEventGetRequest : ApiRequest
    {
        public InventoryItemStateEventGetRequest(InventoryItemStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemHistoryState
    /// </summary>
    public partial class InventoryItemHistoryStateGetRequest : ApiRequest
    {
        public InventoryItemHistoryStateGetRequest(InventoryItemHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemEntry
    /// </summary>
    public partial class InventoryItemEntryGetRequest : ApiRequest
    {
        public InventoryItemEntryGetRequest(InventoryItemEntryUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemEntryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItem
    /// </summary>
    public partial class SellableInventoryItemGetRequest : ApiRequest
    {
        public SellableInventoryItemGetRequest(SellableInventoryItemUriParameters UriParameters, SellableInventoryItemGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class SellableInventoryItem
    /// </summary>
    public partial class SellableInventoryItemPutRequest : ApiRequest
    {
        public SellableInventoryItemPutRequest(SellableInventoryItemUriParameters UriParameters, CreateSellableInventoryItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateSellableInventoryItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class SellableInventoryItem
    /// </summary>
    public partial class SellableInventoryItemPatchRequest : ApiRequest
    {
        public SellableInventoryItemPatchRequest(SellableInventoryItemUriParameters UriParameters, MergePatchSellableInventoryItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchSellableInventoryItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class SellableInventoryItem
    /// </summary>
    public partial class SellableInventoryItemDeleteRequest : ApiRequest
    {
        public SellableInventoryItemDeleteRequest(SellableInventoryItemUriParameters UriParameters, SellableInventoryItemDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItems
    /// </summary>
    public partial class SellableInventoryItemsGetRequest : ApiRequest
    {
        public SellableInventoryItemsGetRequest(SellableInventoryItemsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemsCount
    /// </summary>
    public partial class SellableInventoryItemsCountGetRequest : ApiRequest
    {
        public SellableInventoryItemsCountGetRequest(SellableInventoryItemsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemStateEvent
    /// </summary>
    public partial class SellableInventoryItemStateEventGetRequest : ApiRequest
    {
        public SellableInventoryItemStateEventGetRequest(SellableInventoryItemStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemHistoryState
    /// </summary>
    public partial class SellableInventoryItemHistoryStateGetRequest : ApiRequest
    {
        public SellableInventoryItemHistoryStateGetRequest(SellableInventoryItemHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemEntry
    /// </summary>
    public partial class SellableInventoryItemEntryGetRequest : ApiRequest
    {
        public SellableInventoryItemEntryGetRequest(SellableInventoryItemEntryUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemEntryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRule
    /// </summary>
    public partial class InventoryPostingRuleGetRequest : ApiRequest
    {
        public InventoryPostingRuleGetRequest(InventoryPostingRuleUriParameters UriParameters, InventoryPostingRuleGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPostingRuleGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InventoryPostingRule
    /// </summary>
    public partial class InventoryPostingRulePutRequest : ApiRequest
    {
        public InventoryPostingRulePutRequest(InventoryPostingRuleUriParameters UriParameters, CreateInventoryPostingRuleDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInventoryPostingRuleDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InventoryPostingRule
    /// </summary>
    public partial class InventoryPostingRulePatchRequest : ApiRequest
    {
        public InventoryPostingRulePatchRequest(InventoryPostingRuleUriParameters UriParameters, MergePatchInventoryPostingRuleDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInventoryPostingRuleDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InventoryPostingRule
    /// </summary>
    public partial class InventoryPostingRuleDeleteRequest : ApiRequest
    {
        public InventoryPostingRuleDeleteRequest(InventoryPostingRuleUriParameters UriParameters, InventoryPostingRuleDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPostingRuleDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRules
    /// </summary>
    public partial class InventoryPostingRulesGetRequest : ApiRequest
    {
        public InventoryPostingRulesGetRequest(InventoryPostingRulesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPostingRulesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRulesCount
    /// </summary>
    public partial class InventoryPostingRulesCountGetRequest : ApiRequest
    {
        public InventoryPostingRulesCountGetRequest(InventoryPostingRulesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPostingRulesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRuleStateEvent
    /// </summary>
    public partial class InventoryPostingRuleStateEventGetRequest : ApiRequest
    {
        public InventoryPostingRuleStateEventGetRequest(InventoryPostingRuleStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRuleHistoryState
    /// </summary>
    public partial class InventoryPostingRuleHistoryStateGetRequest : ApiRequest
    {
        public InventoryPostingRuleHistoryStateGetRequest(InventoryPostingRuleHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggered
    /// </summary>
    public partial class InventoryPRTriggeredGetRequest : ApiRequest
    {
        public InventoryPRTriggeredGetRequest(InventoryPRTriggeredUriParameters UriParameters, InventoryPRTriggeredGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPRTriggeredGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InventoryPRTriggered
    /// </summary>
    public partial class InventoryPRTriggeredPutRequest : ApiRequest
    {
        public InventoryPRTriggeredPutRequest(InventoryPRTriggeredUriParameters UriParameters, CreateInventoryPRTriggeredDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInventoryPRTriggeredDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InventoryPRTriggered
    /// </summary>
    public partial class InventoryPRTriggeredPatchRequest : ApiRequest
    {
        public InventoryPRTriggeredPatchRequest(InventoryPRTriggeredUriParameters UriParameters, MergePatchInventoryPRTriggeredDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInventoryPRTriggeredDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InventoryPRTriggered
    /// </summary>
    public partial class InventoryPRTriggeredDeleteRequest : ApiRequest
    {
        public InventoryPRTriggeredDeleteRequest(InventoryPRTriggeredUriParameters UriParameters, InventoryPRTriggeredDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPRTriggeredDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggereds
    /// </summary>
    public partial class InventoryPRTriggeredsGetRequest : ApiRequest
    {
        public InventoryPRTriggeredsGetRequest(InventoryPRTriggeredsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPRTriggeredsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggeredsCount
    /// </summary>
    public partial class InventoryPRTriggeredsCountGetRequest : ApiRequest
    {
        public InventoryPRTriggeredsCountGetRequest(InventoryPRTriggeredsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPRTriggeredsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggeredStateEvent
    /// </summary>
    public partial class InventoryPRTriggeredStateEventGetRequest : ApiRequest
    {
        public InventoryPRTriggeredStateEventGetRequest(InventoryPRTriggeredStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggeredHistoryState
    /// </summary>
    public partial class InventoryPRTriggeredHistoryStateGetRequest : ApiRequest
    {
        public InventoryPRTriggeredHistoryStateGetRequest(InventoryPRTriggeredHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementType
    /// </summary>
    public partial class MovementTypeGetRequest : ApiRequest
    {
        public MovementTypeGetRequest(MovementTypeUriParameters UriParameters, MovementTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class MovementType
    /// </summary>
    public partial class MovementTypePutRequest : ApiRequest
    {
        public MovementTypePutRequest(MovementTypeUriParameters UriParameters, CreateMovementTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateMovementTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class MovementType
    /// </summary>
    public partial class MovementTypePatchRequest : ApiRequest
    {
        public MovementTypePatchRequest(MovementTypeUriParameters UriParameters, MergePatchMovementTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchMovementTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class MovementType
    /// </summary>
    public partial class MovementTypeDeleteRequest : ApiRequest
    {
        public MovementTypeDeleteRequest(MovementTypeUriParameters UriParameters, MovementTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementTypes
    /// </summary>
    public partial class MovementTypesGetRequest : ApiRequest
    {
        public MovementTypesGetRequest(MovementTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementTypesCount
    /// </summary>
    public partial class MovementTypesCountGetRequest : ApiRequest
    {
        public MovementTypesCountGetRequest(MovementTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementTypeStateEvent
    /// </summary>
    public partial class MovementTypeStateEventGetRequest : ApiRequest
    {
        public MovementTypeStateEventGetRequest(MovementTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementTypeHistoryState
    /// </summary>
    public partial class MovementTypeHistoryStateGetRequest : ApiRequest
    {
        public MovementTypeHistoryStateGetRequest(MovementTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderHeader
    /// </summary>
    public partial class OrderHeaderGetRequest : ApiRequest
    {
        public OrderHeaderGetRequest(OrderHeaderUriParameters UriParameters, OrderHeaderGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderHeaderGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderHeaderUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrderHeader
    /// </summary>
    public partial class OrderHeaderPutRequest : ApiRequest
    {
        public OrderHeaderPutRequest(OrderHeaderUriParameters UriParameters, CreateOrderHeaderDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrderHeaderDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderHeaderUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrderHeader
    /// </summary>
    public partial class OrderHeaderPatchRequest : ApiRequest
    {
        public OrderHeaderPatchRequest(OrderHeaderUriParameters UriParameters, MergePatchOrderHeaderDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrderHeaderDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderHeaderUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrderHeader
    /// </summary>
    public partial class OrderHeaderDeleteRequest : ApiRequest
    {
        public OrderHeaderDeleteRequest(OrderHeaderUriParameters UriParameters, OrderHeaderDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderHeaderDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderHeaderUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderHeaders
    /// </summary>
    public partial class OrderHeadersGetRequest : ApiRequest
    {
        public OrderHeadersGetRequest(OrderHeadersGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderHeadersGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderHeadersCount
    /// </summary>
    public partial class OrderHeadersCountGetRequest : ApiRequest
    {
        public OrderHeadersCountGetRequest(OrderHeadersCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderHeadersCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderHeaderStateEvent
    /// </summary>
    public partial class OrderHeaderStateEventGetRequest : ApiRequest
    {
        public OrderHeaderStateEventGetRequest(OrderHeaderStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderHeaderStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderHeaderHistoryState
    /// </summary>
    public partial class OrderHeaderHistoryStateGetRequest : ApiRequest
    {
        public OrderHeaderHistoryStateGetRequest(OrderHeaderHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderHeaderHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItem
    /// </summary>
    public partial class OrderItemGetRequest : ApiRequest
    {
        public OrderItemGetRequest(OrderItemUriParameters UriParameters, OrderItemGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderItemGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrderItem
    /// </summary>
    public partial class OrderItemPutRequest : ApiRequest
    {
        public OrderItemPutRequest(OrderItemUriParameters UriParameters, CreateOrderItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrderItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrderItem
    /// </summary>
    public partial class OrderItemPatchRequest : ApiRequest
    {
        public OrderItemPatchRequest(OrderItemUriParameters UriParameters, MergePatchOrderItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrderItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrderItem
    /// </summary>
    public partial class OrderItemDeleteRequest : ApiRequest
    {
        public OrderItemDeleteRequest(OrderItemUriParameters UriParameters, OrderItemDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderItemDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItems
    /// </summary>
    public partial class OrderItemsGetRequest : ApiRequest
    {
        public OrderItemsGetRequest(OrderItemsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderItemsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemsCount
    /// </summary>
    public partial class OrderItemsCountGetRequest : ApiRequest
    {
        public OrderItemsCountGetRequest(OrderItemsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderItemsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemStateEvent
    /// </summary>
    public partial class OrderItemStateEventGetRequest : ApiRequest
    {
        public OrderItemStateEventGetRequest(OrderItemStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemHistoryState
    /// </summary>
    public partial class OrderItemHistoryStateGetRequest : ApiRequest
    {
        public OrderItemHistoryStateGetRequest(OrderItemHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipment
    /// </summary>
    public partial class OrderShipmentGetRequest : ApiRequest
    {
        public OrderShipmentGetRequest(OrderShipmentUriParameters UriParameters, OrderShipmentGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderShipmentGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrderShipment
    /// </summary>
    public partial class OrderShipmentPutRequest : ApiRequest
    {
        public OrderShipmentPutRequest(OrderShipmentUriParameters UriParameters, CreateOrderShipmentDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrderShipmentDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrderShipment
    /// </summary>
    public partial class OrderShipmentPatchRequest : ApiRequest
    {
        public OrderShipmentPatchRequest(OrderShipmentUriParameters UriParameters, MergePatchOrderShipmentDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrderShipmentDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrderShipment
    /// </summary>
    public partial class OrderShipmentDeleteRequest : ApiRequest
    {
        public OrderShipmentDeleteRequest(OrderShipmentUriParameters UriParameters, OrderShipmentDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderShipmentDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipments
    /// </summary>
    public partial class OrderShipmentsGetRequest : ApiRequest
    {
        public OrderShipmentsGetRequest(OrderShipmentsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderShipmentsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipmentsCount
    /// </summary>
    public partial class OrderShipmentsCountGetRequest : ApiRequest
    {
        public OrderShipmentsCountGetRequest(OrderShipmentsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderShipmentsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipmentStateEvent
    /// </summary>
    public partial class OrderShipmentStateEventGetRequest : ApiRequest
    {
        public OrderShipmentStateEventGetRequest(OrderShipmentStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipmentHistoryState
    /// </summary>
    public partial class OrderShipmentHistoryStateGetRequest : ApiRequest
    {
        public OrderShipmentHistoryStateGetRequest(OrderShipmentHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Organization
    /// </summary>
    public partial class OrganizationGetRequest : ApiRequest
    {
        public OrganizationGetRequest(OrganizationUriParameters UriParameters, OrganizationGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Organization
    /// </summary>
    public partial class OrganizationPutRequest : ApiRequest
    {
        public OrganizationPutRequest(OrganizationUriParameters UriParameters, CreateOrganizationDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrganizationDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Organization
    /// </summary>
    public partial class OrganizationPatchRequest : ApiRequest
    {
        public OrganizationPatchRequest(OrganizationUriParameters UriParameters, MergePatchOrganizationDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrganizationDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Organization
    /// </summary>
    public partial class OrganizationDeleteRequest : ApiRequest
    {
        public OrganizationDeleteRequest(OrganizationUriParameters UriParameters, OrganizationDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Organizations
    /// </summary>
    public partial class OrganizationsGetRequest : ApiRequest
    {
        public OrganizationsGetRequest(OrganizationsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationsCount
    /// </summary>
    public partial class OrganizationsCountGetRequest : ApiRequest
    {
        public OrganizationsCountGetRequest(OrganizationsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStateEvent
    /// </summary>
    public partial class OrganizationStateEventGetRequest : ApiRequest
    {
        public OrganizationStateEventGetRequest(OrganizationStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationHistoryState
    /// </summary>
    public partial class OrganizationHistoryStateGetRequest : ApiRequest
    {
        public OrganizationHistoryStateGetRequest(OrganizationHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypeGetRequest : ApiRequest
    {
        public OrganizationStructureTypeGetRequest(OrganizationStructureTypeUriParameters UriParameters, OrganizationStructureTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypePutRequest : ApiRequest
    {
        public OrganizationStructureTypePutRequest(OrganizationStructureTypeUriParameters UriParameters, CreateOrganizationStructureTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrganizationStructureTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypePatchRequest : ApiRequest
    {
        public OrganizationStructureTypePatchRequest(OrganizationStructureTypeUriParameters UriParameters, MergePatchOrganizationStructureTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrganizationStructureTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypeDeleteRequest : ApiRequest
    {
        public OrganizationStructureTypeDeleteRequest(OrganizationStructureTypeUriParameters UriParameters, OrganizationStructureTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypes
    /// </summary>
    public partial class OrganizationStructureTypesGetRequest : ApiRequest
    {
        public OrganizationStructureTypesGetRequest(OrganizationStructureTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypesCount
    /// </summary>
    public partial class OrganizationStructureTypesCountGetRequest : ApiRequest
    {
        public OrganizationStructureTypesCountGetRequest(OrganizationStructureTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypeStateEvent
    /// </summary>
    public partial class OrganizationStructureTypeStateEventGetRequest : ApiRequest
    {
        public OrganizationStructureTypeStateEventGetRequest(OrganizationStructureTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypeHistoryState
    /// </summary>
    public partial class OrganizationStructureTypeHistoryStateGetRequest : ApiRequest
    {
        public OrganizationStructureTypeHistoryStateGetRequest(OrganizationStructureTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructureGetRequest : ApiRequest
    {
        public OrganizationStructureGetRequest(OrganizationStructureUriParameters UriParameters, OrganizationStructureGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructurePutRequest : ApiRequest
    {
        public OrganizationStructurePutRequest(OrganizationStructureUriParameters UriParameters, CreateOrganizationStructureDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrganizationStructureDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructurePatchRequest : ApiRequest
    {
        public OrganizationStructurePatchRequest(OrganizationStructureUriParameters UriParameters, MergePatchOrganizationStructureDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrganizationStructureDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructureDeleteRequest : ApiRequest
    {
        public OrganizationStructureDeleteRequest(OrganizationStructureUriParameters UriParameters, OrganizationStructureDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructures
    /// </summary>
    public partial class OrganizationStructuresGetRequest : ApiRequest
    {
        public OrganizationStructuresGetRequest(OrganizationStructuresGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructuresGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructuresCount
    /// </summary>
    public partial class OrganizationStructuresCountGetRequest : ApiRequest
    {
        public OrganizationStructuresCountGetRequest(OrganizationStructuresCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructuresCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureStateEvent
    /// </summary>
    public partial class OrganizationStructureStateEventGetRequest : ApiRequest
    {
        public OrganizationStructureStateEventGetRequest(OrganizationStructureStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureHistoryState
    /// </summary>
    public partial class OrganizationStructureHistoryStateGetRequest : ApiRequest
    {
        public OrganizationStructureHistoryStateGetRequest(OrganizationStructureHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Product
    /// </summary>
    public partial class ProductGetRequest : ApiRequest
    {
        public ProductGetRequest(ProductUriParameters UriParameters, ProductGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Product
    /// </summary>
    public partial class ProductPutRequest : ApiRequest
    {
        public ProductPutRequest(ProductUriParameters UriParameters, CreateProductDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateProductDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Product
    /// </summary>
    public partial class ProductPatchRequest : ApiRequest
    {
        public ProductPatchRequest(ProductUriParameters UriParameters, MergePatchProductDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchProductDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Product
    /// </summary>
    public partial class ProductDeleteRequest : ApiRequest
    {
        public ProductDeleteRequest(ProductUriParameters UriParameters, ProductDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Products
    /// </summary>
    public partial class ProductsGetRequest : ApiRequest
    {
        public ProductsGetRequest(ProductsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductsCount
    /// </summary>
    public partial class ProductsCountGetRequest : ApiRequest
    {
        public ProductsCountGetRequest(ProductsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductStateEvent
    /// </summary>
    public partial class ProductStateEventGetRequest : ApiRequest
    {
        public ProductStateEventGetRequest(ProductStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductHistoryState
    /// </summary>
    public partial class ProductHistoryStateGetRequest : ApiRequest
    {
        public ProductHistoryStateGetRequest(ProductHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategory
    /// </summary>
    public partial class ProductCategoryGetRequest : ApiRequest
    {
        public ProductCategoryGetRequest(ProductCategoryUriParameters UriParameters, ProductCategoryGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoryGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ProductCategory
    /// </summary>
    public partial class ProductCategoryPutRequest : ApiRequest
    {
        public ProductCategoryPutRequest(ProductCategoryUriParameters UriParameters, CreateProductCategoryDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateProductCategoryDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ProductCategory
    /// </summary>
    public partial class ProductCategoryPatchRequest : ApiRequest
    {
        public ProductCategoryPatchRequest(ProductCategoryUriParameters UriParameters, MergePatchProductCategoryDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchProductCategoryDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ProductCategory
    /// </summary>
    public partial class ProductCategoryDeleteRequest : ApiRequest
    {
        public ProductCategoryDeleteRequest(ProductCategoryUriParameters UriParameters, ProductCategoryDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoryDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategories
    /// </summary>
    public partial class ProductCategoriesGetRequest : ApiRequest
    {
        public ProductCategoriesGetRequest(ProductCategoriesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoriesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoriesCount
    /// </summary>
    public partial class ProductCategoriesCountGetRequest : ApiRequest
    {
        public ProductCategoriesCountGetRequest(ProductCategoriesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoriesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryStateEvent
    /// </summary>
    public partial class ProductCategoryStateEventGetRequest : ApiRequest
    {
        public ProductCategoryStateEventGetRequest(ProductCategoryStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryHistoryState
    /// </summary>
    public partial class ProductCategoryHistoryStateGetRequest : ApiRequest
    {
        public ProductCategoryHistoryStateGetRequest(ProductCategoryHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Shipment
    /// </summary>
    public partial class ShipmentGetRequest : ApiRequest
    {
        public ShipmentGetRequest(ShipmentUriParameters UriParameters, ShipmentGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Shipment
    /// </summary>
    public partial class ShipmentPutRequest : ApiRequest
    {
        public ShipmentPutRequest(ShipmentUriParameters UriParameters, CreateShipmentDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateShipmentDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Shipment
    /// </summary>
    public partial class ShipmentPatchRequest : ApiRequest
    {
        public ShipmentPatchRequest(ShipmentUriParameters UriParameters, MergePatchShipmentDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchShipmentDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Shipment
    /// </summary>
    public partial class ShipmentDeleteRequest : ApiRequest
    {
        public ShipmentDeleteRequest(ShipmentUriParameters UriParameters, ShipmentDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Shipments
    /// </summary>
    public partial class ShipmentsGetRequest : ApiRequest
    {
        public ShipmentsGetRequest(ShipmentsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentsCount
    /// </summary>
    public partial class ShipmentsCountGetRequest : ApiRequest
    {
        public ShipmentsCountGetRequest(ShipmentsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentStateEvent
    /// </summary>
    public partial class ShipmentStateEventGetRequest : ApiRequest
    {
        public ShipmentStateEventGetRequest(ShipmentStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentHistoryState
    /// </summary>
    public partial class ShipmentHistoryStateGetRequest : ApiRequest
    {
        public ShipmentHistoryStateGetRequest(ShipmentHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentItem
    /// </summary>
    public partial class ShipmentItemGetRequest : ApiRequest
    {
        public ShipmentItemGetRequest(ShipmentItemUriParameters UriParameters, ShipmentItemGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentItemGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ShipmentItem
    /// </summary>
    public partial class ShipmentItemPutRequest : ApiRequest
    {
        public ShipmentItemPutRequest(ShipmentItemUriParameters UriParameters, CreateShipmentItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateShipmentItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ShipmentItem
    /// </summary>
    public partial class ShipmentItemPatchRequest : ApiRequest
    {
        public ShipmentItemPatchRequest(ShipmentItemUriParameters UriParameters, MergePatchShipmentItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchShipmentItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ShipmentItem
    /// </summary>
    public partial class ShipmentItemDeleteRequest : ApiRequest
    {
        public ShipmentItemDeleteRequest(ShipmentItemUriParameters UriParameters, ShipmentItemDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentItemDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentItems
    /// </summary>
    public partial class ShipmentItemsGetRequest : ApiRequest
    {
        public ShipmentItemsGetRequest(ShipmentItemsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentItemsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentItemsCount
    /// </summary>
    public partial class ShipmentItemsCountGetRequest : ApiRequest
    {
        public ShipmentItemsCountGetRequest(ShipmentItemsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentItemsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentItemStateEvent
    /// </summary>
    public partial class ShipmentItemStateEventGetRequest : ApiRequest
    {
        public ShipmentItemStateEventGetRequest(ShipmentItemStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentItemStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentItemHistoryState
    /// </summary>
    public partial class ShipmentItemHistoryStateGetRequest : ApiRequest
    {
        public ShipmentItemHistoryStateGetRequest(ShipmentItemHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentItemHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentType
    /// </summary>
    public partial class ShipmentTypeGetRequest : ApiRequest
    {
        public ShipmentTypeGetRequest(ShipmentTypeUriParameters UriParameters, ShipmentTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ShipmentType
    /// </summary>
    public partial class ShipmentTypePutRequest : ApiRequest
    {
        public ShipmentTypePutRequest(ShipmentTypeUriParameters UriParameters, CreateShipmentTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateShipmentTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ShipmentType
    /// </summary>
    public partial class ShipmentTypePatchRequest : ApiRequest
    {
        public ShipmentTypePatchRequest(ShipmentTypeUriParameters UriParameters, MergePatchShipmentTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchShipmentTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ShipmentType
    /// </summary>
    public partial class ShipmentTypeDeleteRequest : ApiRequest
    {
        public ShipmentTypeDeleteRequest(ShipmentTypeUriParameters UriParameters, ShipmentTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentTypes
    /// </summary>
    public partial class ShipmentTypesGetRequest : ApiRequest
    {
        public ShipmentTypesGetRequest(ShipmentTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentTypesCount
    /// </summary>
    public partial class ShipmentTypesCountGetRequest : ApiRequest
    {
        public ShipmentTypesCountGetRequest(ShipmentTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentTypeStateEvent
    /// </summary>
    public partial class ShipmentTypeStateEventGetRequest : ApiRequest
    {
        public ShipmentTypeStateEventGetRequest(ShipmentTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentTypeHistoryState
    /// </summary>
    public partial class ShipmentTypeHistoryStateGetRequest : ApiRequest
    {
        public ShipmentTypeHistoryStateGetRequest(ShipmentTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItem
    /// </summary>
    public partial class StatusItemGetRequest : ApiRequest
    {
        public StatusItemGetRequest(StatusItemUriParameters UriParameters, StatusItemGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public StatusItemGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class StatusItem
    /// </summary>
    public partial class StatusItemPutRequest : ApiRequest
    {
        public StatusItemPutRequest(StatusItemUriParameters UriParameters, CreateStatusItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateStatusItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class StatusItem
    /// </summary>
    public partial class StatusItemPatchRequest : ApiRequest
    {
        public StatusItemPatchRequest(StatusItemUriParameters UriParameters, MergePatchStatusItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchStatusItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class StatusItem
    /// </summary>
    public partial class StatusItemDeleteRequest : ApiRequest
    {
        public StatusItemDeleteRequest(StatusItemUriParameters UriParameters, StatusItemDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public StatusItemDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItems
    /// </summary>
    public partial class StatusItemsGetRequest : ApiRequest
    {
        public StatusItemsGetRequest(StatusItemsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public StatusItemsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItemsCount
    /// </summary>
    public partial class StatusItemsCountGetRequest : ApiRequest
    {
        public StatusItemsCountGetRequest(StatusItemsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public StatusItemsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItemStateEvent
    /// </summary>
    public partial class StatusItemStateEventGetRequest : ApiRequest
    {
        public StatusItemStateEventGetRequest(StatusItemStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItemHistoryState
    /// </summary>
    public partial class StatusItemHistoryStateGetRequest : ApiRequest
    {
        public StatusItemHistoryStateGetRequest(StatusItemHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProduct
    /// </summary>
    public partial class SupplierProductGetRequest : ApiRequest
    {
        public SupplierProductGetRequest(SupplierProductUriParameters UriParameters, SupplierProductGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SupplierProductGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class SupplierProduct
    /// </summary>
    public partial class SupplierProductPutRequest : ApiRequest
    {
        public SupplierProductPutRequest(SupplierProductUriParameters UriParameters, CreateSupplierProductDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateSupplierProductDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class SupplierProduct
    /// </summary>
    public partial class SupplierProductPatchRequest : ApiRequest
    {
        public SupplierProductPatchRequest(SupplierProductUriParameters UriParameters, MergePatchSupplierProductDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchSupplierProductDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class SupplierProduct
    /// </summary>
    public partial class SupplierProductDeleteRequest : ApiRequest
    {
        public SupplierProductDeleteRequest(SupplierProductUriParameters UriParameters, SupplierProductDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SupplierProductDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProducts
    /// </summary>
    public partial class SupplierProductsGetRequest : ApiRequest
    {
        public SupplierProductsGetRequest(SupplierProductsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SupplierProductsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProductsCount
    /// </summary>
    public partial class SupplierProductsCountGetRequest : ApiRequest
    {
        public SupplierProductsCountGetRequest(SupplierProductsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SupplierProductsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProductStateEvent
    /// </summary>
    public partial class SupplierProductStateEventGetRequest : ApiRequest
    {
        public SupplierProductStateEventGetRequest(SupplierProductStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProductHistoryState
    /// </summary>
    public partial class SupplierProductHistoryStateGetRequest : ApiRequest
    {
        public SupplierProductHistoryStateGetRequest(SupplierProductHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Warehouse
    /// </summary>
    public partial class WarehouseGetRequest : ApiRequest
    {
        public WarehouseGetRequest(WarehouseUriParameters UriParameters, WarehouseGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehouseGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Warehouse
    /// </summary>
    public partial class WarehousePutRequest : ApiRequest
    {
        public WarehousePutRequest(WarehouseUriParameters UriParameters, CreateWarehouseDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateWarehouseDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Warehouse
    /// </summary>
    public partial class WarehousePatchRequest : ApiRequest
    {
        public WarehousePatchRequest(WarehouseUriParameters UriParameters, MergePatchWarehouseDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchWarehouseDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Warehouse
    /// </summary>
    public partial class WarehouseDeleteRequest : ApiRequest
    {
        public WarehouseDeleteRequest(WarehouseUriParameters UriParameters, WarehouseDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehouseDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Warehouses
    /// </summary>
    public partial class WarehousesGetRequest : ApiRequest
    {
        public WarehousesGetRequest(WarehousesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehousesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehousesCount
    /// </summary>
    public partial class WarehousesCountGetRequest : ApiRequest
    {
        public WarehousesCountGetRequest(WarehousesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehousesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehouseStateEvent
    /// </summary>
    public partial class WarehouseStateEventGetRequest : ApiRequest
    {
        public WarehouseStateEventGetRequest(WarehouseStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehouseHistoryState
    /// </summary>
    public partial class WarehouseHistoryStateGetRequest : ApiRequest
    {
        public WarehouseHistoryStateGetRequest(WarehouseHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Locator
    /// </summary>
    public partial class LocatorGetRequest : ApiRequest
    {
        public LocatorGetRequest(LocatorUriParameters UriParameters, LocatorGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Locator
    /// </summary>
    public partial class LocatorPutRequest : ApiRequest
    {
        public LocatorPutRequest(LocatorUriParameters UriParameters, CreateLocatorDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateLocatorDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Locator
    /// </summary>
    public partial class LocatorPatchRequest : ApiRequest
    {
        public LocatorPatchRequest(LocatorUriParameters UriParameters, MergePatchLocatorDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchLocatorDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Locator
    /// </summary>
    public partial class LocatorDeleteRequest : ApiRequest
    {
        public LocatorDeleteRequest(LocatorUriParameters UriParameters, LocatorDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Locators
    /// </summary>
    public partial class LocatorsGetRequest : ApiRequest
    {
        public LocatorsGetRequest(LocatorsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorsCount
    /// </summary>
    public partial class LocatorsCountGetRequest : ApiRequest
    {
        public LocatorsCountGetRequest(LocatorsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorStateEvent
    /// </summary>
    public partial class LocatorStateEventGetRequest : ApiRequest
    {
        public LocatorStateEventGetRequest(LocatorStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorHistoryState
    /// </summary>
    public partial class LocatorHistoryStateGetRequest : ApiRequest
    {
        public LocatorHistoryStateGetRequest(LocatorHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstanceGetRequest : ApiRequest
    {
        public AttributeSetInstanceGetRequest(AttributeSetInstanceUriParameters UriParameters, AttributeSetInstanceGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstancePutRequest : ApiRequest
    {
        public AttributeSetInstancePutRequest(AttributeSetInstanceUriParameters UriParameters, CreateAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstancePatchRequest : ApiRequest
    {
        public AttributeSetInstancePatchRequest(AttributeSetInstanceUriParameters UriParameters, MergePatchAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstanceDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceDeleteRequest(AttributeSetInstanceUriParameters UriParameters, AttributeSetInstanceDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstances
    /// </summary>
    public partial class AttributeSetInstancesGetRequest : ApiRequest
    {
        public AttributeSetInstancesGetRequest(AttributeSetInstancesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstancesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class AttributeSetInstances
    /// </summary>
    public partial class AttributeSetInstancesPostRequest : ApiRequest
    {
        public AttributeSetInstancesPostRequest(CreateAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstancesCount
    /// </summary>
    public partial class AttributeSetInstancesCountGetRequest : ApiRequest
    {
        public AttributeSetInstancesCountGetRequest(AttributeSetInstancesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstancesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceStateEvent
    /// </summary>
    public partial class AttributeSetInstanceStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceStateEventGetRequest(AttributeSetInstanceStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceHistoryState
    /// </summary>
    public partial class AttributeSetInstanceHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceHistoryStateGetRequest(AttributeSetInstanceHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupGetRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, AttributeSetInstanceExtensionFieldGroupGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupPutRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupPutRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, CreateAttributeSetInstanceExtensionFieldGroupDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceExtensionFieldGroupDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupPatchRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupPatchRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, MergePatchAttributeSetInstanceExtensionFieldGroupDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceExtensionFieldGroupDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupDeleteRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, AttributeSetInstanceExtensionFieldGroupDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroups
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupsGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupsGetRequest(AttributeSetInstanceExtensionFieldGroupsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupsCount
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupsCountGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupsCountGetRequest(AttributeSetInstanceExtensionFieldGroupsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupStateEvent
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupStateEventGetRequest(AttributeSetInstanceExtensionFieldGroupStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupHistoryState
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest(AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionField
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGetRequest(AttributeSetInstanceExtensionFieldUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvo
    /// </summary>
    public partial class AttributeValueMvoGetRequest : ApiRequest
    {
        public AttributeValueMvoGetRequest(AttributeValueMvoUriParameters UriParameters, AttributeValueMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeValueMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeValueMvo
    /// </summary>
    public partial class AttributeValueMvoPutRequest : ApiRequest
    {
        public AttributeValueMvoPutRequest(AttributeValueMvoUriParameters UriParameters, CreateAttributeValueMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeValueMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeValueMvo
    /// </summary>
    public partial class AttributeValueMvoPatchRequest : ApiRequest
    {
        public AttributeValueMvoPatchRequest(AttributeValueMvoUriParameters UriParameters, MergePatchAttributeValueMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeValueMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeValueMvo
    /// </summary>
    public partial class AttributeValueMvoDeleteRequest : ApiRequest
    {
        public AttributeValueMvoDeleteRequest(AttributeValueMvoUriParameters UriParameters, AttributeValueMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeValueMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvos
    /// </summary>
    public partial class AttributeValueMvosGetRequest : ApiRequest
    {
        public AttributeValueMvosGetRequest(AttributeValueMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeValueMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvosCount
    /// </summary>
    public partial class AttributeValueMvosCountGetRequest : ApiRequest
    {
        public AttributeValueMvosCountGetRequest(AttributeValueMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeValueMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvoStateEvent
    /// </summary>
    public partial class AttributeValueMvoStateEventGetRequest : ApiRequest
    {
        public AttributeValueMvoStateEventGetRequest(AttributeValueMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvoHistoryState
    /// </summary>
    public partial class AttributeValueMvoHistoryStateGetRequest : ApiRequest
    {
        public AttributeValueMvoHistoryStateGetRequest(AttributeValueMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvo
    /// </summary>
    public partial class AttributeUseMvoGetRequest : ApiRequest
    {
        public AttributeUseMvoGetRequest(AttributeUseMvoUriParameters UriParameters, AttributeUseMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeUseMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeUseMvo
    /// </summary>
    public partial class AttributeUseMvoPutRequest : ApiRequest
    {
        public AttributeUseMvoPutRequest(AttributeUseMvoUriParameters UriParameters, CreateAttributeUseMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeUseMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeUseMvo
    /// </summary>
    public partial class AttributeUseMvoPatchRequest : ApiRequest
    {
        public AttributeUseMvoPatchRequest(AttributeUseMvoUriParameters UriParameters, MergePatchAttributeUseMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeUseMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeUseMvo
    /// </summary>
    public partial class AttributeUseMvoDeleteRequest : ApiRequest
    {
        public AttributeUseMvoDeleteRequest(AttributeUseMvoUriParameters UriParameters, AttributeUseMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeUseMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvos
    /// </summary>
    public partial class AttributeUseMvosGetRequest : ApiRequest
    {
        public AttributeUseMvosGetRequest(AttributeUseMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeUseMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvosCount
    /// </summary>
    public partial class AttributeUseMvosCountGetRequest : ApiRequest
    {
        public AttributeUseMvosCountGetRequest(AttributeUseMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeUseMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvoStateEvent
    /// </summary>
    public partial class AttributeUseMvoStateEventGetRequest : ApiRequest
    {
        public AttributeUseMvoStateEventGetRequest(AttributeUseMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvoHistoryState
    /// </summary>
    public partial class AttributeUseMvoHistoryStateGetRequest : ApiRequest
    {
        public AttributeUseMvoHistoryStateGetRequest(AttributeUseMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvo
    /// </summary>
    public partial class InOutLineMvoGetRequest : ApiRequest
    {
        public InOutLineMvoGetRequest(InOutLineMvoUriParameters UriParameters, InOutLineMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutLineMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InOutLineMvo
    /// </summary>
    public partial class InOutLineMvoPutRequest : ApiRequest
    {
        public InOutLineMvoPutRequest(InOutLineMvoUriParameters UriParameters, CreateInOutLineMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInOutLineMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InOutLineMvo
    /// </summary>
    public partial class InOutLineMvoPatchRequest : ApiRequest
    {
        public InOutLineMvoPatchRequest(InOutLineMvoUriParameters UriParameters, MergePatchInOutLineMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInOutLineMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InOutLineMvo
    /// </summary>
    public partial class InOutLineMvoDeleteRequest : ApiRequest
    {
        public InOutLineMvoDeleteRequest(InOutLineMvoUriParameters UriParameters, InOutLineMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutLineMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvos
    /// </summary>
    public partial class InOutLineMvosGetRequest : ApiRequest
    {
        public InOutLineMvosGetRequest(InOutLineMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutLineMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvosCount
    /// </summary>
    public partial class InOutLineMvosCountGetRequest : ApiRequest
    {
        public InOutLineMvosCountGetRequest(InOutLineMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutLineMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvoStateEvent
    /// </summary>
    public partial class InOutLineMvoStateEventGetRequest : ApiRequest
    {
        public InOutLineMvoStateEventGetRequest(InOutLineMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvoHistoryState
    /// </summary>
    public partial class InOutLineMvoHistoryStateGetRequest : ApiRequest
    {
        public InOutLineMvoHistoryStateGetRequest(InOutLineMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemEntryMvo
    /// </summary>
    public partial class InventoryItemEntryMvoGetRequest : ApiRequest
    {
        public InventoryItemEntryMvoGetRequest(InventoryItemEntryMvoUriParameters UriParameters, InventoryItemEntryMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemEntryMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemEntryMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InventoryItemEntryMvo
    /// </summary>
    public partial class InventoryItemEntryMvoPutRequest : ApiRequest
    {
        public InventoryItemEntryMvoPutRequest(InventoryItemEntryMvoUriParameters UriParameters, CreateInventoryItemEntryMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInventoryItemEntryMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemEntryMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InventoryItemEntryMvo
    /// </summary>
    public partial class InventoryItemEntryMvoPatchRequest : ApiRequest
    {
        public InventoryItemEntryMvoPatchRequest(InventoryItemEntryMvoUriParameters UriParameters, MergePatchInventoryItemEntryMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInventoryItemEntryMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemEntryMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InventoryItemEntryMvo
    /// </summary>
    public partial class InventoryItemEntryMvoDeleteRequest : ApiRequest
    {
        public InventoryItemEntryMvoDeleteRequest(InventoryItemEntryMvoUriParameters UriParameters, InventoryItemEntryMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemEntryMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemEntryMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemEntryMvos
    /// </summary>
    public partial class InventoryItemEntryMvosGetRequest : ApiRequest
    {
        public InventoryItemEntryMvosGetRequest(InventoryItemEntryMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemEntryMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemEntryMvosCount
    /// </summary>
    public partial class InventoryItemEntryMvosCountGetRequest : ApiRequest
    {
        public InventoryItemEntryMvosCountGetRequest(InventoryItemEntryMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemEntryMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemEntryMvoStateEvent
    /// </summary>
    public partial class InventoryItemEntryMvoStateEventGetRequest : ApiRequest
    {
        public InventoryItemEntryMvoStateEventGetRequest(InventoryItemEntryMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemEntryMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemEntryMvoHistoryState
    /// </summary>
    public partial class InventoryItemEntryMvoHistoryStateGetRequest : ApiRequest
    {
        public InventoryItemEntryMvoHistoryStateGetRequest(InventoryItemEntryMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemEntryMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemEntryMvo
    /// </summary>
    public partial class SellableInventoryItemEntryMvoGetRequest : ApiRequest
    {
        public SellableInventoryItemEntryMvoGetRequest(SellableInventoryItemEntryMvoUriParameters UriParameters, SellableInventoryItemEntryMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemEntryMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemEntryMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class SellableInventoryItemEntryMvo
    /// </summary>
    public partial class SellableInventoryItemEntryMvoPutRequest : ApiRequest
    {
        public SellableInventoryItemEntryMvoPutRequest(SellableInventoryItemEntryMvoUriParameters UriParameters, CreateSellableInventoryItemEntryMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateSellableInventoryItemEntryMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemEntryMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class SellableInventoryItemEntryMvo
    /// </summary>
    public partial class SellableInventoryItemEntryMvoPatchRequest : ApiRequest
    {
        public SellableInventoryItemEntryMvoPatchRequest(SellableInventoryItemEntryMvoUriParameters UriParameters, MergePatchSellableInventoryItemEntryMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchSellableInventoryItemEntryMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemEntryMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class SellableInventoryItemEntryMvo
    /// </summary>
    public partial class SellableInventoryItemEntryMvoDeleteRequest : ApiRequest
    {
        public SellableInventoryItemEntryMvoDeleteRequest(SellableInventoryItemEntryMvoUriParameters UriParameters, SellableInventoryItemEntryMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemEntryMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemEntryMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemEntryMvos
    /// </summary>
    public partial class SellableInventoryItemEntryMvosGetRequest : ApiRequest
    {
        public SellableInventoryItemEntryMvosGetRequest(SellableInventoryItemEntryMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemEntryMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemEntryMvosCount
    /// </summary>
    public partial class SellableInventoryItemEntryMvosCountGetRequest : ApiRequest
    {
        public SellableInventoryItemEntryMvosCountGetRequest(SellableInventoryItemEntryMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemEntryMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemEntryMvoStateEvent
    /// </summary>
    public partial class SellableInventoryItemEntryMvoStateEventGetRequest : ApiRequest
    {
        public SellableInventoryItemEntryMvoStateEventGetRequest(SellableInventoryItemEntryMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemEntryMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemEntryMvoHistoryState
    /// </summary>
    public partial class SellableInventoryItemEntryMvoHistoryStateGetRequest : ApiRequest
    {
        public SellableInventoryItemEntryMvoHistoryStateGetRequest(SellableInventoryItemEntryMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemEntryMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoGetRequest(AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters, AttributeSetInstanceExtensionFieldMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoPutRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoPutRequest(AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters, CreateAttributeSetInstanceExtensionFieldMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceExtensionFieldMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoPatchRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoPatchRequest(AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters, MergePatchAttributeSetInstanceExtensionFieldMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceExtensionFieldMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoDeleteRequest(AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters, AttributeSetInstanceExtensionFieldMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvos
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvosGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvosGetRequest(AttributeSetInstanceExtensionFieldMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvosCount
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvosCountGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvosCountGetRequest(AttributeSetInstanceExtensionFieldMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvoStateEvent
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoStateEventGetRequest(AttributeSetInstanceExtensionFieldMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvoHistoryState
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoHistoryStateGetRequest(AttributeSetInstanceExtensionFieldMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationTrees
    /// </summary>
    public partial class OrganizationTreesGetRequest : ApiRequest
    {
        public OrganizationTreesGetRequest(OrganizationTreesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationTreesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorTrees
    /// </summary>
    public partial class LocatorTreesGetRequest : ApiRequest
    {
        public LocatorTreesGetRequest(LocatorTreesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorTreesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Response object for method Get of class Attribute
    /// </summary>

    public partial class AttributeGetResponse : ApiResponse
    {


	    private AttributeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateDto)new XmlSerializer(typeof(AttributeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Attributes
    /// </summary>

    public partial class AttributesGetResponse : ApiResponse
    {


	    private IList<AttributeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeStateDto>)new XmlSerializer(typeof(IList<AttributeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeStateEvent
    /// </summary>

    public partial class AttributeStateEventGetResponse : ApiResponse
    {


	    private AttributeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeHistoryState
    /// </summary>

    public partial class AttributeHistoryStateGetResponse : ApiResponse
    {


	    private AttributeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateDto)new XmlSerializer(typeof(AttributeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValue
    /// </summary>

    public partial class AttributeValueGetResponse : ApiResponse
    {


	    private AttributeValueStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueStateDto)new XmlSerializer(typeof(AttributeValueStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSet
    /// </summary>

    public partial class AttributeSetGetResponse : ApiResponse
    {


	    private AttributeSetStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateDto)new XmlSerializer(typeof(AttributeSetStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSets
    /// </summary>

    public partial class AttributeSetsGetResponse : ApiResponse
    {


	    private IList<AttributeSetStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetStateDto>)new XmlSerializer(typeof(IList<AttributeSetStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetStateEvent
    /// </summary>

    public partial class AttributeSetStateEventGetResponse : ApiResponse
    {


	    private AttributeSetStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetHistoryState
    /// </summary>

    public partial class AttributeSetHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateDto)new XmlSerializer(typeof(AttributeSetStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUse
    /// </summary>

    public partial class AttributeUseGetResponse : ApiResponse
    {


	    private AttributeUseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseStateDto)new XmlSerializer(typeof(AttributeUseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DocumentType
    /// </summary>

    public partial class DocumentTypeGetResponse : ApiResponse
    {


	    private DocumentTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DocumentTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DocumentTypeStateDto)new XmlSerializer(typeof(DocumentTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DocumentTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DocumentTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DocumentTypes
    /// </summary>

    public partial class DocumentTypesGetResponse : ApiResponse
    {


	    private IList<DocumentTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<DocumentTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<DocumentTypeStateDto>)new XmlSerializer(typeof(IList<DocumentTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<DocumentTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<DocumentTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DocumentTypeStateEvent
    /// </summary>

    public partial class DocumentTypeStateEventGetResponse : ApiResponse
    {


	    private DocumentTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DocumentTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DocumentTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(DocumentTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DocumentTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DocumentTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DocumentTypeHistoryState
    /// </summary>

    public partial class DocumentTypeHistoryStateGetResponse : ApiResponse
    {


	    private DocumentTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DocumentTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DocumentTypeStateDto)new XmlSerializer(typeof(DocumentTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DocumentTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DocumentTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOut
    /// </summary>

    public partial class InOutGetResponse : ApiResponse
    {


	    private InOutStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateDto)new XmlSerializer(typeof(InOutStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOuts
    /// </summary>

    public partial class InOutsGetResponse : ApiResponse
    {


	    private IList<InOutStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InOutStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InOutStateDto>)new XmlSerializer(typeof(IList<InOutStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InOutStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InOutStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutStateEvent
    /// </summary>

    public partial class InOutStateEventGetResponse : ApiResponse
    {


	    private InOutStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InOutStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutHistoryState
    /// </summary>

    public partial class InOutHistoryStateGetResponse : ApiResponse
    {


	    private InOutStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateDto)new XmlSerializer(typeof(InOutStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLine
    /// </summary>

    public partial class InOutLineGetResponse : ApiResponse
    {


	    private InOutLineStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineStateDto)new XmlSerializer(typeof(InOutLineStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItem
    /// </summary>

    public partial class InventoryItemGetResponse : ApiResponse
    {


	    private InventoryItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemStateDto)new XmlSerializer(typeof(InventoryItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItems
    /// </summary>

    public partial class InventoryItemsGetResponse : ApiResponse
    {


	    private IList<InventoryItemStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InventoryItemStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InventoryItemStateDto>)new XmlSerializer(typeof(IList<InventoryItemStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InventoryItemStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InventoryItemStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemStateEvent
    /// </summary>

    public partial class InventoryItemStateEventGetResponse : ApiResponse
    {


	    private InventoryItemStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InventoryItemStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemHistoryState
    /// </summary>

    public partial class InventoryItemHistoryStateGetResponse : ApiResponse
    {


	    private InventoryItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemStateDto)new XmlSerializer(typeof(InventoryItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemEntry
    /// </summary>

    public partial class InventoryItemEntryGetResponse : ApiResponse
    {


	    private InventoryItemEntryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemEntryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemEntryStateDto)new XmlSerializer(typeof(InventoryItemEntryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemEntryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemEntryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItem
    /// </summary>

    public partial class SellableInventoryItemGetResponse : ApiResponse
    {


	    private SellableInventoryItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemStateDto)new XmlSerializer(typeof(SellableInventoryItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItems
    /// </summary>

    public partial class SellableInventoryItemsGetResponse : ApiResponse
    {


	    private IList<SellableInventoryItemStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<SellableInventoryItemStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<SellableInventoryItemStateDto>)new XmlSerializer(typeof(IList<SellableInventoryItemStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<SellableInventoryItemStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<SellableInventoryItemStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemStateEvent
    /// </summary>

    public partial class SellableInventoryItemStateEventGetResponse : ApiResponse
    {


	    private SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemHistoryState
    /// </summary>

    public partial class SellableInventoryItemHistoryStateGetResponse : ApiResponse
    {


	    private SellableInventoryItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemStateDto)new XmlSerializer(typeof(SellableInventoryItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemEntry
    /// </summary>

    public partial class SellableInventoryItemEntryGetResponse : ApiResponse
    {


	    private SellableInventoryItemEntryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemEntryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemEntryStateDto)new XmlSerializer(typeof(SellableInventoryItemEntryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemEntryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemEntryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPostingRule
    /// </summary>

    public partial class InventoryPostingRuleGetResponse : ApiResponse
    {


	    private InventoryPostingRuleStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPostingRuleStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPostingRuleStateDto)new XmlSerializer(typeof(InventoryPostingRuleStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPostingRuleStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPostingRuleStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPostingRules
    /// </summary>

    public partial class InventoryPostingRulesGetResponse : ApiResponse
    {


	    private IList<InventoryPostingRuleStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InventoryPostingRuleStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InventoryPostingRuleStateDto>)new XmlSerializer(typeof(IList<InventoryPostingRuleStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InventoryPostingRuleStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InventoryPostingRuleStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPostingRuleStateEvent
    /// </summary>

    public partial class InventoryPostingRuleStateEventGetResponse : ApiResponse
    {


	    private InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPostingRuleHistoryState
    /// </summary>

    public partial class InventoryPostingRuleHistoryStateGetResponse : ApiResponse
    {


	    private InventoryPostingRuleStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPostingRuleStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPostingRuleStateDto)new XmlSerializer(typeof(InventoryPostingRuleStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPostingRuleStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPostingRuleStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPRTriggered
    /// </summary>

    public partial class InventoryPRTriggeredGetResponse : ApiResponse
    {


	    private InventoryPRTriggeredStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPRTriggeredStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPRTriggeredStateDto)new XmlSerializer(typeof(InventoryPRTriggeredStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPRTriggeredStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPRTriggeredStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPRTriggereds
    /// </summary>

    public partial class InventoryPRTriggeredsGetResponse : ApiResponse
    {


	    private IList<InventoryPRTriggeredStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InventoryPRTriggeredStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InventoryPRTriggeredStateDto>)new XmlSerializer(typeof(IList<InventoryPRTriggeredStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InventoryPRTriggeredStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InventoryPRTriggeredStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPRTriggeredStateEvent
    /// </summary>

    public partial class InventoryPRTriggeredStateEventGetResponse : ApiResponse
    {


	    private InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPRTriggeredHistoryState
    /// </summary>

    public partial class InventoryPRTriggeredHistoryStateGetResponse : ApiResponse
    {


	    private InventoryPRTriggeredStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPRTriggeredStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPRTriggeredStateDto)new XmlSerializer(typeof(InventoryPRTriggeredStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPRTriggeredStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPRTriggeredStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementType
    /// </summary>

    public partial class MovementTypeGetResponse : ApiResponse
    {


	    private MovementTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementTypeStateDto)new XmlSerializer(typeof(MovementTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementTypes
    /// </summary>

    public partial class MovementTypesGetResponse : ApiResponse
    {


	    private IList<MovementTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<MovementTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<MovementTypeStateDto>)new XmlSerializer(typeof(IList<MovementTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<MovementTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<MovementTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementTypeStateEvent
    /// </summary>

    public partial class MovementTypeStateEventGetResponse : ApiResponse
    {


	    private MovementTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(MovementTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementTypeHistoryState
    /// </summary>

    public partial class MovementTypeHistoryStateGetResponse : ApiResponse
    {


	    private MovementTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementTypeStateDto)new XmlSerializer(typeof(MovementTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderHeader
    /// </summary>

    public partial class OrderHeaderGetResponse : ApiResponse
    {


	    private OrderHeaderStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderHeaderStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderHeaderStateDto)new XmlSerializer(typeof(OrderHeaderStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderHeaderStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderHeaderStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderHeaders
    /// </summary>

    public partial class OrderHeadersGetResponse : ApiResponse
    {


	    private IList<OrderHeaderStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrderHeaderStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrderHeaderStateDto>)new XmlSerializer(typeof(IList<OrderHeaderStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrderHeaderStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrderHeaderStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderHeaderStateEvent
    /// </summary>

    public partial class OrderHeaderStateEventGetResponse : ApiResponse
    {


	    private OrderHeaderStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderHeaderStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderHeaderStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrderHeaderStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderHeaderStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderHeaderStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderHeaderHistoryState
    /// </summary>

    public partial class OrderHeaderHistoryStateGetResponse : ApiResponse
    {


	    private OrderHeaderStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderHeaderStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderHeaderStateDto)new XmlSerializer(typeof(OrderHeaderStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderHeaderStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderHeaderStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItem
    /// </summary>

    public partial class OrderItemGetResponse : ApiResponse
    {


	    private OrderItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderItemStateDto)new XmlSerializer(typeof(OrderItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItems
    /// </summary>

    public partial class OrderItemsGetResponse : ApiResponse
    {


	    private IList<OrderItemStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrderItemStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrderItemStateDto>)new XmlSerializer(typeof(IList<OrderItemStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrderItemStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrderItemStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItemStateEvent
    /// </summary>

    public partial class OrderItemStateEventGetResponse : ApiResponse
    {


	    private OrderItemStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderItemStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderItemStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrderItemStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderItemStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderItemStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItemHistoryState
    /// </summary>

    public partial class OrderItemHistoryStateGetResponse : ApiResponse
    {


	    private OrderItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderItemStateDto)new XmlSerializer(typeof(OrderItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipment
    /// </summary>

    public partial class OrderShipmentGetResponse : ApiResponse
    {


	    private OrderShipmentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderShipmentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderShipmentStateDto)new XmlSerializer(typeof(OrderShipmentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderShipmentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderShipmentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipments
    /// </summary>

    public partial class OrderShipmentsGetResponse : ApiResponse
    {


	    private IList<OrderShipmentStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrderShipmentStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrderShipmentStateDto>)new XmlSerializer(typeof(IList<OrderShipmentStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrderShipmentStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrderShipmentStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipmentStateEvent
    /// </summary>

    public partial class OrderShipmentStateEventGetResponse : ApiResponse
    {


	    private OrderShipmentStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderShipmentStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderShipmentStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrderShipmentStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderShipmentStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderShipmentStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipmentHistoryState
    /// </summary>

    public partial class OrderShipmentHistoryStateGetResponse : ApiResponse
    {


	    private OrderShipmentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderShipmentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderShipmentStateDto)new XmlSerializer(typeof(OrderShipmentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderShipmentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderShipmentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Organization
    /// </summary>

    public partial class OrganizationGetResponse : ApiResponse
    {


	    private OrganizationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStateDto)new XmlSerializer(typeof(OrganizationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Organizations
    /// </summary>

    public partial class OrganizationsGetResponse : ApiResponse
    {


	    private IList<OrganizationStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStateDto>)new XmlSerializer(typeof(IList<OrganizationStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStateEvent
    /// </summary>

    public partial class OrganizationStateEventGetResponse : ApiResponse
    {


	    private OrganizationStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrganizationStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationHistoryState
    /// </summary>

    public partial class OrganizationHistoryStateGetResponse : ApiResponse
    {


	    private OrganizationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStateDto)new XmlSerializer(typeof(OrganizationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureType
    /// </summary>

    public partial class OrganizationStructureTypeGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateDto)new XmlSerializer(typeof(OrganizationStructureTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypes
    /// </summary>

    public partial class OrganizationStructureTypesGetResponse : ApiResponse
    {


	    private IList<OrganizationStructureTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStructureTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStructureTypeStateDto>)new XmlSerializer(typeof(IList<OrganizationStructureTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStructureTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStructureTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypeStateEvent
    /// </summary>

    public partial class OrganizationStructureTypeStateEventGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypeHistoryState
    /// </summary>

    public partial class OrganizationStructureTypeHistoryStateGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateDto)new XmlSerializer(typeof(OrganizationStructureTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructure
    /// </summary>

    public partial class OrganizationStructureGetResponse : ApiResponse
    {


	    private OrganizationStructureStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateDto)new XmlSerializer(typeof(OrganizationStructureStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructures
    /// </summary>

    public partial class OrganizationStructuresGetResponse : ApiResponse
    {


	    private IList<OrganizationStructureStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStructureStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStructureStateDto>)new XmlSerializer(typeof(IList<OrganizationStructureStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStructureStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStructureStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureStateEvent
    /// </summary>

    public partial class OrganizationStructureStateEventGetResponse : ApiResponse
    {


	    private OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureHistoryState
    /// </summary>

    public partial class OrganizationStructureHistoryStateGetResponse : ApiResponse
    {


	    private OrganizationStructureStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateDto)new XmlSerializer(typeof(OrganizationStructureStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Product
    /// </summary>

    public partial class ProductGetResponse : ApiResponse
    {


	    private ProductStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductStateDto)new XmlSerializer(typeof(ProductStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Products
    /// </summary>

    public partial class ProductsGetResponse : ApiResponse
    {


	    private IList<ProductStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ProductStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ProductStateDto>)new XmlSerializer(typeof(IList<ProductStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ProductStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ProductStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductStateEvent
    /// </summary>

    public partial class ProductStateEventGetResponse : ApiResponse
    {


	    private ProductStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ProductStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductHistoryState
    /// </summary>

    public partial class ProductHistoryStateGetResponse : ApiResponse
    {


	    private ProductStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductStateDto)new XmlSerializer(typeof(ProductStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategory
    /// </summary>

    public partial class ProductCategoryGetResponse : ApiResponse
    {


	    private ProductCategoryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryStateDto)new XmlSerializer(typeof(ProductCategoryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategories
    /// </summary>

    public partial class ProductCategoriesGetResponse : ApiResponse
    {


	    private IList<ProductCategoryStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ProductCategoryStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ProductCategoryStateDto>)new XmlSerializer(typeof(IList<ProductCategoryStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ProductCategoryStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ProductCategoryStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategoryStateEvent
    /// </summary>

    public partial class ProductCategoryStateEventGetResponse : ApiResponse
    {


	    private ProductCategoryStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ProductCategoryStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategoryHistoryState
    /// </summary>

    public partial class ProductCategoryHistoryStateGetResponse : ApiResponse
    {


	    private ProductCategoryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryStateDto)new XmlSerializer(typeof(ProductCategoryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Shipment
    /// </summary>

    public partial class ShipmentGetResponse : ApiResponse
    {


	    private ShipmentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentStateDto)new XmlSerializer(typeof(ShipmentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Shipments
    /// </summary>

    public partial class ShipmentsGetResponse : ApiResponse
    {


	    private IList<ShipmentStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ShipmentStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ShipmentStateDto>)new XmlSerializer(typeof(IList<ShipmentStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ShipmentStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ShipmentStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentStateEvent
    /// </summary>

    public partial class ShipmentStateEventGetResponse : ApiResponse
    {


	    private ShipmentStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ShipmentStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentHistoryState
    /// </summary>

    public partial class ShipmentHistoryStateGetResponse : ApiResponse
    {


	    private ShipmentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentStateDto)new XmlSerializer(typeof(ShipmentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentItem
    /// </summary>

    public partial class ShipmentItemGetResponse : ApiResponse
    {


	    private ShipmentItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentItemStateDto)new XmlSerializer(typeof(ShipmentItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentItems
    /// </summary>

    public partial class ShipmentItemsGetResponse : ApiResponse
    {


	    private IList<ShipmentItemStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ShipmentItemStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ShipmentItemStateDto>)new XmlSerializer(typeof(IList<ShipmentItemStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ShipmentItemStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ShipmentItemStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentItemStateEvent
    /// </summary>

    public partial class ShipmentItemStateEventGetResponse : ApiResponse
    {


	    private ShipmentItemStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentItemStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentItemStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ShipmentItemStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentItemStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentItemStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentItemHistoryState
    /// </summary>

    public partial class ShipmentItemHistoryStateGetResponse : ApiResponse
    {


	    private ShipmentItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentItemStateDto)new XmlSerializer(typeof(ShipmentItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentType
    /// </summary>

    public partial class ShipmentTypeGetResponse : ApiResponse
    {


	    private ShipmentTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentTypeStateDto)new XmlSerializer(typeof(ShipmentTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentTypes
    /// </summary>

    public partial class ShipmentTypesGetResponse : ApiResponse
    {


	    private IList<ShipmentTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ShipmentTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ShipmentTypeStateDto>)new XmlSerializer(typeof(IList<ShipmentTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ShipmentTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ShipmentTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentTypeStateEvent
    /// </summary>

    public partial class ShipmentTypeStateEventGetResponse : ApiResponse
    {


	    private ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentTypeHistoryState
    /// </summary>

    public partial class ShipmentTypeHistoryStateGetResponse : ApiResponse
    {


	    private ShipmentTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentTypeStateDto)new XmlSerializer(typeof(ShipmentTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class StatusItem
    /// </summary>

    public partial class StatusItemGetResponse : ApiResponse
    {


	    private StatusItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public StatusItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (StatusItemStateDto)new XmlSerializer(typeof(StatusItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<StatusItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<StatusItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class StatusItems
    /// </summary>

    public partial class StatusItemsGetResponse : ApiResponse
    {


	    private IList<StatusItemStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<StatusItemStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<StatusItemStateDto>)new XmlSerializer(typeof(IList<StatusItemStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<StatusItemStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<StatusItemStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class StatusItemStateEvent
    /// </summary>

    public partial class StatusItemStateEventGetResponse : ApiResponse
    {


	    private StatusItemStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public StatusItemStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (StatusItemStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(StatusItemStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<StatusItemStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<StatusItemStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class StatusItemHistoryState
    /// </summary>

    public partial class StatusItemHistoryStateGetResponse : ApiResponse
    {


	    private StatusItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public StatusItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (StatusItemStateDto)new XmlSerializer(typeof(StatusItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<StatusItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<StatusItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SupplierProduct
    /// </summary>

    public partial class SupplierProductGetResponse : ApiResponse
    {


	    private SupplierProductStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SupplierProductStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SupplierProductStateDto)new XmlSerializer(typeof(SupplierProductStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SupplierProductStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SupplierProductStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SupplierProducts
    /// </summary>

    public partial class SupplierProductsGetResponse : ApiResponse
    {


	    private IList<SupplierProductStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<SupplierProductStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<SupplierProductStateDto>)new XmlSerializer(typeof(IList<SupplierProductStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<SupplierProductStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<SupplierProductStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SupplierProductStateEvent
    /// </summary>

    public partial class SupplierProductStateEventGetResponse : ApiResponse
    {


	    private SupplierProductStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SupplierProductStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SupplierProductStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(SupplierProductStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SupplierProductStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SupplierProductStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SupplierProductHistoryState
    /// </summary>

    public partial class SupplierProductHistoryStateGetResponse : ApiResponse
    {


	    private SupplierProductStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SupplierProductStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SupplierProductStateDto)new XmlSerializer(typeof(SupplierProductStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SupplierProductStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SupplierProductStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Warehouse
    /// </summary>

    public partial class WarehouseGetResponse : ApiResponse
    {


	    private WarehouseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateDto)new XmlSerializer(typeof(WarehouseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Warehouses
    /// </summary>

    public partial class WarehousesGetResponse : ApiResponse
    {


	    private IList<WarehouseStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<WarehouseStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<WarehouseStateDto>)new XmlSerializer(typeof(IList<WarehouseStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<WarehouseStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<WarehouseStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class WarehouseStateEvent
    /// </summary>

    public partial class WarehouseStateEventGetResponse : ApiResponse
    {


	    private WarehouseStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(WarehouseStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class WarehouseHistoryState
    /// </summary>

    public partial class WarehouseHistoryStateGetResponse : ApiResponse
    {


	    private WarehouseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateDto)new XmlSerializer(typeof(WarehouseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Locator
    /// </summary>

    public partial class LocatorGetResponse : ApiResponse
    {


	    private LocatorStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateDto)new XmlSerializer(typeof(LocatorStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Locators
    /// </summary>

    public partial class LocatorsGetResponse : ApiResponse
    {


	    private IList<LocatorStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<LocatorStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<LocatorStateDto>)new XmlSerializer(typeof(IList<LocatorStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<LocatorStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<LocatorStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorStateEvent
    /// </summary>

    public partial class LocatorStateEventGetResponse : ApiResponse
    {


	    private LocatorStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(LocatorStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorHistoryState
    /// </summary>

    public partial class LocatorHistoryStateGetResponse : ApiResponse
    {


	    private LocatorStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateDto)new XmlSerializer(typeof(LocatorStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstance
    /// </summary>

    public partial class AttributeSetInstanceGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateDto)new XmlSerializer(typeof(AttributeSetInstanceStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstances
    /// </summary>

    public partial class AttributeSetInstancesGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceStateEvent
    /// </summary>

    public partial class AttributeSetInstanceStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceHistoryState
    /// </summary>

    public partial class AttributeSetInstanceHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateDto)new XmlSerializer(typeof(AttributeSetInstanceStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroups
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupsGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceExtensionFieldGroupStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceExtensionFieldGroupStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceExtensionFieldGroupStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceExtensionFieldGroupStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldGroupStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldGroupStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroupStateEvent
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroupHistoryState
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionField
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValueMvo
    /// </summary>

    public partial class AttributeValueMvoGetResponse : ApiResponse
    {


	    private AttributeValueMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueMvoStateDto)new XmlSerializer(typeof(AttributeValueMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValueMvos
    /// </summary>

    public partial class AttributeValueMvosGetResponse : ApiResponse
    {


	    private IList<AttributeValueMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeValueMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeValueMvoStateDto>)new XmlSerializer(typeof(IList<AttributeValueMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeValueMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeValueMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValueMvoStateEvent
    /// </summary>

    public partial class AttributeValueMvoStateEventGetResponse : ApiResponse
    {


	    private AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValueMvoHistoryState
    /// </summary>

    public partial class AttributeValueMvoHistoryStateGetResponse : ApiResponse
    {


	    private AttributeValueMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueMvoStateDto)new XmlSerializer(typeof(AttributeValueMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUseMvo
    /// </summary>

    public partial class AttributeUseMvoGetResponse : ApiResponse
    {


	    private AttributeUseMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseMvoStateDto)new XmlSerializer(typeof(AttributeUseMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUseMvos
    /// </summary>

    public partial class AttributeUseMvosGetResponse : ApiResponse
    {


	    private IList<AttributeUseMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeUseMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeUseMvoStateDto>)new XmlSerializer(typeof(IList<AttributeUseMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeUseMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeUseMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUseMvoStateEvent
    /// </summary>

    public partial class AttributeUseMvoStateEventGetResponse : ApiResponse
    {


	    private AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUseMvoHistoryState
    /// </summary>

    public partial class AttributeUseMvoHistoryStateGetResponse : ApiResponse
    {


	    private AttributeUseMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseMvoStateDto)new XmlSerializer(typeof(AttributeUseMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineMvo
    /// </summary>

    public partial class InOutLineMvoGetResponse : ApiResponse
    {


	    private InOutLineMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineMvoStateDto)new XmlSerializer(typeof(InOutLineMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineMvos
    /// </summary>

    public partial class InOutLineMvosGetResponse : ApiResponse
    {


	    private IList<InOutLineMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InOutLineMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InOutLineMvoStateDto>)new XmlSerializer(typeof(IList<InOutLineMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InOutLineMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InOutLineMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineMvoStateEvent
    /// </summary>

    public partial class InOutLineMvoStateEventGetResponse : ApiResponse
    {


	    private InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineMvoHistoryState
    /// </summary>

    public partial class InOutLineMvoHistoryStateGetResponse : ApiResponse
    {


	    private InOutLineMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineMvoStateDto)new XmlSerializer(typeof(InOutLineMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemEntryMvo
    /// </summary>

    public partial class InventoryItemEntryMvoGetResponse : ApiResponse
    {


	    private InventoryItemEntryMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemEntryMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemEntryMvoStateDto)new XmlSerializer(typeof(InventoryItemEntryMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemEntryMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemEntryMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemEntryMvos
    /// </summary>

    public partial class InventoryItemEntryMvosGetResponse : ApiResponse
    {


	    private IList<InventoryItemEntryMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InventoryItemEntryMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InventoryItemEntryMvoStateDto>)new XmlSerializer(typeof(IList<InventoryItemEntryMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InventoryItemEntryMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InventoryItemEntryMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemEntryMvoStateEvent
    /// </summary>

    public partial class InventoryItemEntryMvoStateEventGetResponse : ApiResponse
    {


	    private InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemEntryMvoHistoryState
    /// </summary>

    public partial class InventoryItemEntryMvoHistoryStateGetResponse : ApiResponse
    {


	    private InventoryItemEntryMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemEntryMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemEntryMvoStateDto)new XmlSerializer(typeof(InventoryItemEntryMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemEntryMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemEntryMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemEntryMvo
    /// </summary>

    public partial class SellableInventoryItemEntryMvoGetResponse : ApiResponse
    {


	    private SellableInventoryItemEntryMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemEntryMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemEntryMvoStateDto)new XmlSerializer(typeof(SellableInventoryItemEntryMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemEntryMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemEntryMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemEntryMvos
    /// </summary>

    public partial class SellableInventoryItemEntryMvosGetResponse : ApiResponse
    {


	    private IList<SellableInventoryItemEntryMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<SellableInventoryItemEntryMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<SellableInventoryItemEntryMvoStateDto>)new XmlSerializer(typeof(IList<SellableInventoryItemEntryMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<SellableInventoryItemEntryMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<SellableInventoryItemEntryMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemEntryMvoStateEvent
    /// </summary>

    public partial class SellableInventoryItemEntryMvoStateEventGetResponse : ApiResponse
    {


	    private SellableInventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(SellableInventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemEntryMvoHistoryState
    /// </summary>

    public partial class SellableInventoryItemEntryMvoHistoryStateGetResponse : ApiResponse
    {


	    private SellableInventoryItemEntryMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemEntryMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemEntryMvoStateDto)new XmlSerializer(typeof(SellableInventoryItemEntryMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemEntryMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemEntryMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldMvoGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldMvoStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldMvos
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldMvosGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceExtensionFieldMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceExtensionFieldMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceExtensionFieldMvoStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceExtensionFieldMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldMvoStateEvent
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldMvoStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldMvoHistoryState
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldMvoHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldMvoStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationTrees
    /// </summary>

    public partial class OrganizationTreesGetResponse : ApiResponse
    {


	    private IList<OrganizationStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStateDto>)new XmlSerializer(typeof(IList<OrganizationStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorTrees
    /// </summary>

    public partial class LocatorTreesGetResponse : ApiResponse
    {


	    private IList<LocatorStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<LocatorStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<LocatorStateDto>)new XmlSerializer(typeof(IList<LocatorStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<LocatorStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<LocatorStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class


} // end Models namespace


