// <autogenerated>
//   This file was generated by T4 code generator GenerateRamlClientProxies.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RAML.Api.Core;
//using Raml.Common;
using Dddml.Wms.HttpServices.ClientProxies.Raml.Models;
using Dddml.Wms.Domain.Attribute;
using Dddml.Wms.Domain.AttributeSet;
using Dddml.Wms.Domain.AttributeSetInstance;
using Dddml.Wms.Domain.AttributeSetInstanceExtensionFieldGroup;
using Dddml.Wms.Domain.AttributeSetInstanceExtensionFieldMvo;
using Dddml.Wms.Domain.AttributeUseMvo;
using Dddml.Wms.Domain.AttributeValueMvo;
using Dddml.Wms.Domain.InOut;
using Dddml.Wms.Domain.InOutLineMvo;
using Dddml.Wms.Domain.Locator;
using Dddml.Wms.Domain.Organization;
using Dddml.Wms.Domain.OrganizationStructure;
using Dddml.Wms.Domain.OrganizationStructureType;
using Dddml.Wms.Domain.Warehouse;

namespace Dddml.Wms.HttpServices.ClientProxies.Raml
{
    public partial class Attribute
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Attribute(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeGetResponse> Get(Models.AttributeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributePutRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributePatchRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeDeleteRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Attributes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Attributes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributesGetResponse> Get(Models.AttributesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributesCountGetRequest request)
        {

            var url = "Attributes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeStateEventGetResponse> Get(Models.AttributeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeHistoryStateGetResponse> Get(Models.AttributeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValue
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValue(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueGetResponse> Get(Models.AttributeValueGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{attributeId}/AttributeValues/{value}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.AttributeId == null)
				throw new InvalidOperationException("Uri Parameter AttributeId cannot be null");

            url = url.Replace("{attributeId}", request.UriParameters.AttributeId.ToString());

			if(request.UriParameters.Value == null)
				throw new InvalidOperationException("Uri Parameter Value cannot be null");

            url = url.Replace("{value}", request.UriParameters.Value.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSet
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSet(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetGetResponse> Get(Models.AttributeSetGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetPutRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetPatchRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetDeleteRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSets
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSets(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetsGetResponse> Get(Models.AttributeSetsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetsCountGetRequest request)
        {

            var url = "AttributeSets/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetStateEventGetResponse> Get(Models.AttributeSetStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetHistoryStateGetResponse> Get(Models.AttributeSetHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUse
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUse(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseGetResponse> Get(Models.AttributeUseGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{attributeSetId}/AttributeUses/{attributeId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.AttributeSetId == null)
				throw new InvalidOperationException("Uri Parameter AttributeSetId cannot be null");

            url = url.Replace("{attributeSetId}", request.UriParameters.AttributeSetId.ToString());

			if(request.UriParameters.AttributeId == null)
				throw new InvalidOperationException("Uri Parameter AttributeId cannot be null");

            url = url.Replace("{attributeId}", request.UriParameters.AttributeId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOut
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOut(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutGetResponse> Get(Models.InOutGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InOutPutRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInOutDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InOutPatchRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInOutDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InOutDeleteRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOuts
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOuts(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutsGetResponse> Get(Models.InOutsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InOutsCountGetRequest request)
        {

            var url = "InOuts/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutStateEventGetResponse> Get(Models.InOutStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutHistoryStateGetResponse> Get(Models.InOutHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLine
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLine(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineGetResponse> Get(Models.InOutLineGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{inOutDocumentNumber}/InOutLines/{lineNumber}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.InOutDocumentNumber == null)
				throw new InvalidOperationException("Uri Parameter InOutDocumentNumber cannot be null");

            url = url.Replace("{inOutDocumentNumber}", request.UriParameters.InOutDocumentNumber.ToString());

			if(request.UriParameters.LineNumber == null)
				throw new InvalidOperationException("Uri Parameter LineNumber cannot be null");

            url = url.Replace("{lineNumber}", request.UriParameters.LineNumber.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Organization
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Organization(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationGetResponse> Get(Models.OrganizationGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Organizations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrganizationPutRequest request)
        {

            var url = "Organizations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrganizationDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrganizationPatchRequest request)
        {

            var url = "Organizations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrganizationDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrganizationDeleteRequest request)
        {

            var url = "Organizations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Organizations
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Organizations(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationsGetResponse> Get(Models.OrganizationsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Organizations";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrganizationsCountGetRequest request)
        {

            var url = "Organizations/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStateEventGetResponse> Get(Models.OrganizationStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Organizations/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationHistoryStateGetResponse> Get(Models.OrganizationHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Organizations/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeGetResponse> Get(Models.OrganizationStructureTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrganizationStructureTypePutRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrganizationStructureTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrganizationStructureTypePatchRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrganizationStructureTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrganizationStructureTypeDeleteRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypesGetResponse> Get(Models.OrganizationStructureTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrganizationStructureTypesCountGetRequest request)
        {

            var url = "OrganizationStructureTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeStateEventGetResponse> Get(Models.OrganizationStructureTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeHistoryStateGetResponse> Get(Models.OrganizationStructureTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructure
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructure(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureGetResponse> Get(Models.OrganizationStructureGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructurePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrganizationStructurePutRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrganizationStructureDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructurePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrganizationStructurePatchRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrganizationStructureDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrganizationStructureDeleteRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructures
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructures(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructuresGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructuresGetResponse> Get(Models.OrganizationStructuresGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructuresGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructuresCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructuresCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructuresCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrganizationStructuresCountGetRequest request)
        {

            var url = "OrganizationStructures/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureStateEventGetResponse> Get(Models.OrganizationStructureStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureHistoryStateGetResponse> Get(Models.OrganizationStructureHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Warehouse
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Warehouse(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseGetResponse> Get(Models.WarehouseGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehousePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.WarehousePutRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateWarehouseDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehousePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.WarehousePatchRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchWarehouseDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehouseDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.WarehouseDeleteRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Warehouses
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Warehouses(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehousesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehousesGetResponse> Get(Models.WarehousesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehousesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehousesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehousesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehousesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.WarehousesCountGetRequest request)
        {

            var url = "Warehouses/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehouseStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehouseStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseStateEventGetResponse> Get(Models.WarehouseStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehouseHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehouseHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseHistoryStateGetResponse> Get(Models.WarehouseHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Locator
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Locator(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorGetResponse> Get(Models.LocatorGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.LocatorPutRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateLocatorDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.LocatorPatchRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchLocatorDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.LocatorDeleteRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Locators
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Locators(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorsGetResponse> Get(Models.LocatorsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.LocatorsCountGetRequest request)
        {

            var url = "Locators/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorStateEventGetResponse> Get(Models.LocatorStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorHistoryStateGetResponse> Get(Models.LocatorHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstance
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstance(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceGetResponse> Get(Models.AttributeSetInstanceGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstancePutRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstancePatchRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceDeleteRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstances
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstances(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstancesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstancesGetResponse> Get(Models.AttributeSetInstancesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstancesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancesPostRequest</param>
        public virtual async Task<ApiResponse> Post(Models.AttributeSetInstancesPostRequest request)
        {

            var url = "AttributeSetInstances";

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Post, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstancesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstancesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstancesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstancesCountGetRequest request)
        {

            var url = "AttributeSetInstances/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceStateEventGetResponse> Get(Models.AttributeSetInstanceStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceHistoryStateGetResponse> Get(Models.AttributeSetInstanceHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroup
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroup(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstanceExtensionFieldGroupPutRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceExtensionFieldGroupDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstanceExtensionFieldGroupPatchRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceExtensionFieldGroupDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceExtensionFieldGroupDeleteRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroups
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroups(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupsGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupsCountGetRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupStateEventGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionField
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionField(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{groupId}/AttributeSetInstanceExtensionFields/{index}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.GroupId == null)
				throw new InvalidOperationException("Uri Parameter GroupId cannot be null");

            url = url.Replace("{groupId}", request.UriParameters.GroupId.ToString());

			if(request.UriParameters.Index == null)
				throw new InvalidOperationException("Uri Parameter Index cannot be null");

            url = url.Replace("{index}", request.UriParameters.Index.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueMvoGetResponse> Get(Models.AttributeValueMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeValueMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeValueMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeValueMvoPutRequest request)
        {

            var url = "AttributeValueMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeValueMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeValueMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeValueMvoPatchRequest request)
        {

            var url = "AttributeValueMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeValueMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeValueMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeValueMvoDeleteRequest request)
        {

            var url = "AttributeValueMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueMvosGetResponse> Get(Models.AttributeValueMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeValueMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeValueMvosCountGetRequest request)
        {

            var url = "AttributeValueMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueMvoStateEventGetResponse> Get(Models.AttributeValueMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeValueMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValueMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValueMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueMvoHistoryStateGetResponse> Get(Models.AttributeValueMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeValueMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseMvoGetResponse> Get(Models.AttributeUseMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeUseMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeUseMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeUseMvoPutRequest request)
        {

            var url = "AttributeUseMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeUseMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeUseMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeUseMvoPatchRequest request)
        {

            var url = "AttributeUseMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeUseMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeUseMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeUseMvoDeleteRequest request)
        {

            var url = "AttributeUseMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseMvosGetResponse> Get(Models.AttributeUseMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeUseMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeUseMvosCountGetRequest request)
        {

            var url = "AttributeUseMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseMvoStateEventGetResponse> Get(Models.AttributeUseMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeUseMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUseMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUseMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseMvoHistoryStateGetResponse> Get(Models.AttributeUseMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeUseMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineMvoGetResponse> Get(Models.InOutLineMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOutLineMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutLineMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InOutLineMvoPutRequest request)
        {

            var url = "InOutLineMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInOutLineMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutLineMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InOutLineMvoPatchRequest request)
        {

            var url = "InOutLineMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInOutLineMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutLineMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InOutLineMvoDeleteRequest request)
        {

            var url = "InOutLineMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineMvosGetResponse> Get(Models.InOutLineMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOutLineMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InOutLineMvosCountGetRequest request)
        {

            var url = "InOutLineMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineMvoStateEventGetResponse> Get(Models.InOutLineMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOutLineMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineMvoHistoryStateGetResponse> Get(Models.InOutLineMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOutLineMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvo
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvo(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldMvoGetResponse> Get(Models.AttributeSetInstanceExtensionFieldMvoGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldMvoGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstanceExtensionFieldMvoPutRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceExtensionFieldMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstanceExtensionFieldMvoPatchRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceExtensionFieldMvoDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceExtensionFieldMvoDeleteRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvos
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvos(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvosGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldMvosGetResponse> Get(Models.AttributeSetInstanceExtensionFieldMvosGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldMvosGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvosCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvosCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvosCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstanceExtensionFieldMvosCountGetRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvoStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvoStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldMvoStateEventGetResponse> Get(Models.AttributeSetInstanceExtensionFieldMvoStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldMvoStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldMvoHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldMvoHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldMvoHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldMvoHistoryStateGetResponse> Get(Models.AttributeSetInstanceExtensionFieldMvoHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldMvos/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldMvoHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationTrees
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationTrees(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationTreesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationTreesGetResponse> Get(Models.OrganizationTreesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationTrees";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.ParentId != null)
                    url += "&parentId=" + request.Query.ParentId;
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationTreesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorTrees
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorTrees(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorTreesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorTreesGetResponse> Get(Models.LocatorTreesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "LocatorTrees";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.ParentId != null)
                    url += "&parentId=" + request.Query.ParentId;
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorTreesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    /// <summary>
    /// Main class for grouping root resources. Nested resources are defined as properties. The constructor can optionally receive an URL and HttpClient instance to override the default ones.
    /// </summary>
    public partial class DddmlWmsRamlClient
    {

        //public const string BaseUri = "/api/";

		public SchemaValidationSettings SchemaValidation { get; private set; } 

        protected readonly HttpClient client;

        internal HttpClient Client { get { return client; } }

        public Func<Tuple<string, string>> GetAuthenticationHeaderValue { get; set; }


        public DddmlWmsRamlClient(string endpointUrl)
        {
			if(string.IsNullOrWhiteSpace(endpointUrl))
                throw new ArgumentException("You must specify the endpoint URL", "endpointUrl");

			if (endpointUrl.Contains("{"))
			{
				var regex = new Regex(@"\{([^\}]+)\}");
				var matches = regex.Matches(endpointUrl);
				var parameters = new List<string>();
				foreach (Match match in matches)
				{
					parameters.Add(match.Groups[1].Value);
				}
				throw new InvalidOperationException("Please replace parameter/s " + string.Join(", ", parameters) + " in the URL before passing it to the constructor ");
			}

            client = new HttpClient {BaseAddress = new Uri(endpointUrl)};

            InitSchemaValidation();
        }

        public DddmlWmsRamlClient(HttpClient httpClient)
        {
            if(httpClient.BaseAddress == null)
                throw new InvalidOperationException("You must set the BaseAddress property of the HttpClient instance");

            client = httpClient;

            InitSchemaValidation();
        }

        private void InitSchemaValidation()
        {
            SchemaValidation = new SchemaValidationSettings
            {
                Enabled = true,
                RaiseExceptions = true
            };
        }

        public void SetAuthenticationHeader(HttpRequestMessage req)
        {
            if (this.GetAuthenticationHeaderValue != null)
            {
                var authHeader = this.GetAuthenticationHeaderValue();
                if (authHeader != null)
                {
                    req.Headers.Authorization = new AuthenticationHeaderValue(authHeader.Item1, authHeader.Item2);
                }
            }
        }

        public JsonMediaTypeFormatter GetJsonMediaTypeFormatter()
        {
            var formatter = new JsonMediaTypeFormatter();
            formatter.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
            formatter.SerializerSettings.Formatting = Formatting.None;
            formatter.SerializerSettings.DateFormatHandling = DateFormatHandling.IsoDateFormat;
            formatter.SerializerSettings.Converters.Add(new Dddml.Wms.HttpServices.JsonConverters.LongConverter());
            formatter.SerializerSettings.Converters.Add(new Dddml.Wms.HttpServices.JsonConverters.DecimalConverter());
            formatter.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver();
            return formatter;
        }


        public virtual Attribute Attribute
        {
            get { return new Attribute(this); }
        }
                

        public virtual AttributeSet AttributeSet
        {
            get { return new AttributeSet(this); }
        }
                

        public virtual InOut InOut
        {
            get { return new InOut(this); }
        }
                

        public virtual Organization Organization
        {
            get { return new Organization(this); }
        }
                

        public virtual OrganizationStructureType OrganizationStructureType
        {
            get { return new OrganizationStructureType(this); }
        }
                

        public virtual OrganizationStructure OrganizationStructure
        {
            get { return new OrganizationStructure(this); }
        }
                

        public virtual Warehouse Warehouse
        {
            get { return new Warehouse(this); }
        }
                

        public virtual Locator Locator
        {
            get { return new Locator(this); }
        }
                

        public virtual AttributeSetInstance AttributeSetInstance
        {
            get { return new AttributeSetInstance(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroup AttributeSetInstanceExtensionFieldGroup
        {
            get { return new AttributeSetInstanceExtensionFieldGroup(this); }
        }
                

        public virtual AttributeValueMvo AttributeValueMvo
        {
            get { return new AttributeValueMvo(this); }
        }
                

        public virtual AttributeUseMvo AttributeUseMvo
        {
            get { return new AttributeUseMvo(this); }
        }
                

        public virtual InOutLineMvo InOutLineMvo
        {
            get { return new InOutLineMvo(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvo AttributeSetInstanceExtensionFieldMvo
        {
            get { return new AttributeSetInstanceExtensionFieldMvo(this); }
        }
                

        public virtual Attributes Attributes
        {
            get { return new Attributes(this); }
        }
                

        public virtual AttributeSets AttributeSets
        {
            get { return new AttributeSets(this); }
        }
                

        public virtual InOuts InOuts
        {
            get { return new InOuts(this); }
        }
                

        public virtual Organizations Organizations
        {
            get { return new Organizations(this); }
        }
                

        public virtual OrganizationStructureTypes OrganizationStructureTypes
        {
            get { return new OrganizationStructureTypes(this); }
        }
                

        public virtual OrganizationStructures OrganizationStructures
        {
            get { return new OrganizationStructures(this); }
        }
                

        public virtual Warehouses Warehouses
        {
            get { return new Warehouses(this); }
        }
                

        public virtual Locators Locators
        {
            get { return new Locators(this); }
        }
                

        public virtual AttributeSetInstances AttributeSetInstances
        {
            get { return new AttributeSetInstances(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroups AttributeSetInstanceExtensionFieldGroups
        {
            get { return new AttributeSetInstanceExtensionFieldGroups(this); }
        }
                

        public virtual AttributeValueMvos AttributeValueMvos
        {
            get { return new AttributeValueMvos(this); }
        }
                

        public virtual AttributeUseMvos AttributeUseMvos
        {
            get { return new AttributeUseMvos(this); }
        }
                

        public virtual InOutLineMvos InOutLineMvos
        {
            get { return new InOutLineMvos(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvos AttributeSetInstanceExtensionFieldMvos
        {
            get { return new AttributeSetInstanceExtensionFieldMvos(this); }
        }
                

        public virtual AttributesCount AttributesCount
        {
            get { return new AttributesCount(this); }
        }
                

        public virtual AttributeSetsCount AttributeSetsCount
        {
            get { return new AttributeSetsCount(this); }
        }
                

        public virtual InOutsCount InOutsCount
        {
            get { return new InOutsCount(this); }
        }
                

        public virtual OrganizationsCount OrganizationsCount
        {
            get { return new OrganizationsCount(this); }
        }
                

        public virtual OrganizationStructureTypesCount OrganizationStructureTypesCount
        {
            get { return new OrganizationStructureTypesCount(this); }
        }
                

        public virtual OrganizationStructuresCount OrganizationStructuresCount
        {
            get { return new OrganizationStructuresCount(this); }
        }
                

        public virtual WarehousesCount WarehousesCount
        {
            get { return new WarehousesCount(this); }
        }
                

        public virtual LocatorsCount LocatorsCount
        {
            get { return new LocatorsCount(this); }
        }
                

        public virtual AttributeSetInstancesCount AttributeSetInstancesCount
        {
            get { return new AttributeSetInstancesCount(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupsCount AttributeSetInstanceExtensionFieldGroupsCount
        {
            get { return new AttributeSetInstanceExtensionFieldGroupsCount(this); }
        }
                

        public virtual AttributeValueMvosCount AttributeValueMvosCount
        {
            get { return new AttributeValueMvosCount(this); }
        }
                

        public virtual AttributeUseMvosCount AttributeUseMvosCount
        {
            get { return new AttributeUseMvosCount(this); }
        }
                

        public virtual InOutLineMvosCount InOutLineMvosCount
        {
            get { return new InOutLineMvosCount(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvosCount AttributeSetInstanceExtensionFieldMvosCount
        {
            get { return new AttributeSetInstanceExtensionFieldMvosCount(this); }
        }
                

        public virtual AttributeStateEvent AttributeStateEvent
        {
            get { return new AttributeStateEvent(this); }
        }
                

        public virtual AttributeSetStateEvent AttributeSetStateEvent
        {
            get { return new AttributeSetStateEvent(this); }
        }
                

        public virtual InOutStateEvent InOutStateEvent
        {
            get { return new InOutStateEvent(this); }
        }
                

        public virtual OrganizationStateEvent OrganizationStateEvent
        {
            get { return new OrganizationStateEvent(this); }
        }
                

        public virtual OrganizationStructureTypeStateEvent OrganizationStructureTypeStateEvent
        {
            get { return new OrganizationStructureTypeStateEvent(this); }
        }
                

        public virtual OrganizationStructureStateEvent OrganizationStructureStateEvent
        {
            get { return new OrganizationStructureStateEvent(this); }
        }
                

        public virtual WarehouseStateEvent WarehouseStateEvent
        {
            get { return new WarehouseStateEvent(this); }
        }
                

        public virtual LocatorStateEvent LocatorStateEvent
        {
            get { return new LocatorStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceStateEvent AttributeSetInstanceStateEvent
        {
            get { return new AttributeSetInstanceStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupStateEvent AttributeSetInstanceExtensionFieldGroupStateEvent
        {
            get { return new AttributeSetInstanceExtensionFieldGroupStateEvent(this); }
        }
                

        public virtual AttributeValueMvoStateEvent AttributeValueMvoStateEvent
        {
            get { return new AttributeValueMvoStateEvent(this); }
        }
                

        public virtual AttributeUseMvoStateEvent AttributeUseMvoStateEvent
        {
            get { return new AttributeUseMvoStateEvent(this); }
        }
                

        public virtual InOutLineMvoStateEvent InOutLineMvoStateEvent
        {
            get { return new InOutLineMvoStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvoStateEvent AttributeSetInstanceExtensionFieldMvoStateEvent
        {
            get { return new AttributeSetInstanceExtensionFieldMvoStateEvent(this); }
        }
                

        public virtual AttributeHistoryState AttributeHistoryState
        {
            get { return new AttributeHistoryState(this); }
        }
                

        public virtual AttributeSetHistoryState AttributeSetHistoryState
        {
            get { return new AttributeSetHistoryState(this); }
        }
                

        public virtual InOutHistoryState InOutHistoryState
        {
            get { return new InOutHistoryState(this); }
        }
                

        public virtual OrganizationHistoryState OrganizationHistoryState
        {
            get { return new OrganizationHistoryState(this); }
        }
                

        public virtual OrganizationStructureTypeHistoryState OrganizationStructureTypeHistoryState
        {
            get { return new OrganizationStructureTypeHistoryState(this); }
        }
                

        public virtual OrganizationStructureHistoryState OrganizationStructureHistoryState
        {
            get { return new OrganizationStructureHistoryState(this); }
        }
                

        public virtual WarehouseHistoryState WarehouseHistoryState
        {
            get { return new WarehouseHistoryState(this); }
        }
                

        public virtual LocatorHistoryState LocatorHistoryState
        {
            get { return new LocatorHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceHistoryState AttributeSetInstanceHistoryState
        {
            get { return new AttributeSetInstanceHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupHistoryState AttributeSetInstanceExtensionFieldGroupHistoryState
        {
            get { return new AttributeSetInstanceExtensionFieldGroupHistoryState(this); }
        }
                

        public virtual AttributeValueMvoHistoryState AttributeValueMvoHistoryState
        {
            get { return new AttributeValueMvoHistoryState(this); }
        }
                

        public virtual AttributeUseMvoHistoryState AttributeUseMvoHistoryState
        {
            get { return new AttributeUseMvoHistoryState(this); }
        }
                

        public virtual InOutLineMvoHistoryState InOutLineMvoHistoryState
        {
            get { return new InOutLineMvoHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldMvoHistoryState AttributeSetInstanceExtensionFieldMvoHistoryState
        {
            get { return new AttributeSetInstanceExtensionFieldMvoHistoryState(this); }
        }
                

        public virtual AttributeValue AttributeValue
        {
            get { return new AttributeValue(this); }
        }
                

        public virtual AttributeUse AttributeUse
        {
            get { return new AttributeUse(this); }
        }
                

        public virtual InOutLine InOutLine
        {
            get { return new InOutLine(this); }
        }
                

        public virtual AttributeSetInstanceExtensionField AttributeSetInstanceExtensionField
        {
            get { return new AttributeSetInstanceExtensionField(this); }
        }
                

        public virtual OrganizationTrees OrganizationTrees
        {
            get { return new OrganizationTrees(this); }
        }
                

        public virtual LocatorTrees LocatorTrees
        {
            get { return new LocatorTrees(this); }
        }
                


		public void AddDefaultRequestHeader(string name, string value)
		{
			client.DefaultRequestHeaders.Add(name, value);
		}

		public void AddDefaultRequestHeader(string name, IEnumerable<string> values)
		{
			client.DefaultRequestHeaders.Add(name, values);
		}


    }

} // end namespace









namespace Dddml.Wms.HttpServices.ClientProxies.Raml.Models
{
    public partial class  AttributeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InOutDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InOutsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrganizationDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrganizationsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrganizationStructureTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrganizationStructureTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrganizationStructureDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrganizationStructuresGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructuresCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  WarehouseGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  WarehouseDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  WarehousesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  WarehousesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  LocatorDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  LocatorsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstancesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstancesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeValueMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeValueMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeValueMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeValueMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeUseMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeUseMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeUseMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeUseMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutLineMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InOutLineMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InOutLineMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutLineMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldMvoGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldMvoDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldMvosGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldMvosCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationTreesGetQuery 
    {
		[JsonProperty("parentId")]
        public string ParentId { get; set; }

		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorTreesGetQuery 
    {
		[JsonProperty("parentId")]
        public string ParentId { get; set; }

		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}
    /// </summary>
    public partial class  AttributeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{attributeId}/AttributeValues/{value}
    /// </summary>
    public partial class  AttributeValueUriParameters 
    {
		[JsonProperty("attributeId")]
        public string AttributeId { get; set; }

		[JsonProperty("value")]
        public string Value { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}
    /// </summary>
    public partial class  AttributeSetUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{attributeSetId}/AttributeUses/{attributeId}
    /// </summary>
    public partial class  AttributeUseUriParameters 
    {
		[JsonProperty("attributeSetId")]
        public string AttributeSetId { get; set; }

		[JsonProperty("attributeId")]
        public string AttributeId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}
    /// </summary>
    public partial class  InOutUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InOutStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InOutHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{inOutDocumentNumber}/InOutLines/{lineNumber}
    /// </summary>
    public partial class  InOutLineUriParameters 
    {
		[JsonProperty("inOutDocumentNumber")]
        public string InOutDocumentNumber { get; set; }

		[JsonProperty("lineNumber")]
        public long? LineNumber { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Organizations/{id}
    /// </summary>
    public partial class  OrganizationUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Organizations/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrganizationStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Organizations/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrganizationHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}
    /// </summary>
    public partial class  OrganizationStructureTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrganizationStructureTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrganizationStructureTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}
    /// </summary>
    public partial class  OrganizationStructureUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrganizationStructureStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrganizationStructureHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}
    /// </summary>
    public partial class  WarehouseUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  WarehouseStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}/_historyStates/{version}
    /// </summary>
    public partial class  WarehouseHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}
    /// </summary>
    public partial class  LocatorUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  LocatorStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}/_historyStates/{version}
    /// </summary>
    public partial class  LocatorHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}
    /// </summary>
    public partial class  AttributeSetInstanceUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{groupId}/AttributeSetInstanceExtensionFields/{index}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldUriParameters 
    {
		[JsonProperty("groupId")]
        public string GroupId { get; set; }

		[JsonProperty("index")]
        public string Index { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeValueMvos/{id}
    /// </summary>
    public partial class  AttributeValueMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeValueMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeValueMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeValueMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeValueMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeUseMvos/{id}
    /// </summary>
    public partial class  AttributeUseMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeUseMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeUseMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeUseMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeUseMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOutLineMvos/{id}
    /// </summary>
    public partial class  InOutLineMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOutLineMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InOutLineMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOutLineMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InOutLineMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldMvos/{id}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldMvoUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldMvos/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldMvoStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldMvos/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldMvoHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Request object for method Get of class Attribute
    /// </summary>
    public partial class AttributeGetRequest : ApiRequest
    {
        public AttributeGetRequest(AttributeUriParameters UriParameters, AttributeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Attribute
    /// </summary>
    public partial class AttributePutRequest : ApiRequest
    {
        public AttributePutRequest(AttributeUriParameters UriParameters, CreateAttributeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Attribute
    /// </summary>
    public partial class AttributePatchRequest : ApiRequest
    {
        public AttributePatchRequest(AttributeUriParameters UriParameters, MergePatchAttributeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Attribute
    /// </summary>
    public partial class AttributeDeleteRequest : ApiRequest
    {
        public AttributeDeleteRequest(AttributeUriParameters UriParameters, AttributeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Attributes
    /// </summary>
    public partial class AttributesGetRequest : ApiRequest
    {
        public AttributesGetRequest(AttributesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributesCount
    /// </summary>
    public partial class AttributesCountGetRequest : ApiRequest
    {
        public AttributesCountGetRequest(AttributesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeStateEvent
    /// </summary>
    public partial class AttributeStateEventGetRequest : ApiRequest
    {
        public AttributeStateEventGetRequest(AttributeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeHistoryState
    /// </summary>
    public partial class AttributeHistoryStateGetRequest : ApiRequest
    {
        public AttributeHistoryStateGetRequest(AttributeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValue
    /// </summary>
    public partial class AttributeValueGetRequest : ApiRequest
    {
        public AttributeValueGetRequest(AttributeValueUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSet
    /// </summary>
    public partial class AttributeSetGetRequest : ApiRequest
    {
        public AttributeSetGetRequest(AttributeSetUriParameters UriParameters, AttributeSetGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSet
    /// </summary>
    public partial class AttributeSetPutRequest : ApiRequest
    {
        public AttributeSetPutRequest(AttributeSetUriParameters UriParameters, CreateAttributeSetDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSet
    /// </summary>
    public partial class AttributeSetPatchRequest : ApiRequest
    {
        public AttributeSetPatchRequest(AttributeSetUriParameters UriParameters, MergePatchAttributeSetDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSet
    /// </summary>
    public partial class AttributeSetDeleteRequest : ApiRequest
    {
        public AttributeSetDeleteRequest(AttributeSetUriParameters UriParameters, AttributeSetDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSets
    /// </summary>
    public partial class AttributeSetsGetRequest : ApiRequest
    {
        public AttributeSetsGetRequest(AttributeSetsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetsCount
    /// </summary>
    public partial class AttributeSetsCountGetRequest : ApiRequest
    {
        public AttributeSetsCountGetRequest(AttributeSetsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetStateEvent
    /// </summary>
    public partial class AttributeSetStateEventGetRequest : ApiRequest
    {
        public AttributeSetStateEventGetRequest(AttributeSetStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetHistoryState
    /// </summary>
    public partial class AttributeSetHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetHistoryStateGetRequest(AttributeSetHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUse
    /// </summary>
    public partial class AttributeUseGetRequest : ApiRequest
    {
        public AttributeUseGetRequest(AttributeUseUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOut
    /// </summary>
    public partial class InOutGetRequest : ApiRequest
    {
        public InOutGetRequest(InOutUriParameters UriParameters, InOutGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InOut
    /// </summary>
    public partial class InOutPutRequest : ApiRequest
    {
        public InOutPutRequest(InOutUriParameters UriParameters, CreateInOutDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInOutDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InOut
    /// </summary>
    public partial class InOutPatchRequest : ApiRequest
    {
        public InOutPatchRequest(InOutUriParameters UriParameters, MergePatchInOutDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInOutDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InOut
    /// </summary>
    public partial class InOutDeleteRequest : ApiRequest
    {
        public InOutDeleteRequest(InOutUriParameters UriParameters, InOutDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOuts
    /// </summary>
    public partial class InOutsGetRequest : ApiRequest
    {
        public InOutsGetRequest(InOutsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutsCount
    /// </summary>
    public partial class InOutsCountGetRequest : ApiRequest
    {
        public InOutsCountGetRequest(InOutsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutStateEvent
    /// </summary>
    public partial class InOutStateEventGetRequest : ApiRequest
    {
        public InOutStateEventGetRequest(InOutStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutHistoryState
    /// </summary>
    public partial class InOutHistoryStateGetRequest : ApiRequest
    {
        public InOutHistoryStateGetRequest(InOutHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLine
    /// </summary>
    public partial class InOutLineGetRequest : ApiRequest
    {
        public InOutLineGetRequest(InOutLineUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Organization
    /// </summary>
    public partial class OrganizationGetRequest : ApiRequest
    {
        public OrganizationGetRequest(OrganizationUriParameters UriParameters, OrganizationGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Organization
    /// </summary>
    public partial class OrganizationPutRequest : ApiRequest
    {
        public OrganizationPutRequest(OrganizationUriParameters UriParameters, CreateOrganizationDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrganizationDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Organization
    /// </summary>
    public partial class OrganizationPatchRequest : ApiRequest
    {
        public OrganizationPatchRequest(OrganizationUriParameters UriParameters, MergePatchOrganizationDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrganizationDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Organization
    /// </summary>
    public partial class OrganizationDeleteRequest : ApiRequest
    {
        public OrganizationDeleteRequest(OrganizationUriParameters UriParameters, OrganizationDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Organizations
    /// </summary>
    public partial class OrganizationsGetRequest : ApiRequest
    {
        public OrganizationsGetRequest(OrganizationsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationsCount
    /// </summary>
    public partial class OrganizationsCountGetRequest : ApiRequest
    {
        public OrganizationsCountGetRequest(OrganizationsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStateEvent
    /// </summary>
    public partial class OrganizationStateEventGetRequest : ApiRequest
    {
        public OrganizationStateEventGetRequest(OrganizationStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationHistoryState
    /// </summary>
    public partial class OrganizationHistoryStateGetRequest : ApiRequest
    {
        public OrganizationHistoryStateGetRequest(OrganizationHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypeGetRequest : ApiRequest
    {
        public OrganizationStructureTypeGetRequest(OrganizationStructureTypeUriParameters UriParameters, OrganizationStructureTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypePutRequest : ApiRequest
    {
        public OrganizationStructureTypePutRequest(OrganizationStructureTypeUriParameters UriParameters, CreateOrganizationStructureTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrganizationStructureTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypePatchRequest : ApiRequest
    {
        public OrganizationStructureTypePatchRequest(OrganizationStructureTypeUriParameters UriParameters, MergePatchOrganizationStructureTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrganizationStructureTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypeDeleteRequest : ApiRequest
    {
        public OrganizationStructureTypeDeleteRequest(OrganizationStructureTypeUriParameters UriParameters, OrganizationStructureTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypes
    /// </summary>
    public partial class OrganizationStructureTypesGetRequest : ApiRequest
    {
        public OrganizationStructureTypesGetRequest(OrganizationStructureTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypesCount
    /// </summary>
    public partial class OrganizationStructureTypesCountGetRequest : ApiRequest
    {
        public OrganizationStructureTypesCountGetRequest(OrganizationStructureTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypeStateEvent
    /// </summary>
    public partial class OrganizationStructureTypeStateEventGetRequest : ApiRequest
    {
        public OrganizationStructureTypeStateEventGetRequest(OrganizationStructureTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypeHistoryState
    /// </summary>
    public partial class OrganizationStructureTypeHistoryStateGetRequest : ApiRequest
    {
        public OrganizationStructureTypeHistoryStateGetRequest(OrganizationStructureTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructureGetRequest : ApiRequest
    {
        public OrganizationStructureGetRequest(OrganizationStructureUriParameters UriParameters, OrganizationStructureGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructurePutRequest : ApiRequest
    {
        public OrganizationStructurePutRequest(OrganizationStructureUriParameters UriParameters, CreateOrganizationStructureDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrganizationStructureDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructurePatchRequest : ApiRequest
    {
        public OrganizationStructurePatchRequest(OrganizationStructureUriParameters UriParameters, MergePatchOrganizationStructureDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrganizationStructureDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructureDeleteRequest : ApiRequest
    {
        public OrganizationStructureDeleteRequest(OrganizationStructureUriParameters UriParameters, OrganizationStructureDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructures
    /// </summary>
    public partial class OrganizationStructuresGetRequest : ApiRequest
    {
        public OrganizationStructuresGetRequest(OrganizationStructuresGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructuresGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructuresCount
    /// </summary>
    public partial class OrganizationStructuresCountGetRequest : ApiRequest
    {
        public OrganizationStructuresCountGetRequest(OrganizationStructuresCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructuresCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureStateEvent
    /// </summary>
    public partial class OrganizationStructureStateEventGetRequest : ApiRequest
    {
        public OrganizationStructureStateEventGetRequest(OrganizationStructureStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureHistoryState
    /// </summary>
    public partial class OrganizationStructureHistoryStateGetRequest : ApiRequest
    {
        public OrganizationStructureHistoryStateGetRequest(OrganizationStructureHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Warehouse
    /// </summary>
    public partial class WarehouseGetRequest : ApiRequest
    {
        public WarehouseGetRequest(WarehouseUriParameters UriParameters, WarehouseGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehouseGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Warehouse
    /// </summary>
    public partial class WarehousePutRequest : ApiRequest
    {
        public WarehousePutRequest(WarehouseUriParameters UriParameters, CreateWarehouseDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateWarehouseDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Warehouse
    /// </summary>
    public partial class WarehousePatchRequest : ApiRequest
    {
        public WarehousePatchRequest(WarehouseUriParameters UriParameters, MergePatchWarehouseDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchWarehouseDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Warehouse
    /// </summary>
    public partial class WarehouseDeleteRequest : ApiRequest
    {
        public WarehouseDeleteRequest(WarehouseUriParameters UriParameters, WarehouseDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehouseDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Warehouses
    /// </summary>
    public partial class WarehousesGetRequest : ApiRequest
    {
        public WarehousesGetRequest(WarehousesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehousesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehousesCount
    /// </summary>
    public partial class WarehousesCountGetRequest : ApiRequest
    {
        public WarehousesCountGetRequest(WarehousesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehousesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehouseStateEvent
    /// </summary>
    public partial class WarehouseStateEventGetRequest : ApiRequest
    {
        public WarehouseStateEventGetRequest(WarehouseStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehouseHistoryState
    /// </summary>
    public partial class WarehouseHistoryStateGetRequest : ApiRequest
    {
        public WarehouseHistoryStateGetRequest(WarehouseHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Locator
    /// </summary>
    public partial class LocatorGetRequest : ApiRequest
    {
        public LocatorGetRequest(LocatorUriParameters UriParameters, LocatorGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Locator
    /// </summary>
    public partial class LocatorPutRequest : ApiRequest
    {
        public LocatorPutRequest(LocatorUriParameters UriParameters, CreateLocatorDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateLocatorDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Locator
    /// </summary>
    public partial class LocatorPatchRequest : ApiRequest
    {
        public LocatorPatchRequest(LocatorUriParameters UriParameters, MergePatchLocatorDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchLocatorDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Locator
    /// </summary>
    public partial class LocatorDeleteRequest : ApiRequest
    {
        public LocatorDeleteRequest(LocatorUriParameters UriParameters, LocatorDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Locators
    /// </summary>
    public partial class LocatorsGetRequest : ApiRequest
    {
        public LocatorsGetRequest(LocatorsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorsCount
    /// </summary>
    public partial class LocatorsCountGetRequest : ApiRequest
    {
        public LocatorsCountGetRequest(LocatorsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorStateEvent
    /// </summary>
    public partial class LocatorStateEventGetRequest : ApiRequest
    {
        public LocatorStateEventGetRequest(LocatorStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorHistoryState
    /// </summary>
    public partial class LocatorHistoryStateGetRequest : ApiRequest
    {
        public LocatorHistoryStateGetRequest(LocatorHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstanceGetRequest : ApiRequest
    {
        public AttributeSetInstanceGetRequest(AttributeSetInstanceUriParameters UriParameters, AttributeSetInstanceGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstancePutRequest : ApiRequest
    {
        public AttributeSetInstancePutRequest(AttributeSetInstanceUriParameters UriParameters, CreateAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstancePatchRequest : ApiRequest
    {
        public AttributeSetInstancePatchRequest(AttributeSetInstanceUriParameters UriParameters, MergePatchAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstanceDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceDeleteRequest(AttributeSetInstanceUriParameters UriParameters, AttributeSetInstanceDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstances
    /// </summary>
    public partial class AttributeSetInstancesGetRequest : ApiRequest
    {
        public AttributeSetInstancesGetRequest(AttributeSetInstancesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstancesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class AttributeSetInstances
    /// </summary>
    public partial class AttributeSetInstancesPostRequest : ApiRequest
    {
        public AttributeSetInstancesPostRequest(CreateAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstancesCount
    /// </summary>
    public partial class AttributeSetInstancesCountGetRequest : ApiRequest
    {
        public AttributeSetInstancesCountGetRequest(AttributeSetInstancesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstancesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceStateEvent
    /// </summary>
    public partial class AttributeSetInstanceStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceStateEventGetRequest(AttributeSetInstanceStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceHistoryState
    /// </summary>
    public partial class AttributeSetInstanceHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceHistoryStateGetRequest(AttributeSetInstanceHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupGetRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, AttributeSetInstanceExtensionFieldGroupGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupPutRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupPutRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, CreateAttributeSetInstanceExtensionFieldGroupDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceExtensionFieldGroupDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupPatchRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupPatchRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, MergePatchAttributeSetInstanceExtensionFieldGroupDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceExtensionFieldGroupDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupDeleteRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, AttributeSetInstanceExtensionFieldGroupDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroups
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupsGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupsGetRequest(AttributeSetInstanceExtensionFieldGroupsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupsCount
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupsCountGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupsCountGetRequest(AttributeSetInstanceExtensionFieldGroupsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupStateEvent
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupStateEventGetRequest(AttributeSetInstanceExtensionFieldGroupStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupHistoryState
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest(AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionField
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGetRequest(AttributeSetInstanceExtensionFieldUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvo
    /// </summary>
    public partial class AttributeValueMvoGetRequest : ApiRequest
    {
        public AttributeValueMvoGetRequest(AttributeValueMvoUriParameters UriParameters, AttributeValueMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeValueMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeValueMvo
    /// </summary>
    public partial class AttributeValueMvoPutRequest : ApiRequest
    {
        public AttributeValueMvoPutRequest(AttributeValueMvoUriParameters UriParameters, CreateAttributeValueMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeValueMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeValueMvo
    /// </summary>
    public partial class AttributeValueMvoPatchRequest : ApiRequest
    {
        public AttributeValueMvoPatchRequest(AttributeValueMvoUriParameters UriParameters, MergePatchAttributeValueMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeValueMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeValueMvo
    /// </summary>
    public partial class AttributeValueMvoDeleteRequest : ApiRequest
    {
        public AttributeValueMvoDeleteRequest(AttributeValueMvoUriParameters UriParameters, AttributeValueMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeValueMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvos
    /// </summary>
    public partial class AttributeValueMvosGetRequest : ApiRequest
    {
        public AttributeValueMvosGetRequest(AttributeValueMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeValueMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvosCount
    /// </summary>
    public partial class AttributeValueMvosCountGetRequest : ApiRequest
    {
        public AttributeValueMvosCountGetRequest(AttributeValueMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeValueMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvoStateEvent
    /// </summary>
    public partial class AttributeValueMvoStateEventGetRequest : ApiRequest
    {
        public AttributeValueMvoStateEventGetRequest(AttributeValueMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValueMvoHistoryState
    /// </summary>
    public partial class AttributeValueMvoHistoryStateGetRequest : ApiRequest
    {
        public AttributeValueMvoHistoryStateGetRequest(AttributeValueMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvo
    /// </summary>
    public partial class AttributeUseMvoGetRequest : ApiRequest
    {
        public AttributeUseMvoGetRequest(AttributeUseMvoUriParameters UriParameters, AttributeUseMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeUseMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeUseMvo
    /// </summary>
    public partial class AttributeUseMvoPutRequest : ApiRequest
    {
        public AttributeUseMvoPutRequest(AttributeUseMvoUriParameters UriParameters, CreateAttributeUseMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeUseMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeUseMvo
    /// </summary>
    public partial class AttributeUseMvoPatchRequest : ApiRequest
    {
        public AttributeUseMvoPatchRequest(AttributeUseMvoUriParameters UriParameters, MergePatchAttributeUseMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeUseMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeUseMvo
    /// </summary>
    public partial class AttributeUseMvoDeleteRequest : ApiRequest
    {
        public AttributeUseMvoDeleteRequest(AttributeUseMvoUriParameters UriParameters, AttributeUseMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeUseMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvos
    /// </summary>
    public partial class AttributeUseMvosGetRequest : ApiRequest
    {
        public AttributeUseMvosGetRequest(AttributeUseMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeUseMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvosCount
    /// </summary>
    public partial class AttributeUseMvosCountGetRequest : ApiRequest
    {
        public AttributeUseMvosCountGetRequest(AttributeUseMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeUseMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvoStateEvent
    /// </summary>
    public partial class AttributeUseMvoStateEventGetRequest : ApiRequest
    {
        public AttributeUseMvoStateEventGetRequest(AttributeUseMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUseMvoHistoryState
    /// </summary>
    public partial class AttributeUseMvoHistoryStateGetRequest : ApiRequest
    {
        public AttributeUseMvoHistoryStateGetRequest(AttributeUseMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvo
    /// </summary>
    public partial class InOutLineMvoGetRequest : ApiRequest
    {
        public InOutLineMvoGetRequest(InOutLineMvoUriParameters UriParameters, InOutLineMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutLineMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InOutLineMvo
    /// </summary>
    public partial class InOutLineMvoPutRequest : ApiRequest
    {
        public InOutLineMvoPutRequest(InOutLineMvoUriParameters UriParameters, CreateInOutLineMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInOutLineMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InOutLineMvo
    /// </summary>
    public partial class InOutLineMvoPatchRequest : ApiRequest
    {
        public InOutLineMvoPatchRequest(InOutLineMvoUriParameters UriParameters, MergePatchInOutLineMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInOutLineMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InOutLineMvo
    /// </summary>
    public partial class InOutLineMvoDeleteRequest : ApiRequest
    {
        public InOutLineMvoDeleteRequest(InOutLineMvoUriParameters UriParameters, InOutLineMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutLineMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvos
    /// </summary>
    public partial class InOutLineMvosGetRequest : ApiRequest
    {
        public InOutLineMvosGetRequest(InOutLineMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutLineMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvosCount
    /// </summary>
    public partial class InOutLineMvosCountGetRequest : ApiRequest
    {
        public InOutLineMvosCountGetRequest(InOutLineMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutLineMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvoStateEvent
    /// </summary>
    public partial class InOutLineMvoStateEventGetRequest : ApiRequest
    {
        public InOutLineMvoStateEventGetRequest(InOutLineMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineMvoHistoryState
    /// </summary>
    public partial class InOutLineMvoHistoryStateGetRequest : ApiRequest
    {
        public InOutLineMvoHistoryStateGetRequest(InOutLineMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoGetRequest(AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters, AttributeSetInstanceExtensionFieldMvoGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoPutRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoPutRequest(AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters, CreateAttributeSetInstanceExtensionFieldMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceExtensionFieldMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoPatchRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoPatchRequest(AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters, MergePatchAttributeSetInstanceExtensionFieldMvoDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceExtensionFieldMvoDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoDeleteRequest(AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters, AttributeSetInstanceExtensionFieldMvoDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvos
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvosGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvosGetRequest(AttributeSetInstanceExtensionFieldMvosGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvosGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvosCount
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvosCountGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvosCountGetRequest(AttributeSetInstanceExtensionFieldMvosCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvosCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvoStateEvent
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoStateEventGetRequest(AttributeSetInstanceExtensionFieldMvoStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldMvoHistoryState
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldMvoHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldMvoHistoryStateGetRequest(AttributeSetInstanceExtensionFieldMvoHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationTrees
    /// </summary>
    public partial class OrganizationTreesGetRequest : ApiRequest
    {
        public OrganizationTreesGetRequest(OrganizationTreesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationTreesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorTrees
    /// </summary>
    public partial class LocatorTreesGetRequest : ApiRequest
    {
        public LocatorTreesGetRequest(LocatorTreesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorTreesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Response object for method Get of class Attribute
    /// </summary>

    public partial class AttributeGetResponse : ApiResponse
    {


	    private AttributeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateDto)new XmlSerializer(typeof(AttributeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Attributes
    /// </summary>

    public partial class AttributesGetResponse : ApiResponse
    {


	    private IList<AttributeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeStateDto>)new XmlSerializer(typeof(IList<AttributeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeStateEvent
    /// </summary>

    public partial class AttributeStateEventGetResponse : ApiResponse
    {


	    private AttributeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeHistoryState
    /// </summary>

    public partial class AttributeHistoryStateGetResponse : ApiResponse
    {


	    private AttributeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateDto)new XmlSerializer(typeof(AttributeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValue
    /// </summary>

    public partial class AttributeValueGetResponse : ApiResponse
    {


	    private AttributeValueStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueStateDto)new XmlSerializer(typeof(AttributeValueStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSet
    /// </summary>

    public partial class AttributeSetGetResponse : ApiResponse
    {


	    private AttributeSetStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateDto)new XmlSerializer(typeof(AttributeSetStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSets
    /// </summary>

    public partial class AttributeSetsGetResponse : ApiResponse
    {


	    private IList<AttributeSetStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetStateDto>)new XmlSerializer(typeof(IList<AttributeSetStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetStateEvent
    /// </summary>

    public partial class AttributeSetStateEventGetResponse : ApiResponse
    {


	    private AttributeSetStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetHistoryState
    /// </summary>

    public partial class AttributeSetHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateDto)new XmlSerializer(typeof(AttributeSetStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUse
    /// </summary>

    public partial class AttributeUseGetResponse : ApiResponse
    {


	    private AttributeUseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseStateDto)new XmlSerializer(typeof(AttributeUseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOut
    /// </summary>

    public partial class InOutGetResponse : ApiResponse
    {


	    private InOutStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateDto)new XmlSerializer(typeof(InOutStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOuts
    /// </summary>

    public partial class InOutsGetResponse : ApiResponse
    {


	    private IList<InOutStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InOutStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InOutStateDto>)new XmlSerializer(typeof(IList<InOutStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InOutStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InOutStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutStateEvent
    /// </summary>

    public partial class InOutStateEventGetResponse : ApiResponse
    {


	    private InOutStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InOutStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutHistoryState
    /// </summary>

    public partial class InOutHistoryStateGetResponse : ApiResponse
    {


	    private InOutStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateDto)new XmlSerializer(typeof(InOutStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLine
    /// </summary>

    public partial class InOutLineGetResponse : ApiResponse
    {


	    private InOutLineStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineStateDto)new XmlSerializer(typeof(InOutLineStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Organization
    /// </summary>

    public partial class OrganizationGetResponse : ApiResponse
    {


	    private OrganizationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStateDto)new XmlSerializer(typeof(OrganizationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Organizations
    /// </summary>

    public partial class OrganizationsGetResponse : ApiResponse
    {


	    private IList<OrganizationStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStateDto>)new XmlSerializer(typeof(IList<OrganizationStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStateEvent
    /// </summary>

    public partial class OrganizationStateEventGetResponse : ApiResponse
    {


	    private OrganizationStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrganizationStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationHistoryState
    /// </summary>

    public partial class OrganizationHistoryStateGetResponse : ApiResponse
    {


	    private OrganizationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStateDto)new XmlSerializer(typeof(OrganizationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureType
    /// </summary>

    public partial class OrganizationStructureTypeGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateDto)new XmlSerializer(typeof(OrganizationStructureTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypes
    /// </summary>

    public partial class OrganizationStructureTypesGetResponse : ApiResponse
    {


	    private IList<OrganizationStructureTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStructureTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStructureTypeStateDto>)new XmlSerializer(typeof(IList<OrganizationStructureTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStructureTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStructureTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypeStateEvent
    /// </summary>

    public partial class OrganizationStructureTypeStateEventGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypeHistoryState
    /// </summary>

    public partial class OrganizationStructureTypeHistoryStateGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateDto)new XmlSerializer(typeof(OrganizationStructureTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructure
    /// </summary>

    public partial class OrganizationStructureGetResponse : ApiResponse
    {


	    private OrganizationStructureStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateDto)new XmlSerializer(typeof(OrganizationStructureStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructures
    /// </summary>

    public partial class OrganizationStructuresGetResponse : ApiResponse
    {


	    private IList<OrganizationStructureStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStructureStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStructureStateDto>)new XmlSerializer(typeof(IList<OrganizationStructureStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStructureStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStructureStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureStateEvent
    /// </summary>

    public partial class OrganizationStructureStateEventGetResponse : ApiResponse
    {


	    private OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureHistoryState
    /// </summary>

    public partial class OrganizationStructureHistoryStateGetResponse : ApiResponse
    {


	    private OrganizationStructureStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateDto)new XmlSerializer(typeof(OrganizationStructureStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Warehouse
    /// </summary>

    public partial class WarehouseGetResponse : ApiResponse
    {


	    private WarehouseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateDto)new XmlSerializer(typeof(WarehouseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Warehouses
    /// </summary>

    public partial class WarehousesGetResponse : ApiResponse
    {


	    private IList<WarehouseStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<WarehouseStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<WarehouseStateDto>)new XmlSerializer(typeof(IList<WarehouseStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<WarehouseStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<WarehouseStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class WarehouseStateEvent
    /// </summary>

    public partial class WarehouseStateEventGetResponse : ApiResponse
    {


	    private WarehouseStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(WarehouseStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class WarehouseHistoryState
    /// </summary>

    public partial class WarehouseHistoryStateGetResponse : ApiResponse
    {


	    private WarehouseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateDto)new XmlSerializer(typeof(WarehouseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Locator
    /// </summary>

    public partial class LocatorGetResponse : ApiResponse
    {


	    private LocatorStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateDto)new XmlSerializer(typeof(LocatorStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Locators
    /// </summary>

    public partial class LocatorsGetResponse : ApiResponse
    {


	    private IList<LocatorStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<LocatorStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<LocatorStateDto>)new XmlSerializer(typeof(IList<LocatorStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<LocatorStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<LocatorStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorStateEvent
    /// </summary>

    public partial class LocatorStateEventGetResponse : ApiResponse
    {


	    private LocatorStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(LocatorStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorHistoryState
    /// </summary>

    public partial class LocatorHistoryStateGetResponse : ApiResponse
    {


	    private LocatorStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateDto)new XmlSerializer(typeof(LocatorStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstance
    /// </summary>

    public partial class AttributeSetInstanceGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateDto)new XmlSerializer(typeof(AttributeSetInstanceStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstances
    /// </summary>

    public partial class AttributeSetInstancesGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceStateEvent
    /// </summary>

    public partial class AttributeSetInstanceStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceHistoryState
    /// </summary>

    public partial class AttributeSetInstanceHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateDto)new XmlSerializer(typeof(AttributeSetInstanceStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroups
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupsGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceExtensionFieldGroupStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceExtensionFieldGroupStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceExtensionFieldGroupStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceExtensionFieldGroupStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldGroupStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldGroupStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroupStateEvent
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroupHistoryState
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionField
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValueMvo
    /// </summary>

    public partial class AttributeValueMvoGetResponse : ApiResponse
    {


	    private AttributeValueMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueMvoStateDto)new XmlSerializer(typeof(AttributeValueMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValueMvos
    /// </summary>

    public partial class AttributeValueMvosGetResponse : ApiResponse
    {


	    private IList<AttributeValueMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeValueMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeValueMvoStateDto>)new XmlSerializer(typeof(IList<AttributeValueMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeValueMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeValueMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValueMvoStateEvent
    /// </summary>

    public partial class AttributeValueMvoStateEventGetResponse : ApiResponse
    {


	    private AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValueMvoHistoryState
    /// </summary>

    public partial class AttributeValueMvoHistoryStateGetResponse : ApiResponse
    {


	    private AttributeValueMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueMvoStateDto)new XmlSerializer(typeof(AttributeValueMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUseMvo
    /// </summary>

    public partial class AttributeUseMvoGetResponse : ApiResponse
    {


	    private AttributeUseMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseMvoStateDto)new XmlSerializer(typeof(AttributeUseMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUseMvos
    /// </summary>

    public partial class AttributeUseMvosGetResponse : ApiResponse
    {


	    private IList<AttributeUseMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeUseMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeUseMvoStateDto>)new XmlSerializer(typeof(IList<AttributeUseMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeUseMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeUseMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUseMvoStateEvent
    /// </summary>

    public partial class AttributeUseMvoStateEventGetResponse : ApiResponse
    {


	    private AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUseMvoHistoryState
    /// </summary>

    public partial class AttributeUseMvoHistoryStateGetResponse : ApiResponse
    {


	    private AttributeUseMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseMvoStateDto)new XmlSerializer(typeof(AttributeUseMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineMvo
    /// </summary>

    public partial class InOutLineMvoGetResponse : ApiResponse
    {


	    private InOutLineMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineMvoStateDto)new XmlSerializer(typeof(InOutLineMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineMvos
    /// </summary>

    public partial class InOutLineMvosGetResponse : ApiResponse
    {


	    private IList<InOutLineMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InOutLineMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InOutLineMvoStateDto>)new XmlSerializer(typeof(IList<InOutLineMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InOutLineMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InOutLineMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineMvoStateEvent
    /// </summary>

    public partial class InOutLineMvoStateEventGetResponse : ApiResponse
    {


	    private InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineMvoHistoryState
    /// </summary>

    public partial class InOutLineMvoHistoryStateGetResponse : ApiResponse
    {


	    private InOutLineMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineMvoStateDto)new XmlSerializer(typeof(InOutLineMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldMvo
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldMvoGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldMvoStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldMvos
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldMvosGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceExtensionFieldMvoStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceExtensionFieldMvoStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceExtensionFieldMvoStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceExtensionFieldMvoStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldMvoStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldMvoStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldMvoStateEvent
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldMvoStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldMvoHistoryState
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldMvoHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldMvoStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldMvoStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldMvoStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldMvoStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldMvoStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationTrees
    /// </summary>

    public partial class OrganizationTreesGetResponse : ApiResponse
    {


	    private IList<OrganizationStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStateDto>)new XmlSerializer(typeof(IList<OrganizationStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorTrees
    /// </summary>

    public partial class LocatorTreesGetResponse : ApiResponse
    {


	    private IList<LocatorStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<LocatorStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<LocatorStateDto>)new XmlSerializer(typeof(IList<LocatorStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<LocatorStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<LocatorStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class


} // end Models namespace


