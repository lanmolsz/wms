// <autogenerated>
//   This file was generated by T4 code generator GenerateRamlClientProxies.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using System.Net.Http;
using System.Web.Http;
using Dddml.Wms.HttpServices.ClientProxies.Raml;
using Dddml.Wms.HttpServices.ClientProxies.Raml.Models;
using System.Text;
using System.ComponentModel;
using RAML.Api.Core;
using Newtonsoft.Json.Linq;
using Dddml.Support.Criterion;
using Dddml.Wms.Specialization.HttpServices.ClientProxies;


namespace Dddml.Wms.HttpServices.ClientProxies
{

    public partial class LocatorTreeApplicationServiceProxy : ILocatorTreeApplicationService
    {

        private DddmlWmsRamlClient _ramlClient;

        public LocatorTreeApplicationServiceProxy(ProxyTemplate proxyTemplate)
            : this(proxyTemplate.GetEndpointUrl())
        {
            _ramlClient.GetAuthenticationHeaderValue = proxyTemplate.GetAuthenticationHeaderValue;
        }

        public LocatorTreeApplicationServiceProxy(string endpointUrl)
        {
            _ramlClient = new DddmlWmsRamlClient(endpointUrl);
        }

        public LocatorTreeApplicationServiceProxy(HttpClient httpClient)
        {
            _ramlClient = new DddmlWmsRamlClient(httpClient);
        }

        public IEnumerable<ILocatorState> GetRoots(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetRoots(filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<ILocatorState>> GetRootsAsync(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<ILocatorState> states = null;
			var q = new LocatorTreesGetQuery();
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = LocatorProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = LocatorProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.Filter = LocatorProxyUtils.GetFilterQueryValueString(filter);
            var req = new LocatorTreesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.LocatorTrees.Get(req);
            LocatorProxyUtils.ThrowOnHttpResponseError(resp);
            states = resp.Content.Select(e => e.ToLocatorState());
            return states;
        }

        public IEnumerable<ILocatorState> GetRoots(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetRootsAsync(filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public IEnumerable<ILocatorState> GetChildren(string parentId, ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetChildren(parentId, filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<ILocatorState>> GetChildrenAsync(string parentId, ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<ILocatorState> states = null;
			var q = new LocatorTreesGetQuery();
            var parentIdObj = (parentId);
			q.ParentId = parentIdObj;
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = LocatorProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = LocatorProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.Filter = LocatorProxyUtils.GetFilterQueryValueString(filter);
            var req = new LocatorTreesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.LocatorTrees.Get(req);
            LocatorProxyUtils.ThrowOnHttpResponseError(resp);
            states = resp.Content.Select(e => e.ToLocatorState());
            return states;
        }

        public IEnumerable<ILocatorState> GetChildren(string parentId, ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetChildrenAsync(parentId, filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public IEnumerable<ILocatorState> GetRoots(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetRoots(filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<ILocatorState>> GetRootsAsync(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<ILocatorState> states = null;
			var q = new LocatorTreesGetQuery();
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = LocatorProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = LocatorProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.FilterTag = LocatorProxyUtils.GetFilterTagQueryValueString(filter);
            var req = new LocatorTreesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.LocatorTrees.Get(req);
            LocatorProxyUtils.ThrowOnHttpResponseError(resp);
            states = resp.Content.Select(e => e.ToLocatorState());
            return states;
        }

        public IEnumerable<ILocatorState> GetRoots(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetRootsAsync(filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public IEnumerable<ILocatorState> GetChildren(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetChildren(parentId, filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<ILocatorState>> GetChildrenAsync(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<ILocatorState> states = null;
			var q = new LocatorTreesGetQuery();
            var parentIdObj = (parentId);
			q.ParentId = parentIdObj;
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = LocatorProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = LocatorProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.FilterTag = LocatorProxyUtils.GetFilterTagQueryValueString(filter);
            var req = new LocatorTreesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.LocatorTrees.Get(req);
            LocatorProxyUtils.ThrowOnHttpResponseError(resp);
            states = resp.Content.Select(e => e.ToLocatorState());
            return states;
        }

        public IEnumerable<ILocatorState> GetChildren(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetChildrenAsync(parentId, filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public IEnumerable<string> GetRootIds(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetRootIds(filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<string>> GetRootIdsAsync(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<ILocatorState> states = null;
			var q = new LocatorTreesGetQuery();
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = LocatorProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = LocatorProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.Filter = LocatorProxyUtils.GetFilterQueryValueString(filter);
            var req = new LocatorTreesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.LocatorTrees.Get(req);
            LocatorProxyUtils.ThrowOnHttpResponseError(resp);
            states = resp.Content.Select(e => e.ToLocatorState());
            return LocatorProxyUtils.ToIdCollection(states);
        }

        public IEnumerable<string> GetRootIds(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetRootIdsAsync(filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public IEnumerable<string> GetChildIds(string parentId, ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetChildIds(parentId, filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<string>> GetChildIdsAsync(string parentId, ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<ILocatorState> states = null;
			var q = new LocatorTreesGetQuery();
            var parentIdObj = (parentId);
			q.ParentId = parentIdObj;
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = LocatorProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = LocatorProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.Filter = LocatorProxyUtils.GetFilterQueryValueString(filter);
            var req = new LocatorTreesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.LocatorTrees.Get(req);
            LocatorProxyUtils.ThrowOnHttpResponseError(resp);
            states = resp.Content.Select(e => e.ToLocatorState());
            return LocatorProxyUtils.ToIdCollection(states);
        }

        public IEnumerable<string> GetChildIds(string parentId, ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetChildIdsAsync(parentId, filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public IEnumerable<string> GetRootIds(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetRootIds(filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<string>> GetRootIdsAsync(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<ILocatorState> states = null;
			var q = new LocatorTreesGetQuery();
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = LocatorProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = LocatorProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.FilterTag = LocatorProxyUtils.GetFilterTagQueryValueString(filter);
            var req = new LocatorTreesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.LocatorTrees.Get(req);
            LocatorProxyUtils.ThrowOnHttpResponseError(resp);
            states = resp.Content.Select(e => e.ToLocatorState());
            return LocatorProxyUtils.ToIdCollection(states);
        }

        public IEnumerable<string> GetRootIds(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetRootIdsAsync(filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }

        public IEnumerable<string> GetChildIds(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return GetChildIds(parentId, filter, orders, firstResult, maxResults, null);
        }

        public async Task<IEnumerable<string>> GetChildIdsAsync(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            IEnumerable<ILocatorState> states = null;
			var q = new LocatorTreesGetQuery();
            var parentIdObj = (parentId);
			q.ParentId = parentIdObj;
			q.FirstResult = firstResult;
			q.MaxResults = maxResults;
            q.Sort = LocatorProxyUtils.GetOrdersQueryValueString(orders);
            q.Fields = LocatorProxyUtils.GetReturnedFieldsQueryValueString(fields, QueryFieldValueSeparator);
            q.FilterTag = LocatorProxyUtils.GetFilterTagQueryValueString(filter);
            var req = new LocatorTreesGetRequest();
            req.Query = q;
            var resp = await _ramlClient.LocatorTrees.Get(req);
            LocatorProxyUtils.ThrowOnHttpResponseError(resp);
            states = resp.Content.Select(e => e.ToLocatorState());
            return LocatorProxyUtils.ToIdCollection(states);
        }

        public IEnumerable<string> GetChildIds(string parentId, IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue, IList<string> fields = null)
        {
            return GetChildIdsAsync(parentId, filter, orders, firstResult, maxResults, fields).GetAwaiter().GetResult();
        }


        protected virtual string QueryFieldValueSeparator
        {
            get { return ","; }
        }

        protected virtual string QueryOrderSeparator
        {
            get { return ","; }
        }

    }

    public partial class LocatorTreeApplicationServiceProxyFactory : ProxyFactoryBase, ILocatorTreeApplicationServiceFactory
    {

        public LocatorTreeApplicationServiceProxyFactory() : base()
        {}

        public LocatorTreeApplicationServiceProxyFactory(string endpointUrl) : base(endpointUrl)
        {}

        public ILocatorTreeApplicationService LocatorTreeApplicationService
        {
            get
            {
                return new LocatorTreeApplicationServiceProxy(ProxyTemplate);
            }
        }
    }

}

