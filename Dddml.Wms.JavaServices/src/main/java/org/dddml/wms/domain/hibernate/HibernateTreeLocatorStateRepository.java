// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainNHibernateAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.wms.domain.hibernate;

import java.util.*;
import org.hibernate.*;
import org.hibernate.criterion.*;
import java.util.Date;
import org.dddml.wms.domain.*;
import org.dddml.support.criterion.Criterion;
import org.dddml.wms.specialization.*;
import org.dddml.wms.domain.*;
import org.dddml.wms.specialization.hibernate.*;
import org.springframework.transaction.annotation.Transactional;

public class HibernateTreeLocatorStateRepository extends HibernateLocatorStateRepository implements TreeLocatorStateRepository
{
    @Transactional(readOnly = true)
    public Iterable<LocatorState> getLocatorTreeRoots(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults)
    {
        Criteria criteria = getCurrentSession().createCriteria(LocatorState.class);

        criteriaAddRootParentIdCriterion(criteria);
        HibernateUtils.criteriaAddFilterAndOrdersAndSetFirstResultAndMaxResults(criteria, filter, orders, firstResult, maxResults);
        return criteria.list();
    }

    @Transactional(readOnly = true)
    public Iterable<LocatorState> getLocatorTreeChildren(String parentId, Criterion filter, List<String> orders, Integer firstResult, Integer maxResults)
    {
        Criteria criteria = getCurrentSession().createCriteria(LocatorState.class);

        HibernateUtils.criteriaAddCriterion(criteria, "parentLocatorId", parentId);
        HibernateUtils.criteriaAddFilterAndOrdersAndSetFirstResultAndMaxResults(criteria, filter, orders, firstResult, maxResults);
        return criteria.list();
    }

    @Transactional(readOnly = true)
    public Iterable<LocatorState> getLocatorTreeRoots(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults)
    {
        Criteria criteria = getCurrentSession().createCriteria(LocatorState.class);

        criteriaAddRootParentIdCriterion(criteria);
        HibernateUtils.criteriaAddFilterAndOrdersAndSetFirstResultAndMaxResults(criteria, filter, orders, firstResult, maxResults);
        return criteria.list();
    }

    @Transactional(readOnly = true)
    public Iterable<LocatorState> getLocatorTreeChildren(String parentId, Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults)
    {
        Criteria criteria = getCurrentSession().createCriteria(LocatorState.class);

        HibernateUtils.criteriaAddCriterion(criteria, "parentLocatorId", parentId);
        HibernateUtils.criteriaAddFilterAndOrdersAndSetFirstResultAndMaxResults(criteria, filter, orders, firstResult, maxResults);
        return criteria.list();
    }

    private void criteriaAddRootParentIdCriterion(Criteria criteria)
    {
        Object[] rootParentIdValues = new Object[] { null, "" };
        if (rootParentIdValues.length == 1)
        {
            HibernateUtils.criteriaAddCriterion(criteria, "parentLocatorId", rootParentIdValues[0]);
        }
        else
        {
            Disjunction j = Restrictions.disjunction();
            for (Object pIdValue : rootParentIdValues)
            {
                HibernateUtils.disjunctionAddCriterion(j, "parentLocatorId", pIdValue);
            }
            criteria.add(j);
        }
    }
}

