<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Core\bin\Debug\Dddml.Core.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Serialization\bin\Debug\Dddml.Serialization.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.T4\bin\Debug\Dddml.T4.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\packages\YamlDotNet.3.8.0\lib\net35\YamlDotNet.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Dddml.Core.Domain" #>
<#@ import namespace="Dddml.Serialization" #>
<#@ import namespace="Dddml.T4" #>
<#@ import namespace="Dddml.T4.Extensions" #>
<#@ import namespace="Dddml.T4.Extensions.Clr" #>
<#@ import namespace="Dddml.T4.Extensions.NHibernate" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="LoadBoundedContextFiles.tt" #>
<#
    //var boundedContext = LoadBoundedContextFiles();
	//boundedContext.DefaultUserIdType = "string";

    TemplatingContext.Current.CurrentAssembly = "Dddml.Wms.Common";
    TemplatingContext.Current.SpecializationNamespace = "Dddml.Wms.Specialization";

	boundedContext.IsUsingSeparatedDomainAggregateNamespace = false;

	boundedContext.IsGenericTypeAsType = true;

	boundedContext.SetClrDomainAssembly("Dddml.Wms.Common");

	boundedContext.Aggregates["AttributeSetInstance"].SetPersistingStateEventRemovedPropertiesAsSet(true);

	//boundedContext.Aggregates["AttributeSetInstance"].AuthorizationEnabled = true;
	//boundedContext.Aggregates["AttributeSetInstance"].AnonymousAllowed = true;

	boundedContext.SetTypeNamespaces(GetTypeNamespaces());
	boundedContext.SetClrValueTypes(GetClrValueTypes());
	boundedContext.SetNHibernateTypes(GetNHibernateTypes());

	boundedContext.Refresh();

	foreach (var agg in boundedContext.Aggregates.Values)
	{
		agg.GenerateAggregateStateEventIdValueObject();
		agg.GenerateAllEntityStateEventIdValueObjects();
	}

	boundedContext.Refresh();
	//boundedContext.ReplacePropertyTypesWithBaseTypes();	

	// ////////////////////////////

	foreach (var aggregate in boundedContext.Aggregates.Values)
	{
		var mvObjcts = aggregate.GenerateAllEntityMViewObjects();
		foreach (var mvo in mvObjcts)
		{
			boundedContext.Aggregates.Add(mvo.Name, mvo);
			mvo.GenerateAggregateStateEventIdValueObject();
			mvo.SetClrAggregateDomainSubNamespaceName("MViews");
			mvo.SetStateDatabaseTableNameFormat("{0}s");
			mvo.SetUsingRViewAsMView(true);
			mvo.SetHttpServiceResourceCollectionNameFormat("{0}s");
		} 
	}

	boundedContext.Refresh();
	//boundedContext.ReplacePropertyTypesWithBaseTypes();

	var mviewObjects = new List<Aggregate>();
	foreach (var aggregate in boundedContext.Aggregates.Values)
	{
		if (aggregate.IsMViewObject())
		{
			mviewObjects.Add(aggregate);
		}
	}

	// ////////////////////////////
	
	boundedContext.SetHttpServicesAuthorizationEnabled(true);
	boundedContext.SetClrHttpServiceSetRequesterIdAttributeEnabled(true);

	boundedContext.Aggregates["AttributeSetInstance"].Metadata["httpPostCreationEnabled"] = true;

	boundedContext.SetHttpServiceJsonConverters(new string[] {
		"Dddml.Wms.HttpServices.JsonConverters.LongConverter",
		"Dddml.Wms.HttpServices.JsonConverters.DecimalConverter",
	});
	
	boundedContext.SetHttpServiceJsonContractResolver("Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver");

#>
<#+
	
	private IDictionary<string, NHibernateType> GetNHibernateTypes()
	{
		var nhibernateTypes = new Dictionary<string, NHibernateType>();
		var nodaMoneyNHibernateType = new NHibernateType() {
				ActualTypeName = "Money", 
				AssemblyQualifiedName = "Dddml.Wms.Services.Domain.NHibernate.NodaMoneyType, Dddml.Wms.Services",
				PropertyNames = new string[] { "Amount", "Currency" }, 
				PropertyClrTypes = new string[] { "decimal", "string" }
			};
		nhibernateTypes.Add(nodaMoneyNHibernateType.ActualTypeName, nodaMoneyNHibernateType);
		return nhibernateTypes;
	}

	private string[] GetClrValueTypes()
	{
		var clrValueTypes = new string[]{ "Money" };
		return clrValueTypes;
	}

	private IDictionary<string, string> GetTypeNamespaces()
	{
		var typeNamespaces = new Dictionary<string, string>();
		typeNamespaces.Add("Money", "NodaMoney");
		return typeNamespaces;
	}

#>