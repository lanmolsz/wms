// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public static partial class TeamStateInterfaceExtensions
	{

        public static ITeamCommand ToCreateOrMergePatchTeam<TCreateTeam, TMergePatchTeam>(this ITeamState state)
            where TCreateTeam : ICreateTeam, new()
            where TMergePatchTeam : IMergePatchTeam, new()
        {
            bool bUnsaved = ((ITeamState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateTeam<TCreateTeam>();
            }
            else 
            {
                return state.ToMergePatchTeam<TMergePatchTeam>();
            }
        }

        public static TDeleteTeam ToDeleteTeam<TDeleteTeam>(this ITeamState state)
            where TDeleteTeam : IDeleteTeam, new()
        {
            var cmd = new TDeleteTeam();
            cmd.TeamName = state.TeamName;
            cmd.Version = ((ITeamStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchTeam ToMergePatchTeam<TMergePatchTeam>(this ITeamState state)
            where TMergePatchTeam : IMergePatchTeam, new()
        {
            var cmd = new TMergePatchTeam();

            cmd.Version = ((ITeamStateProperties)state).Version;

            cmd.TeamName = state.TeamName;
            cmd.Description = state.Description;
            cmd.Active = ((ITeamStateProperties)state).Active;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreateTeam ToCreateTeam<TCreateTeam>(this ITeamState state)
            where TCreateTeam : ICreateTeam, new()
        {
            var cmd = new TCreateTeam();

            cmd.Version = ((ITeamStateProperties)state).Version;

            cmd.TeamName = state.TeamName;
            cmd.Description = state.Description;
            cmd.Active = ((ITeamStateProperties)state).Active;
            return cmd;
        }
		

	}

}

