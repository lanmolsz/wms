// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderItemShipGrpInvReservationDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderItemShipGrpInvReservation;

namespace Dddml.Wms.Domain.OrderItemShipGrpInvReservation
{

	public partial class OrderItemShipGrpInvReservationState : OrderItemShipGrpInvReservationStateProperties, IOrderItemShipGrpInvReservationState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		OrderItemShipGrpInvResId IGlobalIdentity<OrderItemShipGrpInvResId>.GlobalId
		{
			get
			{
				return this.OrderItemShipGrpInvResId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IOrderItemShipGrpInvReservationState.IsUnsaved
        {
            get { return this.Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public OrderItemShipGrpInvReservationState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.OrderItemShipGrpInvResId = ((IOrderItemShipGrpInvReservationEvent)events.First()).OrderItemShipGrpInvReservationEventId.OrderItemShipGrpInvResId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.Version += 1;
                }
            }
        }

        public OrderItemShipGrpInvReservationState() : this(false)
        {
        }

        public OrderItemShipGrpInvReservationState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IOrderItemShipGrpInvReservationStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.ReserveOrderEnumId = e.ReserveOrderEnumId;

			this.Quantity = e.Quantity;

			this.QuantityNotAvailable = e.QuantityNotAvailable;

			this.ReservedDatetime = e.ReservedDatetime;

			this.CreatedDatetime = e.CreatedDatetime;

			this.PromisedDatetime = e.PromisedDatetime;

			this.CurrentPromisedDate = e.CurrentPromisedDate;

			this.Priority = e.Priority;

			this.SequenceId = e.SequenceId;

			this.OldPickStartDate = e.OldPickStartDate;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IOrderItemShipGrpInvReservationStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.ReserveOrderEnumId == null)
			{
				if (e.IsPropertyReserveOrderEnumIdRemoved)
				{
					this.ReserveOrderEnumId = default(string);
				}
			}
			else
			{
				this.ReserveOrderEnumId = e.ReserveOrderEnumId;
			}

			if (e.Quantity == null)
			{
				if (e.IsPropertyQuantityRemoved)
				{
					this.Quantity = default(decimal?);
				}
			}
			else
			{
				this.Quantity = e.Quantity;
			}

			if (e.QuantityNotAvailable == null)
			{
				if (e.IsPropertyQuantityNotAvailableRemoved)
				{
					this.QuantityNotAvailable = default(decimal?);
				}
			}
			else
			{
				this.QuantityNotAvailable = e.QuantityNotAvailable;
			}

			if (e.ReservedDatetime == null)
			{
				if (e.IsPropertyReservedDatetimeRemoved)
				{
					this.ReservedDatetime = default(DateTime?);
				}
			}
			else
			{
				this.ReservedDatetime = e.ReservedDatetime;
			}

			if (e.CreatedDatetime == null)
			{
				if (e.IsPropertyCreatedDatetimeRemoved)
				{
					this.CreatedDatetime = default(DateTime?);
				}
			}
			else
			{
				this.CreatedDatetime = e.CreatedDatetime;
			}

			if (e.PromisedDatetime == null)
			{
				if (e.IsPropertyPromisedDatetimeRemoved)
				{
					this.PromisedDatetime = default(DateTime?);
				}
			}
			else
			{
				this.PromisedDatetime = e.PromisedDatetime;
			}

			if (e.CurrentPromisedDate == null)
			{
				if (e.IsPropertyCurrentPromisedDateRemoved)
				{
					this.CurrentPromisedDate = default(DateTime?);
				}
			}
			else
			{
				this.CurrentPromisedDate = e.CurrentPromisedDate;
			}

			if (e.Priority == null)
			{
				if (e.IsPropertyPriorityRemoved)
				{
					this.Priority = default(string);
				}
			}
			else
			{
				this.Priority = e.Priority;
			}

			if (e.SequenceId == null)
			{
				if (e.IsPropertySequenceIdRemoved)
				{
					this.SequenceId = default(long?);
				}
			}
			else
			{
				this.SequenceId = e.SequenceId;
			}

			if (e.OldPickStartDate == null)
			{
				if (e.IsPropertyOldPickStartDateRemoved)
				{
					this.OldPickStartDate = default(DateTime?);
				}
			}
			else
			{
				this.OldPickStartDate = e.OldPickStartDate;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}

		public virtual void When(IOrderItemShipGrpInvReservationStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IOrderItemShipGrpInvReservationEvent stateEvent)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("OrderItemShipGrpInvReservation|");

            var stateEntityId = this.OrderItemShipGrpInvResId; // Aggregate Id
            var eventEntityId = stateEvent.OrderItemShipGrpInvReservationEventId.OrderItemShipGrpInvResId;
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.Version;
            var eventVersion = stateEvent.OrderItemShipGrpInvReservationEventId.Version;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

