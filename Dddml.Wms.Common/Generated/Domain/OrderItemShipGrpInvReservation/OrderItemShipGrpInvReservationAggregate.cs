// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderItemShipGrpInvReservationDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderItemShipGrpInvReservation;

namespace Dddml.Wms.Domain.OrderItemShipGrpInvReservation
{
    public partial class OrderItemShipGrpInvReservationAggregate : AggregateBase, IOrderItemShipGrpInvReservationAggregate
    {

        readonly IOrderItemShipGrpInvReservationState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IOrderItemShipGrpInvReservationState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        OrderItemShipGrpInvResId IGlobalIdentity<OrderItemShipGrpInvResId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public OrderItemShipGrpInvReservationAggregate(IOrderItemShipGrpInvReservationState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IOrderItemShipGrpInvReservationStateProperties)_state).Version == OrderItemShipGrpInvReservationState.VersionZero)
            {
                if (IsCommandCreate((IOrderItemShipGrpInvReservationCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IOrderItemShipGrpInvReservationCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IOrderItemShipGrpInvReservationCommand c)
        {
            return c.Version == OrderItemShipGrpInvReservationState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateOrderItemShipGrpInvReservation c)
        {
            IOrderItemShipGrpInvReservationStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchOrderItemShipGrpInvReservation c)
        {
            IOrderItemShipGrpInvReservationStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteOrderItemShipGrpInvReservation c)
        {
            IOrderItemShipGrpInvReservationStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IOrderItemShipGrpInvReservationStateCreated Map(ICreateOrderItemShipGrpInvReservation c)
        {
			var stateEventId = new OrderItemShipGrpInvReservationEventId(c.OrderItemShipGrpInvResId, c.Version);
            IOrderItemShipGrpInvReservationStateCreated e = NewOrderItemShipGrpInvReservationStateCreated(stateEventId);
		
            e.ReserveOrderEnumId = c.ReserveOrderEnumId;
            e.Quantity = c.Quantity;
            e.QuantityNotAvailable = c.QuantityNotAvailable;
            e.ReservedDatetime = c.ReservedDatetime;
            e.CreatedDatetime = c.CreatedDatetime;
            e.PromisedDatetime = c.PromisedDatetime;
            e.CurrentPromisedDate = c.CurrentPromisedDate;
            e.Priority = c.Priority;
            e.SequenceId = c.SequenceId;
            e.OldPickStartDate = c.OldPickStartDate;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;


            return e;
        }

        protected virtual IOrderItemShipGrpInvReservationStateMergePatched Map(IMergePatchOrderItemShipGrpInvReservation c)
        {
			var stateEventId = new OrderItemShipGrpInvReservationEventId(c.OrderItemShipGrpInvResId, c.Version);
            IOrderItemShipGrpInvReservationStateMergePatched e = NewOrderItemShipGrpInvReservationStateMergePatched(stateEventId);

            e.ReserveOrderEnumId = c.ReserveOrderEnumId;
            e.Quantity = c.Quantity;
            e.QuantityNotAvailable = c.QuantityNotAvailable;
            e.ReservedDatetime = c.ReservedDatetime;
            e.CreatedDatetime = c.CreatedDatetime;
            e.PromisedDatetime = c.PromisedDatetime;
            e.CurrentPromisedDate = c.CurrentPromisedDate;
            e.Priority = c.Priority;
            e.SequenceId = c.SequenceId;
            e.OldPickStartDate = c.OldPickStartDate;
            e.Active = c.Active;
            e.IsPropertyReserveOrderEnumIdRemoved = c.IsPropertyReserveOrderEnumIdRemoved;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertyQuantityNotAvailableRemoved = c.IsPropertyQuantityNotAvailableRemoved;
            e.IsPropertyReservedDatetimeRemoved = c.IsPropertyReservedDatetimeRemoved;
            e.IsPropertyCreatedDatetimeRemoved = c.IsPropertyCreatedDatetimeRemoved;
            e.IsPropertyPromisedDatetimeRemoved = c.IsPropertyPromisedDatetimeRemoved;
            e.IsPropertyCurrentPromisedDateRemoved = c.IsPropertyCurrentPromisedDateRemoved;
            e.IsPropertyPriorityRemoved = c.IsPropertyPriorityRemoved;
            e.IsPropertySequenceIdRemoved = c.IsPropertySequenceIdRemoved;
            e.IsPropertyOldPickStartDateRemoved = c.IsPropertyOldPickStartDateRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;


            return e;
        }

        protected virtual IOrderItemShipGrpInvReservationStateDeleted Map(IDeleteOrderItemShipGrpInvReservation c)
        {
			var stateEventId = new OrderItemShipGrpInvReservationEventId(c.OrderItemShipGrpInvResId, c.Version);
            IOrderItemShipGrpInvReservationStateDeleted e = NewOrderItemShipGrpInvReservationStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected OrderItemShipGrpInvReservationStateCreated NewOrderItemShipGrpInvReservationStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderItemShipGrpInvReservationEventId(_state.OrderItemShipGrpInvResId, version);
            var e = NewOrderItemShipGrpInvReservationStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected OrderItemShipGrpInvReservationStateMergePatched NewOrderItemShipGrpInvReservationStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderItemShipGrpInvReservationEventId(_state.OrderItemShipGrpInvResId, version);
            var e = NewOrderItemShipGrpInvReservationStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected OrderItemShipGrpInvReservationStateDeleted NewOrderItemShipGrpInvReservationStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderItemShipGrpInvReservationEventId(_state.OrderItemShipGrpInvResId, version);
            var e = NewOrderItemShipGrpInvReservationStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private OrderItemShipGrpInvReservationStateCreated NewOrderItemShipGrpInvReservationStateCreated(OrderItemShipGrpInvReservationEventId stateEventId)
		{
			return new OrderItemShipGrpInvReservationStateCreated(stateEventId);			
		}

        private OrderItemShipGrpInvReservationStateMergePatched NewOrderItemShipGrpInvReservationStateMergePatched(OrderItemShipGrpInvReservationEventId stateEventId)
		{
			return new OrderItemShipGrpInvReservationStateMergePatched(stateEventId);
		}

        private OrderItemShipGrpInvReservationStateDeleted NewOrderItemShipGrpInvReservationStateDeleted(OrderItemShipGrpInvReservationEventId stateEventId)
		{
			return new OrderItemShipGrpInvReservationStateDeleted(stateEventId);
		}
    }

}

