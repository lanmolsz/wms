// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryLineMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventoryLineMvo;
using Dddml.Wms.Domain.PhysicalInventory;

namespace Dddml.Wms.Domain.PhysicalInventoryLineMvo
{

	public static partial class PhysicalInventoryLineMvoStateInterfaceExtension
	{

        public static IPhysicalInventoryLineMvoCommand ToCreateOrMergePatchPhysicalInventoryLineMvo<TCreatePhysicalInventoryLineMvo, TMergePatchPhysicalInventoryLineMvo>(this IPhysicalInventoryLineMvoState state)
            where TCreatePhysicalInventoryLineMvo : ICreatePhysicalInventoryLineMvo, new()
            where TMergePatchPhysicalInventoryLineMvo : IMergePatchPhysicalInventoryLineMvo, new()
        {
            bool bUnsaved = ((IPhysicalInventoryLineMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreatePhysicalInventoryLineMvo<TCreatePhysicalInventoryLineMvo>();
            }
            else 
            {
                return state.ToMergePatchPhysicalInventoryLineMvo<TMergePatchPhysicalInventoryLineMvo>();
            }
        }

        public static TDeletePhysicalInventoryLineMvo ToDeletePhysicalInventoryLineMvo<TDeletePhysicalInventoryLineMvo>(this IPhysicalInventoryLineMvoState state)
            where TDeletePhysicalInventoryLineMvo : IDeletePhysicalInventoryLineMvo, new()
        {
            var cmd = new TDeletePhysicalInventoryLineMvo();
            cmd.PhysicalInventoryLineId = state.PhysicalInventoryLineId;
            cmd.PhysicalInventoryVersion = ((IPhysicalInventoryLineMvoStateProperties)state).PhysicalInventoryVersion;

            return cmd;
        }

        public static TMergePatchPhysicalInventoryLineMvo ToMergePatchPhysicalInventoryLineMvo<TMergePatchPhysicalInventoryLineMvo>(this IPhysicalInventoryLineMvoState state)
            where TMergePatchPhysicalInventoryLineMvo : IMergePatchPhysicalInventoryLineMvo, new()
        {
            var cmd = new TMergePatchPhysicalInventoryLineMvo();

            cmd.PhysicalInventoryVersion = ((IPhysicalInventoryLineMvoStateProperties)state).PhysicalInventoryVersion;

            cmd.PhysicalInventoryLineId = state.PhysicalInventoryLineId;
            cmd.LocatorId = state.LocatorId;
            cmd.ProductId = state.ProductId;
            cmd.AttributeSetInstanceId = state.AttributeSetInstanceId;
            cmd.BookQuantity = state.BookQuantity;
            cmd.CountedQuantity = state.CountedQuantity;
            cmd.Processed = state.Processed;
            cmd.ReversalLineNumber = state.ReversalLineNumber;
            cmd.Description = state.Description;
            cmd.Version = ((IPhysicalInventoryLineMvoStateProperties)state).Version;
            cmd.Active = ((IPhysicalInventoryLineMvoStateProperties)state).Active;
            cmd.PhysicalInventoryWarehouseId = state.PhysicalInventoryWarehouseId;
            cmd.PhysicalInventoryPosted = state.PhysicalInventoryPosted;
            cmd.PhysicalInventoryProcessed = state.PhysicalInventoryProcessed;
            cmd.PhysicalInventoryProcessing = state.PhysicalInventoryProcessing;
            cmd.PhysicalInventoryDocumentTypeId = state.PhysicalInventoryDocumentTypeId;
            cmd.PhysicalInventoryMovementDate = state.PhysicalInventoryMovementDate;
            cmd.PhysicalInventoryDescription = state.PhysicalInventoryDescription;
            cmd.PhysicalInventoryIsApproved = state.PhysicalInventoryIsApproved;
            cmd.PhysicalInventoryApprovalAmount = state.PhysicalInventoryApprovalAmount;
            cmd.PhysicalInventoryIsQuantityUpdated = state.PhysicalInventoryIsQuantityUpdated;
            cmd.PhysicalInventoryReversalDocumentNumber = state.PhysicalInventoryReversalDocumentNumber;
            cmd.PhysicalInventoryCreatedBy = state.PhysicalInventoryCreatedBy;
            cmd.PhysicalInventoryCreatedAt = state.PhysicalInventoryCreatedAt;
            cmd.PhysicalInventoryUpdatedBy = state.PhysicalInventoryUpdatedBy;
            cmd.PhysicalInventoryUpdatedAt = state.PhysicalInventoryUpdatedAt;
            cmd.PhysicalInventoryActive = state.PhysicalInventoryActive;
            cmd.PhysicalInventoryDeleted = state.PhysicalInventoryDeleted;
            
            if (state.LocatorId == null) { cmd.IsPropertyLocatorIdRemoved = true; }
            if (state.ProductId == null) { cmd.IsPropertyProductIdRemoved = true; }
            if (state.AttributeSetInstanceId == null) { cmd.IsPropertyAttributeSetInstanceIdRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.PhysicalInventoryWarehouseId == null) { cmd.IsPropertyPhysicalInventoryWarehouseIdRemoved = true; }
            if (state.PhysicalInventoryProcessing == null) { cmd.IsPropertyPhysicalInventoryProcessingRemoved = true; }
            if (state.PhysicalInventoryDocumentTypeId == null) { cmd.IsPropertyPhysicalInventoryDocumentTypeIdRemoved = true; }
            if (state.PhysicalInventoryMovementDate == null) { cmd.IsPropertyPhysicalInventoryMovementDateRemoved = true; }
            if (state.PhysicalInventoryDescription == null) { cmd.IsPropertyPhysicalInventoryDescriptionRemoved = true; }
            if (state.PhysicalInventoryReversalDocumentNumber == null) { cmd.IsPropertyPhysicalInventoryReversalDocumentNumberRemoved = true; }
            if (state.PhysicalInventoryCreatedBy == null) { cmd.IsPropertyPhysicalInventoryCreatedByRemoved = true; }
            if (state.PhysicalInventoryUpdatedBy == null) { cmd.IsPropertyPhysicalInventoryUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreatePhysicalInventoryLineMvo ToCreatePhysicalInventoryLineMvo<TCreatePhysicalInventoryLineMvo>(this IPhysicalInventoryLineMvoState state)
            where TCreatePhysicalInventoryLineMvo : ICreatePhysicalInventoryLineMvo, new()
        {
            var cmd = new TCreatePhysicalInventoryLineMvo();

            cmd.PhysicalInventoryVersion = ((IPhysicalInventoryLineMvoStateProperties)state).PhysicalInventoryVersion;

            cmd.PhysicalInventoryLineId = state.PhysicalInventoryLineId;
            cmd.LocatorId = state.LocatorId;
            cmd.ProductId = state.ProductId;
            cmd.AttributeSetInstanceId = state.AttributeSetInstanceId;
            cmd.BookQuantity = state.BookQuantity;
            cmd.CountedQuantity = state.CountedQuantity;
            cmd.Processed = state.Processed;
            cmd.ReversalLineNumber = state.ReversalLineNumber;
            cmd.Description = state.Description;
            cmd.Version = ((IPhysicalInventoryLineMvoStateProperties)state).Version;
            cmd.Active = ((IPhysicalInventoryLineMvoStateProperties)state).Active;
            cmd.PhysicalInventoryWarehouseId = state.PhysicalInventoryWarehouseId;
            cmd.PhysicalInventoryPosted = state.PhysicalInventoryPosted;
            cmd.PhysicalInventoryProcessed = state.PhysicalInventoryProcessed;
            cmd.PhysicalInventoryProcessing = state.PhysicalInventoryProcessing;
            cmd.PhysicalInventoryDocumentTypeId = state.PhysicalInventoryDocumentTypeId;
            cmd.PhysicalInventoryMovementDate = state.PhysicalInventoryMovementDate;
            cmd.PhysicalInventoryDescription = state.PhysicalInventoryDescription;
            cmd.PhysicalInventoryIsApproved = state.PhysicalInventoryIsApproved;
            cmd.PhysicalInventoryApprovalAmount = state.PhysicalInventoryApprovalAmount;
            cmd.PhysicalInventoryIsQuantityUpdated = state.PhysicalInventoryIsQuantityUpdated;
            cmd.PhysicalInventoryReversalDocumentNumber = state.PhysicalInventoryReversalDocumentNumber;
            cmd.PhysicalInventoryCreatedBy = state.PhysicalInventoryCreatedBy;
            cmd.PhysicalInventoryCreatedAt = state.PhysicalInventoryCreatedAt;
            cmd.PhysicalInventoryUpdatedBy = state.PhysicalInventoryUpdatedBy;
            cmd.PhysicalInventoryUpdatedAt = state.PhysicalInventoryUpdatedAt;
            cmd.PhysicalInventoryActive = state.PhysicalInventoryActive;
            cmd.PhysicalInventoryDeleted = state.PhysicalInventoryDeleted;
            return cmd;
        }
		

	}

}

