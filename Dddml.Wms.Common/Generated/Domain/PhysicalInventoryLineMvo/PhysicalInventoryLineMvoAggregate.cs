// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryLineMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventoryLineMvo;
using Dddml.Wms.Domain.PhysicalInventory;

namespace Dddml.Wms.Domain.PhysicalInventoryLineMvo
{
    public partial class PhysicalInventoryLineMvoAggregate : AggregateBase, IPhysicalInventoryLineMvoAggregate
    {

        readonly IPhysicalInventoryLineMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IPhysicalInventoryLineMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        PhysicalInventoryLineId IGlobalIdentity<PhysicalInventoryLineId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public PhysicalInventoryLineMvoAggregate(IPhysicalInventoryLineMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IPhysicalInventoryLineMvoStateProperties)_state).PhysicalInventoryVersion == PhysicalInventoryLineMvoState.VersionZero)
            {
                if (IsCommandCreate((IPhysicalInventoryLineMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IPhysicalInventoryLineMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IPhysicalInventoryLineMvoCommand c)
        {
            return c.PhysicalInventoryVersion == PhysicalInventoryLineMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreatePhysicalInventoryLineMvo c)
        {
            IPhysicalInventoryLineMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchPhysicalInventoryLineMvo c)
        {
            IPhysicalInventoryLineMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeletePhysicalInventoryLineMvo c)
        {
            IPhysicalInventoryLineMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IPhysicalInventoryLineMvoStateCreated Map(ICreatePhysicalInventoryLineMvo c)
        {
			var stateEventId = new PhysicalInventoryLineMvoStateEventId(c.PhysicalInventoryLineId, c.PhysicalInventoryVersion);
            IPhysicalInventoryLineMvoStateCreated e = NewPhysicalInventoryLineMvoStateCreated(stateEventId);
		
            e.LocatorId = c.LocatorId;
            e.ProductId = c.ProductId;
            e.AttributeSetInstanceId = c.AttributeSetInstanceId;
            e.BookQuantity = c.BookQuantity;
            e.CountedQuantity = c.CountedQuantity;
            e.Processed = c.Processed;
            e.ReversalLineNumber = c.ReversalLineNumber;
            e.Description = c.Description;
            e.Version = c.Version;
            e.Active = c.Active;
            NewPhysicalInventoryLineMvoDocumentActionCommandAndExecute(c, _state, e);
            e.PhysicalInventoryWarehouseId = c.PhysicalInventoryWarehouseId;
            e.PhysicalInventoryPosted = c.PhysicalInventoryPosted;
            e.PhysicalInventoryProcessed = c.PhysicalInventoryProcessed;
            e.PhysicalInventoryProcessing = c.PhysicalInventoryProcessing;
            e.PhysicalInventoryDocumentTypeId = c.PhysicalInventoryDocumentTypeId;
            e.PhysicalInventoryMovementDate = c.PhysicalInventoryMovementDate;
            e.PhysicalInventoryDescription = c.PhysicalInventoryDescription;
            e.PhysicalInventoryIsApproved = c.PhysicalInventoryIsApproved;
            e.PhysicalInventoryApprovalAmount = c.PhysicalInventoryApprovalAmount;
            e.PhysicalInventoryIsQuantityUpdated = c.PhysicalInventoryIsQuantityUpdated;
            e.PhysicalInventoryReversalDocumentNumber = c.PhysicalInventoryReversalDocumentNumber;
            e.PhysicalInventoryCreatedBy = c.PhysicalInventoryCreatedBy;
            e.PhysicalInventoryCreatedAt = c.PhysicalInventoryCreatedAt;
            e.PhysicalInventoryUpdatedBy = c.PhysicalInventoryUpdatedBy;
            e.PhysicalInventoryUpdatedAt = c.PhysicalInventoryUpdatedAt;
            e.PhysicalInventoryActive = c.PhysicalInventoryActive;
            e.PhysicalInventoryDeleted = c.PhysicalInventoryDeleted;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var physicalInventoryVersion = c.PhysicalInventoryVersion;


            return e;
        }

        protected virtual IPhysicalInventoryLineMvoStateMergePatched Map(IMergePatchPhysicalInventoryLineMvo c)
        {
			var stateEventId = new PhysicalInventoryLineMvoStateEventId(c.PhysicalInventoryLineId, c.PhysicalInventoryVersion);
            IPhysicalInventoryLineMvoStateMergePatched e = NewPhysicalInventoryLineMvoStateMergePatched(stateEventId);

            e.LocatorId = c.LocatorId;
            e.ProductId = c.ProductId;
            e.AttributeSetInstanceId = c.AttributeSetInstanceId;
            e.BookQuantity = c.BookQuantity;
            e.CountedQuantity = c.CountedQuantity;
            e.Processed = c.Processed;
            e.ReversalLineNumber = c.ReversalLineNumber;
            e.Description = c.Description;
            e.Version = c.Version;
            e.Active = c.Active;
            NewPhysicalInventoryLineMvoDocumentActionCommandAndExecute(c, _state, e);
            e.PhysicalInventoryWarehouseId = c.PhysicalInventoryWarehouseId;
            e.PhysicalInventoryPosted = c.PhysicalInventoryPosted;
            e.PhysicalInventoryProcessed = c.PhysicalInventoryProcessed;
            e.PhysicalInventoryProcessing = c.PhysicalInventoryProcessing;
            e.PhysicalInventoryDocumentTypeId = c.PhysicalInventoryDocumentTypeId;
            e.PhysicalInventoryMovementDate = c.PhysicalInventoryMovementDate;
            e.PhysicalInventoryDescription = c.PhysicalInventoryDescription;
            e.PhysicalInventoryIsApproved = c.PhysicalInventoryIsApproved;
            e.PhysicalInventoryApprovalAmount = c.PhysicalInventoryApprovalAmount;
            e.PhysicalInventoryIsQuantityUpdated = c.PhysicalInventoryIsQuantityUpdated;
            e.PhysicalInventoryReversalDocumentNumber = c.PhysicalInventoryReversalDocumentNumber;
            e.PhysicalInventoryCreatedBy = c.PhysicalInventoryCreatedBy;
            e.PhysicalInventoryCreatedAt = c.PhysicalInventoryCreatedAt;
            e.PhysicalInventoryUpdatedBy = c.PhysicalInventoryUpdatedBy;
            e.PhysicalInventoryUpdatedAt = c.PhysicalInventoryUpdatedAt;
            e.PhysicalInventoryActive = c.PhysicalInventoryActive;
            e.PhysicalInventoryDeleted = c.PhysicalInventoryDeleted;
            e.IsPropertyLocatorIdRemoved = c.IsPropertyLocatorIdRemoved;
            e.IsPropertyProductIdRemoved = c.IsPropertyProductIdRemoved;
            e.IsPropertyAttributeSetInstanceIdRemoved = c.IsPropertyAttributeSetInstanceIdRemoved;
            e.IsPropertyBookQuantityRemoved = c.IsPropertyBookQuantityRemoved;
            e.IsPropertyCountedQuantityRemoved = c.IsPropertyCountedQuantityRemoved;
            e.IsPropertyProcessedRemoved = c.IsPropertyProcessedRemoved;
            e.IsPropertyReversalLineNumberRemoved = c.IsPropertyReversalLineNumberRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyPhysicalInventoryWarehouseIdRemoved = c.IsPropertyPhysicalInventoryWarehouseIdRemoved;
            e.IsPropertyPhysicalInventoryPostedRemoved = c.IsPropertyPhysicalInventoryPostedRemoved;
            e.IsPropertyPhysicalInventoryProcessedRemoved = c.IsPropertyPhysicalInventoryProcessedRemoved;
            e.IsPropertyPhysicalInventoryProcessingRemoved = c.IsPropertyPhysicalInventoryProcessingRemoved;
            e.IsPropertyPhysicalInventoryDocumentTypeIdRemoved = c.IsPropertyPhysicalInventoryDocumentTypeIdRemoved;
            e.IsPropertyPhysicalInventoryMovementDateRemoved = c.IsPropertyPhysicalInventoryMovementDateRemoved;
            e.IsPropertyPhysicalInventoryDescriptionRemoved = c.IsPropertyPhysicalInventoryDescriptionRemoved;
            e.IsPropertyPhysicalInventoryIsApprovedRemoved = c.IsPropertyPhysicalInventoryIsApprovedRemoved;
            e.IsPropertyPhysicalInventoryApprovalAmountRemoved = c.IsPropertyPhysicalInventoryApprovalAmountRemoved;
            e.IsPropertyPhysicalInventoryIsQuantityUpdatedRemoved = c.IsPropertyPhysicalInventoryIsQuantityUpdatedRemoved;
            e.IsPropertyPhysicalInventoryReversalDocumentNumberRemoved = c.IsPropertyPhysicalInventoryReversalDocumentNumberRemoved;
            e.IsPropertyPhysicalInventoryCreatedByRemoved = c.IsPropertyPhysicalInventoryCreatedByRemoved;
            e.IsPropertyPhysicalInventoryCreatedAtRemoved = c.IsPropertyPhysicalInventoryCreatedAtRemoved;
            e.IsPropertyPhysicalInventoryUpdatedByRemoved = c.IsPropertyPhysicalInventoryUpdatedByRemoved;
            e.IsPropertyPhysicalInventoryUpdatedAtRemoved = c.IsPropertyPhysicalInventoryUpdatedAtRemoved;
            e.IsPropertyPhysicalInventoryActiveRemoved = c.IsPropertyPhysicalInventoryActiveRemoved;
            e.IsPropertyPhysicalInventoryDeletedRemoved = c.IsPropertyPhysicalInventoryDeletedRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var physicalInventoryVersion = c.PhysicalInventoryVersion;


            return e;
        }

        protected virtual IPhysicalInventoryLineMvoStateDeleted Map(IDeletePhysicalInventoryLineMvo c)
        {
			var stateEventId = new PhysicalInventoryLineMvoStateEventId(c.PhysicalInventoryLineId, c.PhysicalInventoryVersion);
            IPhysicalInventoryLineMvoStateDeleted e = NewPhysicalInventoryLineMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;


            return e;
        }

        protected void NewPhysicalInventoryLineMvoDocumentActionCommandAndExecute(IMergePatchPhysicalInventoryLineMvo c, IPhysicalInventoryLineMvoState s, IPhysicalInventoryLineMvoStateMergePatched e)
        {
            var pCommandHandler = this.PhysicalInventoryLineMvoDocumentActionCommandHandler;
            var pCmdContent = c.DocumentAction;
            var pCmd = new PropertyCommand<string, string> { Content = pCmdContent, GetState = () => s.PhysicalInventoryDocumentStatusId, SetState = p => e.PhysicalInventoryDocumentStatusId = p, OuterCommandType = CommandType.MergePatch };
            pCommandHandler.Execute(pCmd);
        }

        protected void NewPhysicalInventoryLineMvoDocumentActionCommandAndExecute(ICreatePhysicalInventoryLineMvo c, IPhysicalInventoryLineMvoState s, IPhysicalInventoryLineMvoStateCreated e)
        {
            var pCommandHandler = this.PhysicalInventoryLineMvoDocumentActionCommandHandler;
            var pCmdContent = c.DocumentAction;
            var pCmd = new PropertyCommand<string, string> { Content = pCmdContent, GetState = () => s.PhysicalInventoryDocumentStatusId, SetState = p => e.PhysicalInventoryDocumentStatusId = p, OuterCommandType = CommandType.Create };
            pCommandHandler.Execute(pCmd);
        }

        protected IPropertyCommandHandler<string, string> PhysicalInventoryLineMvoDocumentActionCommandHandler
        {
            get
            {
                return ApplicationContext.Current["PhysicalInventoryLineMvoDocumentActionCommandHandler"] as IPropertyCommandHandler<string, string>;
            }
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected PhysicalInventoryLineMvoStateCreated NewPhysicalInventoryLineMvoStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new PhysicalInventoryLineMvoStateEventId(_state.PhysicalInventoryLineId, ((IPhysicalInventoryLineMvoStateProperties)_state).PhysicalInventoryVersion);
            var e = NewPhysicalInventoryLineMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected PhysicalInventoryLineMvoStateMergePatched NewPhysicalInventoryLineMvoStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new PhysicalInventoryLineMvoStateEventId(_state.PhysicalInventoryLineId, ((IPhysicalInventoryLineMvoStateProperties)_state).PhysicalInventoryVersion);
            var e = NewPhysicalInventoryLineMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


        protected PhysicalInventoryLineMvoStateDeleted NewPhysicalInventoryLineMvoStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new PhysicalInventoryLineMvoStateEventId(_state.PhysicalInventoryLineId, ((IPhysicalInventoryLineMvoStateProperties)_state).PhysicalInventoryVersion);
            var e = NewPhysicalInventoryLineMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private PhysicalInventoryLineMvoStateCreated NewPhysicalInventoryLineMvoStateCreated(PhysicalInventoryLineMvoStateEventId stateEventId)
		{
			return new PhysicalInventoryLineMvoStateCreated(stateEventId);			
		}

        private PhysicalInventoryLineMvoStateMergePatched NewPhysicalInventoryLineMvoStateMergePatched(PhysicalInventoryLineMvoStateEventId stateEventId)
		{
			return new PhysicalInventoryLineMvoStateMergePatched(stateEventId);
		}

        private PhysicalInventoryLineMvoStateDeleted NewPhysicalInventoryLineMvoStateDeleted(PhysicalInventoryLineMvoStateEventId stateEventId)
		{
			return new PhysicalInventoryLineMvoStateDeleted(stateEventId);
		}

    }

}

