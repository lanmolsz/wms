// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryLineMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventoryLineMvo;
using Dddml.Wms.Domain.PhysicalInventory;

namespace Dddml.Wms.Domain.PhysicalInventoryLineMvo
{

	public partial class PhysicalInventoryLineMvoState : PhysicalInventoryLineMvoStateProperties, IPhysicalInventoryLineMvoState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		PhysicalInventoryLineId IGlobalIdentity<PhysicalInventoryLineId>.GlobalId
		{
			get
			{
				return this.PhysicalInventoryLineId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.PhysicalInventoryVersion;
			}
		}


		#endregion

        bool IPhysicalInventoryLineMvoState.IsUnsaved
        {
            get { return this.PhysicalInventoryVersion == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public PhysicalInventoryLineMvoState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.PhysicalInventoryLineId = ((IPhysicalInventoryLineMvoStateEvent)events.First()).StateEventId.PhysicalInventoryLineId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.PhysicalInventoryVersion += 1;
                }
            }
        }

        public PhysicalInventoryLineMvoState() : this(false)
        {
        }

        public PhysicalInventoryLineMvoState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IPhysicalInventoryLineMvoStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.LocatorId = e.LocatorId;

			this.ProductId = e.ProductId;

			this.AttributeSetInstanceId = e.AttributeSetInstanceId;

            this.BookQuantity = (e.BookQuantity != null && e.BookQuantity.HasValue) ? e.BookQuantity.Value : default(decimal);

            this.CountedQuantity = (e.CountedQuantity != null && e.CountedQuantity.HasValue) ? e.CountedQuantity.Value : default(decimal);

            this.Processed = (e.Processed != null && e.Processed.HasValue) ? e.Processed.Value : default(bool);

            this.ReversalLineNumber = (e.ReversalLineNumber != null && e.ReversalLineNumber.HasValue) ? e.ReversalLineNumber.Value : default(long);

			this.Description = e.Description;

            this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.PhysicalInventoryDocumentStatusId = e.PhysicalInventoryDocumentStatusId;

			this.PhysicalInventoryWarehouseId = e.PhysicalInventoryWarehouseId;

            this.PhysicalInventoryPosted = (e.PhysicalInventoryPosted != null && e.PhysicalInventoryPosted.HasValue) ? e.PhysicalInventoryPosted.Value : default(bool);

            this.PhysicalInventoryProcessed = (e.PhysicalInventoryProcessed != null && e.PhysicalInventoryProcessed.HasValue) ? e.PhysicalInventoryProcessed.Value : default(bool);

			this.PhysicalInventoryProcessing = e.PhysicalInventoryProcessing;

			this.PhysicalInventoryDocumentTypeId = e.PhysicalInventoryDocumentTypeId;

			this.PhysicalInventoryMovementDate = e.PhysicalInventoryMovementDate;

			this.PhysicalInventoryDescription = e.PhysicalInventoryDescription;

            this.PhysicalInventoryIsApproved = (e.PhysicalInventoryIsApproved != null && e.PhysicalInventoryIsApproved.HasValue) ? e.PhysicalInventoryIsApproved.Value : default(bool);

            this.PhysicalInventoryApprovalAmount = (e.PhysicalInventoryApprovalAmount != null && e.PhysicalInventoryApprovalAmount.HasValue) ? e.PhysicalInventoryApprovalAmount.Value : default(decimal);

            this.PhysicalInventoryIsQuantityUpdated = (e.PhysicalInventoryIsQuantityUpdated != null && e.PhysicalInventoryIsQuantityUpdated.HasValue) ? e.PhysicalInventoryIsQuantityUpdated.Value : default(bool);

			this.PhysicalInventoryReversalDocumentNumber = e.PhysicalInventoryReversalDocumentNumber;

			this.PhysicalInventoryCreatedBy = e.PhysicalInventoryCreatedBy;

            this.PhysicalInventoryCreatedAt = (e.PhysicalInventoryCreatedAt != null && e.PhysicalInventoryCreatedAt.HasValue) ? e.PhysicalInventoryCreatedAt.Value : default(DateTime);

			this.PhysicalInventoryUpdatedBy = e.PhysicalInventoryUpdatedBy;

            this.PhysicalInventoryUpdatedAt = (e.PhysicalInventoryUpdatedAt != null && e.PhysicalInventoryUpdatedAt.HasValue) ? e.PhysicalInventoryUpdatedAt.Value : default(DateTime);

            this.PhysicalInventoryActive = (e.PhysicalInventoryActive != null && e.PhysicalInventoryActive.HasValue) ? e.PhysicalInventoryActive.Value : default(bool);

            this.PhysicalInventoryDeleted = (e.PhysicalInventoryDeleted != null && e.PhysicalInventoryDeleted.HasValue) ? e.PhysicalInventoryDeleted.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IPhysicalInventoryLineMvoStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.LocatorId == null)
			{
				if (e.IsPropertyLocatorIdRemoved)
				{
					this.LocatorId = default(string);
				}
			}
			else
			{
				this.LocatorId = e.LocatorId;
			}

			if (e.ProductId == null)
			{
				if (e.IsPropertyProductIdRemoved)
				{
					this.ProductId = default(string);
				}
			}
			else
			{
				this.ProductId = e.ProductId;
			}

			if (e.AttributeSetInstanceId == null)
			{
				if (e.IsPropertyAttributeSetInstanceIdRemoved)
				{
					this.AttributeSetInstanceId = default(string);
				}
			}
			else
			{
				this.AttributeSetInstanceId = e.AttributeSetInstanceId;
			}

			if (e.BookQuantity == null)
			{
				if (e.IsPropertyBookQuantityRemoved)
				{
					this.BookQuantity = default(decimal);
				}
			}
			else
			{
				this.BookQuantity = (e.BookQuantity != null && e.BookQuantity.HasValue) ? e.BookQuantity.Value : default(decimal);
			}

			if (e.CountedQuantity == null)
			{
				if (e.IsPropertyCountedQuantityRemoved)
				{
					this.CountedQuantity = default(decimal);
				}
			}
			else
			{
				this.CountedQuantity = (e.CountedQuantity != null && e.CountedQuantity.HasValue) ? e.CountedQuantity.Value : default(decimal);
			}

			if (e.Processed == null)
			{
				if (e.IsPropertyProcessedRemoved)
				{
					this.Processed = default(bool);
				}
			}
			else
			{
				this.Processed = (e.Processed != null && e.Processed.HasValue) ? e.Processed.Value : default(bool);
			}

			if (e.ReversalLineNumber == null)
			{
				if (e.IsPropertyReversalLineNumberRemoved)
				{
					this.ReversalLineNumber = default(long);
				}
			}
			else
			{
				this.ReversalLineNumber = (e.ReversalLineNumber != null && e.ReversalLineNumber.HasValue) ? e.ReversalLineNumber.Value : default(long);
			}

			if (e.Description == null)
			{
				if (e.IsPropertyDescriptionRemoved)
				{
					this.Description = default(string);
				}
			}
			else
			{
				this.Description = e.Description;
			}

			if (e.Version == null)
			{
				if (e.IsPropertyVersionRemoved)
				{
					this.Version = default(long);
				}
			}
			else
			{
				this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}

			if (e.PhysicalInventoryDocumentStatusId == null)
			{
				if (e.IsPropertyPhysicalInventoryDocumentStatusIdRemoved)
				{
					this.PhysicalInventoryDocumentStatusId = default(string);
				}
			}
			else
			{
				this.PhysicalInventoryDocumentStatusId = e.PhysicalInventoryDocumentStatusId;
			}

			if (e.PhysicalInventoryWarehouseId == null)
			{
				if (e.IsPropertyPhysicalInventoryWarehouseIdRemoved)
				{
					this.PhysicalInventoryWarehouseId = default(string);
				}
			}
			else
			{
				this.PhysicalInventoryWarehouseId = e.PhysicalInventoryWarehouseId;
			}

			if (e.PhysicalInventoryPosted == null)
			{
				if (e.IsPropertyPhysicalInventoryPostedRemoved)
				{
					this.PhysicalInventoryPosted = default(bool);
				}
			}
			else
			{
				this.PhysicalInventoryPosted = (e.PhysicalInventoryPosted != null && e.PhysicalInventoryPosted.HasValue) ? e.PhysicalInventoryPosted.Value : default(bool);
			}

			if (e.PhysicalInventoryProcessed == null)
			{
				if (e.IsPropertyPhysicalInventoryProcessedRemoved)
				{
					this.PhysicalInventoryProcessed = default(bool);
				}
			}
			else
			{
				this.PhysicalInventoryProcessed = (e.PhysicalInventoryProcessed != null && e.PhysicalInventoryProcessed.HasValue) ? e.PhysicalInventoryProcessed.Value : default(bool);
			}

			if (e.PhysicalInventoryProcessing == null)
			{
				if (e.IsPropertyPhysicalInventoryProcessingRemoved)
				{
					this.PhysicalInventoryProcessing = default(string);
				}
			}
			else
			{
				this.PhysicalInventoryProcessing = e.PhysicalInventoryProcessing;
			}

			if (e.PhysicalInventoryDocumentTypeId == null)
			{
				if (e.IsPropertyPhysicalInventoryDocumentTypeIdRemoved)
				{
					this.PhysicalInventoryDocumentTypeId = default(string);
				}
			}
			else
			{
				this.PhysicalInventoryDocumentTypeId = e.PhysicalInventoryDocumentTypeId;
			}

			if (e.PhysicalInventoryMovementDate == null)
			{
				if (e.IsPropertyPhysicalInventoryMovementDateRemoved)
				{
					this.PhysicalInventoryMovementDate = default(DateTime?);
				}
			}
			else
			{
				this.PhysicalInventoryMovementDate = e.PhysicalInventoryMovementDate;
			}

			if (e.PhysicalInventoryDescription == null)
			{
				if (e.IsPropertyPhysicalInventoryDescriptionRemoved)
				{
					this.PhysicalInventoryDescription = default(string);
				}
			}
			else
			{
				this.PhysicalInventoryDescription = e.PhysicalInventoryDescription;
			}

			if (e.PhysicalInventoryIsApproved == null)
			{
				if (e.IsPropertyPhysicalInventoryIsApprovedRemoved)
				{
					this.PhysicalInventoryIsApproved = default(bool);
				}
			}
			else
			{
				this.PhysicalInventoryIsApproved = (e.PhysicalInventoryIsApproved != null && e.PhysicalInventoryIsApproved.HasValue) ? e.PhysicalInventoryIsApproved.Value : default(bool);
			}

			if (e.PhysicalInventoryApprovalAmount == null)
			{
				if (e.IsPropertyPhysicalInventoryApprovalAmountRemoved)
				{
					this.PhysicalInventoryApprovalAmount = default(decimal);
				}
			}
			else
			{
				this.PhysicalInventoryApprovalAmount = (e.PhysicalInventoryApprovalAmount != null && e.PhysicalInventoryApprovalAmount.HasValue) ? e.PhysicalInventoryApprovalAmount.Value : default(decimal);
			}

			if (e.PhysicalInventoryIsQuantityUpdated == null)
			{
				if (e.IsPropertyPhysicalInventoryIsQuantityUpdatedRemoved)
				{
					this.PhysicalInventoryIsQuantityUpdated = default(bool);
				}
			}
			else
			{
				this.PhysicalInventoryIsQuantityUpdated = (e.PhysicalInventoryIsQuantityUpdated != null && e.PhysicalInventoryIsQuantityUpdated.HasValue) ? e.PhysicalInventoryIsQuantityUpdated.Value : default(bool);
			}

			if (e.PhysicalInventoryReversalDocumentNumber == null)
			{
				if (e.IsPropertyPhysicalInventoryReversalDocumentNumberRemoved)
				{
					this.PhysicalInventoryReversalDocumentNumber = default(string);
				}
			}
			else
			{
				this.PhysicalInventoryReversalDocumentNumber = e.PhysicalInventoryReversalDocumentNumber;
			}

			if (e.PhysicalInventoryCreatedBy == null)
			{
				if (e.IsPropertyPhysicalInventoryCreatedByRemoved)
				{
					this.PhysicalInventoryCreatedBy = default(string);
				}
			}
			else
			{
				this.PhysicalInventoryCreatedBy = e.PhysicalInventoryCreatedBy;
			}

			if (e.PhysicalInventoryCreatedAt == null)
			{
				if (e.IsPropertyPhysicalInventoryCreatedAtRemoved)
				{
					this.PhysicalInventoryCreatedAt = default(DateTime);
				}
			}
			else
			{
				this.PhysicalInventoryCreatedAt = (e.PhysicalInventoryCreatedAt != null && e.PhysicalInventoryCreatedAt.HasValue) ? e.PhysicalInventoryCreatedAt.Value : default(DateTime);
			}

			if (e.PhysicalInventoryUpdatedBy == null)
			{
				if (e.IsPropertyPhysicalInventoryUpdatedByRemoved)
				{
					this.PhysicalInventoryUpdatedBy = default(string);
				}
			}
			else
			{
				this.PhysicalInventoryUpdatedBy = e.PhysicalInventoryUpdatedBy;
			}

			if (e.PhysicalInventoryUpdatedAt == null)
			{
				if (e.IsPropertyPhysicalInventoryUpdatedAtRemoved)
				{
					this.PhysicalInventoryUpdatedAt = default(DateTime);
				}
			}
			else
			{
				this.PhysicalInventoryUpdatedAt = (e.PhysicalInventoryUpdatedAt != null && e.PhysicalInventoryUpdatedAt.HasValue) ? e.PhysicalInventoryUpdatedAt.Value : default(DateTime);
			}

			if (e.PhysicalInventoryActive == null)
			{
				if (e.IsPropertyPhysicalInventoryActiveRemoved)
				{
					this.PhysicalInventoryActive = default(bool);
				}
			}
			else
			{
				this.PhysicalInventoryActive = (e.PhysicalInventoryActive != null && e.PhysicalInventoryActive.HasValue) ? e.PhysicalInventoryActive.Value : default(bool);
			}

			if (e.PhysicalInventoryDeleted == null)
			{
				if (e.IsPropertyPhysicalInventoryDeletedRemoved)
				{
					this.PhysicalInventoryDeleted = default(bool);
				}
			}
			else
			{
				this.PhysicalInventoryDeleted = (e.PhysicalInventoryDeleted != null && e.PhysicalInventoryDeleted.HasValue) ? e.PhysicalInventoryDeleted.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}

		public virtual void When(IPhysicalInventoryLineMvoStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IPhysicalInventoryLineMvoStateEvent stateEvent)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("PhysicalInventoryLineMvo|");

            var stateEntityId = this.PhysicalInventoryLineId; // Aggregate Id
            var eventEntityId = stateEvent.StateEventId.PhysicalInventoryLineId; // EntityBase.Aggregate.GetStateEventIdPropertyIdName();
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.PhysicalInventoryVersion;
            var eventVersion = stateEvent.StateEventId.PhysicalInventoryVersion;
            if (stateVersion > eventVersion)//!=
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

