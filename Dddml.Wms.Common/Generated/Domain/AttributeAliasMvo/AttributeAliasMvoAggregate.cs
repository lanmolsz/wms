// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeAliasMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.AttributeAliasMvo;
using Dddml.Wms.Domain.Attribute;

namespace Dddml.Wms.Domain.AttributeAliasMvo
{
    public partial class AttributeAliasMvoAggregate : AggregateBase, IAttributeAliasMvoAggregate
    {

        readonly IAttributeAliasMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IAttributeAliasMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        AttributeAliasId IGlobalIdentity<AttributeAliasId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public AttributeAliasMvoAggregate(IAttributeAliasMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IAttributeAliasMvoStateProperties)_state).AttributeVersion == AttributeAliasMvoState.VersionZero)
            {
                if (IsCommandCreate((IAttributeAliasMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IAttributeAliasMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IAttributeAliasMvoCommand c)
        {
            return c.AttributeVersion == AttributeAliasMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateAttributeAliasMvo c)
        {
            IAttributeAliasMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchAttributeAliasMvo c)
        {
            IAttributeAliasMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteAttributeAliasMvo c)
        {
            IAttributeAliasMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IAttributeAliasMvoStateCreated Map(ICreateAttributeAliasMvo c)
        {
			var stateEventId = new AttributeAliasMvoStateEventId(c.AttributeAliasId, c.AttributeVersion);
            IAttributeAliasMvoStateCreated e = NewAttributeAliasMvoStateCreated(stateEventId);
		
            e.Name = c.Name;
            e.Version = c.Version;
            e.Active = c.Active;
            e.AttributeAttributeName = c.AttributeAttributeName;
            e.AttributeOrganizationId = c.AttributeOrganizationId;
            e.AttributeDescription = c.AttributeDescription;
            e.AttributeIsMandatory = c.AttributeIsMandatory;
            e.AttributeAttributeValueType = c.AttributeAttributeValueType;
            e.AttributeAttributeValueLength = c.AttributeAttributeValueLength;
            e.AttributeIsList = c.AttributeIsList;
            e.AttributeFieldName = c.AttributeFieldName;
            e.AttributeReferenceId = c.AttributeReferenceId;
            e.AttributeCreatedBy = c.AttributeCreatedBy;
            e.AttributeCreatedAt = c.AttributeCreatedAt;
            e.AttributeUpdatedBy = c.AttributeUpdatedBy;
            e.AttributeUpdatedAt = c.AttributeUpdatedAt;
            e.AttributeActive = c.AttributeActive;
            e.AttributeDeleted = c.AttributeDeleted;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var attributeVersion = c.AttributeVersion;


            return e;
        }

        protected virtual IAttributeAliasMvoStateMergePatched Map(IMergePatchAttributeAliasMvo c)
        {
			var stateEventId = new AttributeAliasMvoStateEventId(c.AttributeAliasId, c.AttributeVersion);
            IAttributeAliasMvoStateMergePatched e = NewAttributeAliasMvoStateMergePatched(stateEventId);

            e.Name = c.Name;
            e.Version = c.Version;
            e.Active = c.Active;
            e.AttributeAttributeName = c.AttributeAttributeName;
            e.AttributeOrganizationId = c.AttributeOrganizationId;
            e.AttributeDescription = c.AttributeDescription;
            e.AttributeIsMandatory = c.AttributeIsMandatory;
            e.AttributeAttributeValueType = c.AttributeAttributeValueType;
            e.AttributeAttributeValueLength = c.AttributeAttributeValueLength;
            e.AttributeIsList = c.AttributeIsList;
            e.AttributeFieldName = c.AttributeFieldName;
            e.AttributeReferenceId = c.AttributeReferenceId;
            e.AttributeCreatedBy = c.AttributeCreatedBy;
            e.AttributeCreatedAt = c.AttributeCreatedAt;
            e.AttributeUpdatedBy = c.AttributeUpdatedBy;
            e.AttributeUpdatedAt = c.AttributeUpdatedAt;
            e.AttributeActive = c.AttributeActive;
            e.AttributeDeleted = c.AttributeDeleted;
            e.IsPropertyNameRemoved = c.IsPropertyNameRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyAttributeAttributeNameRemoved = c.IsPropertyAttributeAttributeNameRemoved;
            e.IsPropertyAttributeOrganizationIdRemoved = c.IsPropertyAttributeOrganizationIdRemoved;
            e.IsPropertyAttributeDescriptionRemoved = c.IsPropertyAttributeDescriptionRemoved;
            e.IsPropertyAttributeIsMandatoryRemoved = c.IsPropertyAttributeIsMandatoryRemoved;
            e.IsPropertyAttributeAttributeValueTypeRemoved = c.IsPropertyAttributeAttributeValueTypeRemoved;
            e.IsPropertyAttributeAttributeValueLengthRemoved = c.IsPropertyAttributeAttributeValueLengthRemoved;
            e.IsPropertyAttributeIsListRemoved = c.IsPropertyAttributeIsListRemoved;
            e.IsPropertyAttributeFieldNameRemoved = c.IsPropertyAttributeFieldNameRemoved;
            e.IsPropertyAttributeReferenceIdRemoved = c.IsPropertyAttributeReferenceIdRemoved;
            e.IsPropertyAttributeCreatedByRemoved = c.IsPropertyAttributeCreatedByRemoved;
            e.IsPropertyAttributeCreatedAtRemoved = c.IsPropertyAttributeCreatedAtRemoved;
            e.IsPropertyAttributeUpdatedByRemoved = c.IsPropertyAttributeUpdatedByRemoved;
            e.IsPropertyAttributeUpdatedAtRemoved = c.IsPropertyAttributeUpdatedAtRemoved;
            e.IsPropertyAttributeActiveRemoved = c.IsPropertyAttributeActiveRemoved;
            e.IsPropertyAttributeDeletedRemoved = c.IsPropertyAttributeDeletedRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var attributeVersion = c.AttributeVersion;


            return e;
        }

        protected virtual IAttributeAliasMvoStateDeleted Map(IDeleteAttributeAliasMvo c)
        {
			var stateEventId = new AttributeAliasMvoStateEventId(c.AttributeAliasId, c.AttributeVersion);
            IAttributeAliasMvoStateDeleted e = NewAttributeAliasMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected AttributeAliasMvoStateCreated NewAttributeAliasMvoStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new AttributeAliasMvoStateEventId(_state.AttributeAliasId, ((IAttributeAliasMvoStateProperties)_state).AttributeVersion);
            var e = NewAttributeAliasMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected AttributeAliasMvoStateMergePatched NewAttributeAliasMvoStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new AttributeAliasMvoStateEventId(_state.AttributeAliasId, ((IAttributeAliasMvoStateProperties)_state).AttributeVersion);
            var e = NewAttributeAliasMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected AttributeAliasMvoStateDeleted NewAttributeAliasMvoStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new AttributeAliasMvoStateEventId(_state.AttributeAliasId, ((IAttributeAliasMvoStateProperties)_state).AttributeVersion);
            var e = NewAttributeAliasMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private AttributeAliasMvoStateCreated NewAttributeAliasMvoStateCreated(AttributeAliasMvoStateEventId stateEventId)
		{
			return new AttributeAliasMvoStateCreated(stateEventId);			
		}

        private AttributeAliasMvoStateMergePatched NewAttributeAliasMvoStateMergePatched(AttributeAliasMvoStateEventId stateEventId)
		{
			return new AttributeAliasMvoStateMergePatched(stateEventId);
		}

        private AttributeAliasMvoStateDeleted NewAttributeAliasMvoStateDeleted(AttributeAliasMvoStateEventId stateEventId)
		{
			return new AttributeAliasMvoStateDeleted(stateEventId);
		}

    }

}

