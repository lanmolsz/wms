// <autogenerated>
//   This file was generated by T4 code generator GenerateUomConversionDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.UomConversion;

namespace Dddml.Wms.Domain.UomConversion
{

	public abstract class UomConversionEventBase : IUomConversionEvent
	{

		public virtual UomConversionEventId UomConversionEventId { get; set; }

        public virtual UomConversionId UomConversionId
        {
            get { return UomConversionEventId.UomConversionId; }
            set { UomConversionEventId.UomConversionId = value; }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		UomConversionEventId IGlobalIdentity<UomConversionEventId>.GlobalId {
			get
			{
				return this.UomConversionEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IUomConversionEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected UomConversionEventBase()
        {
        }

        protected UomConversionEventBase(UomConversionEventId stateEventId)
        {
            this.UomConversionEventId = stateEventId;
        }


        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

    public abstract class UomConversionStateEventBase : UomConversionEventBase, IUomConversionStateEvent
    {

		public virtual double? ConversionFactor { get; set; }

		public virtual string CustomMethodId { get; set; }

		public virtual long? DecimalScale { get; set; }

		public virtual string RoundingMode { get; set; }

		public virtual bool? Active { get; set; }

        protected UomConversionStateEventBase() : base()
        {
        }

        protected UomConversionStateEventBase(UomConversionEventId stateEventId) : base(stateEventId)
        {
        }

    }

	public class UomConversionStateCreated : UomConversionStateEventBase, IUomConversionStateCreated
	{
		public UomConversionStateCreated () : this(new UomConversionEventId())
		{
		}

		public UomConversionStateCreated (UomConversionEventId stateEventId) : base(stateEventId)
		{
		}


        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class UomConversionStateMergePatched : UomConversionStateEventBase, IUomConversionStateMergePatched
	{
		public virtual bool IsPropertyConversionFactorRemoved { get; set; }

		public virtual bool IsPropertyCustomMethodIdRemoved { get; set; }

		public virtual bool IsPropertyDecimalScaleRemoved { get; set; }

		public virtual bool IsPropertyRoundingModeRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public UomConversionStateMergePatched ()
		{
		}

		public UomConversionStateMergePatched (UomConversionEventId stateEventId) : base(stateEventId)
		{
		}


        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class UomConversionStateDeleted : UomConversionStateEventBase, IUomConversionStateDeleted
	{
		public UomConversionStateDeleted ()
		{
		}

		public UomConversionStateDeleted (UomConversionEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }



	}



}

