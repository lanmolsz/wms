// <autogenerated>
//   This file was generated by T4 code generator GenerateUomConversionDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.UomConversion;

namespace Dddml.Wms.Domain.UomConversion
{

    public class UomConversionStateEventDtoConverter
    {
        public virtual UomConversionStateCreatedOrMergePatchedOrDeletedDto ToUomConversionStateEventDto(IUomConversionEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IUomConversionStateCreated)stateEvent;
                return ToUomConversionStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IUomConversionStateMergePatched)stateEvent;
                return ToUomConversionStateMergePatchedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.Deleted)
            {
                var e = (IUomConversionStateDeleted)stateEvent;
                return ToUomConversionStateDeletedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual UomConversionStateCreatedDto ToUomConversionStateCreatedDto(IUomConversionStateCreated e)
        {
            var dto = new UomConversionStateCreatedDto();
            dto.UomConversionEventId = e.UomConversionEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.ConversionFactor = e.ConversionFactor;
            dto.CustomMethodId = e.CustomMethodId;
            dto.DecimalScale = e.DecimalScale;
            dto.RoundingMode = e.RoundingMode;
            dto.Active = e.Active;
            return dto;
        }

        public virtual UomConversionStateMergePatchedDto ToUomConversionStateMergePatchedDto(IUomConversionStateMergePatched e)
        {
            var dto = new UomConversionStateMergePatchedDto();
            dto.UomConversionEventId = e.UomConversionEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.ConversionFactor = e.ConversionFactor;
            dto.CustomMethodId = e.CustomMethodId;
            dto.DecimalScale = e.DecimalScale;
            dto.RoundingMode = e.RoundingMode;
            dto.Active = e.Active;
            dto.IsPropertyConversionFactorRemoved = e.IsPropertyConversionFactorRemoved;
            dto.IsPropertyCustomMethodIdRemoved = e.IsPropertyCustomMethodIdRemoved;
            dto.IsPropertyDecimalScaleRemoved = e.IsPropertyDecimalScaleRemoved;
            dto.IsPropertyRoundingModeRemoved = e.IsPropertyRoundingModeRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual UomConversionStateDeletedDto ToUomConversionStateDeletedDto(IUomConversionStateDeleted e)
        {
            var dto = new UomConversionStateDeletedDto();
            dto.UomConversionEventId = e.UomConversionEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

