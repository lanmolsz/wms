// <autogenerated>
//   This file was generated by T4 code generator GenerateUomConversionDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.UomConversion;

namespace Dddml.Wms.Domain.UomConversion
{

	public static partial class UomConversionStateInterfaceExtension
	{

        public static IUomConversionCommand ToCreateOrMergePatchUomConversion<TCreateUomConversion, TMergePatchUomConversion>(this IUomConversionState state)
            where TCreateUomConversion : ICreateUomConversion, new()
            where TMergePatchUomConversion : IMergePatchUomConversion, new()
        {
            bool bUnsaved = ((IUomConversionState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateUomConversion<TCreateUomConversion>();
            }
            else 
            {
                return state.ToMergePatchUomConversion<TMergePatchUomConversion>();
            }
        }

        public static TDeleteUomConversion ToDeleteUomConversion<TDeleteUomConversion>(this IUomConversionState state)
            where TDeleteUomConversion : IDeleteUomConversion, new()
        {
            var cmd = new TDeleteUomConversion();
            cmd.UomConversionId = state.UomConversionId;
            cmd.Version = ((IUomConversionStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchUomConversion ToMergePatchUomConversion<TMergePatchUomConversion>(this IUomConversionState state)
            where TMergePatchUomConversion : IMergePatchUomConversion, new()
        {
            var cmd = new TMergePatchUomConversion();

            cmd.Version = ((IUomConversionStateProperties)state).Version;

            cmd.UomConversionId = state.UomConversionId;
            cmd.ConversionFactor = state.ConversionFactor;
            cmd.CustomMethodId = state.CustomMethodId;
            cmd.DecimalScale = state.DecimalScale;
            cmd.RoundingMode = state.RoundingMode;
            cmd.Active = ((IUomConversionStateProperties)state).Active;
            
            if (state.ConversionFactor == null) { cmd.IsPropertyConversionFactorRemoved = true; }
            if (state.CustomMethodId == null) { cmd.IsPropertyCustomMethodIdRemoved = true; }
            if (state.DecimalScale == null) { cmd.IsPropertyDecimalScaleRemoved = true; }
            if (state.RoundingMode == null) { cmd.IsPropertyRoundingModeRemoved = true; }
            return cmd;
        }

        public static TCreateUomConversion ToCreateUomConversion<TCreateUomConversion>(this IUomConversionState state)
            where TCreateUomConversion : ICreateUomConversion, new()
        {
            var cmd = new TCreateUomConversion();

            cmd.Version = ((IUomConversionStateProperties)state).Version;

            cmd.UomConversionId = state.UomConversionId;
            cmd.ConversionFactor = state.ConversionFactor;
            cmd.CustomMethodId = state.CustomMethodId;
            cmd.DecimalScale = state.DecimalScale;
            cmd.RoundingMode = state.RoundingMode;
            cmd.Active = ((IUomConversionStateProperties)state).Active;
            return cmd;
        }
		

	}

}

