// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementConfirmationDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementConfirmation;

namespace Dddml.Wms.Domain.MovementConfirmation
{

	public partial class MovementConfirmationState : MovementConfirmationStateProperties, IMovementConfirmationState, ISaveable
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get
			{
				return this.DocumentNumber;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IMovementConfirmationState.IsUnsaved
        {
            get { return this.Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        private IMovementConfirmationLineStates _movementConfirmationLines;
      
        public virtual IMovementConfirmationLineStates MovementConfirmationLines
        {
            get
            {
                return this._movementConfirmationLines;
            }
            set
            {
                this._movementConfirmationLines = value;
            }
        }


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public MovementConfirmationState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.DocumentNumber = ((IMovementConfirmationStateEvent)events.First()).StateEventId.DocumentNumber;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.Version += 1;
                }
            }
        }

        public MovementConfirmationState() : this(false)
        {
        }

        public MovementConfirmationState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            _movementConfirmationLines = new MovementConfirmationLineStates(this);

            InitializeProperties();
        }


		#region Saveable Implements

        public virtual void Save()
        {
            _movementConfirmationLines.Save();

        }


		#endregion


		public virtual void When(IMovementConfirmationStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.DocumentStatusId = e.DocumentStatusId;

			this.MovementDocumentNumber = e.MovementDocumentNumber;

            this.IsApproved = (e.IsApproved != null && e.IsApproved.HasValue) ? e.IsApproved.Value : default(bool);

            this.ApprovalAmount = (e.ApprovalAmount != null && e.ApprovalAmount.HasValue) ? e.ApprovalAmount.Value : default(decimal);

            this.Processed = (e.Processed != null && e.Processed.HasValue) ? e.Processed.Value : default(bool);

			this.Processing = e.Processing;

			this.DocumentTypeId = e.DocumentTypeId;

			this.Description = e.Description;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;

			foreach (IMovementConfirmationLineStateCreated innerEvent in e.MovementConfirmationLineEvents) {
				IMovementConfirmationLineState innerState = this.MovementConfirmationLines.Get(innerEvent.GlobalId.LineNumber, true);
				innerState.Mutate (innerEvent);
			}

		}


		public virtual void When(IMovementConfirmationStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.DocumentStatusId == null)
			{
				if (e.IsPropertyDocumentStatusIdRemoved)
				{
					this.DocumentStatusId = default(string);
				}
			}
			else
			{
				this.DocumentStatusId = e.DocumentStatusId;
			}

			if (e.MovementDocumentNumber == null)
			{
				if (e.IsPropertyMovementDocumentNumberRemoved)
				{
					this.MovementDocumentNumber = default(string);
				}
			}
			else
			{
				this.MovementDocumentNumber = e.MovementDocumentNumber;
			}

			if (e.IsApproved == null)
			{
				if (e.IsPropertyIsApprovedRemoved)
				{
					this.IsApproved = default(bool);
				}
			}
			else
			{
				this.IsApproved = (e.IsApproved != null && e.IsApproved.HasValue) ? e.IsApproved.Value : default(bool);
			}

			if (e.ApprovalAmount == null)
			{
				if (e.IsPropertyApprovalAmountRemoved)
				{
					this.ApprovalAmount = default(decimal);
				}
			}
			else
			{
				this.ApprovalAmount = (e.ApprovalAmount != null && e.ApprovalAmount.HasValue) ? e.ApprovalAmount.Value : default(decimal);
			}

			if (e.Processed == null)
			{
				if (e.IsPropertyProcessedRemoved)
				{
					this.Processed = default(bool);
				}
			}
			else
			{
				this.Processed = (e.Processed != null && e.Processed.HasValue) ? e.Processed.Value : default(bool);
			}

			if (e.Processing == null)
			{
				if (e.IsPropertyProcessingRemoved)
				{
					this.Processing = default(string);
				}
			}
			else
			{
				this.Processing = e.Processing;
			}

			if (e.DocumentTypeId == null)
			{
				if (e.IsPropertyDocumentTypeIdRemoved)
				{
					this.DocumentTypeId = default(string);
				}
			}
			else
			{
				this.DocumentTypeId = e.DocumentTypeId;
			}

			if (e.Description == null)
			{
				if (e.IsPropertyDescriptionRemoved)
				{
					this.Description = default(string);
				}
			}
			else
			{
				this.Description = e.Description;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


			foreach (IMovementConfirmationLineStateEvent innerEvent in e.MovementConfirmationLineEvents)
            {
                IMovementConfirmationLineState innerState = this.MovementConfirmationLines.Get(innerEvent.GlobalId.LineNumber);

                innerState.Mutate(innerEvent);
                var removed = innerEvent as IMovementConfirmationLineStateRemoved;
                if (removed != null)
                {
                    this.MovementConfirmationLines.Remove(innerState);
                }
          
            }

		}

		public virtual void When(IMovementConfirmationStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

            foreach (var innerState in this.MovementConfirmationLines)
            {
                this.MovementConfirmationLines.Remove(innerState);
                
                var innerE = e.NewMovementConfirmationLineStateRemoved(innerState.LineNumber);
                ((MovementConfirmationLineStateEventBase)innerE).CreatedAt = e.CreatedAt;
                ((MovementConfirmationLineStateEventBase)innerE).CreatedBy = e.CreatedBy;
                innerState.When(innerE);
                //e.AddMovementConfirmationLineEvent(innerE);

            }

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IMovementConfirmationStateEvent stateEvent)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("MovementConfirmation|");

            var stateEntityId = this.DocumentNumber; // Aggregate Id
            var eventEntityId = stateEvent.StateEventId.DocumentNumber;
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.Version;
            var eventVersion = stateEvent.StateEventId.Version;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

