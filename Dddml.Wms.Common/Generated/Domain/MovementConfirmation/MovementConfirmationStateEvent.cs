// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementConfirmationDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementConfirmation;

namespace Dddml.Wms.Domain.MovementConfirmation
{

	public abstract class MovementConfirmationStateEventBase : IMovementConfirmationStateEvent
	{

		public virtual MovementConfirmationStateEventId StateEventId { get; set; }

        public virtual string DocumentNumber
        {
            get { return StateEventId.DocumentNumber; }
            set { StateEventId.DocumentNumber = value; }
        }

		public virtual string DocumentStatusId { get; set; }

		public virtual string MovementDocumentNumber { get; set; }

		public virtual bool? IsApproved { get; set; }

		public virtual decimal? ApprovalAmount { get; set; }

		public virtual bool? Processed { get; set; }

		public virtual string Processing { get; set; }

		public virtual string DocumentTypeId { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		MovementConfirmationStateEventId IGlobalIdentity<MovementConfirmationStateEventId>.GlobalId {
			get
			{
				return this.StateEventId;
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IMovementConfirmationStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected MovementConfirmationStateEventBase()
        {
        }

        protected MovementConfirmationStateEventBase(MovementConfirmationStateEventId stateEventId)
        {
            this.StateEventId = stateEventId;
        }

		protected IMovementConfirmationLineStateEventDao MovementConfirmationLineStateEventDao
		{
			get { return ApplicationContext.Current["MovementConfirmationLineStateEventDao"] as IMovementConfirmationLineStateEventDao; }
		}

        protected MovementConfirmationLineStateEventId NewMovementConfirmationLineStateEventId(string lineNumber)
        {
            var stateEventId = new MovementConfirmationLineStateEventId(this.StateEventId.DocumentNumber, lineNumber, this.StateEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IMovementConfirmationLineStateEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IMovementConfirmationStateEvent oe, IMovementConfirmationLineStateEvent e)
		{
			if (!oe.StateEventId.DocumentNumber.Equals(e.StateEventId.MovementConfirmationDocumentNumber))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id DocumentNumber {0} but inner id MovementConfirmationDocumentNumber {1}", 
					oe.StateEventId.DocumentNumber, e.StateEventId.MovementConfirmationDocumentNumber);
			}
		}



        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class MovementConfirmationStateCreated : MovementConfirmationStateEventBase, IMovementConfirmationStateCreated, ISaveable
	{
		public MovementConfirmationStateCreated () : this(new MovementConfirmationStateEventId())
		{
		}

		public MovementConfirmationStateCreated (MovementConfirmationStateEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<MovementConfirmationLineStateEventId, IMovementConfirmationLineStateCreated> _movementConfirmationLineEvents = new Dictionary<MovementConfirmationLineStateEventId, IMovementConfirmationLineStateCreated>();
        
        private IEnumerable<IMovementConfirmationLineStateCreated> _readOnlyMovementConfirmationLineEvents;

        public virtual IEnumerable<IMovementConfirmationLineStateCreated> MovementConfirmationLineEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._movementConfirmationLineEvents.Values;
                }
                else
                {
                    if (_readOnlyMovementConfirmationLineEvents != null) { return _readOnlyMovementConfirmationLineEvents; }
                    var eventDao = MovementConfirmationLineStateEventDao;
                    var eL = new List<IMovementConfirmationLineStateCreated>();
                    foreach (var e in eventDao.FindByMovementConfirmationStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IMovementConfirmationLineStateCreated)e);
                    }
                    return (_readOnlyMovementConfirmationLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddMovementConfirmationLineEvent(e);
                    }
                }
                else { this._movementConfirmationLineEvents.Clear(); }
            }
        }
    
		public virtual void AddMovementConfirmationLineEvent(IMovementConfirmationLineStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._movementConfirmationLineEvents[e.StateEventId] = e;
		}

        public virtual IMovementConfirmationLineStateCreated NewMovementConfirmationLineStateCreated(string lineNumber)
        {
            var stateEvent = new MovementConfirmationLineStateCreated(NewMovementConfirmationLineStateEventId(lineNumber));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IMovementConfirmationLineStateCreated e in this.MovementConfirmationLineEvents) {
				MovementConfirmationLineStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class MovementConfirmationStateMergePatched : MovementConfirmationStateEventBase, IMovementConfirmationStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyDocumentStatusIdRemoved { get; set; }

		public virtual bool IsPropertyMovementDocumentNumberRemoved { get; set; }

		public virtual bool IsPropertyIsApprovedRemoved { get; set; }

		public virtual bool IsPropertyApprovalAmountRemoved { get; set; }

		public virtual bool IsPropertyProcessedRemoved { get; set; }

		public virtual bool IsPropertyProcessingRemoved { get; set; }

		public virtual bool IsPropertyDocumentTypeIdRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MovementConfirmationStateMergePatched ()
		{
		}

		public MovementConfirmationStateMergePatched (MovementConfirmationStateEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<MovementConfirmationLineStateEventId, IMovementConfirmationLineStateEvent> _movementConfirmationLineEvents = new Dictionary<MovementConfirmationLineStateEventId, IMovementConfirmationLineStateEvent>();

        private IEnumerable<IMovementConfirmationLineStateEvent> _readOnlyMovementConfirmationLineEvents;
        
        public virtual IEnumerable<IMovementConfirmationLineStateEvent> MovementConfirmationLineEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._movementConfirmationLineEvents.Values;
                }
                else
                {
                    if (_readOnlyMovementConfirmationLineEvents != null) { return _readOnlyMovementConfirmationLineEvents; }
                    var eventDao = MovementConfirmationLineStateEventDao;
                    var eL = new List<IMovementConfirmationLineStateEvent>();
                    foreach (var e in eventDao.FindByMovementConfirmationStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IMovementConfirmationLineStateEvent)e);
                    }
                    return (_readOnlyMovementConfirmationLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddMovementConfirmationLineEvent(e);
                    }
                }
                else { this._movementConfirmationLineEvents.Clear(); }
            }
        }

		public virtual void AddMovementConfirmationLineEvent(IMovementConfirmationLineStateEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._movementConfirmationLineEvents[e.StateEventId] = e;
		}

        public virtual IMovementConfirmationLineStateCreated NewMovementConfirmationLineStateCreated(string lineNumber)
        {
            var stateEvent = new MovementConfirmationLineStateCreated(NewMovementConfirmationLineStateEventId(lineNumber));
            return stateEvent;
        }

        public virtual IMovementConfirmationLineStateMergePatched NewMovementConfirmationLineStateMergePatched(string lineNumber)
        {
            var stateEvent = new MovementConfirmationLineStateMergePatched(NewMovementConfirmationLineStateEventId(lineNumber));
            return stateEvent;
        }

        public virtual IMovementConfirmationLineStateRemoved NewMovementConfirmationLineStateRemoved(string lineNumber)
        {
            var stateEvent = new MovementConfirmationLineStateRemoved(NewMovementConfirmationLineStateEventId(lineNumber));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IMovementConfirmationLineStateEvent e in this.MovementConfirmationLineEvents) {
				MovementConfirmationLineStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class MovementConfirmationStateDeleted : MovementConfirmationStateEventBase, IMovementConfirmationStateDeleted, ISaveable
	{
		public MovementConfirmationStateDeleted ()
		{
		}

		public MovementConfirmationStateDeleted (MovementConfirmationStateEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

		private Dictionary<MovementConfirmationLineStateEventId, IMovementConfirmationLineStateRemoved> _movementConfirmationLineEvents = new Dictionary<MovementConfirmationLineStateEventId, IMovementConfirmationLineStateRemoved>();
		
        private IEnumerable<IMovementConfirmationLineStateRemoved> _readOnlyMovementConfirmationLineEvents;

        public virtual IEnumerable<IMovementConfirmationLineStateRemoved> MovementConfirmationLineEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._movementConfirmationLineEvents.Values;
                }
                else
                {
                    if (_readOnlyMovementConfirmationLineEvents != null) { return _readOnlyMovementConfirmationLineEvents; }
                    var eventDao = MovementConfirmationLineStateEventDao;
                    var eL = new List<IMovementConfirmationLineStateRemoved>();
                    foreach (var e in eventDao.FindByMovementConfirmationStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IMovementConfirmationLineStateRemoved)e);
                    }
                    return (_readOnlyMovementConfirmationLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddMovementConfirmationLineEvent(e);
                    }
                }
                else { this._movementConfirmationLineEvents.Clear(); }
            }
        }
	
		public virtual void AddMovementConfirmationLineEvent(IMovementConfirmationLineStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._movementConfirmationLineEvents[e.StateEventId] = e;
		}

        public virtual IMovementConfirmationLineStateRemoved NewMovementConfirmationLineStateRemoved(string lineNumber)
        {
            var stateEvent = new MovementConfirmationLineStateRemoved(NewMovementConfirmationLineStateEventId(lineNumber));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IMovementConfirmationLineStateRemoved e in this.MovementConfirmationLineEvents) {
				MovementConfirmationLineStateEventDao.Save(e);
			}
		}


	}



}

