// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementConfirmationDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementConfirmation;

namespace Dddml.Wms.Domain.MovementConfirmation
{

	public static partial class MovementConfirmationStateInterfaceExtension
	{

        public static IMovementConfirmationCommand ToCreateOrMergePatchMovementConfirmation<TCreateMovementConfirmation, TMergePatchMovementConfirmation, TCreateMovementConfirmationLine, TMergePatchMovementConfirmationLine>(this IMovementConfirmationState state)
            where TCreateMovementConfirmation : ICreateMovementConfirmation, new()
            where TMergePatchMovementConfirmation : IMergePatchMovementConfirmation, new()
            where TCreateMovementConfirmationLine : ICreateMovementConfirmationLine, new()
            where TMergePatchMovementConfirmationLine : IMergePatchMovementConfirmationLine, new()
        {
            bool bUnsaved = ((IMovementConfirmationState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateMovementConfirmation<TCreateMovementConfirmation, TCreateMovementConfirmationLine>();
            }
            else 
            {
                return state.ToMergePatchMovementConfirmation<TMergePatchMovementConfirmation, TCreateMovementConfirmationLine, TMergePatchMovementConfirmationLine>();
            }
        }

        public static TDeleteMovementConfirmation ToDeleteMovementConfirmation<TDeleteMovementConfirmation>(this IMovementConfirmationState state)
            where TDeleteMovementConfirmation : IDeleteMovementConfirmation, new()
        {
            var cmd = new TDeleteMovementConfirmation();
            cmd.DocumentNumber = state.DocumentNumber;
            cmd.Version = ((IMovementConfirmationStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchMovementConfirmation ToMergePatchMovementConfirmation<TMergePatchMovementConfirmation, TCreateMovementConfirmationLine, TMergePatchMovementConfirmationLine>(this IMovementConfirmationState state)
            where TMergePatchMovementConfirmation : IMergePatchMovementConfirmation, new()
            where TCreateMovementConfirmationLine : ICreateMovementConfirmationLine, new()
            where TMergePatchMovementConfirmationLine : IMergePatchMovementConfirmationLine, new()
        {
            var cmd = new TMergePatchMovementConfirmation();

            cmd.Version = ((IMovementConfirmationStateProperties)state).Version;

            cmd.DocumentNumber = state.DocumentNumber;
            cmd.MovementDocumentNumber = state.MovementDocumentNumber;
            cmd.IsApproved = state.IsApproved;
            cmd.ApprovalAmount = state.ApprovalAmount;
            cmd.Processed = state.Processed;
            cmd.Processing = state.Processing;
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Description = state.Description;
            cmd.Active = ((IMovementConfirmationStateProperties)state).Active;
            
            if (state.MovementDocumentNumber == null) { cmd.IsPropertyMovementDocumentNumberRemoved = true; }
            if (state.Processing == null) { cmd.IsPropertyProcessingRemoved = true; }
            if (state.DocumentTypeId == null) { cmd.IsPropertyDocumentTypeIdRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            foreach (var d in state.MovementConfirmationLines)
            {
                var c = d.ToCreateOrMergePatchMovementConfirmationLine<TCreateMovementConfirmationLine, TMergePatchMovementConfirmationLine>();
                cmd.MovementConfirmationLineCommands.Add(c);
            }
            return cmd;
        }

        public static TCreateMovementConfirmation ToCreateMovementConfirmation<TCreateMovementConfirmation, TCreateMovementConfirmationLine>(this IMovementConfirmationState state)
            where TCreateMovementConfirmation : ICreateMovementConfirmation, new()
            where TCreateMovementConfirmationLine : ICreateMovementConfirmationLine, new()
        {
            var cmd = new TCreateMovementConfirmation();

            cmd.Version = ((IMovementConfirmationStateProperties)state).Version;

            cmd.DocumentNumber = state.DocumentNumber;
            cmd.MovementDocumentNumber = state.MovementDocumentNumber;
            cmd.IsApproved = state.IsApproved;
            cmd.ApprovalAmount = state.ApprovalAmount;
            cmd.Processed = state.Processed;
            cmd.Processing = state.Processing;
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Description = state.Description;
            cmd.Active = ((IMovementConfirmationStateProperties)state).Active;
            foreach (var d in state.MovementConfirmationLines)
            {
                var c = d.ToCreateMovementConfirmationLine<TCreateMovementConfirmationLine>();
                cmd.MovementConfirmationLines.Add(c);
            }
            return cmd;
        }
		

	}

}

