// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public abstract class AttributeSetInstanceExtensionFieldGroupStateEventBase : IAttributeSetInstanceExtensionFieldGroupStateEvent
	{

		public virtual AttributeSetInstanceExtensionFieldGroupStateEventId StateEventId { get; set; }

		public virtual string FieldType { get; set; }

		public virtual int? FieldLength { get; set; }

		public virtual int? FieldCount { get; set; }

		public virtual string NameFormat { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		AttributeSetInstanceExtensionFieldGroupStateEventId IGlobalIdentity<AttributeSetInstanceExtensionFieldGroupStateEventId>.GlobalId {
			get
			{
				return this.StateEventId;
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IAttributeSetInstanceExtensionFieldGroupStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected AttributeSetInstanceExtensionFieldGroupStateEventBase()
        {
        }

        protected AttributeSetInstanceExtensionFieldGroupStateEventBase(AttributeSetInstanceExtensionFieldGroupStateEventId stateEventId)
        {
            this.StateEventId = stateEventId;
        }

		protected IAttributeSetInstanceExtensionFieldStateEventDao AttributeSetInstanceExtensionFieldStateEventDao
		{
			get { return ApplicationContext.Current["AttributeSetInstanceExtensionFieldStateEventDao"] as IAttributeSetInstanceExtensionFieldStateEventDao; }
		}

        protected AttributeSetInstanceExtensionFieldStateEventId NewAttributeSetInstanceExtensionFieldStateEventId(string index)
        {
            var stateEventId = new AttributeSetInstanceExtensionFieldStateEventId(this.StateEventId.Id, index, this.StateEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IAttributeSetInstanceExtensionFieldStateEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IAttributeSetInstanceExtensionFieldGroupStateEvent oe, IAttributeSetInstanceExtensionFieldStateEvent e)
		{
			if (!oe.StateEventId.Id.Equals(e.StateEventId.GroupId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id Id {0} but inner id GroupId {1}", 
					oe.StateEventId.Id, e.StateEventId.GroupId);
			}
		}



        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class AttributeSetInstanceExtensionFieldGroupStateCreated : AttributeSetInstanceExtensionFieldGroupStateEventBase, IAttributeSetInstanceExtensionFieldGroupStateCreated, ISaveable
	{
		public AttributeSetInstanceExtensionFieldGroupStateCreated ()
		{
		}

		public AttributeSetInstanceExtensionFieldGroupStateCreated (AttributeSetInstanceExtensionFieldGroupStateEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<AttributeSetInstanceExtensionFieldStateEventId, IAttributeSetInstanceExtensionFieldStateCreated> _attributeSetInstanceExtensionFieldEvents = new Dictionary<AttributeSetInstanceExtensionFieldStateEventId, IAttributeSetInstanceExtensionFieldStateCreated>();
		
        private IEnumerable<IAttributeSetInstanceExtensionFieldStateCreated> _readOnlyAttributeSetInstanceExtensionFieldEvents;

        public virtual IEnumerable<IAttributeSetInstanceExtensionFieldStateCreated> AttributeSetInstanceExtensionFieldEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
					return this._attributeSetInstanceExtensionFieldEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeSetInstanceExtensionFieldEvents != null) { return _readOnlyAttributeSetInstanceExtensionFieldEvents; }
                    var eventDao = AttributeSetInstanceExtensionFieldStateEventDao;
                    var eL = new List<IAttributeSetInstanceExtensionFieldStateCreated>();
                    foreach (var e in eventDao.FindByAttributeSetInstanceExtensionFieldGroupStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeSetInstanceExtensionFieldStateCreated)e);
                    }
                    return (_readOnlyAttributeSetInstanceExtensionFieldEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeSetInstanceExtensionFieldEvent(e);
                    }
                }
                else { this._attributeSetInstanceExtensionFieldEvents.Clear(); }
            }
        }
	
		public virtual void AddAttributeSetInstanceExtensionFieldEvent(IAttributeSetInstanceExtensionFieldStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeSetInstanceExtensionFieldEvents[e.StateEventId] = e;
		}

        public virtual IAttributeSetInstanceExtensionFieldStateCreated NewAttributeSetInstanceExtensionFieldStateCreated(string index)
        {
            var stateEvent = new AttributeSetInstanceExtensionFieldStateCreated(NewAttributeSetInstanceExtensionFieldStateEventId(index));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeSetInstanceExtensionFieldStateCreated e in this.AttributeSetInstanceExtensionFieldEvents) {
				AttributeSetInstanceExtensionFieldStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class AttributeSetInstanceExtensionFieldGroupStateMergePatched : AttributeSetInstanceExtensionFieldGroupStateEventBase, IAttributeSetInstanceExtensionFieldGroupStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyFieldTypeRemoved { get; set; }

		public virtual bool IsPropertyFieldLengthRemoved { get; set; }

		public virtual bool IsPropertyFieldCountRemoved { get; set; }

		public virtual bool IsPropertyNameFormatRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public AttributeSetInstanceExtensionFieldGroupStateMergePatched ()
		{
		}

		public AttributeSetInstanceExtensionFieldGroupStateMergePatched (AttributeSetInstanceExtensionFieldGroupStateEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<AttributeSetInstanceExtensionFieldStateEventId, IAttributeSetInstanceExtensionFieldStateEvent> _attributeSetInstanceExtensionFieldEvents = new Dictionary<AttributeSetInstanceExtensionFieldStateEventId, IAttributeSetInstanceExtensionFieldStateEvent>();

	    private IEnumerable<IAttributeSetInstanceExtensionFieldStateEvent> _readOnlyAttributeSetInstanceExtensionFieldEvents;
		
        public virtual IEnumerable<IAttributeSetInstanceExtensionFieldStateEvent> AttributeSetInstanceExtensionFieldEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
					return this._attributeSetInstanceExtensionFieldEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeSetInstanceExtensionFieldEvents != null) { return _readOnlyAttributeSetInstanceExtensionFieldEvents; }
                    var eventDao = AttributeSetInstanceExtensionFieldStateEventDao;
                    var eL = new List<IAttributeSetInstanceExtensionFieldStateEvent>();
                    foreach (var e in eventDao.FindByAttributeSetInstanceExtensionFieldGroupStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeSetInstanceExtensionFieldStateEvent)e);
                    }
                    return (_readOnlyAttributeSetInstanceExtensionFieldEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeSetInstanceExtensionFieldEvent(e);
                    }
                }
                else { this._attributeSetInstanceExtensionFieldEvents.Clear(); }
            }
        }

		public virtual void AddAttributeSetInstanceExtensionFieldEvent(IAttributeSetInstanceExtensionFieldStateEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeSetInstanceExtensionFieldEvents[e.StateEventId] = e;
		}

        public virtual IAttributeSetInstanceExtensionFieldStateCreated NewAttributeSetInstanceExtensionFieldStateCreated(string index)
        {
            var stateEvent = new AttributeSetInstanceExtensionFieldStateCreated(NewAttributeSetInstanceExtensionFieldStateEventId(index));
            return stateEvent;
        }

        public virtual IAttributeSetInstanceExtensionFieldStateMergePatched NewAttributeSetInstanceExtensionFieldStateMergePatched(string index)
        {
            var stateEvent = new AttributeSetInstanceExtensionFieldStateMergePatched(NewAttributeSetInstanceExtensionFieldStateEventId(index));
            return stateEvent;
        }

        public virtual IAttributeSetInstanceExtensionFieldStateRemoved NewAttributeSetInstanceExtensionFieldStateRemoved(string index)
        {
            var stateEvent = new AttributeSetInstanceExtensionFieldStateRemoved(NewAttributeSetInstanceExtensionFieldStateEventId(index));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeSetInstanceExtensionFieldStateEvent e in this.AttributeSetInstanceExtensionFieldEvents) {
				AttributeSetInstanceExtensionFieldStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class AttributeSetInstanceExtensionFieldGroupStateDeleted : AttributeSetInstanceExtensionFieldGroupStateEventBase, IAttributeSetInstanceExtensionFieldGroupStateDeleted, ISaveable
	{
		public AttributeSetInstanceExtensionFieldGroupStateDeleted ()
		{
		}

		public AttributeSetInstanceExtensionFieldGroupStateDeleted (AttributeSetInstanceExtensionFieldGroupStateEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

		private Dictionary<AttributeSetInstanceExtensionFieldStateEventId, IAttributeSetInstanceExtensionFieldStateRemoved> _attributeSetInstanceExtensionFieldEvents = new Dictionary<AttributeSetInstanceExtensionFieldStateEventId, IAttributeSetInstanceExtensionFieldStateRemoved>();
		
        private IEnumerable<IAttributeSetInstanceExtensionFieldStateRemoved> _readOnlyAttributeSetInstanceExtensionFieldEvents;

        public virtual IEnumerable<IAttributeSetInstanceExtensionFieldStateRemoved> AttributeSetInstanceExtensionFieldEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
					return this._attributeSetInstanceExtensionFieldEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeSetInstanceExtensionFieldEvents != null) { return _readOnlyAttributeSetInstanceExtensionFieldEvents; }
                    var eventDao = AttributeSetInstanceExtensionFieldStateEventDao;
                    var eL = new List<IAttributeSetInstanceExtensionFieldStateRemoved>();
                    foreach (var e in eventDao.FindByAttributeSetInstanceExtensionFieldGroupStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeSetInstanceExtensionFieldStateRemoved)e);
                    }
                    return (_readOnlyAttributeSetInstanceExtensionFieldEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeSetInstanceExtensionFieldEvent(e);
                    }
                }
                else { this._attributeSetInstanceExtensionFieldEvents.Clear(); }
            }
        }
	
		public virtual void AddAttributeSetInstanceExtensionFieldEvent(IAttributeSetInstanceExtensionFieldStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeSetInstanceExtensionFieldEvents[e.StateEventId] = e;
		}

        public virtual IAttributeSetInstanceExtensionFieldStateRemoved NewAttributeSetInstanceExtensionFieldStateRemoved(string index)
        {
            var stateEvent = new AttributeSetInstanceExtensionFieldStateRemoved(NewAttributeSetInstanceExtensionFieldStateEventId(index));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeSetInstanceExtensionFieldStateRemoved e in this.AttributeSetInstanceExtensionFieldEvents) {
				AttributeSetInstanceExtensionFieldStateEventDao.Save(e);
			}
		}


	}



}

