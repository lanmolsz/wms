// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistBinDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PicklistBin;

namespace Dddml.Wms.Domain.PicklistBin
{

    public class PicklistItemStateEventDtoConverter
    {
        public virtual PicklistItemStateCreatedOrMergePatchedOrRemovedDto ToPicklistItemStateEventDto(IPicklistItemStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IPicklistItemStateCreated)stateEvent;
                return ToPicklistItemStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IPicklistItemStateMergePatched)stateEvent;
                return ToPicklistItemStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Removed)
            {
                var e = (IPicklistItemStateRemoved)stateEvent;
                return ToPicklistItemStateRemovedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual PicklistItemStateCreatedDto ToPicklistItemStateCreatedDto(IPicklistItemStateCreated e)
        {
            var dto = new PicklistItemStateCreatedDto();
            dto.PicklistItemEventId = e.PicklistItemEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.ItemStatusId = e.ItemStatusId;
            dto.Quantity = e.Quantity;
            dto.Active = e.Active;
            return dto;
        }

        public virtual PicklistItemStateMergePatchedDto ToPicklistItemStateMergePatchedDto(IPicklistItemStateMergePatched e)
        {
            var dto = new PicklistItemStateMergePatchedDto();
            dto.PicklistItemEventId = e.PicklistItemEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.ItemStatusId = e.ItemStatusId;
            dto.Quantity = e.Quantity;
            dto.Active = e.Active;
            dto.IsPropertyItemStatusIdRemoved = e.IsPropertyItemStatusIdRemoved;
            dto.IsPropertyQuantityRemoved = e.IsPropertyQuantityRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual PicklistItemStateRemovedDto ToPicklistItemStateRemovedDto(IPicklistItemStateRemoved e)
        {
            var dto = new PicklistItemStateRemovedDto();
            dto.PicklistItemEventId = e.PicklistItemEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

