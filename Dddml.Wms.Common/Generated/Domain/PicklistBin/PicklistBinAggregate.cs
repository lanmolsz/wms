// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistBinDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PicklistBin;

namespace Dddml.Wms.Domain.PicklistBin
{
    public partial class PicklistBinAggregate : AggregateBase, IPicklistBinAggregate
    {

        readonly IPicklistBinState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IPicklistBinState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public PicklistBinAggregate(IPicklistBinState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IPicklistBinStateProperties)_state).Version == PicklistBinState.VersionZero)
            {
                if (IsCommandCreate((IPicklistBinCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IPicklistBinCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IPicklistBinCommand c)
        {
            return c.Version == PicklistBinState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreatePicklistBin c)
        {
            IPicklistBinStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchPicklistBin c)
        {
            IPicklistBinStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeletePicklistBin c)
        {
            IPicklistBinStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IPicklistBinStateCreated Map(ICreatePicklistBin c)
        {
			var stateEventId = new PicklistBinEventId(c.PicklistBinId, c.Version);
            IPicklistBinStateCreated e = NewPicklistBinStateCreated(stateEventId);
		
            e.PicklistId = c.PicklistId;
            e.BinLocationNumber = c.BinLocationNumber;
            e.PrimaryOrderId = c.PrimaryOrderId;
            e.PrimaryShipGroupSeqId = c.PrimaryShipGroupSeqId;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;

            foreach (ICreatePicklistItem innerCommand in c.PicklistItems)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IPicklistItemStateCreated innerEvent = MapCreate(innerCommand, c, version, _state);
                e.AddPicklistItemEvent(innerEvent);
            }


            return e;
        }

        protected virtual IPicklistBinStateMergePatched Map(IMergePatchPicklistBin c)
        {
			var stateEventId = new PicklistBinEventId(c.PicklistBinId, c.Version);
            IPicklistBinStateMergePatched e = NewPicklistBinStateMergePatched(stateEventId);

            e.PicklistId = c.PicklistId;
            e.BinLocationNumber = c.BinLocationNumber;
            e.PrimaryOrderId = c.PrimaryOrderId;
            e.PrimaryShipGroupSeqId = c.PrimaryShipGroupSeqId;
            e.Active = c.Active;
            e.IsPropertyPicklistIdRemoved = c.IsPropertyPicklistIdRemoved;
            e.IsPropertyBinLocationNumberRemoved = c.IsPropertyBinLocationNumberRemoved;
            e.IsPropertyPrimaryOrderIdRemoved = c.IsPropertyPrimaryOrderIdRemoved;
            e.IsPropertyPrimaryShipGroupSeqIdRemoved = c.IsPropertyPrimaryShipGroupSeqIdRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;

            foreach (IPicklistItemCommand innerCommand in c.PicklistItemCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IPicklistItemEvent innerEvent = Map(innerCommand, c, version, _state);
                e.AddPicklistItemEvent(innerEvent);
            }


            return e;
        }

        protected virtual IPicklistBinStateDeleted Map(IDeletePicklistBin c)
        {
			var stateEventId = new PicklistBinEventId(c.PicklistBinId, c.Version);
            IPicklistBinStateDeleted e = NewPicklistBinStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }


        protected void ThrowOnInconsistentCommands(IPicklistBinCommand command, IPicklistItemCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrDeletePicklistBin;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemovePicklistItem;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.PicklistBinId == default(string))
            {
                innerProperties.PicklistBinId = properties.PicklistBinId;
            }
            else
            {
                var outerPicklistBinIdName = "PicklistBinId";
                var outerPicklistBinIdValue = properties.PicklistBinId;
                var innerPicklistBinIdName = "PicklistBinId";
                var innerPicklistBinIdValue = innerProperties.PicklistBinId;
                ThrowOnInconsistentIds(innerProperties, innerPicklistBinIdName, innerPicklistBinIdValue, outerPicklistBinIdName, outerPicklistBinIdValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected virtual IPicklistItemEvent Map(IPicklistItemCommand c, IPicklistBinCommand outerCommand, long version, IPicklistBinState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreatePicklistItem) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            var merge = (c.CommandType == CommandType.MergePatch || c.CommandType == null) ? (c as IMergePatchPicklistItem) : null;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, version, outerState);
            }

            var remove = (c.CommandType == CommandType.Remove) ? (c as IRemovePicklistItem) : null;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, version);
            }
            throw new NotSupportedException();
        }


        protected virtual IPicklistItemStateCreated MapCreate(ICreatePicklistItem c, IPicklistBinCommand outerCommand, long version, IPicklistBinState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new PicklistItemEventId(c.PicklistBinId, c.PicklistItemOrderShipGrpInvId, version);
            IPicklistItemStateCreated e = NewPicklistItemStateCreated(stateEventId);
            var s = outerState.PicklistItems.Get(c.PicklistItemOrderShipGrpInvId, true);

            e.ItemStatusId = c.ItemStatusId;
            e.Quantity = c.Quantity;
            e.Active = c.Active;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IPicklistItemStateMergePatched MapMergePatch(IMergePatchPicklistItem c, IPicklistBinCommand outerCommand, long version, IPicklistBinState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new PicklistItemEventId(c.PicklistBinId, c.PicklistItemOrderShipGrpInvId, version);
            IPicklistItemStateMergePatched e = NewPicklistItemStateMergePatched(stateEventId);
            var s = outerState.PicklistItems.Get(c.PicklistItemOrderShipGrpInvId);

            e.ItemStatusId = c.ItemStatusId;
            e.Quantity = c.Quantity;
            e.Active = c.Active;
            e.IsPropertyItemStatusIdRemoved = c.IsPropertyItemStatusIdRemoved;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IPicklistItemStateRemoved MapRemove(IRemovePicklistItem c, IPicklistBinCommand outerCommand, long version)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new PicklistItemEventId(c.PicklistBinId, c.PicklistItemOrderShipGrpInvId, version);
            IPicklistItemStateRemoved e = NewPicklistItemStateRemoved(stateEventId);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;

        }// END Map(IRemove... ////////////////////////////

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected PicklistBinStateCreated NewPicklistBinStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new PicklistBinEventId(_state.PicklistBinId, version);
            var e = NewPicklistBinStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected PicklistBinStateMergePatched NewPicklistBinStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new PicklistBinEventId(_state.PicklistBinId, version);
            var e = NewPicklistBinStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected PicklistBinStateDeleted NewPicklistBinStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new PicklistBinEventId(_state.PicklistBinId, version);
            var e = NewPicklistBinStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private PicklistBinStateCreated NewPicklistBinStateCreated(PicklistBinEventId stateEventId)
		{
			return new PicklistBinStateCreated(stateEventId);			
		}

        private PicklistBinStateMergePatched NewPicklistBinStateMergePatched(PicklistBinEventId stateEventId)
		{
			return new PicklistBinStateMergePatched(stateEventId);
		}

        private PicklistBinStateDeleted NewPicklistBinStateDeleted(PicklistBinEventId stateEventId)
		{
			return new PicklistBinStateDeleted(stateEventId);
		}

		private PicklistItemStateCreated NewPicklistItemStateCreated(PicklistItemEventId stateEventId)
		{
			return new PicklistItemStateCreated(stateEventId);
		}

        private PicklistItemStateMergePatched NewPicklistItemStateMergePatched(PicklistItemEventId stateEventId)
		{
			return new PicklistItemStateMergePatched(stateEventId);
		}

        private PicklistItemStateRemoved NewPicklistItemStateRemoved(PicklistItemEventId stateEventId)
		{
			return new PicklistItemStateRemoved(stateEventId);
		}

    }

}

