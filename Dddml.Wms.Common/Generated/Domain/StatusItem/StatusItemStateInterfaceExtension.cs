// <autogenerated>
//   This file was generated by T4 code generator GenerateStatusItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.StatusItem;

namespace Dddml.Wms.Domain.StatusItem
{

	public static partial class StatusItemStateInterfaceExtension
	{

        public static IStatusItemCommand ToCreateOrMergePatchStatusItem<TCreateStatusItem, TMergePatchStatusItem>(this IStatusItemState state)
            where TCreateStatusItem : ICreateStatusItem, new()
            where TMergePatchStatusItem : IMergePatchStatusItem, new()
        {
            bool bUnsaved = ((IStatusItemState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateStatusItem<TCreateStatusItem>();
            }
            else 
            {
                return state.ToMergePatchStatusItem<TMergePatchStatusItem>();
            }
        }

        public static TDeleteStatusItem ToDeleteStatusItem<TDeleteStatusItem>(this IStatusItemState state)
            where TDeleteStatusItem : IDeleteStatusItem, new()
        {
            var cmd = new TDeleteStatusItem();
            cmd.StatusId = state.StatusId;
            cmd.Version = ((IStatusItemStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchStatusItem ToMergePatchStatusItem<TMergePatchStatusItem>(this IStatusItemState state)
            where TMergePatchStatusItem : IMergePatchStatusItem, new()
        {
            var cmd = new TMergePatchStatusItem();

            cmd.Version = ((IStatusItemStateProperties)state).Version;

            cmd.StatusId = state.StatusId;
            cmd.StatusTypeId = state.StatusTypeId;
            cmd.StatusCode = state.StatusCode;
            cmd.SequenceId = state.SequenceId;
            cmd.Description = state.Description;
            cmd.Active = ((IStatusItemStateProperties)state).Active;
            
            if (state.StatusTypeId == null) { cmd.IsPropertyStatusTypeIdRemoved = true; }
            if (state.StatusCode == null) { cmd.IsPropertyStatusCodeRemoved = true; }
            if (state.SequenceId == null) { cmd.IsPropertySequenceIdRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreateStatusItem ToCreateStatusItem<TCreateStatusItem>(this IStatusItemState state)
            where TCreateStatusItem : ICreateStatusItem, new()
        {
            var cmd = new TCreateStatusItem();

            cmd.Version = ((IStatusItemStateProperties)state).Version;

            cmd.StatusId = state.StatusId;
            cmd.StatusTypeId = state.StatusTypeId;
            cmd.StatusCode = state.StatusCode;
            cmd.SequenceId = state.SequenceId;
            cmd.Description = state.Description;
            cmd.Active = ((IStatusItemStateProperties)state).Active;
            return cmd;
        }
		

	}

}

