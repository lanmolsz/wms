// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public static partial class YearPlanStateInterfaceExtensions
	{

        public static IYearPlanCommand ToCreateOrMergePatchYearPlan<TCreateYearPlan, TMergePatchYearPlan, TCreateMonthPlan, TMergePatchMonthPlan, TCreateDayPlan, TMergePatchDayPlan>(this IYearPlanState state)
            where TCreateYearPlan : ICreateYearPlan, new()
            where TMergePatchYearPlan : IMergePatchYearPlan, new()
            where TCreateMonthPlan : ICreateMonthPlan, new()
            where TMergePatchMonthPlan : IMergePatchMonthPlan, new()
            where TCreateDayPlan : ICreateDayPlan, new()
            where TMergePatchDayPlan : IMergePatchDayPlan, new()
        {
            bool bUnsaved = ((IYearPlanState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateYearPlan<TCreateYearPlan, TCreateMonthPlan, TCreateDayPlan>();
            }
            else 
            {
                return state.ToMergePatchYearPlan<TMergePatchYearPlan, TCreateMonthPlan, TMergePatchMonthPlan, TCreateDayPlan, TMergePatchDayPlan>();
            }
        }

        public static TRemoveYearPlan ToRemoveYearPlan<TRemoveYearPlan>(this IYearPlanState state)
            where TRemoveYearPlan : IRemoveYearPlan, new()
        {
            var cmd = new TRemoveYearPlan();
            cmd.Year = state.Year;
            return cmd;
        }

        public static TMergePatchYearPlan ToMergePatchYearPlan<TMergePatchYearPlan, TCreateMonthPlan, TMergePatchMonthPlan, TCreateDayPlan, TMergePatchDayPlan>(this IYearPlanState state)
            where TMergePatchYearPlan : IMergePatchYearPlan, new()
            where TCreateMonthPlan : ICreateMonthPlan, new()
            where TMergePatchMonthPlan : IMergePatchMonthPlan, new()
            where TCreateDayPlan : ICreateDayPlan, new()
            where TMergePatchDayPlan : IMergePatchDayPlan, new()
        {
            var cmd = new TMergePatchYearPlan();

            cmd.Year = state.Year;
            cmd.Description = state.Description;
            cmd.Active = ((IYearPlanStateProperties)state).Active;
            cmd.PersonalName = state.PersonalName;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            foreach (var d in state.MonthPlans)
            {
                var c = d.ToCreateOrMergePatchMonthPlan<TCreateMonthPlan, TMergePatchMonthPlan, TCreateDayPlan, TMergePatchDayPlan>();
                cmd.MonthPlanCommands.Add(c);
            }
            return cmd;
        }

        public static TCreateYearPlan ToCreateYearPlan<TCreateYearPlan, TCreateMonthPlan, TCreateDayPlan>(this IYearPlanState state)
            where TCreateYearPlan : ICreateYearPlan, new()
            where TCreateMonthPlan : ICreateMonthPlan, new()
            where TCreateDayPlan : ICreateDayPlan, new()
        {
            var cmd = new TCreateYearPlan();

            cmd.Year = state.Year;
            cmd.Description = state.Description;
            cmd.Active = ((IYearPlanStateProperties)state).Active;
            cmd.PersonalName = state.PersonalName;
            foreach (var d in state.MonthPlans)
            {
                var c = d.ToCreateMonthPlan<TCreateMonthPlan, TCreateDayPlan>();
                cmd.MonthPlans.Add(c);
            }
            return cmd;
        }
		

	}

}

