// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public static partial class DayPlanStateInterfaceExtensions
	{

        public static IDayPlanCommand ToCreateOrMergePatchDayPlan<TCreateDayPlan, TMergePatchDayPlan>(this IDayPlanState state)
            where TCreateDayPlan : ICreateDayPlan, new()
            where TMergePatchDayPlan : IMergePatchDayPlan, new()
        {
            bool bUnsaved = ((IDayPlanState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateDayPlan<TCreateDayPlan>();
            }
            else 
            {
                return state.ToMergePatchDayPlan<TMergePatchDayPlan>();
            }
        }

        public static TRemoveDayPlan ToRemoveDayPlan<TRemoveDayPlan>(this IDayPlanState state)
            where TRemoveDayPlan : IRemoveDayPlan, new()
        {
            var cmd = new TRemoveDayPlan();
            cmd.Day = state.Day;
            return cmd;
        }

        public static TMergePatchDayPlan ToMergePatchDayPlan<TMergePatchDayPlan>(this IDayPlanState state)
            where TMergePatchDayPlan : IMergePatchDayPlan, new()
        {
            var cmd = new TMergePatchDayPlan();

            cmd.Day = state.Day;
            cmd.Description = state.Description;
            cmd.Active = ((IDayPlanStateProperties)state).Active;
            cmd.PersonalName = state.PersonalName;
            cmd.Year = state.Year;
            cmd.Month = state.Month;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreateDayPlan ToCreateDayPlan<TCreateDayPlan>(this IDayPlanState state)
            where TCreateDayPlan : ICreateDayPlan, new()
        {
            var cmd = new TCreateDayPlan();

            cmd.Day = state.Day;
            cmd.Description = state.Description;
            cmd.Active = ((IDayPlanStateProperties)state).Active;
            cmd.PersonalName = state.PersonalName;
            cmd.Year = state.Year;
            cmd.Month = state.Month;
            return cmd;
        }
		

	}

}

