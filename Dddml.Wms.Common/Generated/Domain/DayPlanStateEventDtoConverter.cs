// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class DayPlanStateEventDtoConverter
    {
        public virtual DayPlanStateCreatedOrMergePatchedOrRemovedDto ToDayPlanStateEventDto(IDayPlanStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IDayPlanStateCreated)stateEvent;
                return ToDayPlanStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IDayPlanStateMergePatched)stateEvent;
                return ToDayPlanStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Removed)
            {
                var e = (IDayPlanStateRemoved)stateEvent;
                return ToDayPlanStateRemovedDto(e);
            }

            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual DayPlanStateCreatedDto ToDayPlanStateCreatedDto(IDayPlanStateCreated e)
        {
            var dto = new DayPlanStateCreatedDto();
            dto.StateEventId = new DayPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            return dto;
        }

        public virtual DayPlanStateMergePatchedDto ToDayPlanStateMergePatchedDto(IDayPlanStateMergePatched e)
        {
            var dto = new DayPlanStateMergePatchedDto();
            dto.StateEventId = new DayPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual DayPlanStateRemovedDto ToDayPlanStateRemovedDto(IDayPlanStateRemoved e)
        {
            var dto = new DayPlanStateRemovedDto();
            dto.StateEventId = new DayPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

