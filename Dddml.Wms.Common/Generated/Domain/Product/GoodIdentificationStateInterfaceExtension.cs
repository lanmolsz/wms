// <autogenerated>
//   This file was generated by T4 code generator GenerateProductDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Product;

namespace Dddml.Wms.Domain.Product
{

	public static partial class GoodIdentificationStateInterfaceExtension
	{

        public static IGoodIdentificationCommand ToCreateOrMergePatchGoodIdentification<TCreateGoodIdentification, TMergePatchGoodIdentification>(this IGoodIdentificationState state)
            where TCreateGoodIdentification : ICreateGoodIdentification, new()
            where TMergePatchGoodIdentification : IMergePatchGoodIdentification, new()
        {
            bool bUnsaved = ((IGoodIdentificationState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateGoodIdentification<TCreateGoodIdentification>();
            }
            else 
            {
                return state.ToMergePatchGoodIdentification<TMergePatchGoodIdentification>();
            }
        }

        public static TRemoveGoodIdentification ToRemoveGoodIdentification<TRemoveGoodIdentification>(this IGoodIdentificationState state)
            where TRemoveGoodIdentification : IRemoveGoodIdentification, new()
        {
            var cmd = new TRemoveGoodIdentification();
            cmd.GoodIdentificationTypeId = state.GoodIdentificationTypeId;
            return cmd;
        }

        public static TMergePatchGoodIdentification ToMergePatchGoodIdentification<TMergePatchGoodIdentification>(this IGoodIdentificationState state)
            where TMergePatchGoodIdentification : IMergePatchGoodIdentification, new()
        {
            var cmd = new TMergePatchGoodIdentification();

            cmd.GoodIdentificationTypeId = state.GoodIdentificationTypeId;
            cmd.IdValue = state.IdValue;
            cmd.Active = ((IGoodIdentificationStateProperties)state).Active;
            cmd.ProductId = state.ProductId;
            
            if (state.IdValue == null) { cmd.IsPropertyIdValueRemoved = true; }
            return cmd;
        }

        public static TCreateGoodIdentification ToCreateGoodIdentification<TCreateGoodIdentification>(this IGoodIdentificationState state)
            where TCreateGoodIdentification : ICreateGoodIdentification, new()
        {
            var cmd = new TCreateGoodIdentification();

            cmd.GoodIdentificationTypeId = state.GoodIdentificationTypeId;
            cmd.IdValue = state.IdValue;
            cmd.Active = ((IGoodIdentificationStateProperties)state).Active;
            cmd.ProductId = state.ProductId;
            return cmd;
        }
		

	}

}

