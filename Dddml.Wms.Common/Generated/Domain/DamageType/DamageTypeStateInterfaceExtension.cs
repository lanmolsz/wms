// <autogenerated>
//   This file was generated by T4 code generator GenerateDamageTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DamageType;

namespace Dddml.Wms.Domain.DamageType
{

	public static partial class DamageTypeStateInterfaceExtension
	{

        public static IDamageTypeCommand ToCreateOrMergePatchDamageType<TCreateDamageType, TMergePatchDamageType>(this IDamageTypeState state)
            where TCreateDamageType : ICreateDamageType, new()
            where TMergePatchDamageType : IMergePatchDamageType, new()
        {
            bool bUnsaved = ((IDamageTypeState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateDamageType<TCreateDamageType>();
            }
            else 
            {
                return state.ToMergePatchDamageType<TMergePatchDamageType>();
            }
        }

        public static TDeleteDamageType ToDeleteDamageType<TDeleteDamageType>(this IDamageTypeState state)
            where TDeleteDamageType : IDeleteDamageType, new()
        {
            var cmd = new TDeleteDamageType();
            cmd.DamageTypeId = state.DamageTypeId;
            cmd.Version = ((IDamageTypeStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchDamageType ToMergePatchDamageType<TMergePatchDamageType>(this IDamageTypeState state)
            where TMergePatchDamageType : IMergePatchDamageType, new()
        {
            var cmd = new TMergePatchDamageType();

            cmd.Version = ((IDamageTypeStateProperties)state).Version;

            cmd.DamageTypeId = state.DamageTypeId;
            cmd.Description = state.Description;
            cmd.SequenceId = state.SequenceId;
            cmd.DefaultHandlingMethodId = state.DefaultHandlingMethodId;
            cmd.Active = ((IDamageTypeStateProperties)state).Active;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.SequenceId == null) { cmd.IsPropertySequenceIdRemoved = true; }
            if (state.DefaultHandlingMethodId == null) { cmd.IsPropertyDefaultHandlingMethodIdRemoved = true; }
            return cmd;
        }

        public static TCreateDamageType ToCreateDamageType<TCreateDamageType>(this IDamageTypeState state)
            where TCreateDamageType : ICreateDamageType, new()
        {
            var cmd = new TCreateDamageType();

            cmd.Version = ((IDamageTypeStateProperties)state).Version;

            cmd.DamageTypeId = state.DamageTypeId;
            cmd.Description = state.Description;
            cmd.SequenceId = state.SequenceId;
            cmd.DefaultHandlingMethodId = state.DefaultHandlingMethodId;
            cmd.Active = ((IDamageTypeStateProperties)state).Active;
            return cmd;
        }
		

	}

}

