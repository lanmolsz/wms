// <autogenerated>
//   This file was generated by T4 code generator GenerateDamageTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DamageType;

namespace Dddml.Wms.Domain.DamageType
{

    public class DamageTypeStateEventDtoConverter
    {
        public virtual DamageTypeStateCreatedOrMergePatchedOrDeletedDto ToDamageTypeStateEventDto(IDamageTypeStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IDamageTypeStateCreated)stateEvent;
                return ToDamageTypeStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IDamageTypeStateMergePatched)stateEvent;
                return ToDamageTypeStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (IDamageTypeStateDeleted)stateEvent;
                return ToDamageTypeStateDeletedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual DamageTypeStateCreatedDto ToDamageTypeStateCreatedDto(IDamageTypeStateCreated e)
        {
            var dto = new DamageTypeStateCreatedDto();
            dto.DamageTypeEventId = new DamageTypeEventIdDtoWrapper(e.DamageTypeEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.SequenceId = e.SequenceId;
            dto.DefaultHandlingMethodId = e.DefaultHandlingMethodId;
            dto.Active = e.Active;
            return dto;
        }

        public virtual DamageTypeStateMergePatchedDto ToDamageTypeStateMergePatchedDto(IDamageTypeStateMergePatched e)
        {
            var dto = new DamageTypeStateMergePatchedDto();
            dto.DamageTypeEventId = new DamageTypeEventIdDtoWrapper(e.DamageTypeEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.SequenceId = e.SequenceId;
            dto.DefaultHandlingMethodId = e.DefaultHandlingMethodId;
            dto.Active = e.Active;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertySequenceIdRemoved = e.IsPropertySequenceIdRemoved;
            dto.IsPropertyDefaultHandlingMethodIdRemoved = e.IsPropertyDefaultHandlingMethodIdRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual DamageTypeStateDeletedDto ToDamageTypeStateDeletedDto(IDamageTypeStateDeleted e)
        {
            var dto = new DamageTypeStateDeletedDto();
            dto.DamageTypeEventId = new DamageTypeEventIdDtoWrapper(e.DamageTypeEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

