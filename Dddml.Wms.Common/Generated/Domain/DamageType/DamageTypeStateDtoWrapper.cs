// <autogenerated>
//   This file was generated by T4 code generator GenerateDamageTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DamageType;

namespace Dddml.Wms.Domain.DamageType
{

	public partial class DamageTypeStateDtoWrapper : StateDtoWrapperBase, IDamageTypeStateDto, IDamageTypeState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IDamageTypeState _state;

        public DamageTypeStateDtoWrapper()
        {
            this._state = new DamageTypeState();
        }

		public DamageTypeStateDtoWrapper(IDamageTypeState state)
		{
            this._state = state;
		}

		public IDamageTypeState ToDamageTypeState()
		{
			return this._state;
		}

		public virtual string DamageTypeId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DamageTypeId"))
                {
                    return _state.DamageTypeId;
                }
                return null;
            }
            set
            {
                _state.DamageTypeId = value;
            }
        }

        string IDamageTypeStateProperties.DamageTypeId
        {
            get 
            {
                return (this._state as IDamageTypeStateProperties).DamageTypeId;
            }
            set 
            {
                (this._state as IDamageTypeStateProperties).DamageTypeId = value;
            }
        }

		public virtual string Description
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Description"))
                {
                    return _state.Description;
                }
                return null;
            }
            set
            {
                _state.Description = value;
            }
        }

        string IDamageTypeStateProperties.Description
        {
            get 
            {
                return (this._state as IDamageTypeStateProperties).Description;
            }
            set 
            {
                (this._state as IDamageTypeStateProperties).Description = value;
            }
        }

		public virtual string SequenceId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SequenceId"))
                {
                    return _state.SequenceId;
                }
                return null;
            }
            set
            {
                _state.SequenceId = value;
            }
        }

        string IDamageTypeStateProperties.SequenceId
        {
            get 
            {
                return (this._state as IDamageTypeStateProperties).SequenceId;
            }
            set 
            {
                (this._state as IDamageTypeStateProperties).SequenceId = value;
            }
        }

		public virtual string DefaultHandlingMethodId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DefaultHandlingMethodId"))
                {
                    return _state.DefaultHandlingMethodId;
                }
                return null;
            }
            set
            {
                _state.DefaultHandlingMethodId = value;
            }
        }

        string IDamageTypeStateProperties.DefaultHandlingMethodId
        {
            get 
            {
                return (this._state as IDamageTypeStateProperties).DefaultHandlingMethodId;
            }
            set 
            {
                (this._state as IDamageTypeStateProperties).DefaultHandlingMethodId = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Active"))
                {
                    return (this._state as IDamageTypeStateProperties).Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IDamageTypeStateProperties).Active = value.Value;
                }
            }
        }

        bool IDamageTypeStateProperties.Active
        {
            get 
            {
                return (this._state as IDamageTypeStateProperties).Active;
            }
            set 
            {
                (this._state as IDamageTypeStateProperties).Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IDamageTypeStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IDamageTypeStateProperties).Version = value.Value;
                }
            }
        }

        long IDamageTypeStateProperties.Version
        {
            get 
            {
                return (this._state as IDamageTypeStateProperties).Version;
            }
            set 
            {
                (this._state as IDamageTypeStateProperties).Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get { return (_state as IDamageTypeState).GlobalId; }
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
            return (_state as IActive).IsActive();
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IDamageTypeState).CreatedBy; }
            set { (_state as IDamageTypeState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IDamageTypeState).CreatedAt; }
            set { (_state as IDamageTypeState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IDamageTypeState).UpdatedBy; }
            set { (_state as IDamageTypeState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IDamageTypeState).UpdatedAt; }
            set { (_state as IDamageTypeState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as IDamageTypeStateProperties).Version; }
		}

		#endregion

        bool IDamageTypeState.IsUnsaved
        {
            get { return this.Version == DamageTypeState.VersionZero; }
        }

		void IDamageTypeState.When(IDamageTypeStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IDamageTypeState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

        public virtual string CommandId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CommandId"))
                {
                    return _state.CommandId; 
                }
                return null;
            }
            set { _state.CommandId = value; }
        }

		void IDamageTypeState.When(IDamageTypeStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IDamageTypeState.When(IDamageTypeStateDeleted e)
		{
            throw new NotSupportedException();
		}

		void IDamageTypeState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

	}

    partial class DamageTypeStateDtoWrapperCollection : StateDtoWrapperCollectionBase<DamageTypeStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(DamageTypeStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

