// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public class SkuId
	{

		private string _productId;

		public virtual string ProductId { 
			get { return this._productId; } 
			internal set { _productId = value; } 
		}

		private string _attributeSetInstanceId;

		public virtual string AttributeSetInstanceId { 
			get { return this._attributeSetInstanceId; } 
			internal set { _attributeSetInstanceId = value; } 
		}


        #region  Flattened Properties


        #endregion

		internal SkuId ()
		{
		}

		public SkuId (string productId, string attributeSetInstanceId)
		{
			this._productId = productId;
			this._attributeSetInstanceId = attributeSetInstanceId;

		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			SkuId other = obj as SkuId;
			if (other == null) {
				return false;
			}

			return true 
				&& Object.Equals (this.ProductId, other.ProductId)
				&& Object.Equals (this.AttributeSetInstanceId, other.AttributeSetInstanceId)
				;
		}

		public override int GetHashCode ()
		{
			int hash = 0;
			if (this.ProductId != null) {
				hash += 13 * this.ProductId.GetHashCode ();
			}
			if (this.AttributeSetInstanceId != null) {
				hash += 13 * this.AttributeSetInstanceId.GetHashCode ();
			}
			return hash;
		}

        public static bool operator ==(SkuId obj1, SkuId obj2)
        {
            return Object.Equals(obj1, obj2);
        }

        public static bool operator !=(SkuId obj1, SkuId obj2)
        {
            return !Object.Equals(obj1, obj2);
        }

	}

}


