// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

	public partial class InventoryItemEntryMvoState : InventoryItemEntryMvoStateProperties, IInventoryItemEntryMvoState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }


		#region IIdentity implementation

		InventoryItemEntryId IGlobalIdentity<InventoryItemEntryId>.GlobalId
		{
			get
			{
				return this.InventoryItemEntryId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion


		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.InventoryItemVersion;
			}
		}


		#endregion

        bool IInventoryItemEntryMvoState.IsUnsaved
        {
            get { return this.InventoryItemVersion == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public InventoryItemEntryMvoState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.InventoryItemEntryId = ((IInventoryItemEntryMvoStateEvent)events.First()).StateEventId.InventoryItemEntryId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.InventoryItemVersion += 1;
                }
            }
        }

        public InventoryItemEntryMvoState() : this(false)
        {
        }

        public InventoryItemEntryMvoState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IInventoryItemEntryMvoStateCreated e)
		{
			ThrowOnWrongEvent(e);
            this.QuantityOnHandVar = (e.QuantityOnHandVar != null && e.QuantityOnHandVar.HasValue) ? e.QuantityOnHandVar.Value : default(decimal);

            this.QuantityReservedVar = (e.QuantityReservedVar != null && e.QuantityReservedVar.HasValue) ? e.QuantityReservedVar.Value : default(decimal);

            this.QuantityOccupiedVar = (e.QuantityOccupiedVar != null && e.QuantityOccupiedVar.HasValue) ? e.QuantityOccupiedVar.Value : default(decimal);

            this.QuantityVirtualVar = (e.QuantityVirtualVar != null && e.QuantityVirtualVar.HasValue) ? e.QuantityVirtualVar.Value : default(decimal);

			this.EventVO = e.EventVO;

            this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

            this.InventoryItemQuantityOnHand = (e.InventoryItemQuantityOnHand != null && e.InventoryItemQuantityOnHand.HasValue) ? e.InventoryItemQuantityOnHand.Value : default(decimal);

            this.InventoryItemQuantityReserved = (e.InventoryItemQuantityReserved != null && e.InventoryItemQuantityReserved.HasValue) ? e.InventoryItemQuantityReserved.Value : default(decimal);

            this.InventoryItemQuantityOccupied = (e.InventoryItemQuantityOccupied != null && e.InventoryItemQuantityOccupied.HasValue) ? e.InventoryItemQuantityOccupied.Value : default(decimal);

            this.InventoryItemQuantityVirtual = (e.InventoryItemQuantityVirtual != null && e.InventoryItemQuantityVirtual.HasValue) ? e.InventoryItemQuantityVirtual.Value : default(decimal);

			this.InventoryItemCreatedBy = e.InventoryItemCreatedBy;

            this.InventoryItemCreatedAt = (e.InventoryItemCreatedAt != null && e.InventoryItemCreatedAt.HasValue) ? e.InventoryItemCreatedAt.Value : default(DateTime);

			this.InventoryItemUpdatedBy = e.InventoryItemUpdatedBy;

            this.InventoryItemUpdatedAt = (e.InventoryItemUpdatedAt != null && e.InventoryItemUpdatedAt.HasValue) ? e.InventoryItemUpdatedAt.Value : default(DateTime);

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IInventoryItemEntryMvoStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.QuantityOnHandVar == null)
			{
				if (e.IsPropertyQuantityOnHandVarRemoved)
				{
					this.QuantityOnHandVar = default(decimal);
				}
			}
			else
			{
				this.QuantityOnHandVar = (e.QuantityOnHandVar != null && e.QuantityOnHandVar.HasValue) ? e.QuantityOnHandVar.Value : default(decimal);
			}

			if (e.QuantityReservedVar == null)
			{
				if (e.IsPropertyQuantityReservedVarRemoved)
				{
					this.QuantityReservedVar = default(decimal);
				}
			}
			else
			{
				this.QuantityReservedVar = (e.QuantityReservedVar != null && e.QuantityReservedVar.HasValue) ? e.QuantityReservedVar.Value : default(decimal);
			}

			if (e.QuantityOccupiedVar == null)
			{
				if (e.IsPropertyQuantityOccupiedVarRemoved)
				{
					this.QuantityOccupiedVar = default(decimal);
				}
			}
			else
			{
				this.QuantityOccupiedVar = (e.QuantityOccupiedVar != null && e.QuantityOccupiedVar.HasValue) ? e.QuantityOccupiedVar.Value : default(decimal);
			}

			if (e.QuantityVirtualVar == null)
			{
				if (e.IsPropertyQuantityVirtualVarRemoved)
				{
					this.QuantityVirtualVar = default(decimal);
				}
			}
			else
			{
				this.QuantityVirtualVar = (e.QuantityVirtualVar != null && e.QuantityVirtualVar.HasValue) ? e.QuantityVirtualVar.Value : default(decimal);
			}

			if (e.EventVO == null)
			{
				if (e.IsPropertyEventVORemoved)
				{
					this.EventVO = default(InventoryItemEventVO);
				}
			}
			else
			{
				this.EventVO = e.EventVO;
			}

			if (e.Version == null)
			{
				if (e.IsPropertyVersionRemoved)
				{
					this.Version = default(long);
				}
			}
			else
			{
				this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}

			if (e.InventoryItemQuantityOnHand == null)
			{
				if (e.IsPropertyInventoryItemQuantityOnHandRemoved)
				{
					this.InventoryItemQuantityOnHand = default(decimal);
				}
			}
			else
			{
				this.InventoryItemQuantityOnHand = (e.InventoryItemQuantityOnHand != null && e.InventoryItemQuantityOnHand.HasValue) ? e.InventoryItemQuantityOnHand.Value : default(decimal);
			}

			if (e.InventoryItemQuantityReserved == null)
			{
				if (e.IsPropertyInventoryItemQuantityReservedRemoved)
				{
					this.InventoryItemQuantityReserved = default(decimal);
				}
			}
			else
			{
				this.InventoryItemQuantityReserved = (e.InventoryItemQuantityReserved != null && e.InventoryItemQuantityReserved.HasValue) ? e.InventoryItemQuantityReserved.Value : default(decimal);
			}

			if (e.InventoryItemQuantityOccupied == null)
			{
				if (e.IsPropertyInventoryItemQuantityOccupiedRemoved)
				{
					this.InventoryItemQuantityOccupied = default(decimal);
				}
			}
			else
			{
				this.InventoryItemQuantityOccupied = (e.InventoryItemQuantityOccupied != null && e.InventoryItemQuantityOccupied.HasValue) ? e.InventoryItemQuantityOccupied.Value : default(decimal);
			}

			if (e.InventoryItemQuantityVirtual == null)
			{
				if (e.IsPropertyInventoryItemQuantityVirtualRemoved)
				{
					this.InventoryItemQuantityVirtual = default(decimal);
				}
			}
			else
			{
				this.InventoryItemQuantityVirtual = (e.InventoryItemQuantityVirtual != null && e.InventoryItemQuantityVirtual.HasValue) ? e.InventoryItemQuantityVirtual.Value : default(decimal);
			}

			if (e.InventoryItemCreatedBy == null)
			{
				if (e.IsPropertyInventoryItemCreatedByRemoved)
				{
					this.InventoryItemCreatedBy = default(string);
				}
			}
			else
			{
				this.InventoryItemCreatedBy = e.InventoryItemCreatedBy;
			}

			if (e.InventoryItemCreatedAt == null)
			{
				if (e.IsPropertyInventoryItemCreatedAtRemoved)
				{
					this.InventoryItemCreatedAt = default(DateTime);
				}
			}
			else
			{
				this.InventoryItemCreatedAt = (e.InventoryItemCreatedAt != null && e.InventoryItemCreatedAt.HasValue) ? e.InventoryItemCreatedAt.Value : default(DateTime);
			}

			if (e.InventoryItemUpdatedBy == null)
			{
				if (e.IsPropertyInventoryItemUpdatedByRemoved)
				{
					this.InventoryItemUpdatedBy = default(string);
				}
			}
			else
			{
				this.InventoryItemUpdatedBy = e.InventoryItemUpdatedBy;
			}

			if (e.InventoryItemUpdatedAt == null)
			{
				if (e.IsPropertyInventoryItemUpdatedAtRemoved)
				{
					this.InventoryItemUpdatedAt = default(DateTime);
				}
			}
			else
			{
				this.InventoryItemUpdatedAt = (e.InventoryItemUpdatedAt != null && e.InventoryItemUpdatedAt.HasValue) ? e.InventoryItemUpdatedAt.Value : default(DateTime);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IInventoryItemEntryMvoStateEvent stateEvent)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("InventoryItemEntryMvo|");

            var stateEntityId = this.InventoryItemEntryId; // Aggregate Id
            var eventEntityId = stateEvent.StateEventId.InventoryItemEntryId; // EntityBase.Aggregate.GetStateEventIdPropertyIdName();
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.InventoryItemVersion;
            var eventVersion = stateEvent.StateEventId.InventoryItemVersion;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

