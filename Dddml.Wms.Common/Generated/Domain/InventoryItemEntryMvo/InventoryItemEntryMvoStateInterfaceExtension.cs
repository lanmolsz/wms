// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

	public static partial class InventoryItemEntryMvoStateInterfaceExtension
	{

        public static IInventoryItemEntryMvoCommand ToCreateOrMergePatchInventoryItemEntryMvo<TCreateInventoryItemEntryMvo, TMergePatchInventoryItemEntryMvo>(this IInventoryItemEntryMvoState state)
            where TCreateInventoryItemEntryMvo : ICreateInventoryItemEntryMvo, new()
            where TMergePatchInventoryItemEntryMvo : IMergePatchInventoryItemEntryMvo, new()
        {
            bool bUnsaved = ((IInventoryItemEntryMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateInventoryItemEntryMvo<TCreateInventoryItemEntryMvo>();
            }
            else 
            {
                return state.ToMergePatchInventoryItemEntryMvo<TMergePatchInventoryItemEntryMvo>();
            }
        }

        public static TDeleteInventoryItemEntryMvo ToDeleteInventoryItemEntryMvo<TDeleteInventoryItemEntryMvo>(this IInventoryItemEntryMvoState state)
            where TDeleteInventoryItemEntryMvo : IDeleteInventoryItemEntryMvo, new()
        {
            var cmd = new TDeleteInventoryItemEntryMvo();
            cmd.InventoryItemEntryId = state.InventoryItemEntryId;
            cmd.InventoryItemVersion = ((IInventoryItemEntryMvoStateProperties)state).InventoryItemVersion;

            return cmd;
        }

        public static TMergePatchInventoryItemEntryMvo ToMergePatchInventoryItemEntryMvo<TMergePatchInventoryItemEntryMvo>(this IInventoryItemEntryMvoState state)
            where TMergePatchInventoryItemEntryMvo : IMergePatchInventoryItemEntryMvo, new()
        {
            var cmd = new TMergePatchInventoryItemEntryMvo();

            cmd.InventoryItemVersion = ((IInventoryItemEntryMvoStateProperties)state).InventoryItemVersion;

            cmd.InventoryItemEntryId = state.InventoryItemEntryId;
            cmd.OnHandQuantity = state.OnHandQuantity;
            cmd.InTransitQuantity = state.InTransitQuantity;
            cmd.ReservedQuantity = state.ReservedQuantity;
            cmd.OccupiedQuantity = state.OccupiedQuantity;
            cmd.VirtualQuantity = state.VirtualQuantity;
            cmd.Source = state.Source;
            cmd.Version = ((IInventoryItemEntryMvoStateProperties)state).Version;
            cmd.InventoryItemOnHandQuantity = state.InventoryItemOnHandQuantity;
            cmd.InventoryItemInTransitQuantity = state.InventoryItemInTransitQuantity;
            cmd.InventoryItemReservedQuantity = state.InventoryItemReservedQuantity;
            cmd.InventoryItemOccupiedQuantity = state.InventoryItemOccupiedQuantity;
            cmd.InventoryItemVirtualQuantity = state.InventoryItemVirtualQuantity;
            cmd.InventoryItemCreatedBy = state.InventoryItemCreatedBy;
            cmd.InventoryItemCreatedAt = state.InventoryItemCreatedAt;
            cmd.InventoryItemUpdatedBy = state.InventoryItemUpdatedBy;
            cmd.InventoryItemUpdatedAt = state.InventoryItemUpdatedAt;
            
            if (state.Source == null) { cmd.IsPropertySourceRemoved = true; }
            if (state.InventoryItemCreatedBy == null) { cmd.IsPropertyInventoryItemCreatedByRemoved = true; }
            if (state.InventoryItemUpdatedBy == null) { cmd.IsPropertyInventoryItemUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateInventoryItemEntryMvo ToCreateInventoryItemEntryMvo<TCreateInventoryItemEntryMvo>(this IInventoryItemEntryMvoState state)
            where TCreateInventoryItemEntryMvo : ICreateInventoryItemEntryMvo, new()
        {
            var cmd = new TCreateInventoryItemEntryMvo();

            cmd.InventoryItemVersion = ((IInventoryItemEntryMvoStateProperties)state).InventoryItemVersion;

            cmd.InventoryItemEntryId = state.InventoryItemEntryId;
            cmd.OnHandQuantity = state.OnHandQuantity;
            cmd.InTransitQuantity = state.InTransitQuantity;
            cmd.ReservedQuantity = state.ReservedQuantity;
            cmd.OccupiedQuantity = state.OccupiedQuantity;
            cmd.VirtualQuantity = state.VirtualQuantity;
            cmd.Source = state.Source;
            cmd.Version = ((IInventoryItemEntryMvoStateProperties)state).Version;
            cmd.InventoryItemOnHandQuantity = state.InventoryItemOnHandQuantity;
            cmd.InventoryItemInTransitQuantity = state.InventoryItemInTransitQuantity;
            cmd.InventoryItemReservedQuantity = state.InventoryItemReservedQuantity;
            cmd.InventoryItemOccupiedQuantity = state.InventoryItemOccupiedQuantity;
            cmd.InventoryItemVirtualQuantity = state.InventoryItemVirtualQuantity;
            cmd.InventoryItemCreatedBy = state.InventoryItemCreatedBy;
            cmd.InventoryItemCreatedAt = state.InventoryItemCreatedAt;
            cmd.InventoryItemUpdatedBy = state.InventoryItemUpdatedBy;
            cmd.InventoryItemUpdatedAt = state.InventoryItemUpdatedAt;
            return cmd;
        }
		

	}

}

