// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Support.Criterion;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

	public partial interface IInventoryItemEntryMvoApplicationService : IApplicationService
	{
		void When(ICreateInventoryItemEntryMvo c);

		void When(IMergePatchInventoryItemEntryMvo c);

 		IInventoryItemEntryMvoState Get(InventoryItemEntryId inventoryItemEntryId);

        IEnumerable<IInventoryItemEntryMvoState> GetAll(int firstResult, int maxResults);

        IEnumerable<IInventoryItemEntryMvoState> Get(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IInventoryItemEntryMvoState> Get(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IInventoryItemEntryMvoState> GetByProperty(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        long GetCount(IEnumerable<KeyValuePair<string, object>> filter);

        long GetCount(ICriterion filter);

        IInventoryItemEntryMvoStateEvent GetStateEvent(InventoryItemEntryId inventoryItemEntryId, long version);

        IInventoryItemEntryMvoState GetHistoryState(InventoryItemEntryId inventoryItemEntryId, long version);


	}

}

