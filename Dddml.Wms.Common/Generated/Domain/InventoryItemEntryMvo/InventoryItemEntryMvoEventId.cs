// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

	public class InventoryItemEntryMvoEventId
	{

		private InventoryItemEntryId _inventoryItemEntryId = new InventoryItemEntryId();

		public virtual InventoryItemEntryId InventoryItemEntryId { 
			get { return this._inventoryItemEntryId; } 
			set { _inventoryItemEntryId = value; } 
		}

		private long _inventoryItemVersion;

		public virtual long InventoryItemVersion { 
			get { return this._inventoryItemVersion; } 
			set { _inventoryItemVersion = value; } 
		}


        #region  Flattened Properties


		protected internal virtual string InventoryItemEntryIdInventoryItemIdProductId {
			get { return InventoryItemEntryId.InventoryItemId.ProductId; }
			set { InventoryItemEntryId.InventoryItemId.ProductId = value; }
		}

		protected internal virtual string InventoryItemEntryIdInventoryItemIdLocatorId {
			get { return InventoryItemEntryId.InventoryItemId.LocatorId; }
			set { InventoryItemEntryId.InventoryItemId.LocatorId = value; }
		}

		protected internal virtual string InventoryItemEntryIdInventoryItemIdAttributeSetInstanceId {
			get { return InventoryItemEntryId.InventoryItemId.AttributeSetInstanceId; }
			set { InventoryItemEntryId.InventoryItemId.AttributeSetInstanceId = value; }
		}

		protected internal virtual long InventoryItemEntryIdEntrySeqId {
			get { return InventoryItemEntryId.EntrySeqId; }
			set { InventoryItemEntryId.EntrySeqId = value; }
		}

        #endregion

		public InventoryItemEntryMvoEventId ()
		{
		}

		public InventoryItemEntryMvoEventId (InventoryItemEntryId inventoryItemEntryId, long inventoryItemVersion)
		{
			this._inventoryItemEntryId = inventoryItemEntryId;
			this._inventoryItemVersion = inventoryItemVersion;

		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			InventoryItemEntryMvoEventId other = obj as InventoryItemEntryMvoEventId;
			if (other == null) {
				return false;
			}

			return true 
				&& Object.Equals (this.InventoryItemEntryId, other.InventoryItemEntryId)
				&& Object.Equals (this.InventoryItemVersion, other.InventoryItemVersion)
				;
		}

		public override int GetHashCode ()
		{
			int hash = 0;
			if (this.InventoryItemEntryId != null) {
				hash += 13 * this.InventoryItemEntryId.GetHashCode ();
			}
			if (this.InventoryItemVersion != null) {
				hash += 13 * this.InventoryItemVersion.GetHashCode ();
			}
			return hash;
		}

        public static bool operator ==(InventoryItemEntryMvoEventId obj1, InventoryItemEntryMvoEventId obj2)
        {
            return Object.Equals(obj1, obj2);
        }

        public static bool operator !=(InventoryItemEntryMvoEventId obj1, InventoryItemEntryMvoEventId obj2)
        {
            return !Object.Equals(obj1, obj2);
        }

        public override string ToString()
        {
            return String.Empty
                + "InventoryItemEntryId: " + this.InventoryItemEntryId + ", "
                + "InventoryItemVersion: " + this.InventoryItemVersion + ", "
                ;
        }

        protected internal static readonly string[] FlattenedPropertyNames = new string[] { "InventoryItemEntryIdInventoryItemIdProductId", "InventoryItemEntryIdInventoryItemIdLocatorId", "InventoryItemEntryIdInventoryItemIdAttributeSetInstanceId", "InventoryItemEntryIdEntrySeqId", "InventoryItemVersion" };

        protected internal static readonly Type[] FlattenedPropertyTypes = new Type[] { typeof(string), typeof(string), typeof(string), typeof(long), typeof(long) };

        protected internal static readonly IDictionary<string, Type> FlattenedPropertyTypeDictionary;

        static InventoryItemEntryMvoEventId()
        {
            var dict = new Dictionary<string, Type>();
            for (int i = 0; i < FlattenedPropertyNames.Length; i++)
            {
                dict.Add(FlattenedPropertyNames[i], FlattenedPropertyTypes[i]);
            }
            FlattenedPropertyTypeDictionary = dict;
        }

        protected internal void ForEachFlattenedProperty(Action<string, object> act)
        {
            for (int i = 0; i < FlattenedPropertyNames.Length; i++)
            {
                string pn = FlattenedPropertyNames[i];
                if (Char.IsLower(pn[0])) { pn = Char.ToUpper(pn[0]) + pn.Substring(1); }
                var m = this.GetType().GetProperty(pn, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                object pv = m.GetValue(this);
                act(pn, pv);
            }
        }

        protected internal void SetFlattenedPropertyValues(params object[] values)
        {
            for (int i = 0; i < FlattenedPropertyNames.Length; i++)
            {
                string pn = FlattenedPropertyNames[i];
                if (Char.IsLower(pn[0])) { pn = Char.ToUpper(pn[0]) + pn.Substring(1); }
                var v = values[i];
                var m = this.GetType().GetProperty(pn, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                m.SetValue(this, v);
            }
        }
	}

}


