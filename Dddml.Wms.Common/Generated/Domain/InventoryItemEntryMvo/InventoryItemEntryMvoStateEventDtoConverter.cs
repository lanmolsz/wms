// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

    public class InventoryItemEntryMvoStateEventDtoConverter
    {
        public virtual InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto ToInventoryItemEntryMvoStateEventDto(IInventoryItemEntryMvoEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IInventoryItemEntryMvoStateCreated)stateEvent;
                return ToInventoryItemEntryMvoStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IInventoryItemEntryMvoStateMergePatched)stateEvent;
                return ToInventoryItemEntryMvoStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual InventoryItemEntryMvoStateCreatedDto ToInventoryItemEntryMvoStateCreatedDto(IInventoryItemEntryMvoStateCreated e)
        {
            var dto = new InventoryItemEntryMvoStateCreatedDto();
            dto.InventoryItemEntryMvoEventId = e.InventoryItemEntryMvoEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.OnHandQuantity = e.OnHandQuantity;
            dto.InTransitQuantity = e.InTransitQuantity;
            dto.ReservedQuantity = e.ReservedQuantity;
            dto.OccupiedQuantity = e.OccupiedQuantity;
            dto.VirtualQuantity = e.VirtualQuantity;
            dto.Source = e.Source;
            dto.Version = e.Version;
            dto.InventoryItemOnHandQuantity = e.InventoryItemOnHandQuantity;
            dto.InventoryItemInTransitQuantity = e.InventoryItemInTransitQuantity;
            dto.InventoryItemReservedQuantity = e.InventoryItemReservedQuantity;
            dto.InventoryItemOccupiedQuantity = e.InventoryItemOccupiedQuantity;
            dto.InventoryItemVirtualQuantity = e.InventoryItemVirtualQuantity;
            dto.InventoryItemCreatedBy = e.InventoryItemCreatedBy;
            dto.InventoryItemCreatedAt = e.InventoryItemCreatedAt;
            dto.InventoryItemUpdatedBy = e.InventoryItemUpdatedBy;
            dto.InventoryItemUpdatedAt = e.InventoryItemUpdatedAt;
            return dto;
        }

        public virtual InventoryItemEntryMvoStateMergePatchedDto ToInventoryItemEntryMvoStateMergePatchedDto(IInventoryItemEntryMvoStateMergePatched e)
        {
            var dto = new InventoryItemEntryMvoStateMergePatchedDto();
            dto.InventoryItemEntryMvoEventId = e.InventoryItemEntryMvoEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.OnHandQuantity = e.OnHandQuantity;
            dto.InTransitQuantity = e.InTransitQuantity;
            dto.ReservedQuantity = e.ReservedQuantity;
            dto.OccupiedQuantity = e.OccupiedQuantity;
            dto.VirtualQuantity = e.VirtualQuantity;
            dto.Source = e.Source;
            dto.Version = e.Version;
            dto.InventoryItemOnHandQuantity = e.InventoryItemOnHandQuantity;
            dto.InventoryItemInTransitQuantity = e.InventoryItemInTransitQuantity;
            dto.InventoryItemReservedQuantity = e.InventoryItemReservedQuantity;
            dto.InventoryItemOccupiedQuantity = e.InventoryItemOccupiedQuantity;
            dto.InventoryItemVirtualQuantity = e.InventoryItemVirtualQuantity;
            dto.InventoryItemCreatedBy = e.InventoryItemCreatedBy;
            dto.InventoryItemCreatedAt = e.InventoryItemCreatedAt;
            dto.InventoryItemUpdatedBy = e.InventoryItemUpdatedBy;
            dto.InventoryItemUpdatedAt = e.InventoryItemUpdatedAt;
            dto.IsPropertyOnHandQuantityRemoved = e.IsPropertyOnHandQuantityRemoved;
            dto.IsPropertyInTransitQuantityRemoved = e.IsPropertyInTransitQuantityRemoved;
            dto.IsPropertyReservedQuantityRemoved = e.IsPropertyReservedQuantityRemoved;
            dto.IsPropertyOccupiedQuantityRemoved = e.IsPropertyOccupiedQuantityRemoved;
            dto.IsPropertyVirtualQuantityRemoved = e.IsPropertyVirtualQuantityRemoved;
            dto.IsPropertySourceRemoved = e.IsPropertySourceRemoved;
            dto.IsPropertyVersionRemoved = e.IsPropertyVersionRemoved;
            dto.IsPropertyInventoryItemOnHandQuantityRemoved = e.IsPropertyInventoryItemOnHandQuantityRemoved;
            dto.IsPropertyInventoryItemInTransitQuantityRemoved = e.IsPropertyInventoryItemInTransitQuantityRemoved;
            dto.IsPropertyInventoryItemReservedQuantityRemoved = e.IsPropertyInventoryItemReservedQuantityRemoved;
            dto.IsPropertyInventoryItemOccupiedQuantityRemoved = e.IsPropertyInventoryItemOccupiedQuantityRemoved;
            dto.IsPropertyInventoryItemVirtualQuantityRemoved = e.IsPropertyInventoryItemVirtualQuantityRemoved;
            dto.IsPropertyInventoryItemCreatedByRemoved = e.IsPropertyInventoryItemCreatedByRemoved;
            dto.IsPropertyInventoryItemCreatedAtRemoved = e.IsPropertyInventoryItemCreatedAtRemoved;
            dto.IsPropertyInventoryItemUpdatedByRemoved = e.IsPropertyInventoryItemUpdatedByRemoved;
            dto.IsPropertyInventoryItemUpdatedAtRemoved = e.IsPropertyInventoryItemUpdatedAtRemoved;

            return dto;
        }



    }


}

