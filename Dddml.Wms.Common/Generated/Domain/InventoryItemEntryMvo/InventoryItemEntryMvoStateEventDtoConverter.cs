// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

    public class InventoryItemEntryMvoStateEventDtoConverter
    {
        public virtual InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto ToInventoryItemEntryMvoStateEventDto(IInventoryItemEntryMvoStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IInventoryItemEntryMvoStateCreated)stateEvent;
                return ToInventoryItemEntryMvoStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IInventoryItemEntryMvoStateMergePatched)stateEvent;
                return ToInventoryItemEntryMvoStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual InventoryItemEntryMvoStateCreatedDto ToInventoryItemEntryMvoStateCreatedDto(IInventoryItemEntryMvoStateCreated e)
        {
            var dto = new InventoryItemEntryMvoStateCreatedDto();
            dto.StateEventId = new InventoryItemEntryMvoStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.QuantityOnHand = e.QuantityOnHand;
            dto.QuantityReserved = e.QuantityReserved;
            dto.QuantityOccupied = e.QuantityOccupied;
            dto.QuantityVirtual = e.QuantityVirtual;
            dto.Source = (e.Source == null) ? null : new InventoryItemSourceVODtoWrapper(e.Source);
            dto.Version = e.Version;
            dto.Active = e.Active;
            dto.InventoryItemQuantityOnHand = e.InventoryItemQuantityOnHand;
            dto.InventoryItemQuantityReserved = e.InventoryItemQuantityReserved;
            dto.InventoryItemQuantityOccupied = e.InventoryItemQuantityOccupied;
            dto.InventoryItemQuantityVirtual = e.InventoryItemQuantityVirtual;
            dto.InventoryItemCreatedBy = e.InventoryItemCreatedBy;
            dto.InventoryItemCreatedAt = e.InventoryItemCreatedAt;
            dto.InventoryItemUpdatedBy = e.InventoryItemUpdatedBy;
            dto.InventoryItemUpdatedAt = e.InventoryItemUpdatedAt;
            return dto;
        }

        public virtual InventoryItemEntryMvoStateMergePatchedDto ToInventoryItemEntryMvoStateMergePatchedDto(IInventoryItemEntryMvoStateMergePatched e)
        {
            var dto = new InventoryItemEntryMvoStateMergePatchedDto();
            dto.StateEventId = new InventoryItemEntryMvoStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.QuantityOnHand = e.QuantityOnHand;
            dto.QuantityReserved = e.QuantityReserved;
            dto.QuantityOccupied = e.QuantityOccupied;
            dto.QuantityVirtual = e.QuantityVirtual;
            dto.Source = (e.Source == null) ? null : new InventoryItemSourceVODtoWrapper(e.Source);
            dto.Version = e.Version;
            dto.Active = e.Active;
            dto.InventoryItemQuantityOnHand = e.InventoryItemQuantityOnHand;
            dto.InventoryItemQuantityReserved = e.InventoryItemQuantityReserved;
            dto.InventoryItemQuantityOccupied = e.InventoryItemQuantityOccupied;
            dto.InventoryItemQuantityVirtual = e.InventoryItemQuantityVirtual;
            dto.InventoryItemCreatedBy = e.InventoryItemCreatedBy;
            dto.InventoryItemCreatedAt = e.InventoryItemCreatedAt;
            dto.InventoryItemUpdatedBy = e.InventoryItemUpdatedBy;
            dto.InventoryItemUpdatedAt = e.InventoryItemUpdatedAt;
            dto.IsPropertyQuantityOnHandRemoved = e.IsPropertyQuantityOnHandRemoved;
            dto.IsPropertyQuantityReservedRemoved = e.IsPropertyQuantityReservedRemoved;
            dto.IsPropertyQuantityOccupiedRemoved = e.IsPropertyQuantityOccupiedRemoved;
            dto.IsPropertyQuantityVirtualRemoved = e.IsPropertyQuantityVirtualRemoved;
            dto.IsPropertySourceRemoved = e.IsPropertySourceRemoved;
            dto.IsPropertyVersionRemoved = e.IsPropertyVersionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            dto.IsPropertyInventoryItemQuantityOnHandRemoved = e.IsPropertyInventoryItemQuantityOnHandRemoved;
            dto.IsPropertyInventoryItemQuantityReservedRemoved = e.IsPropertyInventoryItemQuantityReservedRemoved;
            dto.IsPropertyInventoryItemQuantityOccupiedRemoved = e.IsPropertyInventoryItemQuantityOccupiedRemoved;
            dto.IsPropertyInventoryItemQuantityVirtualRemoved = e.IsPropertyInventoryItemQuantityVirtualRemoved;
            dto.IsPropertyInventoryItemCreatedByRemoved = e.IsPropertyInventoryItemCreatedByRemoved;
            dto.IsPropertyInventoryItemCreatedAtRemoved = e.IsPropertyInventoryItemCreatedAtRemoved;
            dto.IsPropertyInventoryItemUpdatedByRemoved = e.IsPropertyInventoryItemUpdatedByRemoved;
            dto.IsPropertyInventoryItemUpdatedAtRemoved = e.IsPropertyInventoryItemUpdatedAtRemoved;

            return dto;
        }



    }


}

