// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

    public partial class InventoryItemEntryMvoStateDto : IInventoryItemEntryMvoStateDto
    {

        public virtual InventoryItemEntryIdDto InventoryItemEntryId
        {
            get;
            set;
        }

        public virtual decimal? QuantityOnHandVar
        {
            get;
            set;
        }

        public virtual decimal? QuantityReservedVar
        {
            get;
            set;
        }

        public virtual decimal? QuantityOccupiedVar
        {
            get;
            set;
        }

        public virtual decimal? QuantityVirtualVar
        {
            get;
            set;
        }


        public virtual InventoryItemEventVODto EventVO
        {
            get;
            set;
        }

        public virtual long? Version
        {
            get;
            set;
        }

        public virtual bool? Active
        {
            get;
            set;
        }

        public virtual decimal? InventoryItemQuantityOnHand
        {
            get;
            set;
        }

        public virtual decimal? InventoryItemQuantityReserved
        {
            get;
            set;
        }

        public virtual decimal? InventoryItemQuantityOccupied
        {
            get;
            set;
        }

        public virtual decimal? InventoryItemQuantityVirtual
        {
            get;
            set;
        }

        public virtual string InventoryItemCreatedBy
        {
            get;
            set;
        }

        public virtual DateTime? InventoryItemCreatedAt
        {
            get;
            set;
        }

        public virtual string InventoryItemUpdatedBy
        {
            get;
            set;
        }

        public virtual DateTime? InventoryItemUpdatedAt
        {
            get;
            set;
        }

        public virtual long? InventoryItemVersion
        {
            get;
            set;
        }

        public virtual string CreatedBy
        {
            get;
            set;
        }

        public virtual DateTime? CreatedAt
        {
            get;
            set;
        }

        public virtual string UpdatedBy
        {
            get;
            set;
        }

        public virtual DateTime? UpdatedAt
        {
            get;
            set;
        }

        public virtual IInventoryItemEntryMvoState ToInventoryItemEntryMvoState()
        {
            var state = new InventoryItemEntryMvoState(true);
            state.InventoryItemEntryId = (this.InventoryItemEntryId == null) ? null : this.InventoryItemEntryId.ToInventoryItemEntryId();
            if (this.QuantityOnHandVar != null && this.QuantityOnHandVar.HasValue) { state.QuantityOnHandVar = this.QuantityOnHandVar.Value; }
            if (this.QuantityReservedVar != null && this.QuantityReservedVar.HasValue) { state.QuantityReservedVar = this.QuantityReservedVar.Value; }
            if (this.QuantityOccupiedVar != null && this.QuantityOccupiedVar.HasValue) { state.QuantityOccupiedVar = this.QuantityOccupiedVar.Value; }
            if (this.QuantityVirtualVar != null && this.QuantityVirtualVar.HasValue) { state.QuantityVirtualVar = this.QuantityVirtualVar.Value; }
            state.EventVO = (this.EventVO == null) ? null : this.EventVO.ToInventoryItemEventVO();
            if (this.Version != null && this.Version.HasValue) { state.Version = this.Version.Value; }
            if (this.Active != null && this.Active.HasValue) { state.Active = this.Active.Value; }
            if (this.InventoryItemQuantityOnHand != null && this.InventoryItemQuantityOnHand.HasValue) { state.InventoryItemQuantityOnHand = this.InventoryItemQuantityOnHand.Value; }
            if (this.InventoryItemQuantityReserved != null && this.InventoryItemQuantityReserved.HasValue) { state.InventoryItemQuantityReserved = this.InventoryItemQuantityReserved.Value; }
            if (this.InventoryItemQuantityOccupied != null && this.InventoryItemQuantityOccupied.HasValue) { state.InventoryItemQuantityOccupied = this.InventoryItemQuantityOccupied.Value; }
            if (this.InventoryItemQuantityVirtual != null && this.InventoryItemQuantityVirtual.HasValue) { state.InventoryItemQuantityVirtual = this.InventoryItemQuantityVirtual.Value; }
            state.InventoryItemCreatedBy = this.InventoryItemCreatedBy;
            if (this.InventoryItemCreatedAt != null && this.InventoryItemCreatedAt.HasValue) { state.InventoryItemCreatedAt = this.InventoryItemCreatedAt.Value; }
            state.InventoryItemUpdatedBy = this.InventoryItemUpdatedBy;
            if (this.InventoryItemUpdatedAt != null && this.InventoryItemUpdatedAt.HasValue) { state.InventoryItemUpdatedAt = this.InventoryItemUpdatedAt.Value; }
            if (this.InventoryItemVersion != null && this.InventoryItemVersion.HasValue) { state.InventoryItemVersion = this.InventoryItemVersion.Value; }
            state.CreatedBy = this.CreatedBy;
            if (this.CreatedAt != null && this.CreatedAt.HasValue) { state.CreatedAt = this.CreatedAt.Value; }
            state.UpdatedBy = this.UpdatedBy;
            if (this.UpdatedAt != null && this.UpdatedAt.HasValue) { state.UpdatedAt = this.UpdatedAt.Value; }

            return state;
        }

    }

}

