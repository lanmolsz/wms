// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

	public abstract class InventoryItemEntryMvoStateEventDtoBase : IStateEventDto, IInventoryItemEntryMvoStateCreated, IInventoryItemEntryMvoStateMergePatched
	{

        private InventoryItemEntryMvoStateEventIdDto _stateEventId;

		protected internal virtual InventoryItemEntryMvoStateEventIdDto StateEventId 
        {
            get 
            {
                if (_stateEventId == null) { _stateEventId = new InventoryItemEntryMvoStateEventIdDto(); }
                return _stateEventId;
            }
            set
            {
                _stateEventId = value;
            }
        }

        public virtual InventoryItemEntryIdDto InventoryItemEntryId
        {
            get { return StateEventId.InventoryItemEntryId; }
            set { StateEventId.InventoryItemEntryId = value; }
        }

        public virtual long InventoryItemVersion
        {
            get { return StateEventId.InventoryItemVersion; }
            set { StateEventId.InventoryItemVersion = value; }
        }

		public virtual decimal? QuantityOnHand { get; set; }

		public virtual decimal? QuantityReserved { get; set; }

		public virtual decimal? QuantityOccupied { get; set; }

		public virtual decimal? QuantityVirtual { get; set; }

		private InventoryItemSourceVODto _source = new InventoryItemSourceVODto();

		public virtual InventoryItemSourceVODto Source { get { return _source; } set { _source = value; } }

		InventoryItemSourceVO IInventoryItemEntryMvoStateEvent.Source
		{ 
			get 
			{
				return this.Source == null ? null : this.Source.ToInventoryItemSourceVO(); 
			} 
			set
			{
				if (value == null) { Source = null; } else { Source = new InventoryItemSourceVODtoWrapper(value); }
			} 
		}

		public virtual long? Version { get; set; }

		public virtual decimal? InventoryItemQuantityOnHand { get; set; }

		public virtual decimal? InventoryItemQuantityReserved { get; set; }

		public virtual decimal? InventoryItemQuantityOccupied { get; set; }

		public virtual decimal? InventoryItemQuantityVirtual { get; set; }

		public virtual string InventoryItemCreatedBy { get; set; }

		public virtual DateTime? InventoryItemCreatedAt { get; set; }

		public virtual string InventoryItemUpdatedBy { get; set; }

		public virtual DateTime? InventoryItemUpdatedAt { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		InventoryItemEntryMvoStateEventId IGlobalIdentity<InventoryItemEntryMvoStateEventId>.GlobalId {
			get 
			{
				return this.StateEventId.ToInventoryItemEntryMvoStateEventId();
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IInventoryItemEntryMvoStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }

		public virtual bool? IsPropertyQuantityOnHandRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyQuantityOnHandRemoved
        {
            get 
            {
                var b = this.IsPropertyQuantityOnHandRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyQuantityOnHandRemoved = value;
            }
        }

		public virtual bool? IsPropertyQuantityReservedRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyQuantityReservedRemoved
        {
            get 
            {
                var b = this.IsPropertyQuantityReservedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyQuantityReservedRemoved = value;
            }
        }

		public virtual bool? IsPropertyQuantityOccupiedRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyQuantityOccupiedRemoved
        {
            get 
            {
                var b = this.IsPropertyQuantityOccupiedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyQuantityOccupiedRemoved = value;
            }
        }

		public virtual bool? IsPropertyQuantityVirtualRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyQuantityVirtualRemoved
        {
            get 
            {
                var b = this.IsPropertyQuantityVirtualRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyQuantityVirtualRemoved = value;
            }
        }

		public virtual bool? IsPropertySourceRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertySourceRemoved
        {
            get 
            {
                var b = this.IsPropertySourceRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertySourceRemoved = value;
            }
        }

		public virtual bool? IsPropertyVersionRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyVersionRemoved
        {
            get 
            {
                var b = this.IsPropertyVersionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyVersionRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemQuantityOnHandRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyInventoryItemQuantityOnHandRemoved
        {
            get 
            {
                var b = this.IsPropertyInventoryItemQuantityOnHandRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyInventoryItemQuantityOnHandRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemQuantityReservedRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyInventoryItemQuantityReservedRemoved
        {
            get 
            {
                var b = this.IsPropertyInventoryItemQuantityReservedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyInventoryItemQuantityReservedRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemQuantityOccupiedRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyInventoryItemQuantityOccupiedRemoved
        {
            get 
            {
                var b = this.IsPropertyInventoryItemQuantityOccupiedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyInventoryItemQuantityOccupiedRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemQuantityVirtualRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyInventoryItemQuantityVirtualRemoved
        {
            get 
            {
                var b = this.IsPropertyInventoryItemQuantityVirtualRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyInventoryItemQuantityVirtualRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemCreatedByRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyInventoryItemCreatedByRemoved
        {
            get 
            {
                var b = this.IsPropertyInventoryItemCreatedByRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyInventoryItemCreatedByRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemCreatedAtRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyInventoryItemCreatedAtRemoved
        {
            get 
            {
                var b = this.IsPropertyInventoryItemCreatedAtRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyInventoryItemCreatedAtRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemUpdatedByRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyInventoryItemUpdatedByRemoved
        {
            get 
            {
                var b = this.IsPropertyInventoryItemUpdatedByRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyInventoryItemUpdatedByRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemUpdatedAtRemoved { get; set; }

        bool IInventoryItemEntryMvoStateMergePatched.IsPropertyInventoryItemUpdatedAtRemoved
        {
            get 
            {
                var b = this.IsPropertyInventoryItemUpdatedAtRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyInventoryItemUpdatedAtRemoved = value;
            }
        }

		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        InventoryItemEntryMvoStateEventId IInventoryItemEntryMvoStateEvent.StateEventId
        {
            get { return this.StateEventId.ToInventoryItemEntryMvoStateEventId(); }
        }

        protected InventoryItemEntryMvoStateEventDtoBase()
        {
        }

        protected InventoryItemEntryMvoStateEventDtoBase(InventoryItemEntryMvoStateEventIdDto stateEventId)
        {
            this.StateEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IStateEventDto.StateEventType 
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}


    public class InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto : InventoryItemEntryMvoStateEventDtoBase
    {
        private string _stateEventType;

        public virtual string StateEventType
        {
            get { return _stateEventType; }
            set { _stateEventType = value; }
        }

        protected override string GetStateEventType()
        {
            return this._stateEventType;
        }

    }



	public class InventoryItemEntryMvoStateCreatedDto : InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto
	{
		public InventoryItemEntryMvoStateCreatedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class InventoryItemEntryMvoStateMergePatchedDto : InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto
	{
		public InventoryItemEntryMvoStateMergePatchedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class InventoryItemEntryMvoStateDeletedDto : InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto
	{
		public InventoryItemEntryMvoStateDeletedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

	}


    public partial class InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDtos : IEnumerable<IInventoryItemEntryMvoStateCreated>, IEnumerable<IInventoryItemEntryMvoStateMergePatched>
    {
        private List<InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto> _innerStateEvents = new List<InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto>();

        public virtual InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IInventoryItemEntryMvoStateCreated> IEnumerable<IInventoryItemEntryMvoStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IInventoryItemEntryMvoStateMergePatched> IEnumerable<IInventoryItemEntryMvoStateMergePatched>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }


        public void AddInventoryItemEntryMvoEvent(IInventoryItemEntryMvoStateCreated e)
        {
            _innerStateEvents.Add((InventoryItemEntryMvoStateCreatedDto)e);
        }

        public void AddInventoryItemEntryMvoEvent(IInventoryItemEntryMvoStateEvent e)
        {
            _innerStateEvents.Add((InventoryItemEntryMvoStateCreatedOrMergePatchedOrDeletedDto)e);
        }


    }


}

