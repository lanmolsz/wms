// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

	public static partial class MovementConfirmationLineStateInterfaceExtension
	{

        public static IMovementConfirmationLineCommand ToCreateOrMergePatchMovementConfirmationLine<TCreateMovementConfirmationLine, TMergePatchMovementConfirmationLine>(this IMovementConfirmationLineState state)
            where TCreateMovementConfirmationLine : ICreateMovementConfirmationLine, new()
            where TMergePatchMovementConfirmationLine : IMergePatchMovementConfirmationLine, new()
        {
            bool bUnsaved = ((IMovementConfirmationLineState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateMovementConfirmationLine<TCreateMovementConfirmationLine>();
            }
            else 
            {
                return state.ToMergePatchMovementConfirmationLine<TMergePatchMovementConfirmationLine>();
            }
        }

        public static TRemoveMovementConfirmationLine ToRemoveMovementConfirmationLine<TRemoveMovementConfirmationLine>(this IMovementConfirmationLineState state)
            where TRemoveMovementConfirmationLine : IRemoveMovementConfirmationLine, new()
        {
            var cmd = new TRemoveMovementConfirmationLine();
            cmd.LineNumber = state.LineNumber;
            return cmd;
        }

        public static TMergePatchMovementConfirmationLine ToMergePatchMovementConfirmationLine<TMergePatchMovementConfirmationLine>(this IMovementConfirmationLineState state)
            where TMergePatchMovementConfirmationLine : IMergePatchMovementConfirmationLine, new()
        {
            var cmd = new TMergePatchMovementConfirmationLine();

            cmd.LineNumber = state.LineNumber;
            cmd.TargetQuantity = state.TargetQuantity;
            cmd.ConfirmedQuantity = state.ConfirmedQuantity;
            cmd.DifferenceQuantity = state.DifferenceQuantity;
            cmd.ScrappedQuantity = state.ScrappedQuantity;
            cmd.Active = ((IMovementConfirmationLineStateProperties)state).Active;
            cmd.MovementDocumentNumber = state.MovementDocumentNumber;
            
            return cmd;
        }

        public static TCreateMovementConfirmationLine ToCreateMovementConfirmationLine<TCreateMovementConfirmationLine>(this IMovementConfirmationLineState state)
            where TCreateMovementConfirmationLine : ICreateMovementConfirmationLine, new()
        {
            var cmd = new TCreateMovementConfirmationLine();

            cmd.LineNumber = state.LineNumber;
            cmd.TargetQuantity = state.TargetQuantity;
            cmd.ConfirmedQuantity = state.ConfirmedQuantity;
            cmd.DifferenceQuantity = state.DifferenceQuantity;
            cmd.ScrappedQuantity = state.ScrappedQuantity;
            cmd.Active = ((IMovementConfirmationLineStateProperties)state).Active;
            cmd.MovementDocumentNumber = state.MovementDocumentNumber;
            return cmd;
        }
		

	}

}

