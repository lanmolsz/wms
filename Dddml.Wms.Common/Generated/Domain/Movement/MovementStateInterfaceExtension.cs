// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

	public static partial class MovementStateInterfaceExtension
	{

        public static IMovementCommand ToCreateOrMergePatchMovement<TCreateMovement, TMergePatchMovement, TCreateMovementLine, TMergePatchMovementLine>(this IMovementState state)
            where TCreateMovement : ICreateMovement, new()
            where TMergePatchMovement : IMergePatchMovement, new()
            where TCreateMovementLine : ICreateMovementLine, new()
            where TMergePatchMovementLine : IMergePatchMovementLine, new()
        {
            bool bUnsaved = ((IMovementState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateMovement<TCreateMovement, TCreateMovementLine>();
            }
            else 
            {
                return state.ToMergePatchMovement<TMergePatchMovement, TCreateMovementLine, TMergePatchMovementLine>();
            }
        }

        public static TDeleteMovement ToDeleteMovement<TDeleteMovement>(this IMovementState state)
            where TDeleteMovement : IDeleteMovement, new()
        {
            var cmd = new TDeleteMovement();
            cmd.DocumentNumber = state.DocumentNumber;
            cmd.Version = ((IMovementStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchMovement ToMergePatchMovement<TMergePatchMovement, TCreateMovementLine, TMergePatchMovementLine>(this IMovementState state)
            where TMergePatchMovement : IMergePatchMovement, new()
            where TCreateMovementLine : ICreateMovementLine, new()
            where TMergePatchMovementLine : IMergePatchMovementLine, new()
        {
            var cmd = new TMergePatchMovement();

            cmd.Version = ((IMovementStateProperties)state).Version;

            cmd.DocumentNumber = state.DocumentNumber;
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Description = state.Description;
            cmd.Active = ((IMovementStateProperties)state).Active;
            
            if (state.DocumentTypeId == null) { cmd.IsPropertyDocumentTypeIdRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            foreach (var d in state.MovementLines)
            {
                var c = d.ToCreateOrMergePatchMovementLine<TCreateMovementLine, TMergePatchMovementLine>();
                cmd.MovementLineCommands.Add(c);
            }
            return cmd;
        }

        public static TCreateMovement ToCreateMovement<TCreateMovement, TCreateMovementLine>(this IMovementState state)
            where TCreateMovement : ICreateMovement, new()
            where TCreateMovementLine : ICreateMovementLine, new()
        {
            var cmd = new TCreateMovement();

            cmd.Version = ((IMovementStateProperties)state).Version;

            cmd.DocumentNumber = state.DocumentNumber;
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Description = state.Description;
            cmd.Active = ((IMovementStateProperties)state).Active;
            foreach (var d in state.MovementLines)
            {
                var c = d.ToCreateMovementLine<TCreateMovementLine>();
                cmd.MovementLines.Add(c);
            }
            return cmd;
        }
		

	}

}

