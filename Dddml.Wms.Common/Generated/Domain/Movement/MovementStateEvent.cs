// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

	public abstract class MovementStateEventBase : IMovementStateEvent
	{

		public virtual MovementEventId MovementEventId { get; set; }

        public virtual string DocumentNumber
        {
            get { return MovementEventId.DocumentNumber; }
            set { MovementEventId.DocumentNumber = value; }
        }

		public virtual string DocumentStatusId { get; set; }

		public virtual DateTime? MovementDate { get; set; }

		public virtual bool? Posted { get; set; }

		public virtual bool? Processed { get; set; }

		public virtual string Processing { get; set; }

		public virtual DateTime? DateReceived { get; set; }

		public virtual string DocumentTypeId { get; set; }

		public virtual bool? IsInTransit { get; set; }

		public virtual bool? IsApproved { get; set; }

		public virtual decimal? ApprovalAmount { get; set; }

		public virtual string ShipperId { get; set; }

		public virtual string SalesRepresentativeId { get; set; }

		public virtual string BusinessPartnerId { get; set; }

		public virtual decimal? ChargeAmount { get; set; }

		public virtual string CreateFrom { get; set; }

		public virtual decimal? FreightAmount { get; set; }

		public virtual string ReversalDocumentNumber { get; set; }

		public virtual string WarehouseIdFrom { get; set; }

		public virtual string WarehouseIdTo { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		MovementEventId IGlobalIdentity<MovementEventId>.GlobalId {
			get
			{
				return this.MovementEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IMovementStateEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected MovementStateEventBase()
        {
        }

        protected MovementStateEventBase(MovementEventId stateEventId)
        {
            this.MovementEventId = stateEventId;
        }

		protected IMovementLineStateEventDao MovementLineStateEventDao
		{
			get { return ApplicationContext.Current["MovementLineStateEventDao"] as IMovementLineStateEventDao; }
		}

        protected MovementLineEventId NewMovementLineEventId(string lineNumber)
        {
            var stateEventId = new MovementLineEventId(this.MovementEventId.DocumentNumber, lineNumber, this.MovementEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IMovementLineStateEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IMovementStateEvent oe, IMovementLineStateEvent e)
		{
			if (!oe.MovementEventId.DocumentNumber.Equals(e.MovementLineEventId.MovementDocumentNumber))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id DocumentNumber {0} but inner id MovementDocumentNumber {1}", 
					oe.MovementEventId.DocumentNumber, e.MovementLineEventId.MovementDocumentNumber);
			}
		}



        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class MovementStateCreated : MovementStateEventBase, IMovementStateCreated, ISaveable
	{
		public MovementStateCreated () : this(new MovementEventId())
		{
		}

		public MovementStateCreated (MovementEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<MovementLineEventId, IMovementLineStateCreated> _movementLineEvents = new Dictionary<MovementLineEventId, IMovementLineStateCreated>();
        
        private IEnumerable<IMovementLineStateCreated> _readOnlyMovementLineEvents;

        public virtual IEnumerable<IMovementLineStateCreated> MovementLineEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._movementLineEvents.Values;
                }
                else
                {
                    if (_readOnlyMovementLineEvents != null) { return _readOnlyMovementLineEvents; }
                    var eventDao = MovementLineStateEventDao;
                    var eL = new List<IMovementLineStateCreated>();
                    foreach (var e in eventDao.FindByMovementEventId(this.MovementEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IMovementLineStateCreated)e);
                    }
                    return (_readOnlyMovementLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddMovementLineEvent(e);
                    }
                }
                else { this._movementLineEvents.Clear(); }
            }
        }
    
		public virtual void AddMovementLineEvent(IMovementLineStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._movementLineEvents[e.MovementLineEventId] = e;
		}

        public virtual IMovementLineStateCreated NewMovementLineStateCreated(string lineNumber)
        {
            var stateEvent = new MovementLineStateCreated(NewMovementLineEventId(lineNumber));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IMovementLineStateCreated e in this.MovementLineEvents) {
				MovementLineStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class MovementStateMergePatched : MovementStateEventBase, IMovementStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyDocumentStatusIdRemoved { get; set; }

		public virtual bool IsPropertyMovementDateRemoved { get; set; }

		public virtual bool IsPropertyPostedRemoved { get; set; }

		public virtual bool IsPropertyProcessedRemoved { get; set; }

		public virtual bool IsPropertyProcessingRemoved { get; set; }

		public virtual bool IsPropertyDateReceivedRemoved { get; set; }

		public virtual bool IsPropertyDocumentTypeIdRemoved { get; set; }

		public virtual bool IsPropertyIsInTransitRemoved { get; set; }

		public virtual bool IsPropertyIsApprovedRemoved { get; set; }

		public virtual bool IsPropertyApprovalAmountRemoved { get; set; }

		public virtual bool IsPropertyShipperIdRemoved { get; set; }

		public virtual bool IsPropertySalesRepresentativeIdRemoved { get; set; }

		public virtual bool IsPropertyBusinessPartnerIdRemoved { get; set; }

		public virtual bool IsPropertyChargeAmountRemoved { get; set; }

		public virtual bool IsPropertyCreateFromRemoved { get; set; }

		public virtual bool IsPropertyFreightAmountRemoved { get; set; }

		public virtual bool IsPropertyReversalDocumentNumberRemoved { get; set; }

		public virtual bool IsPropertyWarehouseIdFromRemoved { get; set; }

		public virtual bool IsPropertyWarehouseIdToRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MovementStateMergePatched ()
		{
		}

		public MovementStateMergePatched (MovementEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<MovementLineEventId, IMovementLineStateEvent> _movementLineEvents = new Dictionary<MovementLineEventId, IMovementLineStateEvent>();

        private IEnumerable<IMovementLineStateEvent> _readOnlyMovementLineEvents;
        
        public virtual IEnumerable<IMovementLineStateEvent> MovementLineEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._movementLineEvents.Values;
                }
                else
                {
                    if (_readOnlyMovementLineEvents != null) { return _readOnlyMovementLineEvents; }
                    var eventDao = MovementLineStateEventDao;
                    var eL = new List<IMovementLineStateEvent>();
                    foreach (var e in eventDao.FindByMovementEventId(this.MovementEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IMovementLineStateEvent)e);
                    }
                    return (_readOnlyMovementLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddMovementLineEvent(e);
                    }
                }
                else { this._movementLineEvents.Clear(); }
            }
        }

		public virtual void AddMovementLineEvent(IMovementLineStateEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._movementLineEvents[e.MovementLineEventId] = e;
		}

        public virtual IMovementLineStateCreated NewMovementLineStateCreated(string lineNumber)
        {
            var stateEvent = new MovementLineStateCreated(NewMovementLineEventId(lineNumber));
            return stateEvent;
        }

        public virtual IMovementLineStateMergePatched NewMovementLineStateMergePatched(string lineNumber)
        {
            var stateEvent = new MovementLineStateMergePatched(NewMovementLineEventId(lineNumber));
            return stateEvent;
        }

        public virtual IMovementLineStateRemoved NewMovementLineStateRemoved(string lineNumber)
        {
            var stateEvent = new MovementLineStateRemoved(NewMovementLineEventId(lineNumber));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IMovementLineStateEvent e in this.MovementLineEvents) {
				MovementLineStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class MovementStateDeleted : MovementStateEventBase, IMovementStateDeleted, ISaveable
	{
		public MovementStateDeleted ()
		{
		}

		public MovementStateDeleted (MovementEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

		private Dictionary<MovementLineEventId, IMovementLineStateRemoved> _movementLineEvents = new Dictionary<MovementLineEventId, IMovementLineStateRemoved>();
		
        private IEnumerable<IMovementLineStateRemoved> _readOnlyMovementLineEvents;

        public virtual IEnumerable<IMovementLineStateRemoved> MovementLineEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._movementLineEvents.Values;
                }
                else
                {
                    if (_readOnlyMovementLineEvents != null) { return _readOnlyMovementLineEvents; }
                    var eventDao = MovementLineStateEventDao;
                    var eL = new List<IMovementLineStateRemoved>();
                    foreach (var e in eventDao.FindByMovementEventId(this.MovementEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IMovementLineStateRemoved)e);
                    }
                    return (_readOnlyMovementLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddMovementLineEvent(e);
                    }
                }
                else { this._movementLineEvents.Clear(); }
            }
        }
	
		public virtual void AddMovementLineEvent(IMovementLineStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._movementLineEvents[e.MovementLineEventId] = e;
		}

        public virtual IMovementLineStateRemoved NewMovementLineStateRemoved(string lineNumber)
        {
            var stateEvent = new MovementLineStateRemoved(NewMovementLineEventId(lineNumber));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IMovementLineStateRemoved e in this.MovementLineEvents) {
				MovementLineStateEventDao.Save(e);
			}
		}


	}



}

