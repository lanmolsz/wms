// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

	public partial class MovementStateDtoWrapper : StateDtoWrapperBase, IMovementStateDto, IMovementState
	{

        internal static IList<string> _collectionFieldNames = new string[] { "MovementLines", "MovementConfirmationLines" };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IMovementState _state;

        public MovementStateDtoWrapper()
        {
            this._state = new MovementState();
        }

		public MovementStateDtoWrapper(IMovementState state)
		{
            this._state = state;
		}

		public IMovementState ToMovementState()
		{
			return this._state;
		}

		public virtual string DocumentNumber
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DocumentNumber"))
                {
                    return _state.DocumentNumber;
                }
                return null;
            }
            set
            {
                _state.DocumentNumber = value;
            }
        }

        string IMovementStateProperties.DocumentNumber
        {
            get 
            {
                return (this._state as IMovementStateProperties).DocumentNumber;
            }
            set 
            {
                (this._state as IMovementStateProperties).DocumentNumber = value;
            }
        }

		public virtual string DocumentTypeId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DocumentTypeId"))
                {
                    return _state.DocumentTypeId;
                }
                return null;
            }
            set
            {
                _state.DocumentTypeId = value;
            }
        }

        string IMovementStateProperties.DocumentTypeId
        {
            get 
            {
                return (this._state as IMovementStateProperties).DocumentTypeId;
            }
            set 
            {
                (this._state as IMovementStateProperties).DocumentTypeId = value;
            }
        }

		public virtual string DocumentStatusId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DocumentStatusId"))
                {
                    return _state.DocumentStatusId;
                }
                return null;
            }
            set
            {
                _state.DocumentStatusId = value;
            }
        }

        string IMovementStateProperties.DocumentStatusId
        {
            get 
            {
                return (this._state as IMovementStateProperties).DocumentStatusId;
            }
            set 
            {
                (this._state as IMovementStateProperties).DocumentStatusId = value;
            }
        }

		public virtual string MovementTypeId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("MovementTypeId"))
                {
                    return _state.MovementTypeId;
                }
                return null;
            }
            set
            {
                _state.MovementTypeId = value;
            }
        }

        string IMovementStateProperties.MovementTypeId
        {
            get 
            {
                return (this._state as IMovementStateProperties).MovementTypeId;
            }
            set 
            {
                (this._state as IMovementStateProperties).MovementTypeId = value;
            }
        }

		public virtual string Description
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Description"))
                {
                    return _state.Description;
                }
                return null;
            }
            set
            {
                _state.Description = value;
            }
        }

        string IMovementStateProperties.Description
        {
            get 
            {
                return (this._state as IMovementStateProperties).Description;
            }
            set 
            {
                (this._state as IMovementStateProperties).Description = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Active"))
                {
                    return (this._state as IMovementStateProperties).Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IMovementStateProperties).Active = value.Value;
                }
            }
        }

        bool IMovementStateProperties.Active
        {
            get 
            {
                return (this._state as IMovementStateProperties).Active;
            }
            set 
            {
                (this._state as IMovementStateProperties).Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IMovementStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IMovementStateProperties).Version = value.Value;
                }
            }
        }

        long IMovementStateProperties.Version
        {
            get 
            {
                return (this._state as IMovementStateProperties).Version;
            }
            set 
            {
                (this._state as IMovementStateProperties).Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get { return (_state as IMovementState).GlobalId; }
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
            return (_state as IActive).IsActive();
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IMovementState).CreatedBy; }
            set { (_state as IMovementState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IMovementState).CreatedAt; }
            set { (_state as IMovementState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IMovementState).UpdatedBy; }
            set { (_state as IMovementState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IMovementState).UpdatedAt; }
            set { (_state as IMovementState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as IMovementStateProperties).Version; }
		}

		#endregion

        bool IMovementState.IsUnsaved
        {
            get { return this.Version == MovementState.VersionZero; }
        }

        public virtual IMovementLineStateDto[] MovementLines
        {
            get 
            {
                if (!(this as IStateDtoWrapper).ReturnedFieldsContains("MovementLines"))
                {
                    return null;
                }
                var dtos = new List<IMovementLineStateDto>();
                if (this._state.MovementLines != null)
                {
                    foreach (var s in this._state.MovementLines)
                    {
                        var dto = new MovementLineStateDtoWrapper((MovementLineState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "MovementLines");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDtoWrapper).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDtoWrapper).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new MovementLineStateDtoWrapper[0]; }
                var states = new List<IMovementLineState>();
                foreach (var s in value)
                {
                    states.Add(s.ToMovementLineState());
                }
                this._state.MovementLines = new DtoMovementLineStates(this._state, states);
            }
        }

        IMovementLineStates IMovementState.MovementLines
        {
            get { return _state.MovementLines; }
            set { _state.MovementLines = value; }
        }

        public virtual IMovementConfirmationLineStateDto[] MovementConfirmationLines
        {
            get 
            {
                if (!(this as IStateDtoWrapper).ReturnedFieldsContains("MovementConfirmationLines"))
                {
                    return null;
                }
                var dtos = new List<IMovementConfirmationLineStateDto>();
                if (this._state.MovementConfirmationLines != null)
                {
                    foreach (var s in this._state.MovementConfirmationLines)
                    {
                        var dto = new MovementConfirmationLineStateDtoWrapper((MovementConfirmationLineState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "MovementConfirmationLines");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDtoWrapper).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDtoWrapper).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new MovementConfirmationLineStateDtoWrapper[0]; }
                var states = new List<IMovementConfirmationLineState>();
                foreach (var s in value)
                {
                    states.Add(s.ToMovementConfirmationLineState());
                }
                this._state.MovementConfirmationLines = new DtoMovementConfirmationLineStates(this._state, states);
            }
        }

        IMovementConfirmationLineStates IMovementState.MovementConfirmationLines
        {
            get { return _state.MovementConfirmationLines; }
            set { _state.MovementConfirmationLines = value; }
        }

		void IMovementState.When(IMovementStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IMovementState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void IMovementState.When(IMovementStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IMovementState.When(IMovementStateDeleted e)
		{
            throw new NotSupportedException();
		}

		void IMovementState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

        public class DtoMovementLineStates : IMovementLineStates
        {

            private IMovementState _outerState;

            private IEnumerable<IMovementLineState> _innerStates;

            public DtoMovementLineStates(IMovementState outerState, IEnumerable<IMovementLineState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new IMovementLineState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<IMovementLineState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public IMovementLineState Get(string lineNumber)
            {
                throw new NotSupportedException();
            }

            public IMovementLineState Get(string lineNumber, bool forCreation)
            {
                throw new NotSupportedException();
            }

            public IMovementLineState Get(string lineNumber, bool forCreation, bool nullAllowed)
            {
                throw new NotSupportedException();
            }

            public void Remove(IMovementLineState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(IMovementLineState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

        public class DtoMovementConfirmationLineStates : IMovementConfirmationLineStates
        {

            private IMovementState _outerState;

            private IEnumerable<IMovementConfirmationLineState> _innerStates;

            public DtoMovementConfirmationLineStates(IMovementState outerState, IEnumerable<IMovementConfirmationLineState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new IMovementConfirmationLineState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<IMovementConfirmationLineState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public IMovementConfirmationLineState Get(string lineNumber)
            {
                throw new NotSupportedException();
            }

            public IMovementConfirmationLineState Get(string lineNumber, bool forCreation)
            {
                throw new NotSupportedException();
            }

            public IMovementConfirmationLineState Get(string lineNumber, bool forCreation, bool nullAllowed)
            {
                throw new NotSupportedException();
            }

            public void Remove(IMovementConfirmationLineState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(IMovementConfirmationLineState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

	}

    partial class MovementStateDtoWrapperCollection : StateDtoWrapperCollectionBase<MovementStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(MovementStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

