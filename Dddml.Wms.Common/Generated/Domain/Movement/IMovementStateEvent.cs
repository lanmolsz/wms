// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{
	public interface IMovementStateEvent : IEvent, IStateEventDto, IGlobalIdentity<MovementEventId>, ICreated<string>
	{
		MovementEventId StateEventId { get; }

        bool ReadOnly { get; set; }

		string DocumentStatusId { get; set; }

		DateTime? MovementDate { get; set; }

		bool? Posted { get; set; }

		bool? Processed { get; set; }

		string Processing { get; set; }

		DateTime? DateReceived { get; set; }

		string DocumentTypeId { get; set; }

		bool? IsInTransit { get; set; }

		bool? IsApproved { get; set; }

		decimal? ApprovalAmount { get; set; }

		string ShipperId { get; set; }

		string SalesRepresentativeId { get; set; }

		string BusinessPartnerId { get; set; }

		decimal? ChargeAmount { get; set; }

		string CreateFrom { get; set; }

		decimal? FreightAmount { get; set; }

		string ReversalDocumentNumber { get; set; }

		string WarehouseIdFrom { get; set; }

		string WarehouseIdTo { get; set; }

		string Description { get; set; }

		bool? Active { get; set; }

	}

	public interface IMovementStateCreated : IMovementStateEvent//, IMovementStateProperties
	{
		IEnumerable<IMovementLineStateCreated> MovementLineEvents { get; }
		
		void AddMovementLineEvent(IMovementLineStateCreated e);

		IMovementLineStateCreated NewMovementLineStateCreated(string lineNumber);

	
	}


	public interface IMovementStateMergePatched : IMovementStateEvent//, IMovementStateProperties
	{
		bool IsPropertyDocumentStatusIdRemoved { get; set; }

		bool IsPropertyMovementDateRemoved { get; set; }

		bool IsPropertyPostedRemoved { get; set; }

		bool IsPropertyProcessedRemoved { get; set; }

		bool IsPropertyProcessingRemoved { get; set; }

		bool IsPropertyDateReceivedRemoved { get; set; }

		bool IsPropertyDocumentTypeIdRemoved { get; set; }

		bool IsPropertyIsInTransitRemoved { get; set; }

		bool IsPropertyIsApprovedRemoved { get; set; }

		bool IsPropertyApprovalAmountRemoved { get; set; }

		bool IsPropertyShipperIdRemoved { get; set; }

		bool IsPropertySalesRepresentativeIdRemoved { get; set; }

		bool IsPropertyBusinessPartnerIdRemoved { get; set; }

		bool IsPropertyChargeAmountRemoved { get; set; }

		bool IsPropertyCreateFromRemoved { get; set; }

		bool IsPropertyFreightAmountRemoved { get; set; }

		bool IsPropertyReversalDocumentNumberRemoved { get; set; }

		bool IsPropertyWarehouseIdFromRemoved { get; set; }

		bool IsPropertyWarehouseIdToRemoved { get; set; }

		bool IsPropertyDescriptionRemoved { get; set; }

		bool IsPropertyActiveRemoved { get; set; }

		IEnumerable<IMovementLineStateEvent> MovementLineEvents { get; }
		
		void AddMovementLineEvent(IMovementLineStateEvent e);

		IMovementLineStateCreated NewMovementLineStateCreated(string lineNumber);

		IMovementLineStateMergePatched NewMovementLineStateMergePatched(string lineNumber);

		IMovementLineStateRemoved NewMovementLineStateRemoved(string lineNumber);


	}

	public interface IMovementStateDeleted : IMovementStateEvent
	{
		IEnumerable<IMovementLineStateRemoved> MovementLineEvents { get; }
		
		void AddMovementLineEvent(IMovementLineStateRemoved e);
		
		IMovementLineStateRemoved NewMovementLineStateRemoved(string lineNumber);

	}


}

