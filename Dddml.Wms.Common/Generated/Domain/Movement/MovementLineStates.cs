// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

    public class MovementLineStates : IMovementLineStates
    {
        
		protected IMovementLineStateDao MovementLineStateDao
		{
			get
			{
				return ApplicationContext.Current["MovementLineStateDao"] as IMovementLineStateDao;
			}
		}

		private Dictionary<MovementLineId, IMovementLineState> _loadedMovementLineStates = new Dictionary<MovementLineId, IMovementLineState>();

		private Dictionary<MovementLineId, IMovementLineState> _removedMovementLineStates = new Dictionary<MovementLineId, IMovementLineState>();

		protected virtual IEnumerable<IMovementLineState> LoadedMovementLineStates {
			get {
				return this._loadedMovementLineStates.Values;
			}
		}

        private IMovementState _movementState;

        private IEnumerable<IMovementLineState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return MovementLineStateDao.FindByMovementDocumentNumber(_movementState.DocumentNumber);
                }
                else
                {
                    return _loadedMovementLineStates.Values.Where(s => !(_removedMovementLineStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public MovementLineStates(IMovementState outerState)
        {
            this._movementState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IMovementLineState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IMovementLineState state)
        {
            this._removedMovementLineStates.Add(state.GlobalId, state);
        }

        public virtual IMovementLineState Get(string lineNumber)
		{
			return Get(lineNumber, false, false);
		}

        public virtual IMovementLineState Get(string lineNumber, bool forCreation)
        {
			return Get(lineNumber, forCreation, false);
        }

        public virtual IMovementLineState Get(string lineNumber, bool forCreation, bool nullAllowed)
        {
            MovementLineId globalId = new MovementLineId(_movementState.DocumentNumber, lineNumber);
            if (_loadedMovementLineStates.ContainsKey(globalId)) {
                var state = _loadedMovementLineStates[globalId];
                if (this._movementState != null && this._movementState.ReadOnly == false) { ((IMovementLineState)state).ReadOnly = false; }
                return state;
            }
            if (forCreation || ForReapplying)
            {
                var state = new MovementLineState(ForReapplying);
                state.MovementLineId = globalId;
                _loadedMovementLineStates.Add(globalId, state);
                if (this._movementState != null && this._movementState.ReadOnly == false) { ((IMovementLineState)state).ReadOnly = false; }
                return state;
            }
            else
            {
                var state = MovementLineStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedMovementLineStates.Add(globalId, state);
                }
                if (this._movementState != null && this._movementState.ReadOnly == false) { ((IMovementLineState)state).ReadOnly = false; }
                return state;
            }
        }

        public virtual void AddToSave(IMovementLineState state)
        {
            this._loadedMovementLineStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IMovementLineState s in this.LoadedMovementLineStates) {
                MovementLineStateDao.Save(s);
			}
            foreach(IMovementLineState s in this._removedMovementLineStates.Values)
            {
                MovementLineStateDao.Delete(s);
            }
		}

		#endregion


    }



}


