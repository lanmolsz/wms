// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{
    public partial class MovementAggregate : AggregateBase, IMovementAggregate
    {

        readonly IMovementState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IMovementState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public MovementAggregate(IMovementState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IMovementStateProperties)_state).Version == MovementState.VersionZero)
            {
                if (IsCommandCreate((IMovementCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IMovementCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IMovementCommand c)
        {
            return c.Version == MovementState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateMovement c)
        {
            IMovementStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchMovement c)
        {
            IMovementStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteMovement c)
        {
            IMovementStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IMovementStateCreated Map(ICreateMovement c)
        {
			var stateEventId = new MovementStateEventId(c.DocumentNumber, c.Version);
            IMovementStateCreated e = NewMovementStateCreated(stateEventId);
		
            e.DocumentTypeId = c.DocumentTypeId;
            NewMovementDocumentActionCommandAndExecute(c, _state, e);
            e.MovementTypeId = c.MovementTypeId;
            e.Description = c.Description;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var version = c.Version;

            foreach (ICreateMovementLine innerCommand in c.MovementLines)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IMovementLineStateCreated innerEvent = MapCreate(innerCommand, c, version, _state);
                e.AddMovementLineEvent(innerEvent);
            }

            foreach (ICreateMovementConfirmationLine innerCommand in c.MovementConfirmationLines)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IMovementConfirmationLineStateCreated innerEvent = MapCreate(innerCommand, c, version, _state);
                e.AddMovementConfirmationLineEvent(innerEvent);
            }


            return e;
        }

        protected virtual IMovementStateMergePatched Map(IMergePatchMovement c)
        {
			var stateEventId = new MovementStateEventId(c.DocumentNumber, c.Version);
            IMovementStateMergePatched e = NewMovementStateMergePatched(stateEventId);

            e.DocumentTypeId = c.DocumentTypeId;
            NewMovementDocumentActionCommandAndExecute(c, _state, e);
            e.MovementTypeId = c.MovementTypeId;
            e.Description = c.Description;
            e.Active = c.Active;
            e.IsPropertyDocumentTypeIdRemoved = c.IsPropertyDocumentTypeIdRemoved;
            e.IsPropertyMovementTypeIdRemoved = c.IsPropertyMovementTypeIdRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var version = c.Version;

            foreach (IMovementLineCommand innerCommand in c.MovementLineCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IMovementLineStateEvent innerEvent = Map(innerCommand, c, version, _state);
                e.AddMovementLineEvent(innerEvent);
            }

            foreach (IMovementConfirmationLineCommand innerCommand in c.MovementConfirmationLineCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IMovementConfirmationLineStateEvent innerEvent = Map(innerCommand, c, version, _state);
                e.AddMovementConfirmationLineEvent(innerEvent);
            }


            return e;
        }

        protected virtual IMovementStateDeleted Map(IDeleteMovement c)
        {
			var stateEventId = new MovementStateEventId(c.DocumentNumber, c.Version);
            IMovementStateDeleted e = NewMovementStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;


            return e;
        }


        protected void ThrowOnInconsistentCommands(IMovementCommand command, IMovementLineCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrDeleteMovement;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemoveMovementLine;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.MovementDocumentNumber == default(string))
            {
                innerProperties.MovementDocumentNumber = properties.DocumentNumber;
            }
            else
            {
                var outerDocumentNumberName = "DocumentNumber";
                var outerDocumentNumberValue = properties.DocumentNumber;
                var innerMovementDocumentNumberName = "MovementDocumentNumber";
                var innerMovementDocumentNumberValue = innerProperties.MovementDocumentNumber;
                ThrowOnInconsistentIds(innerProperties, innerMovementDocumentNumberName, innerMovementDocumentNumberValue, outerDocumentNumberName, outerDocumentNumberValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected void ThrowOnInconsistentCommands(IMovementCommand command, IMovementConfirmationLineCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrDeleteMovement;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemoveMovementConfirmationLine;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.MovementDocumentNumber == default(string))
            {
                innerProperties.MovementDocumentNumber = properties.DocumentNumber;
            }
            else
            {
                var outerDocumentNumberName = "DocumentNumber";
                var outerDocumentNumberValue = properties.DocumentNumber;
                var innerMovementDocumentNumberName = "MovementDocumentNumber";
                var innerMovementDocumentNumberValue = innerProperties.MovementDocumentNumber;
                ThrowOnInconsistentIds(innerProperties, innerMovementDocumentNumberName, innerMovementDocumentNumberValue, outerDocumentNumberName, outerDocumentNumberValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected virtual IMovementLineStateEvent Map(IMovementLineCommand c, IMovementCommand outerCommand, long version, IMovementState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreateMovementLine) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            var merge = (c.CommandType == CommandType.MergePatch) ? (c as IMergePatchMovementLine) : null;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, version, outerState);
            }

            var remove = (c.CommandType == CommandType.Remove) ? (c as IRemoveMovementLine) : null;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, version);
            }
            throw new NotSupportedException();
        }


        protected virtual IMovementLineStateCreated MapCreate(ICreateMovementLine c, IMovementCommand outerCommand, long version, IMovementState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new MovementLineStateEventId(c.MovementDocumentNumber, c.LineNumber, version);
            IMovementLineStateCreated e = NewMovementLineStateCreated(stateEventId);
            var s = outerState.MovementLines.Get(c.LineNumber, true);

            e.MovementQuantity = c.MovementQuantity;
            e.Active = c.Active;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IMovementLineStateMergePatched MapMergePatch(IMergePatchMovementLine c, IMovementCommand outerCommand, long version, IMovementState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new MovementLineStateEventId(c.MovementDocumentNumber, c.LineNumber, version);
            IMovementLineStateMergePatched e = NewMovementLineStateMergePatched(stateEventId);
            var s = outerState.MovementLines.Get(c.LineNumber);

            e.MovementQuantity = c.MovementQuantity;
            e.Active = c.Active;
            e.IsPropertyMovementQuantityRemoved = c.IsPropertyMovementQuantityRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IMovementLineStateRemoved MapRemove(IRemoveMovementLine c, IMovementCommand outerCommand, long version)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new MovementLineStateEventId(c.MovementDocumentNumber, c.LineNumber, version);
            IMovementLineStateRemoved e = NewMovementLineStateRemoved(stateEventId);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

            return e;

        }// END Map(IRemove... ////////////////////////////


        protected virtual IMovementConfirmationLineStateEvent Map(IMovementConfirmationLineCommand c, IMovementCommand outerCommand, long version, IMovementState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreateMovementConfirmationLine) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            var merge = (c.CommandType == CommandType.MergePatch) ? (c as IMergePatchMovementConfirmationLine) : null;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, version, outerState);
            }

            var remove = (c.CommandType == CommandType.Remove) ? (c as IRemoveMovementConfirmationLine) : null;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, version);
            }
            throw new NotSupportedException();
        }


        protected virtual IMovementConfirmationLineStateCreated MapCreate(ICreateMovementConfirmationLine c, IMovementCommand outerCommand, long version, IMovementState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new MovementConfirmationLineStateEventId(c.MovementDocumentNumber, c.LineNumber, version);
            IMovementConfirmationLineStateCreated e = NewMovementConfirmationLineStateCreated(stateEventId);
            var s = outerState.MovementConfirmationLines.Get(c.LineNumber, true);

            e.TargetQuantity = c.TargetQuantity;
            e.ConfirmedQuantity = c.ConfirmedQuantity;
            e.DifferenceQuantity = c.DifferenceQuantity;
            e.ScrappedQuantity = c.ScrappedQuantity;
            e.Active = c.Active;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IMovementConfirmationLineStateMergePatched MapMergePatch(IMergePatchMovementConfirmationLine c, IMovementCommand outerCommand, long version, IMovementState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new MovementConfirmationLineStateEventId(c.MovementDocumentNumber, c.LineNumber, version);
            IMovementConfirmationLineStateMergePatched e = NewMovementConfirmationLineStateMergePatched(stateEventId);
            var s = outerState.MovementConfirmationLines.Get(c.LineNumber);

            e.TargetQuantity = c.TargetQuantity;
            e.ConfirmedQuantity = c.ConfirmedQuantity;
            e.DifferenceQuantity = c.DifferenceQuantity;
            e.ScrappedQuantity = c.ScrappedQuantity;
            e.Active = c.Active;
            e.IsPropertyTargetQuantityRemoved = c.IsPropertyTargetQuantityRemoved;
            e.IsPropertyConfirmedQuantityRemoved = c.IsPropertyConfirmedQuantityRemoved;
            e.IsPropertyDifferenceQuantityRemoved = c.IsPropertyDifferenceQuantityRemoved;
            e.IsPropertyScrappedQuantityRemoved = c.IsPropertyScrappedQuantityRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IMovementConfirmationLineStateRemoved MapRemove(IRemoveMovementConfirmationLine c, IMovementCommand outerCommand, long version)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new MovementConfirmationLineStateEventId(c.MovementDocumentNumber, c.LineNumber, version);
            IMovementConfirmationLineStateRemoved e = NewMovementConfirmationLineStateRemoved(stateEventId);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

            return e;

        }// END Map(IRemove... ////////////////////////////

        protected void NewMovementDocumentActionCommandAndExecute(IMergePatchMovement c, IMovementState s, IMovementStateMergePatched e)
        {
            var pCommandHandler = this.MovementDocumentActionCommandHandler;
            var pCmdContent = c.DocumentAction;
            var pCmd = new PropertyCommand<string, string> { Content = pCmdContent, GetState = () => s.DocumentStatusId, SetState = p => e.DocumentStatusId = p, OuterCommandType = CommandType.MergePatch };
            pCommandHandler.Execute(pCmd);
        }

        protected void NewMovementDocumentActionCommandAndExecute(ICreateMovement c, IMovementState s, IMovementStateCreated e)
        {
            var pCommandHandler = this.MovementDocumentActionCommandHandler;
            var pCmdContent = c.DocumentAction;
            var pCmd = new PropertyCommand<string, string> { Content = pCmdContent, GetState = () => s.DocumentStatusId, SetState = p => e.DocumentStatusId = p, OuterCommandType = CommandType.Create };
            pCommandHandler.Execute(pCmd);
        }

        protected IPropertyCommandHandler<string, string> MovementDocumentActionCommandHandler
        {
            get
            {
                return ApplicationContext.Current["MovementDocumentActionCommandHandler"] as IPropertyCommandHandler<string, string>;
            }
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected MovementStateCreated NewMovementStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new MovementStateEventId(_state.DocumentNumber, ((IMovementStateProperties)_state).Version);
            var e = NewMovementStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected MovementStateMergePatched NewMovementStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new MovementStateEventId(_state.DocumentNumber, ((IMovementStateProperties)_state).Version);
            var e = NewMovementStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


        protected MovementStateDeleted NewMovementStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new MovementStateEventId(_state.DocumentNumber, ((IMovementStateProperties)_state).Version);
            var e = NewMovementStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private MovementStateCreated NewMovementStateCreated(MovementStateEventId stateEventId)
		{
			return new MovementStateCreated(stateEventId);			
		}

        private MovementStateMergePatched NewMovementStateMergePatched(MovementStateEventId stateEventId)
		{
			return new MovementStateMergePatched(stateEventId);
		}

        private MovementStateDeleted NewMovementStateDeleted(MovementStateEventId stateEventId)
		{
			return new MovementStateDeleted(stateEventId);
		}

		private MovementLineStateCreated NewMovementLineStateCreated(MovementLineStateEventId stateEventId)
		{
			return new MovementLineStateCreated(stateEventId);
		}

        private MovementLineStateMergePatched NewMovementLineStateMergePatched(MovementLineStateEventId stateEventId)
		{
			return new MovementLineStateMergePatched(stateEventId);
		}

        private MovementLineStateRemoved NewMovementLineStateRemoved(MovementLineStateEventId stateEventId)
		{
			return new MovementLineStateRemoved(stateEventId);
		}


		private MovementConfirmationLineStateCreated NewMovementConfirmationLineStateCreated(MovementConfirmationLineStateEventId stateEventId)
		{
			return new MovementConfirmationLineStateCreated(stateEventId);
		}

        private MovementConfirmationLineStateMergePatched NewMovementConfirmationLineStateMergePatched(MovementConfirmationLineStateEventId stateEventId)
		{
			return new MovementConfirmationLineStateMergePatched(stateEventId);
		}

        private MovementConfirmationLineStateRemoved NewMovementConfirmationLineStateRemoved(MovementConfirmationLineStateEventId stateEventId)
		{
			return new MovementConfirmationLineStateRemoved(stateEventId);
		}


    }

}

