// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

    public class MovementLineStateEventDtoConverter
    {
        public virtual MovementLineStateCreatedOrMergePatchedOrRemovedDto ToMovementLineStateEventDto(IMovementLineStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IMovementLineStateCreated)stateEvent;
                return ToMovementLineStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IMovementLineStateMergePatched)stateEvent;
                return ToMovementLineStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Removed)
            {
                var e = (IMovementLineStateRemoved)stateEvent;
                return ToMovementLineStateRemovedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual MovementLineStateCreatedDto ToMovementLineStateCreatedDto(IMovementLineStateCreated e)
        {
            var dto = new MovementLineStateCreatedDto();
            dto.StateEventId = new MovementLineStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.MovementQuantity = e.MovementQuantity;
            dto.ProductId = e.ProductId;
            dto.LocatorIdFrom = e.LocatorIdFrom;
            dto.LocatorIdTo = e.LocatorIdTo;
            dto.AttributeSetInstanceId = e.AttributeSetInstanceId;
            dto.Processed = e.Processed;
            dto.ReversalLineNumber = e.ReversalLineNumber;
            dto.Active = e.Active;
            return dto;
        }

        public virtual MovementLineStateMergePatchedDto ToMovementLineStateMergePatchedDto(IMovementLineStateMergePatched e)
        {
            var dto = new MovementLineStateMergePatchedDto();
            dto.StateEventId = new MovementLineStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.MovementQuantity = e.MovementQuantity;
            dto.ProductId = e.ProductId;
            dto.LocatorIdFrom = e.LocatorIdFrom;
            dto.LocatorIdTo = e.LocatorIdTo;
            dto.AttributeSetInstanceId = e.AttributeSetInstanceId;
            dto.Processed = e.Processed;
            dto.ReversalLineNumber = e.ReversalLineNumber;
            dto.Active = e.Active;
            dto.IsPropertyMovementQuantityRemoved = e.IsPropertyMovementQuantityRemoved;
            dto.IsPropertyProductIdRemoved = e.IsPropertyProductIdRemoved;
            dto.IsPropertyLocatorIdFromRemoved = e.IsPropertyLocatorIdFromRemoved;
            dto.IsPropertyLocatorIdToRemoved = e.IsPropertyLocatorIdToRemoved;
            dto.IsPropertyAttributeSetInstanceIdRemoved = e.IsPropertyAttributeSetInstanceIdRemoved;
            dto.IsPropertyProcessedRemoved = e.IsPropertyProcessedRemoved;
            dto.IsPropertyReversalLineNumberRemoved = e.IsPropertyReversalLineNumberRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual MovementLineStateRemovedDto ToMovementLineStateRemovedDto(IMovementLineStateRemoved e)
        {
            var dto = new MovementLineStateRemovedDto();
            dto.StateEventId = new MovementLineStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

