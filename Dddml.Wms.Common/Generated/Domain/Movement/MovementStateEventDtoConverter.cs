// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

    public class MovementStateEventDtoConverter
    {
        public virtual MovementStateCreatedOrMergePatchedOrDeletedDto ToMovementStateEventDto(IMovementStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IMovementStateCreated)stateEvent;
                return ToMovementStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IMovementStateMergePatched)stateEvent;
                return ToMovementStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (IMovementStateDeleted)stateEvent;
                return ToMovementStateDeletedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual MovementStateCreatedDto ToMovementStateCreatedDto(IMovementStateCreated e)
        {
            var dto = new MovementStateCreatedDto();
            dto.StateEventId = new MovementStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.DocumentTypeId = e.DocumentTypeId;
            dto.DocumentStatusId = e.DocumentStatusId;
            dto.MovementTypeId = e.MovementTypeId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            var movementLineEvents = new List<MovementLineStateCreatedDto>();
            foreach (var ee in e.MovementLineEvents)
            {
                MovementLineStateCreatedDto eeDto = MovementLineStateEventDtoConverter.ToMovementLineStateCreatedDto(ee);
                movementLineEvents.Add(eeDto);
            }
            dto.MovementLineEvents = movementLineEvents.ToArray();

            var movementConfirmationLineEvents = new List<MovementConfirmationLineStateCreatedDto>();
            foreach (var ee in e.MovementConfirmationLineEvents)
            {
                MovementConfirmationLineStateCreatedDto eeDto = MovementConfirmationLineStateEventDtoConverter.ToMovementConfirmationLineStateCreatedDto(ee);
                movementConfirmationLineEvents.Add(eeDto);
            }
            dto.MovementConfirmationLineEvents = movementConfirmationLineEvents.ToArray();

            return dto;
        }

        public virtual MovementStateMergePatchedDto ToMovementStateMergePatchedDto(IMovementStateMergePatched e)
        {
            var dto = new MovementStateMergePatchedDto();
            dto.StateEventId = new MovementStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.DocumentTypeId = e.DocumentTypeId;
            dto.DocumentStatusId = e.DocumentStatusId;
            dto.MovementTypeId = e.MovementTypeId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            dto.IsPropertyDocumentTypeIdRemoved = e.IsPropertyDocumentTypeIdRemoved;
            dto.IsPropertyDocumentStatusIdRemoved = e.IsPropertyDocumentStatusIdRemoved;
            dto.IsPropertyMovementTypeIdRemoved = e.IsPropertyMovementTypeIdRemoved;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var movementLineEvents = new List<MovementLineStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.MovementLineEvents)
            {
                MovementLineStateCreatedOrMergePatchedOrRemovedDto eeDto = MovementLineStateEventDtoConverter.ToMovementLineStateEventDto(ee);
                movementLineEvents.Add(eeDto);
            }
            dto.MovementLineEvents = movementLineEvents.ToArray();

            var movementConfirmationLineEvents = new List<MovementConfirmationLineStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.MovementConfirmationLineEvents)
            {
                MovementConfirmationLineStateCreatedOrMergePatchedOrRemovedDto eeDto = MovementConfirmationLineStateEventDtoConverter.ToMovementConfirmationLineStateEventDto(ee);
                movementConfirmationLineEvents.Add(eeDto);
            }
            dto.MovementConfirmationLineEvents = movementConfirmationLineEvents.ToArray();


            return dto;
        }


        public virtual MovementStateDeletedDto ToMovementStateDeletedDto(IMovementStateDeleted e)
        {
            var dto = new MovementStateDeletedDto();
            dto.StateEventId = new MovementStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            var movementLineEvents = new List<MovementLineStateRemovedDto>();
            foreach (var ee in e.MovementLineEvents)
            {
                MovementLineStateRemovedDto eeDto = MovementLineStateEventDtoConverter.ToMovementLineStateRemovedDto(ee);
                movementLineEvents.Add(eeDto);
            }
            dto.MovementLineEvents = movementLineEvents.ToArray();

            var movementConfirmationLineEvents = new List<MovementConfirmationLineStateRemovedDto>();
            foreach (var ee in e.MovementConfirmationLineEvents)
            {
                MovementConfirmationLineStateRemovedDto eeDto = MovementConfirmationLineStateEventDtoConverter.ToMovementConfirmationLineStateRemovedDto(ee);
                movementConfirmationLineEvents.Add(eeDto);
            }
            dto.MovementConfirmationLineEvents = movementConfirmationLineEvents.ToArray();


            return dto;
        }

        protected virtual MovementLineStateEventDtoConverter MovementLineStateEventDtoConverter
        {
            get
            {
                return new MovementLineStateEventDtoConverter();
            }
        }

        protected virtual MovementConfirmationLineStateEventDtoConverter MovementConfirmationLineStateEventDtoConverter
        {
            get
            {
                return new MovementConfirmationLineStateEventDtoConverter();
            }
        }


    }


}

