// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

    public class MovementStateEventDtoConverter
    {
        public virtual MovementStateCreatedOrMergePatchedOrDeletedDto ToMovementStateEventDto(IMovementStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IMovementStateCreated)stateEvent;
                return ToMovementStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IMovementStateMergePatched)stateEvent;
                return ToMovementStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (IMovementStateDeleted)stateEvent;
                return ToMovementStateDeletedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual MovementStateCreatedDto ToMovementStateCreatedDto(IMovementStateCreated e)
        {
            var dto = new MovementStateCreatedDto();
            dto.MovementEventId = new MovementEventIdDtoWrapper(e.MovementEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.DocumentStatusId = e.DocumentStatusId;
            dto.MovementDate = e.MovementDate;
            dto.Posted = e.Posted;
            dto.Processed = e.Processed;
            dto.Processing = e.Processing;
            dto.DateReceived = e.DateReceived;
            dto.DocumentTypeId = e.DocumentTypeId;
            dto.IsInTransit = e.IsInTransit;
            dto.IsApproved = e.IsApproved;
            dto.ApprovalAmount = e.ApprovalAmount;
            dto.ShipperId = e.ShipperId;
            dto.SalesRepresentativeId = e.SalesRepresentativeId;
            dto.BusinessPartnerId = e.BusinessPartnerId;
            dto.ChargeAmount = e.ChargeAmount;
            dto.CreateFrom = e.CreateFrom;
            dto.FreightAmount = e.FreightAmount;
            dto.ReversalDocumentNumber = e.ReversalDocumentNumber;
            dto.WarehouseIdFrom = e.WarehouseIdFrom;
            dto.WarehouseIdTo = e.WarehouseIdTo;
            dto.Description = e.Description;
            dto.Active = e.Active;
            var movementLineEvents = new List<MovementLineStateCreatedDto>();
            foreach (var ee in e.MovementLineEvents)
            {
                MovementLineStateCreatedDto eeDto = MovementLineStateEventDtoConverter.ToMovementLineStateCreatedDto(ee);
                movementLineEvents.Add(eeDto);
            }
            dto.MovementLineEvents = movementLineEvents.ToArray();

            return dto;
        }

        public virtual MovementStateMergePatchedDto ToMovementStateMergePatchedDto(IMovementStateMergePatched e)
        {
            var dto = new MovementStateMergePatchedDto();
            dto.MovementEventId = new MovementEventIdDtoWrapper(e.MovementEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.DocumentStatusId = e.DocumentStatusId;
            dto.MovementDate = e.MovementDate;
            dto.Posted = e.Posted;
            dto.Processed = e.Processed;
            dto.Processing = e.Processing;
            dto.DateReceived = e.DateReceived;
            dto.DocumentTypeId = e.DocumentTypeId;
            dto.IsInTransit = e.IsInTransit;
            dto.IsApproved = e.IsApproved;
            dto.ApprovalAmount = e.ApprovalAmount;
            dto.ShipperId = e.ShipperId;
            dto.SalesRepresentativeId = e.SalesRepresentativeId;
            dto.BusinessPartnerId = e.BusinessPartnerId;
            dto.ChargeAmount = e.ChargeAmount;
            dto.CreateFrom = e.CreateFrom;
            dto.FreightAmount = e.FreightAmount;
            dto.ReversalDocumentNumber = e.ReversalDocumentNumber;
            dto.WarehouseIdFrom = e.WarehouseIdFrom;
            dto.WarehouseIdTo = e.WarehouseIdTo;
            dto.Description = e.Description;
            dto.Active = e.Active;
            dto.IsPropertyDocumentStatusIdRemoved = e.IsPropertyDocumentStatusIdRemoved;
            dto.IsPropertyMovementDateRemoved = e.IsPropertyMovementDateRemoved;
            dto.IsPropertyPostedRemoved = e.IsPropertyPostedRemoved;
            dto.IsPropertyProcessedRemoved = e.IsPropertyProcessedRemoved;
            dto.IsPropertyProcessingRemoved = e.IsPropertyProcessingRemoved;
            dto.IsPropertyDateReceivedRemoved = e.IsPropertyDateReceivedRemoved;
            dto.IsPropertyDocumentTypeIdRemoved = e.IsPropertyDocumentTypeIdRemoved;
            dto.IsPropertyIsInTransitRemoved = e.IsPropertyIsInTransitRemoved;
            dto.IsPropertyIsApprovedRemoved = e.IsPropertyIsApprovedRemoved;
            dto.IsPropertyApprovalAmountRemoved = e.IsPropertyApprovalAmountRemoved;
            dto.IsPropertyShipperIdRemoved = e.IsPropertyShipperIdRemoved;
            dto.IsPropertySalesRepresentativeIdRemoved = e.IsPropertySalesRepresentativeIdRemoved;
            dto.IsPropertyBusinessPartnerIdRemoved = e.IsPropertyBusinessPartnerIdRemoved;
            dto.IsPropertyChargeAmountRemoved = e.IsPropertyChargeAmountRemoved;
            dto.IsPropertyCreateFromRemoved = e.IsPropertyCreateFromRemoved;
            dto.IsPropertyFreightAmountRemoved = e.IsPropertyFreightAmountRemoved;
            dto.IsPropertyReversalDocumentNumberRemoved = e.IsPropertyReversalDocumentNumberRemoved;
            dto.IsPropertyWarehouseIdFromRemoved = e.IsPropertyWarehouseIdFromRemoved;
            dto.IsPropertyWarehouseIdToRemoved = e.IsPropertyWarehouseIdToRemoved;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var movementLineEvents = new List<MovementLineStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.MovementLineEvents)
            {
                MovementLineStateCreatedOrMergePatchedOrRemovedDto eeDto = MovementLineStateEventDtoConverter.ToMovementLineStateEventDto(ee);
                movementLineEvents.Add(eeDto);
            }
            dto.MovementLineEvents = movementLineEvents.ToArray();


            return dto;
        }


        public virtual MovementStateDeletedDto ToMovementStateDeletedDto(IMovementStateDeleted e)
        {
            var dto = new MovementStateDeletedDto();
            dto.MovementEventId = new MovementEventIdDtoWrapper(e.MovementEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            var movementLineEvents = new List<MovementLineStateRemovedDto>();
            foreach (var ee in e.MovementLineEvents)
            {
                MovementLineStateRemovedDto eeDto = MovementLineStateEventDtoConverter.ToMovementLineStateRemovedDto(ee);
                movementLineEvents.Add(eeDto);
            }
            dto.MovementLineEvents = movementLineEvents.ToArray();


            return dto;
        }

        protected virtual MovementLineStateEventDtoConverter MovementLineStateEventDtoConverter
        {
            get
            {
                return new MovementLineStateEventDtoConverter();
            }
        }


    }


}

