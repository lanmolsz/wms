// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

	public static partial class MovementLineStateInterfaceExtension
	{

        public static IMovementLineCommand ToCreateOrMergePatchMovementLine<TCreateMovementLine, TMergePatchMovementLine>(this IMovementLineState state)
            where TCreateMovementLine : ICreateMovementLine, new()
            where TMergePatchMovementLine : IMergePatchMovementLine, new()
        {
            bool bUnsaved = ((IMovementLineState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateMovementLine<TCreateMovementLine>();
            }
            else 
            {
                return state.ToMergePatchMovementLine<TMergePatchMovementLine>();
            }
        }

        public static TRemoveMovementLine ToRemoveMovementLine<TRemoveMovementLine>(this IMovementLineState state)
            where TRemoveMovementLine : IRemoveMovementLine, new()
        {
            var cmd = new TRemoveMovementLine();
            cmd.LineNumber = state.LineNumber;
            return cmd;
        }

        public static TMergePatchMovementLine ToMergePatchMovementLine<TMergePatchMovementLine>(this IMovementLineState state)
            where TMergePatchMovementLine : IMergePatchMovementLine, new()
        {
            var cmd = new TMergePatchMovementLine();

            cmd.LineNumber = state.LineNumber;
            cmd.MovementQuantity = state.MovementQuantity;
            cmd.Active = ((IMovementLineStateProperties)state).Active;
            cmd.MovementDocumentNumber = state.MovementDocumentNumber;
            
            return cmd;
        }

        public static TCreateMovementLine ToCreateMovementLine<TCreateMovementLine>(this IMovementLineState state)
            where TCreateMovementLine : ICreateMovementLine, new()
        {
            var cmd = new TCreateMovementLine();

            cmd.LineNumber = state.LineNumber;
            cmd.MovementQuantity = state.MovementQuantity;
            cmd.Active = ((IMovementLineStateProperties)state).Active;
            cmd.MovementDocumentNumber = state.MovementDocumentNumber;
            return cmd;
        }
		

	}

}

