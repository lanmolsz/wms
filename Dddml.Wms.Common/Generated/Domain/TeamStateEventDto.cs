// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public abstract class TeamStateEventDtoBase : IStateEventDto, ITeamStateCreated, ITeamStateMergePatched, ITeamStateDeleted
	{

        private TeamStateEventIdDto _stateEventId;

		protected internal virtual TeamStateEventIdDto StateEventId 
        {
            get 
            {
                if (_stateEventId == null) { _stateEventId = new TeamStateEventIdDto(); }
                return _stateEventId;
            }
            set
            {
                _stateEventId = value;
            }
        }

        public virtual string TeamName
        {
            get { return StateEventId.TeamName; }
            set { StateEventId.TeamName = value; }
        }

        public virtual long Version
        {
            get { return StateEventId.Version; }
            set { StateEventId.Version = value; }
        }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

        public virtual PersonalNameDto[] Players { get; set; }

        ISet<PersonalName> ITeamStateEvent.Players 
        {
            get
            {
                if (this.Players != null)
                {
                    var set = new HashSet<PersonalName>();
                    foreach (var i in this.Players)
                    {
                        set.Add(i.ToPersonalName());
                    }
                    return set;
                } else { return null; }
            }
            set
            {
                if (value != null)
                {
                    var list = new List<PersonalNameDto>();
                    foreach (var i in value)
                    {
                        list.Add(new PersonalNameDto(i));
                    }
                    this.Players = list.ToArray();
                } else { this.Players = null; }
            }
        }

        public virtual string[] Mascots { get; set; }

        ISet<string> ITeamStateEvent.Mascots 
        {
            get
            {
                if (this.Mascots != null)
                {
                    var set = new HashSet<string>();
                    foreach (var i in this.Mascots)
                    {
                        set.Add(i);
                    }
                    return set;
                } else { return null; }
            }
            set
            {
                if (value != null)
                {
                    var list = new List<string>();
                    foreach (var i in value)
                    {
                        list.Add(i);
                    }
                    this.Mascots = list.ToArray();
                } else { this.Mascots = null; }
            }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

		TeamStateEventId IGlobalIdentity<TeamStateEventId>.GlobalId {
			get {
				return this.StateEventId.ToTeamStateEventId();
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool ITeamStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool ITeamStateMergePatched.IsPropertyDescriptionRemoved
        {
            get 
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyPlayersRemoved { get; set; }

        bool ITeamStateMergePatched.IsPropertyPlayersRemoved
        {
            get 
            {
                var b = this.IsPropertyPlayersRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyPlayersRemoved = value;
            }
        }

		public virtual bool? IsPropertyMascotsRemoved { get; set; }

        bool ITeamStateMergePatched.IsPropertyMascotsRemoved
        {
            get 
            {
                var b = this.IsPropertyMascotsRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyMascotsRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool ITeamStateMergePatched.IsPropertyActiveRemoved
        {
            get 
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyActiveRemoved = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        TeamStateEventId ITeamStateEvent.StateEventId
        {
            get { return this.StateEventId.ToTeamStateEventId(); }
        }

        protected TeamStateEventDtoBase()
        {
        }

        protected TeamStateEventDtoBase(TeamStateEventIdDto stateEventId)
        {
            this.StateEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IStateEventDto.StateEventType 
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}


    public class TeamStateCreatedOrMergePatchedOrDeletedDto : TeamStateEventDtoBase
    {
        private string _stateEventType;

        public virtual string StateEventType
        {
            get { return _stateEventType; }
            set { _stateEventType = value; }
        }

        protected override string GetStateEventType()
        {
            return this._stateEventType;
        }

    }



	public class TeamStateCreatedDto : TeamStateCreatedOrMergePatchedOrDeletedDto
	{
		public TeamStateCreatedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class TeamStateMergePatchedDto : TeamStateCreatedOrMergePatchedOrDeletedDto
	{
		public TeamStateMergePatchedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class TeamStateDeletedDto : TeamStateCreatedOrMergePatchedOrDeletedDto
	{
		public TeamStateDeletedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

	}


    public partial class TeamStateCreatedOrMergePatchedOrDeletedDtos : IEnumerable<ITeamStateCreated>, IEnumerable<ITeamStateMergePatched>, IEnumerable<ITeamStateDeleted>
    {
        private List<TeamStateCreatedOrMergePatchedOrDeletedDto> _innerStateEvents = new List<TeamStateCreatedOrMergePatchedOrDeletedDto>();

        public virtual TeamStateCreatedOrMergePatchedOrDeletedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<TeamStateCreatedOrMergePatchedOrDeletedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<ITeamStateCreated> IEnumerable<ITeamStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<ITeamStateMergePatched> IEnumerable<ITeamStateMergePatched>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<ITeamStateDeleted> IEnumerable<ITeamStateDeleted>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        public void AddTeamEvent(ITeamStateCreated e)
        {
            _innerStateEvents.Add((TeamStateCreatedDto)e);
        }

        public void AddTeamEvent(ITeamStateEvent e)
        {
            _innerStateEvents.Add((TeamStateCreatedOrMergePatchedOrDeletedDto)e);
        }

        public void AddTeamEvent(ITeamStateDeleted e)
        {
            _innerStateEvents.Add((TeamStateDeletedDto)e);
        }

    }


}

