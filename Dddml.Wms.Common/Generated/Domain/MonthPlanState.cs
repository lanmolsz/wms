// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public partial class MonthPlanState : MonthPlanStateProperties, IMonthPlanState, ISaveable
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

        private MonthPlanId _monthPlanId = new MonthPlanId();

        public virtual MonthPlanId MonthPlanId 
        {
            get { return this._monthPlanId; }
            set { this._monthPlanId = value; }
        }

		MonthPlanId IGlobalIdentity<MonthPlanId>.GlobalId {
			get {
				return  this.MonthPlanId;
			}
		}

        int ILocalIdentity<int>.LocalId
        {
            get
            {
                return this.Month;
            }
        }


        public override PersonalName PersonalName {
			get {
				return this.MonthPlanId.PersonalName;
			}
			set {
				this.MonthPlanId.PersonalName = value;
			}
		}

        public override int Year {
			get {
				return this.MonthPlanId.Year;
			}
			set {
				this.MonthPlanId.Year = value;
			}
		}

        public override int Month {
			get {
				return this.MonthPlanId.Month;
			}
			set {
				this.MonthPlanId.Month = value;
			}
		}

		#endregion



		#region IActive implementation

		bool IActive.Active
		{
			get
			{
				return this.Active;
			}
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get
			{
				return this.UpdatedBy;
			}
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get
			{
				return this.UpdatedAt;
			}
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IMonthPlanState.IsUnsaved
        {
            get { return ((IVersioned<long>)this).Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        private IDayPlanStates _dayPlans;
      
        public virtual IDayPlanStates DayPlans
        {
            get
            {
                return this._dayPlans;
            }
        }

        protected internal virtual void SetDayPlans(IDayPlanStates value)
        {
            this._dayPlans = value;
        }



		public MonthPlanState ()
		{
            _dayPlans = new DayPlanStates(this);

            InitializeProperties();
		}



		#region Saveable Implements

        public virtual void Save()
        {
            _dayPlans.Save();

        }


		#endregion


		public virtual void When(IMonthPlanStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.Description = e.Description;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;

			foreach (IDayPlanStateCreated innerEvent in e.DayPlanEvents) {
				IDayPlanState innerState = this.DayPlans.Get(innerEvent.GlobalId.Day);
				innerState.Mutate (innerEvent);
			}

		}


		public virtual void When(IMonthPlanStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.Description == null)
			{
				if (e.IsPropertyDescriptionRemoved)
				{
					this.Description = default(string);
				}
			}
			else
			{
				this.Description = e.Description;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


			foreach (IDayPlanStateEvent innerEvent in e.DayPlanEvents)
            {
                IDayPlanState innerState = this.DayPlans.Get(innerEvent.GlobalId.Day);

                innerState.Mutate(innerEvent);
                var removed = innerEvent as IDayPlanStateRemoved;
                if (removed != null)
                {
                    this.DayPlans.Remove(innerState);
                }
          
            }

		}

		public virtual void When(IMonthPlanStateRemoved e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

            foreach (var innerState in this.DayPlans)
            {
                this.DayPlans.Remove(innerState);
                
                var innerE = e.NewDayPlanStateRemoved(innerState.Day);
                ((DayPlanStateEventBase)innerE).CreatedAt = e.CreatedAt;
                ((DayPlanStateEventBase)innerE).CreatedBy = e.CreatedBy;
                innerState.When(innerE);
                //e.AddDayPlanEvent(innerE);

            }

		}


		public virtual void Mutate(IEvent e)
		{
			((dynamic)this).When((dynamic)e);
		}

		protected void ThrowOnWrongEvent(IMonthPlanStateEvent stateEvent)
		{
				var stateEntityIdPersonalName = (this as IGlobalIdentity<MonthPlanId>).GlobalId.PersonalName;
				var eventEntityIdPersonalName = stateEvent.StateEventId.PersonalName;
				if (stateEntityIdPersonalName != eventEntityIdPersonalName)
				{
					throw DomainError.Named("mutateWrongEntity", "Entity Id PersonalName {0} in state but entity id PersonalName {1} in event", stateEntityIdPersonalName, eventEntityIdPersonalName);
				}

				var stateEntityIdYear = (this as IGlobalIdentity<MonthPlanId>).GlobalId.Year;
				var eventEntityIdYear = stateEvent.StateEventId.Year;
				if (stateEntityIdYear != eventEntityIdYear)
				{
					throw DomainError.Named("mutateWrongEntity", "Entity Id Year {0} in state but entity id Year {1} in event", stateEntityIdYear, eventEntityIdYear);
				}

				var stateEntityIdMonth = (this as IGlobalIdentity<MonthPlanId>).GlobalId.Month;
				var eventEntityIdMonth = stateEvent.StateEventId.Month;
				if (stateEntityIdMonth != eventEntityIdMonth)
				{
					throw DomainError.Named("mutateWrongEntity", "Entity Id Month {0} in state but entity id Month {1} in event", stateEntityIdMonth, eventEntityIdMonth);
				}

			var stateVersion = this.Version;
			var eventVersion = stateEvent.Version;
			if (MonthPlanState.VersionZero == eventVersion)
			{
				eventVersion = stateEvent.Version = stateVersion;
			}
			if (stateVersion != eventVersion)
			{
				throw DomainError.Named("concurrencyConflict", "Conflict between state version {0} and event version {1}", stateVersion, eventVersion);
			}

		}
	}

}

