// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeValueMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.AttributeValueMvo;
using Dddml.Wms.Domain.Attribute;

namespace Dddml.Wms.Domain.AttributeValueMvo
{

	public static partial class AttributeValueMvoStateInterfaceExtension
	{

        public static IAttributeValueMvoCommand ToCreateOrMergePatchAttributeValueMvo<TCreateAttributeValueMvo, TMergePatchAttributeValueMvo>(this IAttributeValueMvoState state)
            where TCreateAttributeValueMvo : ICreateAttributeValueMvo, new()
            where TMergePatchAttributeValueMvo : IMergePatchAttributeValueMvo, new()
        {
            bool bUnsaved = ((IAttributeValueMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateAttributeValueMvo<TCreateAttributeValueMvo>();
            }
            else 
            {
                return state.ToMergePatchAttributeValueMvo<TMergePatchAttributeValueMvo>();
            }
        }

        public static TDeleteAttributeValueMvo ToDeleteAttributeValueMvo<TDeleteAttributeValueMvo>(this IAttributeValueMvoState state)
            where TDeleteAttributeValueMvo : IDeleteAttributeValueMvo, new()
        {
            var cmd = new TDeleteAttributeValueMvo();
            cmd.AttributeValueId = state.AttributeValueId;
            cmd.AttributeVersion = ((IAttributeValueMvoStateProperties)state).AttributeVersion;

            return cmd;
        }

        public static TMergePatchAttributeValueMvo ToMergePatchAttributeValueMvo<TMergePatchAttributeValueMvo>(this IAttributeValueMvoState state)
            where TMergePatchAttributeValueMvo : IMergePatchAttributeValueMvo, new()
        {
            var cmd = new TMergePatchAttributeValueMvo();

            cmd.AttributeVersion = ((IAttributeValueMvoStateProperties)state).AttributeVersion;

            cmd.AttributeValueId = state.AttributeValueId;
            cmd.Name = state.Name;
            cmd.Description = state.Description;
            cmd.ReferenceId = state.ReferenceId;
            cmd.Version = ((IAttributeValueMvoStateProperties)state).Version;
            cmd.Active = ((IAttributeValueMvoStateProperties)state).Active;
            cmd.AttributeName = state.AttributeName;
            cmd.AttributeOrganizationId = state.AttributeOrganizationId;
            cmd.AttributeDescription = state.AttributeDescription;
            cmd.AttributeIsMandatory = state.AttributeIsMandatory;
            cmd.AttributeIsInstanceAttribute = state.AttributeIsInstanceAttribute;
            cmd.AttributeAttributeValueType = state.AttributeAttributeValueType;
            cmd.AttributeAttributeValueLength = state.AttributeAttributeValueLength;
            cmd.AttributeIsList = state.AttributeIsList;
            cmd.AttributeFieldName = state.AttributeFieldName;
            cmd.AttributeReferenceId = state.AttributeReferenceId;
            cmd.AttributeCreatedBy = state.AttributeCreatedBy;
            cmd.AttributeCreatedAt = state.AttributeCreatedAt;
            cmd.AttributeUpdatedBy = state.AttributeUpdatedBy;
            cmd.AttributeUpdatedAt = state.AttributeUpdatedAt;
            cmd.AttributeActive = state.AttributeActive;
            cmd.AttributeDeleted = state.AttributeDeleted;
            
            if (state.Name == null) { cmd.IsPropertyNameRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.ReferenceId == null) { cmd.IsPropertyReferenceIdRemoved = true; }
            if (state.AttributeName == null) { cmd.IsPropertyAttributeNameRemoved = true; }
            if (state.AttributeOrganizationId == null) { cmd.IsPropertyAttributeOrganizationIdRemoved = true; }
            if (state.AttributeDescription == null) { cmd.IsPropertyAttributeDescriptionRemoved = true; }
            if (state.AttributeAttributeValueType == null) { cmd.IsPropertyAttributeAttributeValueTypeRemoved = true; }
            if (state.AttributeAttributeValueLength == null) { cmd.IsPropertyAttributeAttributeValueLengthRemoved = true; }
            if (state.AttributeFieldName == null) { cmd.IsPropertyAttributeFieldNameRemoved = true; }
            if (state.AttributeReferenceId == null) { cmd.IsPropertyAttributeReferenceIdRemoved = true; }
            if (state.AttributeCreatedBy == null) { cmd.IsPropertyAttributeCreatedByRemoved = true; }
            if (state.AttributeUpdatedBy == null) { cmd.IsPropertyAttributeUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateAttributeValueMvo ToCreateAttributeValueMvo<TCreateAttributeValueMvo>(this IAttributeValueMvoState state)
            where TCreateAttributeValueMvo : ICreateAttributeValueMvo, new()
        {
            var cmd = new TCreateAttributeValueMvo();

            cmd.AttributeVersion = ((IAttributeValueMvoStateProperties)state).AttributeVersion;

            cmd.AttributeValueId = state.AttributeValueId;
            cmd.Name = state.Name;
            cmd.Description = state.Description;
            cmd.ReferenceId = state.ReferenceId;
            cmd.Version = ((IAttributeValueMvoStateProperties)state).Version;
            cmd.Active = ((IAttributeValueMvoStateProperties)state).Active;
            cmd.AttributeName = state.AttributeName;
            cmd.AttributeOrganizationId = state.AttributeOrganizationId;
            cmd.AttributeDescription = state.AttributeDescription;
            cmd.AttributeIsMandatory = state.AttributeIsMandatory;
            cmd.AttributeIsInstanceAttribute = state.AttributeIsInstanceAttribute;
            cmd.AttributeAttributeValueType = state.AttributeAttributeValueType;
            cmd.AttributeAttributeValueLength = state.AttributeAttributeValueLength;
            cmd.AttributeIsList = state.AttributeIsList;
            cmd.AttributeFieldName = state.AttributeFieldName;
            cmd.AttributeReferenceId = state.AttributeReferenceId;
            cmd.AttributeCreatedBy = state.AttributeCreatedBy;
            cmd.AttributeCreatedAt = state.AttributeCreatedAt;
            cmd.AttributeUpdatedBy = state.AttributeUpdatedBy;
            cmd.AttributeUpdatedAt = state.AttributeUpdatedAt;
            cmd.AttributeActive = state.AttributeActive;
            cmd.AttributeDeleted = state.AttributeDeleted;
            return cmd;
        }
		

	}

}

