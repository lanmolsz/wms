// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public class DayPlanMvoStateEventIdFlattenedDto : IIdFlattenedDto
	{

        private static string[] _flattenedPropertyNames = new string[] { "DayPlanIdPersonalNameFirstName", "DayPlanIdPersonalNameLastName", "DayPlanIdYear", "DayPlanIdMonth", "DayPlanIdDay", "PersonVersion" };

        string[] IIdFlattenedDto.FieldNames
        {
            get { return _flattenedPropertyNames; }
        }

        object IIdFlattenedDto.GetFieldValue(string fieldName)
        {
            return ReflectUtils.GetPropertyValue(fieldName, this._value);
        }

        void IIdFlattenedDto.SetFieldValue(string fieldName, object fieldValue)
        {
            ReflectUtils.SetPropertyValue(fieldName, this._value, fieldValue);
        }

        Type IIdFlattenedDto.GetFieldType(string fieldName)
        {
            if (fieldName.Equals("DayPlanIdPersonalNameFirstName", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(string);
            }

            if (fieldName.Equals("DayPlanIdPersonalNameLastName", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(string);
            }

            if (fieldName.Equals("DayPlanIdYear", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(int);
            }

            if (fieldName.Equals("DayPlanIdMonth", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(int);
            }

            if (fieldName.Equals("DayPlanIdDay", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(int);
            }

            if (fieldName.Equals("PersonVersion", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(long);
            }

            throw new ArgumentException(String.Format("Unknown fileName: {0}", fieldName));
        }


        private DayPlanMvoStateEventId _value = new DayPlanMvoStateEventId();

		public DayPlanMvoStateEventIdFlattenedDto()
		{
		}

		public DayPlanMvoStateEventIdFlattenedDto(DayPlanMvoStateEventId val)
		{
			this._value = val;
		}

        public DayPlanMvoStateEventId ToDayPlanMvoStateEventId()
        {
            return this._value;
        }


		public virtual string DayPlanIdPersonalNameFirstName {
			get { return _value.DayPlanId.PersonalName.FirstName; }
			set { _value.DayPlanId.PersonalName.FirstName = value; }
		}

		public virtual string DayPlanIdPersonalNameLastName {
			get { return _value.DayPlanId.PersonalName.LastName; }
			set { _value.DayPlanId.PersonalName.LastName = value; }
		}

		public virtual int DayPlanIdYear {
			get { return _value.DayPlanId.Year; }
			set { _value.DayPlanId.Year = value; }
		}

		public virtual int DayPlanIdMonth {
			get { return _value.DayPlanId.Month; }
			set { _value.DayPlanId.Month = value; }
		}

		public virtual int DayPlanIdDay {
			get { return _value.DayPlanId.Day; }
			set { _value.DayPlanId.Day = value; }
		}

		public virtual long PersonVersion { 
			get { return _value.PersonVersion; } 
			set { _value.PersonVersion = value; } 
		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			DayPlanMvoStateEventIdFlattenedDto other = obj as DayPlanMvoStateEventIdFlattenedDto;
			if (other == null) {
				return false;
			}

            return _value.Equals(other._value);

		}

		public override int GetHashCode ()
		{
			return _value.GetHashCode();
		}

	}

}


