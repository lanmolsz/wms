// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using NodaMoney;

namespace Dddml.Wms.Domain
{

    public class InOutLineStates : IInOutLineStates
    {
        
		protected IInOutLineStateDao InOutLineStateDao
		{
			get
			{
				return ApplicationContext.Current["InOutLineStateDao"] as IInOutLineStateDao;
			}
		}

		private Dictionary<InOutLineId, IInOutLineState> _loadedInOutLineStates = new Dictionary<InOutLineId, IInOutLineState>();

        //private List<IInOutLineState> _removedInOutLineStates = new List<IInOutLineState>();

		private Dictionary<InOutLineId, IInOutLineState> _removedInOutLineStates = new Dictionary<InOutLineId, IInOutLineState>();

		protected virtual IEnumerable<IInOutLineState> LoadedInOutLineStates {
			get {
				return this._loadedInOutLineStates.Values;
			}
		}

        private IInOutState _inOutState;

        //private IEnumerable<IInOutLineState> _innerEnumerable;

        private IEnumerable<IInOutLineState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)//(_innerEnumerable == null)
                {
                    return InOutLineStateDao.FindByInOutDocumentNumber(_inOutState.DocumentNumber);
                }
                else //return _innerEnumerable;
                {
                    return _loadedInOutLineStates.Values.Where(s => !_removedInOutLineStates.ContainsKey(s.GlobalId));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public InOutLineStates(InOutState outerState)
        {
            this._inOutState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IInOutLineState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IInOutLineState state)
        {
            this._removedInOutLineStates.Add(state.GlobalId, state);
        }

        public virtual IInOutLineState Get(SkuId skuId)
		{
			InOutLineId globalId = new InOutLineId(_inOutState.DocumentNumber, skuId);
            if (_loadedInOutLineStates.ContainsKey(globalId)) {
                return _loadedInOutLineStates[globalId];
            }
            if (ForReapplying)
            {
                var state = new InOutLineState(true); // state.ForReapplying = true;
                state.InOutLineId = globalId;
			    _loadedInOutLineStates.Add(globalId, state);
			    return state;
            }
            else
            {
                var state = InOutLineStateDao.Get(globalId);
			    _loadedInOutLineStates.Add(globalId, state);
			    return state;
            }
		}

        public virtual void AddToSave(IInOutLineState state)
        {
            this._loadedInOutLineStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IInOutLineState s in this.LoadedInOutLineStates) {
                InOutLineStateDao.Save(s);
			}
            foreach(IInOutLineState s in this._removedInOutLineStates.Values)
            {
                InOutLineStateDao.Delete(s);
            }
		}

		#endregion


    }



}


