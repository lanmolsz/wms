// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public partial class TeamStateDto : StateDtoBase, ITeamState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private TeamState _state;

        public TeamStateDto()
        {
            this._state = new TeamState();
        }

		public TeamStateDto(TeamState state)
		{
            this._state = state;
		}

		internal TeamState ToTeamState()
		{
			return this._state;
		}

		public virtual string TeamName
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("TeamName"))
                {
                    return _state.TeamName;
                }
                return null;
            }
            set
            {
                _state.TeamName = value;
            }
        }

        string ITeamStateProperties.TeamName
        {
            get 
            {
                return (this._state as ITeamStateProperties).TeamName;
            }
            set 
            {
                this._state.TeamName = value;
            }
        }

		public virtual string Description
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Description"))
                {
                    return _state.Description;
                }
                return null;
            }
            set
            {
                _state.Description = value;
            }
        }

        string ITeamStateProperties.Description
        {
            get 
            {
                return (this._state as ITeamStateProperties).Description;
            }
            set 
            {
                this._state.Description = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Active"))
                {
                    return _state.Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Active = value.Value;
                }
            }
        }

        bool ITeamStateProperties.Active
        {
            get 
            {
                return (this._state as ITeamStateProperties).Active;
            }
            set 
            {
                this._state.Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Version"))
                {
                    return _state.Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Version = value.Value;
                }
            }
        }

        long ITeamStateProperties.Version
        {
            get 
            {
                return (this._state as ITeamStateProperties).Version;
            }
            set 
            {
                this._state.Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }
		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }
		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }
		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get { return (_state as ITeamState).GlobalId; }
		}

		#endregion


		#region IActive implementation

		bool IActive.Active
		{
            get { return (_state as IActive).Active; }
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as ITeamState).CreatedBy; }
            set { (_state as ITeamState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as ITeamState).CreatedAt; }
            set { (_state as ITeamState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as ITeamState).UpdatedBy; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as ITeamState).UpdatedAt; }
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
            get { return _state.Version; }
		}

		#endregion

        bool ITeamState.IsUnsaved
        {
            get { return ((IVersioned<long>)this).Version == TeamState.VersionZero; }
        }

        public virtual PersonalNameDto[] Players
        {
            get 
            {
                if (!(this as IStateDto).ReturnedFieldsContains("Players"))
                {
                    return null;
                }
                var dtos = new List<PersonalNameDto>();
                if (this._state.Players != null)
                {
                    foreach (var s in this._state.Players)
                    {
                        var dto = new PersonalNameDto(s);
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new PersonalNameDto[0]; }
                var states = new HashSet<PersonalName>();
                foreach (var s in value)
                {
                    states.Add(s.ToPersonalName());
                }
                this._state.Players = states;
            }
        }

        ISet<PersonalName> ITeamStateProperties.Players 
        {
            get { return _state.Players; }
            set { _state.Players = value; }
        }

        public virtual string[] Mascots
        {
            get 
            {
                if (!(this as IStateDto).ReturnedFieldsContains("Mascots"))
                {
                    return null;
                }
                var dtos = new List<string>();
                if (this._state.Mascots != null)
                {
                    foreach (var s in this._state.Mascots)
                    {
                        var dto = s;
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new string[0]; }
                var states = new HashSet<string>();
                foreach (var s in value)
                {
                    states.Add(s);
                }
                this._state.Mascots = states;
            }
        }

        ISet<string> ITeamStateProperties.Mascots 
        {
            get { return _state.Mascots; }
            set { _state.Mascots = value; }
        }


		void ITeamState.When(ITeamStateCreated e)
		{
            throw new NotSupportedException();
		}


		void ITeamState.When(ITeamStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void ITeamState.When(ITeamStateDeleted e)
		{
            throw new NotSupportedException();
		}


		void ITeamState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////


	}

    partial class TeamStateDtoCollection : StateDtoCollectionBase<TeamStateDto>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(TeamStateDto._collectionFieldNames, fieldName);
        }

    }

}

