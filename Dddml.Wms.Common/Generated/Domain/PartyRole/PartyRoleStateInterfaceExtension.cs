// <autogenerated>
//   This file was generated by T4 code generator GeneratePartyRoleDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PartyRole;

namespace Dddml.Wms.Domain.PartyRole
{

	public static partial class PartyRoleStateInterfaceExtension
	{

        public static IPartyRoleCommand ToCreateOrMergePatchPartyRole<TCreatePartyRole, TMergePatchPartyRole>(this IPartyRoleState state)
            where TCreatePartyRole : ICreatePartyRole, new()
            where TMergePatchPartyRole : IMergePatchPartyRole, new()
        {
            bool bUnsaved = ((IPartyRoleState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreatePartyRole<TCreatePartyRole>();
            }
            else 
            {
                return state.ToMergePatchPartyRole<TMergePatchPartyRole>();
            }
        }

        public static TDeletePartyRole ToDeletePartyRole<TDeletePartyRole>(this IPartyRoleState state)
            where TDeletePartyRole : IDeletePartyRole, new()
        {
            var cmd = new TDeletePartyRole();
            cmd.PartyRoleId = state.PartyRoleId;
            cmd.Version = ((IPartyRoleStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchPartyRole ToMergePatchPartyRole<TMergePatchPartyRole>(this IPartyRoleState state)
            where TMergePatchPartyRole : IMergePatchPartyRole, new()
        {
            var cmd = new TMergePatchPartyRole();

            cmd.Version = ((IPartyRoleStateProperties)state).Version;

            cmd.PartyRoleId = state.PartyRoleId;
            cmd.Active = ((IPartyRoleStateProperties)state).Active;
            
            return cmd;
        }

        public static TCreatePartyRole ToCreatePartyRole<TCreatePartyRole>(this IPartyRoleState state)
            where TCreatePartyRole : ICreatePartyRole, new()
        {
            var cmd = new TCreatePartyRole();

            cmd.Version = ((IPartyRoleStateProperties)state).Version;

            cmd.PartyRoleId = state.PartyRoleId;
            cmd.Active = ((IPartyRoleStateProperties)state).Active;
            return cmd;
        }
		

	}

}

