// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventory;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Support.Criterion;

namespace Dddml.Wms.Domain.PhysicalInventory
{

	public partial interface IPhysicalInventoryApplicationService : IApplicationService
	{
		void When(ICreatePhysicalInventory c);

		void When(IMergePatchPhysicalInventory c);

		void When(PhysicalInventoryCommands.CountItem c);

		void When(PhysicalInventoryCommands.DocumentAction c);

 		IPhysicalInventoryState Get(string documentNumber);

        IEnumerable<IPhysicalInventoryState> GetAll(int firstResult, int maxResults);

        IEnumerable<IPhysicalInventoryState> Get(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IPhysicalInventoryState> Get(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IPhysicalInventoryState> GetByProperty(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        long GetCount(IEnumerable<KeyValuePair<string, object>> filter);

        long GetCount(ICriterion filter);

        IPhysicalInventoryStateEvent GetStateEvent(string documentNumber, long version);

        IPhysicalInventoryState GetHistoryState(string documentNumber, long version);

        IPhysicalInventoryLineState GetPhysicalInventoryLine(string physicalInventoryDocumentNumber, InventoryItemId inventoryItemId);


	}

    public static partial class PhysicalInventoryApplicationServiceExtension
    {
        public static IEnumerable<IPhysicalInventoryState> GetByProperty(this IPhysicalInventoryApplicationService applicationService,
            System.Linq.Expressions.Expression<Func<IPhysicalInventoryState, object>> propertySelector, 
            object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return applicationService.GetByProperty(ReflectUtils.GetPropertyName<IPhysicalInventoryState>(propertySelector), propertyValue, orders, firstResult, maxResults);
        }

        public static IEnumerable<IPhysicalInventoryState> GetByProperty<TPropertyType>(this IPhysicalInventoryApplicationService applicationService,
            System.Linq.Expressions.Expression<Func<IPhysicalInventoryState, TPropertyType>> propertySelector,
            TPropertyType propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return applicationService.GetByProperty(ReflectUtils.GetPropertyName<IPhysicalInventoryState, TPropertyType>(propertySelector), propertyValue, orders, firstResult, maxResults);
        }
    }

}

