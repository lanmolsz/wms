// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventory;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.PhysicalInventory
{

    public class PhysicalInventoryLineStates : IPhysicalInventoryLineStates
    {
        
		protected IPhysicalInventoryLineStateDao PhysicalInventoryLineStateDao
		{
			get
			{
				return ApplicationContext.Current["PhysicalInventoryLineStateDao"] as IPhysicalInventoryLineStateDao;
			}
		}

		private Dictionary<PhysicalInventoryLineId, IPhysicalInventoryLineState> _loadedPhysicalInventoryLineStates = new Dictionary<PhysicalInventoryLineId, IPhysicalInventoryLineState>();

		private Dictionary<PhysicalInventoryLineId, IPhysicalInventoryLineState> _removedPhysicalInventoryLineStates = new Dictionary<PhysicalInventoryLineId, IPhysicalInventoryLineState>();

		protected virtual IEnumerable<IPhysicalInventoryLineState> LoadedPhysicalInventoryLineStates {
			get {
				return this._loadedPhysicalInventoryLineStates.Values;
			}
		}

        private IPhysicalInventoryState _physicalInventoryState;

        private IEnumerable<IPhysicalInventoryLineState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return PhysicalInventoryLineStateDao.FindByPhysicalInventoryDocumentNumber(_physicalInventoryState.DocumentNumber);
                }
                else
                {
                    return _loadedPhysicalInventoryLineStates.Values.Where(s => !(_removedPhysicalInventoryLineStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public PhysicalInventoryLineStates(IPhysicalInventoryState outerState)
        {
            this._physicalInventoryState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IPhysicalInventoryLineState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IPhysicalInventoryLineState state)
        {
            this._removedPhysicalInventoryLineStates.Add(state.GlobalId, state);
        }

        public virtual IPhysicalInventoryLineState Get(InventoryItemId inventoryItemId)
		{
			return Get(inventoryItemId, false, false);
		}

        public virtual IPhysicalInventoryLineState Get(InventoryItemId inventoryItemId, bool forCreation)
        {
			return Get(inventoryItemId, forCreation, false);
        }

        public virtual IPhysicalInventoryLineState Get(InventoryItemId inventoryItemId, bool forCreation, bool nullAllowed)
        {
            PhysicalInventoryLineId globalId = new PhysicalInventoryLineId(_physicalInventoryState.DocumentNumber, inventoryItemId);
            if (_loadedPhysicalInventoryLineStates.ContainsKey(globalId)) {
                return _loadedPhysicalInventoryLineStates[globalId];
            }
            if (forCreation || ForReapplying)
            {
                var state = new PhysicalInventoryLineState(ForReapplying);
                state.PhysicalInventoryLineId = globalId;
                _loadedPhysicalInventoryLineStates.Add(globalId, state);
                return state;
            }
            else
            {
                var state = PhysicalInventoryLineStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedPhysicalInventoryLineStates.Add(globalId, state);
                }
                return state;
            }
        }

        public virtual void AddToSave(IPhysicalInventoryLineState state)
        {
            this._loadedPhysicalInventoryLineStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IPhysicalInventoryLineState s in this.LoadedPhysicalInventoryLineStates) {
                PhysicalInventoryLineStateDao.Save(s);
			}
            foreach(IPhysicalInventoryLineState s in this._removedPhysicalInventoryLineStates.Values)
            {
                PhysicalInventoryLineStateDao.Delete(s);
            }
		}

		#endregion


    }



}


