// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventory;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.PhysicalInventory
{

	public abstract class PhysicalInventoryEventBase : IPhysicalInventoryEvent
	{

		public virtual PhysicalInventoryEventId PhysicalInventoryEventId { get; set; }

        public virtual string DocumentNumber
        {
            get { return PhysicalInventoryEventId.DocumentNumber; }
            set { PhysicalInventoryEventId.DocumentNumber = value; }
        }

		public virtual string DocumentStatusId { get; set; }

		public virtual string WarehouseId { get; set; }

		public virtual string LocatorIdPattern { get; set; }

		public virtual string ProductIdPattern { get; set; }

		public virtual bool? Posted { get; set; }

		public virtual bool? Processed { get; set; }

		public virtual string Processing { get; set; }

		public virtual string DocumentTypeId { get; set; }

		public virtual DateTime? MovementDate { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? IsApproved { get; set; }

		public virtual decimal? ApprovalAmount { get; set; }

		public virtual bool? IsQuantityUpdated { get; set; }

		public virtual string ReversalDocumentNumber { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		PhysicalInventoryEventId IGlobalIdentity<PhysicalInventoryEventId>.GlobalId {
			get
			{
				return this.PhysicalInventoryEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IPhysicalInventoryEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected PhysicalInventoryEventBase()
        {
        }

        protected PhysicalInventoryEventBase(PhysicalInventoryEventId stateEventId)
        {
            this.PhysicalInventoryEventId = stateEventId;
        }

		protected IPhysicalInventoryLineEventDao PhysicalInventoryLineEventDao
		{
			get { return ApplicationContext.Current["PhysicalInventoryLineEventDao"] as IPhysicalInventoryLineEventDao; }
		}

        protected PhysicalInventoryLineEventId NewPhysicalInventoryLineEventId(InventoryItemId inventoryItemId)
        {
            var stateEventId = new PhysicalInventoryLineEventId(this.PhysicalInventoryEventId.DocumentNumber, inventoryItemId, this.PhysicalInventoryEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IPhysicalInventoryLineEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IPhysicalInventoryEvent oe, IPhysicalInventoryLineEvent e)
		{
			if (!oe.PhysicalInventoryEventId.DocumentNumber.Equals(e.PhysicalInventoryLineEventId.PhysicalInventoryDocumentNumber))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id DocumentNumber {0} but inner id PhysicalInventoryDocumentNumber {1}", 
					oe.PhysicalInventoryEventId.DocumentNumber, e.PhysicalInventoryLineEventId.PhysicalInventoryDocumentNumber);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

	public class PhysicalInventoryStateCreated : PhysicalInventoryEventBase, IPhysicalInventoryStateCreated, ISaveable
	{
		public PhysicalInventoryStateCreated () : this(new PhysicalInventoryEventId())
		{
		}

		public PhysicalInventoryStateCreated (PhysicalInventoryEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<PhysicalInventoryLineEventId, IPhysicalInventoryLineStateCreated> _physicalInventoryLineEvents = new Dictionary<PhysicalInventoryLineEventId, IPhysicalInventoryLineStateCreated>();
        
        private IEnumerable<IPhysicalInventoryLineStateCreated> _readOnlyPhysicalInventoryLineEvents;

        public virtual IEnumerable<IPhysicalInventoryLineStateCreated> PhysicalInventoryLineEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._physicalInventoryLineEvents.Values;
                }
                else
                {
                    if (_readOnlyPhysicalInventoryLineEvents != null) { return _readOnlyPhysicalInventoryLineEvents; }
                    var eventDao = PhysicalInventoryLineEventDao;
                    var eL = new List<IPhysicalInventoryLineStateCreated>();
                    foreach (var e in eventDao.FindByPhysicalInventoryEventId(this.PhysicalInventoryEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IPhysicalInventoryLineStateCreated)e);
                    }
                    return (_readOnlyPhysicalInventoryLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddPhysicalInventoryLineEvent(e);
                    }
                }
                else { this._physicalInventoryLineEvents.Clear(); }
            }
        }
    
		public virtual void AddPhysicalInventoryLineEvent(IPhysicalInventoryLineStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._physicalInventoryLineEvents[e.PhysicalInventoryLineEventId] = e;
		}

        public virtual IPhysicalInventoryLineStateCreated NewPhysicalInventoryLineStateCreated(InventoryItemId inventoryItemId)
        {
            var stateEvent = new PhysicalInventoryLineStateCreated(NewPhysicalInventoryLineEventId(inventoryItemId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IPhysicalInventoryLineStateCreated e in this.PhysicalInventoryLineEvents) {
				PhysicalInventoryLineEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class PhysicalInventoryStateMergePatched : PhysicalInventoryEventBase, IPhysicalInventoryStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyDocumentStatusIdRemoved { get; set; }

		public virtual bool IsPropertyWarehouseIdRemoved { get; set; }

		public virtual bool IsPropertyLocatorIdPatternRemoved { get; set; }

		public virtual bool IsPropertyProductIdPatternRemoved { get; set; }

		public virtual bool IsPropertyPostedRemoved { get; set; }

		public virtual bool IsPropertyProcessedRemoved { get; set; }

		public virtual bool IsPropertyProcessingRemoved { get; set; }

		public virtual bool IsPropertyDocumentTypeIdRemoved { get; set; }

		public virtual bool IsPropertyMovementDateRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyIsApprovedRemoved { get; set; }

		public virtual bool IsPropertyApprovalAmountRemoved { get; set; }

		public virtual bool IsPropertyIsQuantityUpdatedRemoved { get; set; }

		public virtual bool IsPropertyReversalDocumentNumberRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public PhysicalInventoryStateMergePatched ()
		{
		}

		public PhysicalInventoryStateMergePatched (PhysicalInventoryEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<PhysicalInventoryLineEventId, IPhysicalInventoryLineEvent> _physicalInventoryLineEvents = new Dictionary<PhysicalInventoryLineEventId, IPhysicalInventoryLineEvent>();

        private IEnumerable<IPhysicalInventoryLineEvent> _readOnlyPhysicalInventoryLineEvents;
        
        public virtual IEnumerable<IPhysicalInventoryLineEvent> PhysicalInventoryLineEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._physicalInventoryLineEvents.Values;
                }
                else
                {
                    if (_readOnlyPhysicalInventoryLineEvents != null) { return _readOnlyPhysicalInventoryLineEvents; }
                    var eventDao = PhysicalInventoryLineEventDao;
                    var eL = new List<IPhysicalInventoryLineEvent>();
                    foreach (var e in eventDao.FindByPhysicalInventoryEventId(this.PhysicalInventoryEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IPhysicalInventoryLineEvent)e);
                    }
                    return (_readOnlyPhysicalInventoryLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddPhysicalInventoryLineEvent(e);
                    }
                }
                else { this._physicalInventoryLineEvents.Clear(); }
            }
        }

		public virtual void AddPhysicalInventoryLineEvent(IPhysicalInventoryLineEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._physicalInventoryLineEvents[e.PhysicalInventoryLineEventId] = e;
		}

        public virtual IPhysicalInventoryLineStateCreated NewPhysicalInventoryLineStateCreated(InventoryItemId inventoryItemId)
        {
            var stateEvent = new PhysicalInventoryLineStateCreated(NewPhysicalInventoryLineEventId(inventoryItemId));
            return stateEvent;
        }

        public virtual IPhysicalInventoryLineStateMergePatched NewPhysicalInventoryLineStateMergePatched(InventoryItemId inventoryItemId)
        {
            var stateEvent = new PhysicalInventoryLineStateMergePatched(NewPhysicalInventoryLineEventId(inventoryItemId));
            return stateEvent;
        }

        public virtual IPhysicalInventoryLineStateRemoved NewPhysicalInventoryLineStateRemoved(InventoryItemId inventoryItemId)
        {
            var stateEvent = new PhysicalInventoryLineStateRemoved(NewPhysicalInventoryLineEventId(inventoryItemId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IPhysicalInventoryLineEvent e in this.PhysicalInventoryLineEvents) {
				PhysicalInventoryLineEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

