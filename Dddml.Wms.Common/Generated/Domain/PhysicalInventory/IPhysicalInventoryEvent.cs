// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventory;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.PhysicalInventory
{
	public interface IPhysicalInventoryEvent : IEvent, IEventDto, IGlobalIdentity<PhysicalInventoryEventId>, ICreated<string>
	{
		PhysicalInventoryEventId PhysicalInventoryEventId { get; }

        bool ReadOnly { get; set; }

		string DocumentStatusId { get; set; }

		string WarehouseId { get; set; }

		string LocatorIdPattern { get; set; }

		string ProductIdPattern { get; set; }

		bool? Posted { get; set; }

		bool? Processed { get; set; }

		string Processing { get; set; }

		string DocumentTypeId { get; set; }

		DateTime? MovementDate { get; set; }

		string Description { get; set; }

		bool? IsApproved { get; set; }

		decimal? ApprovalAmount { get; set; }

		bool? IsQuantityUpdated { get; set; }

		string ReversalDocumentNumber { get; set; }

		bool? Active { get; set; }

	}

	public interface IPhysicalInventoryStateCreated : IPhysicalInventoryEvent//, IPhysicalInventoryStateProperties
	{
		IEnumerable<IPhysicalInventoryLineStateCreated> PhysicalInventoryLineEvents { get; }
		
		void AddPhysicalInventoryLineEvent(IPhysicalInventoryLineStateCreated e);

		IPhysicalInventoryLineStateCreated NewPhysicalInventoryLineStateCreated(InventoryItemId inventoryItemId);

	
	}


	public interface IPhysicalInventoryStateMergePatched : IPhysicalInventoryEvent//, IPhysicalInventoryStateProperties
	{
		bool IsPropertyDocumentStatusIdRemoved { get; set; }

		bool IsPropertyWarehouseIdRemoved { get; set; }

		bool IsPropertyLocatorIdPatternRemoved { get; set; }

		bool IsPropertyProductIdPatternRemoved { get; set; }

		bool IsPropertyPostedRemoved { get; set; }

		bool IsPropertyProcessedRemoved { get; set; }

		bool IsPropertyProcessingRemoved { get; set; }

		bool IsPropertyDocumentTypeIdRemoved { get; set; }

		bool IsPropertyMovementDateRemoved { get; set; }

		bool IsPropertyDescriptionRemoved { get; set; }

		bool IsPropertyIsApprovedRemoved { get; set; }

		bool IsPropertyApprovalAmountRemoved { get; set; }

		bool IsPropertyIsQuantityUpdatedRemoved { get; set; }

		bool IsPropertyReversalDocumentNumberRemoved { get; set; }

		bool IsPropertyActiveRemoved { get; set; }

		IEnumerable<IPhysicalInventoryLineEvent> PhysicalInventoryLineEvents { get; }
		
		void AddPhysicalInventoryLineEvent(IPhysicalInventoryLineEvent e);

		IPhysicalInventoryLineStateCreated NewPhysicalInventoryLineStateCreated(InventoryItemId inventoryItemId);

		IPhysicalInventoryLineStateMergePatched NewPhysicalInventoryLineStateMergePatched(InventoryItemId inventoryItemId);

		IPhysicalInventoryLineStateRemoved NewPhysicalInventoryLineStateRemoved(InventoryItemId inventoryItemId);


	}


}

