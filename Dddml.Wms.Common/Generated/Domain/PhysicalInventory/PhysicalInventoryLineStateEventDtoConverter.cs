// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventory;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.PhysicalInventory
{

    public class PhysicalInventoryLineStateEventDtoConverter
    {
        public virtual PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto ToPhysicalInventoryLineStateEventDto(IPhysicalInventoryLineStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IPhysicalInventoryLineStateCreated)stateEvent;
                return ToPhysicalInventoryLineStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IPhysicalInventoryLineStateMergePatched)stateEvent;
                return ToPhysicalInventoryLineStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Removed)
            {
                var e = (IPhysicalInventoryLineStateRemoved)stateEvent;
                return ToPhysicalInventoryLineStateRemovedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual PhysicalInventoryLineStateCreatedDto ToPhysicalInventoryLineStateCreatedDto(IPhysicalInventoryLineStateCreated e)
        {
            var dto = new PhysicalInventoryLineStateCreatedDto();
            dto.PhysicalInventoryLineEventId = e.PhysicalInventoryLineEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.BookQuantity = e.BookQuantity;
            dto.CountedQuantity = e.CountedQuantity;
            dto.Processed = e.Processed;
            dto.ReversalLineNumber = e.ReversalLineNumber;
            dto.Description = e.Description;
            return dto;
        }

        public virtual PhysicalInventoryLineStateMergePatchedDto ToPhysicalInventoryLineStateMergePatchedDto(IPhysicalInventoryLineStateMergePatched e)
        {
            var dto = new PhysicalInventoryLineStateMergePatchedDto();
            dto.PhysicalInventoryLineEventId = e.PhysicalInventoryLineEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.BookQuantity = e.BookQuantity;
            dto.CountedQuantity = e.CountedQuantity;
            dto.Processed = e.Processed;
            dto.ReversalLineNumber = e.ReversalLineNumber;
            dto.Description = e.Description;
            dto.IsPropertyBookQuantityRemoved = e.IsPropertyBookQuantityRemoved;
            dto.IsPropertyCountedQuantityRemoved = e.IsPropertyCountedQuantityRemoved;
            dto.IsPropertyProcessedRemoved = e.IsPropertyProcessedRemoved;
            dto.IsPropertyReversalLineNumberRemoved = e.IsPropertyReversalLineNumberRemoved;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;

            return dto;
        }


        public virtual PhysicalInventoryLineStateRemovedDto ToPhysicalInventoryLineStateRemovedDto(IPhysicalInventoryLineStateRemoved e)
        {
            var dto = new PhysicalInventoryLineStateRemovedDto();
            dto.PhysicalInventoryLineEventId = e.PhysicalInventoryLineEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

