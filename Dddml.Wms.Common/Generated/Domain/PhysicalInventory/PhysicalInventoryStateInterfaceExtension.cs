// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventory;

namespace Dddml.Wms.Domain.PhysicalInventory
{

	public static partial class PhysicalInventoryStateInterfaceExtension
	{

        public static IPhysicalInventoryCommand ToCreateOrMergePatchPhysicalInventory<TCreatePhysicalInventory, TMergePatchPhysicalInventory, TCreatePhysicalInventoryLine, TMergePatchPhysicalInventoryLine>(this IPhysicalInventoryState state)
            where TCreatePhysicalInventory : ICreatePhysicalInventory, new()
            where TMergePatchPhysicalInventory : IMergePatchPhysicalInventory, new()
            where TCreatePhysicalInventoryLine : ICreatePhysicalInventoryLine, new()
            where TMergePatchPhysicalInventoryLine : IMergePatchPhysicalInventoryLine, new()
        {
            bool bUnsaved = ((IPhysicalInventoryState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreatePhysicalInventory<TCreatePhysicalInventory, TCreatePhysicalInventoryLine>();
            }
            else 
            {
                return state.ToMergePatchPhysicalInventory<TMergePatchPhysicalInventory, TCreatePhysicalInventoryLine, TMergePatchPhysicalInventoryLine>();
            }
        }

        public static TDeletePhysicalInventory ToDeletePhysicalInventory<TDeletePhysicalInventory>(this IPhysicalInventoryState state)
            where TDeletePhysicalInventory : IDeletePhysicalInventory, new()
        {
            var cmd = new TDeletePhysicalInventory();
            cmd.DocumentNumber = state.DocumentNumber;
            cmd.Version = ((IPhysicalInventoryStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchPhysicalInventory ToMergePatchPhysicalInventory<TMergePatchPhysicalInventory, TCreatePhysicalInventoryLine, TMergePatchPhysicalInventoryLine>(this IPhysicalInventoryState state)
            where TMergePatchPhysicalInventory : IMergePatchPhysicalInventory, new()
            where TCreatePhysicalInventoryLine : ICreatePhysicalInventoryLine, new()
            where TMergePatchPhysicalInventoryLine : IMergePatchPhysicalInventoryLine, new()
        {
            var cmd = new TMergePatchPhysicalInventory();

            cmd.Version = ((IPhysicalInventoryStateProperties)state).Version;

            cmd.DocumentNumber = state.DocumentNumber;
            cmd.WarehouseId = state.WarehouseId;
            cmd.Posted = state.Posted;
            cmd.Processed = state.Processed;
            cmd.Processing = state.Processing;
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.MovementDate = state.MovementDate;
            cmd.Description = state.Description;
            cmd.IsApproved = state.IsApproved;
            cmd.ApprovalAmount = state.ApprovalAmount;
            cmd.IsQuantityUpdated = state.IsQuantityUpdated;
            cmd.ReversalDocumentNumber = state.ReversalDocumentNumber;
            cmd.Active = ((IPhysicalInventoryStateProperties)state).Active;
            
            if (state.WarehouseId == null) { cmd.IsPropertyWarehouseIdRemoved = true; }
            if (state.Processing == null) { cmd.IsPropertyProcessingRemoved = true; }
            if (state.DocumentTypeId == null) { cmd.IsPropertyDocumentTypeIdRemoved = true; }
            if (state.MovementDate == null) { cmd.IsPropertyMovementDateRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.ReversalDocumentNumber == null) { cmd.IsPropertyReversalDocumentNumberRemoved = true; }
            foreach (var d in state.PhysicalInventoryLines)
            {
                var c = d.ToCreateOrMergePatchPhysicalInventoryLine<TCreatePhysicalInventoryLine, TMergePatchPhysicalInventoryLine>();
                cmd.PhysicalInventoryLineCommands.Add(c);
            }
            return cmd;
        }

        public static TCreatePhysicalInventory ToCreatePhysicalInventory<TCreatePhysicalInventory, TCreatePhysicalInventoryLine>(this IPhysicalInventoryState state)
            where TCreatePhysicalInventory : ICreatePhysicalInventory, new()
            where TCreatePhysicalInventoryLine : ICreatePhysicalInventoryLine, new()
        {
            var cmd = new TCreatePhysicalInventory();

            cmd.Version = ((IPhysicalInventoryStateProperties)state).Version;

            cmd.DocumentNumber = state.DocumentNumber;
            cmd.WarehouseId = state.WarehouseId;
            cmd.Posted = state.Posted;
            cmd.Processed = state.Processed;
            cmd.Processing = state.Processing;
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.MovementDate = state.MovementDate;
            cmd.Description = state.Description;
            cmd.IsApproved = state.IsApproved;
            cmd.ApprovalAmount = state.ApprovalAmount;
            cmd.IsQuantityUpdated = state.IsQuantityUpdated;
            cmd.ReversalDocumentNumber = state.ReversalDocumentNumber;
            cmd.Active = ((IPhysicalInventoryStateProperties)state).Active;
            foreach (var d in state.PhysicalInventoryLines)
            {
                var c = d.ToCreatePhysicalInventoryLine<TCreatePhysicalInventoryLine>();
                cmd.PhysicalInventoryLines.Add(c);
            }
            return cmd;
        }
		

	}

}

