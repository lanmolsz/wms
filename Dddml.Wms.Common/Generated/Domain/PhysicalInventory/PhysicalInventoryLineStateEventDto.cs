// <autogenerated>
//   This file was generated by T4 code generator GeneratePhysicalInventoryDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PhysicalInventory;

namespace Dddml.Wms.Domain.PhysicalInventory
{

	public abstract class PhysicalInventoryLineStateEventDtoBase : IStateEventDto, IPhysicalInventoryLineStateCreated, IPhysicalInventoryLineStateMergePatched, IPhysicalInventoryLineStateRemoved
	{

        private PhysicalInventoryLineStateEventIdDto _stateEventId;

		protected internal virtual PhysicalInventoryLineStateEventIdDto StateEventId 
        {
            get 
            {
                if (_stateEventId == null) { _stateEventId = new PhysicalInventoryLineStateEventIdDto(); }
                return _stateEventId;
            }
            set
            {
                _stateEventId = value;
            }
        }

        public virtual string LineNumber
        {
            get { return StateEventId.LineNumber; }
            set { StateEventId.LineNumber = value; }
        }

		public virtual string LocatorId { get; set; }

		public virtual string ProductId { get; set; }

		public virtual string AttributeSetInstanceId { get; set; }

		public virtual decimal? BookQuantity { get; set; }

		public virtual decimal? CountedQuantity { get; set; }

		public virtual bool? Processed { get; set; }

		public virtual long? ReversalLineNumber { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		PhysicalInventoryLineStateEventId IGlobalIdentity<PhysicalInventoryLineStateEventId>.GlobalId {
			get 
			{
				return this.StateEventId.ToPhysicalInventoryLineStateEventId();
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IPhysicalInventoryLineStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }

		public virtual long Version { get; set; }

		public virtual bool? IsPropertyLocatorIdRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyLocatorIdRemoved
        {
            get 
            {
                var b = this.IsPropertyLocatorIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyLocatorIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyProductIdRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyProductIdRemoved
        {
            get 
            {
                var b = this.IsPropertyProductIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyProductIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyAttributeSetInstanceIdRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyAttributeSetInstanceIdRemoved
        {
            get 
            {
                var b = this.IsPropertyAttributeSetInstanceIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyAttributeSetInstanceIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyBookQuantityRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyBookQuantityRemoved
        {
            get 
            {
                var b = this.IsPropertyBookQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyBookQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyCountedQuantityRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyCountedQuantityRemoved
        {
            get 
            {
                var b = this.IsPropertyCountedQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyCountedQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyProcessedRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyProcessedRemoved
        {
            get 
            {
                var b = this.IsPropertyProcessedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyProcessedRemoved = value;
            }
        }

		public virtual bool? IsPropertyReversalLineNumberRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyReversalLineNumberRemoved
        {
            get 
            {
                var b = this.IsPropertyReversalLineNumberRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyReversalLineNumberRemoved = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyDescriptionRemoved
        {
            get 
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IPhysicalInventoryLineStateMergePatched.IsPropertyActiveRemoved
        {
            get 
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        PhysicalInventoryLineStateEventId IPhysicalInventoryLineStateEvent.StateEventId
        {
            get { return this.StateEventId.ToPhysicalInventoryLineStateEventId(); }
        }

        protected PhysicalInventoryLineStateEventDtoBase()
        {
        }

        protected PhysicalInventoryLineStateEventDtoBase(PhysicalInventoryLineStateEventIdDto stateEventId)
        {
            this.StateEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IStateEventDto.StateEventType 
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}


    public class PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto : PhysicalInventoryLineStateEventDtoBase
    {
        private string _stateEventType;

        public virtual string StateEventType
        {
            get { return _stateEventType; }
            set { _stateEventType = value; }
        }

        protected override string GetStateEventType()
        {
            return this._stateEventType;
        }

    }



	public class PhysicalInventoryLineStateCreatedDto : PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto
	{
		public PhysicalInventoryLineStateCreatedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class PhysicalInventoryLineStateMergePatchedDto : PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto
	{
		public PhysicalInventoryLineStateMergePatchedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class PhysicalInventoryLineStateRemovedDto : PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto
	{
		public PhysicalInventoryLineStateRemovedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Removed;
        }

	}


    public partial class PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDtos : IEnumerable<IPhysicalInventoryLineStateCreated>, IEnumerable<IPhysicalInventoryLineStateMergePatched>, IEnumerable<IPhysicalInventoryLineStateRemoved>
    {
        private List<PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto> _innerStateEvents = new List<PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto>();

        public virtual PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IPhysicalInventoryLineStateCreated> IEnumerable<IPhysicalInventoryLineStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IPhysicalInventoryLineStateMergePatched> IEnumerable<IPhysicalInventoryLineStateMergePatched>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IPhysicalInventoryLineStateRemoved> IEnumerable<IPhysicalInventoryLineStateRemoved>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        public void AddPhysicalInventoryLineEvent(IPhysicalInventoryLineStateCreated e)
        {
            _innerStateEvents.Add((PhysicalInventoryLineStateCreatedDto)e);
        }

        public void AddPhysicalInventoryLineEvent(IPhysicalInventoryLineStateEvent e)
        {
            _innerStateEvents.Add((PhysicalInventoryLineStateCreatedOrMergePatchedOrRemovedDto)e);
        }

        public void AddPhysicalInventoryLineEvent(IPhysicalInventoryLineStateRemoved e)
        {
            _innerStateEvents.Add((PhysicalInventoryLineStateRemovedDto)e);
        }

    }


}

