// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public partial class AttributeSetInstanceExtensionFieldState : AttributeSetInstanceExtensionFieldStateProperties, IAttributeSetInstanceExtensionFieldState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

        private AttributeSetInstanceExtensionFieldId _attributeSetInstanceExtensionFieldId = new AttributeSetInstanceExtensionFieldId();

        public virtual AttributeSetInstanceExtensionFieldId AttributeSetInstanceExtensionFieldId 
        {
            get { return this._attributeSetInstanceExtensionFieldId; }
            set { this._attributeSetInstanceExtensionFieldId = value; }
        }

		AttributeSetInstanceExtensionFieldId IGlobalIdentity<AttributeSetInstanceExtensionFieldId>.GlobalId {
			get {
				return  this.AttributeSetInstanceExtensionFieldId;
			}
		}

        string ILocalIdentity<string>.LocalId
        {
            get
            {
                return this.Index;
            }
        }


        public override string GroupId {
			get {
				return this.AttributeSetInstanceExtensionFieldId.GroupId;
			}
			set {
				this.AttributeSetInstanceExtensionFieldId.GroupId = value;
			}
		}

        public override string Index {
			get {
				return this.AttributeSetInstanceExtensionFieldId.Index;
			}
			set {
				this.AttributeSetInstanceExtensionFieldId.Index = value;
			}
		}

		#endregion



		#region IActive implementation

		bool IActive.Active
		{
			get
			{
				return this.Active;
			}
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IAttributeSetInstanceExtensionFieldState.IsUnsaved
        {
            get { return ((IVersioned<long>)this).Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public AttributeSetInstanceExtensionFieldState() : this(false)
        {
        }

        public AttributeSetInstanceExtensionFieldState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IAttributeSetInstanceExtensionFieldStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.Name = e.Name;

			this.Type = e.Type;

			this.Length = e.Length;

			this.Alias = e.Alias;

			this.Description = e.Description;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IAttributeSetInstanceExtensionFieldStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.Name == null)
			{
				if (e.IsPropertyNameRemoved)
				{
					this.Name = default(string);
				}
			}
			else
			{
				this.Name = e.Name;
			}

			if (e.Type == null)
			{
				if (e.IsPropertyTypeRemoved)
				{
					this.Type = default(string);
				}
			}
			else
			{
				this.Type = e.Type;
			}

			if (e.Length == null)
			{
				if (e.IsPropertyLengthRemoved)
				{
					this.Length = default(int?);
				}
			}
			else
			{
				this.Length = e.Length;
			}

			if (e.Alias == null)
			{
				if (e.IsPropertyAliasRemoved)
				{
					this.Alias = default(string);
				}
			}
			else
			{
				this.Alias = e.Alias;
			}

			if (e.Description == null)
			{
				if (e.IsPropertyDescriptionRemoved)
				{
					this.Description = default(string);
				}
			}
			else
			{
				this.Description = e.Description;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}

		public virtual void When(IAttributeSetInstanceExtensionFieldStateRemoved e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IAttributeSetInstanceExtensionFieldStateEvent stateEvent)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("AttributeSetInstanceExtensionField|");

            var stateEntityIdGroupId = (this as IGlobalIdentity<AttributeSetInstanceExtensionFieldId>).GlobalId.GroupId;
            var eventEntityIdGroupId = stateEvent.StateEventId.GroupId;
            if (stateEntityIdGroupId != eventEntityIdGroupId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id GroupId {0} in state but entity id GroupId {1} in event", stateEntityIdGroupId, eventEntityIdGroupId);
            }
            id.Append(stateEntityIdGroupId).Append(",");

            var stateEntityIdIndex = (this as IGlobalIdentity<AttributeSetInstanceExtensionFieldId>).GlobalId.Index;
            var eventEntityIdIndex = stateEvent.StateEventId.Index;
            if (stateEntityIdIndex != eventEntityIdIndex)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id Index {0} in state but entity id Index {1} in event", stateEntityIdIndex, eventEntityIdIndex);
            }
            id.Append(stateEntityIdIndex).Append(",");

            id.Append("]");

            if (ForReapplying) { return; }
            var stateVersion = this.Version;
            var eventVersion = stateEvent.Version;
            if (AttributeSetInstanceExtensionFieldState.VersionZero == eventVersion)
            {
                eventVersion = stateEvent.Version = stateVersion;
            }
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

