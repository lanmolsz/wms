// <autogenerated>
//   This file was generated by T4 code generator GenerateGoodIdentificationTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.GoodIdentificationType;

namespace Dddml.Wms.Domain.GoodIdentificationType
{

    public class GoodIdentificationTypeStateEventDtoConverter
    {
        public virtual GoodIdentificationTypeStateCreatedOrMergePatchedOrDeletedDto ToGoodIdentificationTypeStateEventDto(IGoodIdentificationTypeEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IGoodIdentificationTypeStateCreated)stateEvent;
                return ToGoodIdentificationTypeStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IGoodIdentificationTypeStateMergePatched)stateEvent;
                return ToGoodIdentificationTypeStateMergePatchedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.Deleted)
            {
                var e = (IGoodIdentificationTypeStateDeleted)stateEvent;
                return ToGoodIdentificationTypeStateDeletedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual GoodIdentificationTypeStateCreatedDto ToGoodIdentificationTypeStateCreatedDto(IGoodIdentificationTypeStateCreated e)
        {
            var dto = new GoodIdentificationTypeStateCreatedDto();
            dto.GoodIdentificationTypeEventId = e.GoodIdentificationTypeEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.ParentTypeId = e.ParentTypeId;
            dto.HasTable = e.HasTable;
            dto.Description = e.Description;
            dto.Active = e.Active;
            return dto;
        }

        public virtual GoodIdentificationTypeStateMergePatchedDto ToGoodIdentificationTypeStateMergePatchedDto(IGoodIdentificationTypeStateMergePatched e)
        {
            var dto = new GoodIdentificationTypeStateMergePatchedDto();
            dto.GoodIdentificationTypeEventId = e.GoodIdentificationTypeEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.ParentTypeId = e.ParentTypeId;
            dto.HasTable = e.HasTable;
            dto.Description = e.Description;
            dto.Active = e.Active;
            dto.IsPropertyParentTypeIdRemoved = e.IsPropertyParentTypeIdRemoved;
            dto.IsPropertyHasTableRemoved = e.IsPropertyHasTableRemoved;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual GoodIdentificationTypeStateDeletedDto ToGoodIdentificationTypeStateDeletedDto(IGoodIdentificationTypeStateDeleted e)
        {
            var dto = new GoodIdentificationTypeStateDeletedDto();
            dto.GoodIdentificationTypeEventId = e.GoodIdentificationTypeEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

