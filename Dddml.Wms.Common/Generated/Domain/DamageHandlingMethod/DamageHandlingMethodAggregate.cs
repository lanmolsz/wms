// <autogenerated>
//   This file was generated by T4 code generator GenerateDamageHandlingMethodDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DamageHandlingMethod;

namespace Dddml.Wms.Domain.DamageHandlingMethod
{
    public partial class DamageHandlingMethodAggregate : AggregateBase, IDamageHandlingMethodAggregate
    {

        readonly IDamageHandlingMethodState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IDamageHandlingMethodState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public DamageHandlingMethodAggregate(IDamageHandlingMethodState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IDamageHandlingMethodStateProperties)_state).Version == DamageHandlingMethodState.VersionZero)
            {
                if (IsCommandCreate((IDamageHandlingMethodCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IDamageHandlingMethodCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IDamageHandlingMethodCommand c)
        {
            return c.Version == DamageHandlingMethodState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateDamageHandlingMethod c)
        {
            IDamageHandlingMethodStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchDamageHandlingMethod c)
        {
            IDamageHandlingMethodStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteDamageHandlingMethod c)
        {
            IDamageHandlingMethodStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IDamageHandlingMethodStateCreated Map(ICreateDamageHandlingMethod c)
        {
			var stateEventId = new DamageHandlingMethodStateEventId(c.DamageHandlingMethodId, c.Version);
            IDamageHandlingMethodStateCreated e = NewDamageHandlingMethodStateCreated(stateEventId);
		
            e.Description = c.Description;
            e.SequenceId = c.SequenceId;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;


            return e;
        }

        protected virtual IDamageHandlingMethodStateMergePatched Map(IMergePatchDamageHandlingMethod c)
        {
			var stateEventId = new DamageHandlingMethodStateEventId(c.DamageHandlingMethodId, c.Version);
            IDamageHandlingMethodStateMergePatched e = NewDamageHandlingMethodStateMergePatched(stateEventId);

            e.Description = c.Description;
            e.SequenceId = c.SequenceId;
            e.Active = c.Active;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertySequenceIdRemoved = c.IsPropertySequenceIdRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;


            return e;
        }

        protected virtual IDamageHandlingMethodStateDeleted Map(IDeleteDamageHandlingMethod c)
        {
			var stateEventId = new DamageHandlingMethodStateEventId(c.DamageHandlingMethodId, c.Version);
            IDamageHandlingMethodStateDeleted e = NewDamageHandlingMethodStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected DamageHandlingMethodStateCreated NewDamageHandlingMethodStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new DamageHandlingMethodStateEventId(_state.DamageHandlingMethodId, ((IDamageHandlingMethodStateProperties)_state).Version);
            var e = NewDamageHandlingMethodStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected DamageHandlingMethodStateMergePatched NewDamageHandlingMethodStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new DamageHandlingMethodStateEventId(_state.DamageHandlingMethodId, ((IDamageHandlingMethodStateProperties)_state).Version);
            var e = NewDamageHandlingMethodStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected DamageHandlingMethodStateDeleted NewDamageHandlingMethodStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new DamageHandlingMethodStateEventId(_state.DamageHandlingMethodId, ((IDamageHandlingMethodStateProperties)_state).Version);
            var e = NewDamageHandlingMethodStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private DamageHandlingMethodStateCreated NewDamageHandlingMethodStateCreated(DamageHandlingMethodStateEventId stateEventId)
		{
			return new DamageHandlingMethodStateCreated(stateEventId);			
		}

        private DamageHandlingMethodStateMergePatched NewDamageHandlingMethodStateMergePatched(DamageHandlingMethodStateEventId stateEventId)
		{
			return new DamageHandlingMethodStateMergePatched(stateEventId);
		}

        private DamageHandlingMethodStateDeleted NewDamageHandlingMethodStateDeleted(DamageHandlingMethodStateEventId stateEventId)
		{
			return new DamageHandlingMethodStateDeleted(stateEventId);
		}

    }

}

