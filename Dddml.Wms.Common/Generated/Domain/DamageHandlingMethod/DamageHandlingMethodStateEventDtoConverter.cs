// <autogenerated>
//   This file was generated by T4 code generator GenerateDamageHandlingMethodDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DamageHandlingMethod;

namespace Dddml.Wms.Domain.DamageHandlingMethod
{

    public class DamageHandlingMethodStateEventDtoConverter
    {
        public virtual DamageHandlingMethodStateCreatedOrMergePatchedOrDeletedDto ToDamageHandlingMethodStateEventDto(IDamageHandlingMethodStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IDamageHandlingMethodStateCreated)stateEvent;
                return ToDamageHandlingMethodStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IDamageHandlingMethodStateMergePatched)stateEvent;
                return ToDamageHandlingMethodStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (IDamageHandlingMethodStateDeleted)stateEvent;
                return ToDamageHandlingMethodStateDeletedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual DamageHandlingMethodStateCreatedDto ToDamageHandlingMethodStateCreatedDto(IDamageHandlingMethodStateCreated e)
        {
            var dto = new DamageHandlingMethodStateCreatedDto();
            dto.StateEventId = new DamageHandlingMethodEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.SequenceId = e.SequenceId;
            dto.Active = e.Active;
            return dto;
        }

        public virtual DamageHandlingMethodStateMergePatchedDto ToDamageHandlingMethodStateMergePatchedDto(IDamageHandlingMethodStateMergePatched e)
        {
            var dto = new DamageHandlingMethodStateMergePatchedDto();
            dto.StateEventId = new DamageHandlingMethodEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.SequenceId = e.SequenceId;
            dto.Active = e.Active;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertySequenceIdRemoved = e.IsPropertySequenceIdRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual DamageHandlingMethodStateDeletedDto ToDamageHandlingMethodStateDeletedDto(IDamageHandlingMethodStateDeleted e)
        {
            var dto = new DamageHandlingMethodStateDeletedDto();
            dto.StateEventId = new DamageHandlingMethodEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

