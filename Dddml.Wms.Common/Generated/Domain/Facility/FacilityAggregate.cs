// <autogenerated>
//   This file was generated by T4 code generator GenerateFacilityDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Facility;

namespace Dddml.Wms.Domain.Facility
{
    public partial class FacilityAggregate : AggregateBase, IFacilityAggregate
    {

        readonly IFacilityState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IFacilityState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public FacilityAggregate(IFacilityState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IFacilityStateProperties)_state).Version == FacilityState.VersionZero)
            {
                if (IsCommandCreate((IFacilityCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IFacilityCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IFacilityCommand c)
        {
            return c.Version == FacilityState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateFacility c)
        {
            IFacilityStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchFacility c)
        {
            IFacilityStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteFacility c)
        {
            IFacilityStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IFacilityStateCreated Map(ICreateFacility c)
        {
			var stateEventId = new FacilityEventId(c.FacilityId, c.Version);
            IFacilityStateCreated e = NewFacilityStateCreated(stateEventId);
		
            e.FacilityTypeId = c.FacilityTypeId;
            e.ParentFacilityId = c.ParentFacilityId;
            e.OwnerPartyId = c.OwnerPartyId;
            e.DefaultInventoryItemTypeId = c.DefaultInventoryItemTypeId;
            e.FacilityName = c.FacilityName;
            e.PrimaryFacilityGroupId = c.PrimaryFacilityGroupId;
            e.OldSquareFootage = c.OldSquareFootage;
            e.FacilitySize = c.FacilitySize;
            e.FacilitySizeUomId = c.FacilitySizeUomId;
            e.ProductStoreId = c.ProductStoreId;
            e.DefaultDaysToShip = c.DefaultDaysToShip;
            e.OpenedDate = c.OpenedDate;
            e.ClosedDate = c.ClosedDate;
            e.Description = c.Description;
            e.DefaultDimensionUomId = c.DefaultDimensionUomId;
            e.DefaultWeightUomId = c.DefaultWeightUomId;
            e.GeoPointId = c.GeoPointId;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;


            return e;
        }

        protected virtual IFacilityStateMergePatched Map(IMergePatchFacility c)
        {
			var stateEventId = new FacilityEventId(c.FacilityId, c.Version);
            IFacilityStateMergePatched e = NewFacilityStateMergePatched(stateEventId);

            e.FacilityTypeId = c.FacilityTypeId;
            e.ParentFacilityId = c.ParentFacilityId;
            e.OwnerPartyId = c.OwnerPartyId;
            e.DefaultInventoryItemTypeId = c.DefaultInventoryItemTypeId;
            e.FacilityName = c.FacilityName;
            e.PrimaryFacilityGroupId = c.PrimaryFacilityGroupId;
            e.OldSquareFootage = c.OldSquareFootage;
            e.FacilitySize = c.FacilitySize;
            e.FacilitySizeUomId = c.FacilitySizeUomId;
            e.ProductStoreId = c.ProductStoreId;
            e.DefaultDaysToShip = c.DefaultDaysToShip;
            e.OpenedDate = c.OpenedDate;
            e.ClosedDate = c.ClosedDate;
            e.Description = c.Description;
            e.DefaultDimensionUomId = c.DefaultDimensionUomId;
            e.DefaultWeightUomId = c.DefaultWeightUomId;
            e.GeoPointId = c.GeoPointId;
            e.Active = c.Active;
            e.IsPropertyFacilityTypeIdRemoved = c.IsPropertyFacilityTypeIdRemoved;
            e.IsPropertyParentFacilityIdRemoved = c.IsPropertyParentFacilityIdRemoved;
            e.IsPropertyOwnerPartyIdRemoved = c.IsPropertyOwnerPartyIdRemoved;
            e.IsPropertyDefaultInventoryItemTypeIdRemoved = c.IsPropertyDefaultInventoryItemTypeIdRemoved;
            e.IsPropertyFacilityNameRemoved = c.IsPropertyFacilityNameRemoved;
            e.IsPropertyPrimaryFacilityGroupIdRemoved = c.IsPropertyPrimaryFacilityGroupIdRemoved;
            e.IsPropertyOldSquareFootageRemoved = c.IsPropertyOldSquareFootageRemoved;
            e.IsPropertyFacilitySizeRemoved = c.IsPropertyFacilitySizeRemoved;
            e.IsPropertyFacilitySizeUomIdRemoved = c.IsPropertyFacilitySizeUomIdRemoved;
            e.IsPropertyProductStoreIdRemoved = c.IsPropertyProductStoreIdRemoved;
            e.IsPropertyDefaultDaysToShipRemoved = c.IsPropertyDefaultDaysToShipRemoved;
            e.IsPropertyOpenedDateRemoved = c.IsPropertyOpenedDateRemoved;
            e.IsPropertyClosedDateRemoved = c.IsPropertyClosedDateRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyDefaultDimensionUomIdRemoved = c.IsPropertyDefaultDimensionUomIdRemoved;
            e.IsPropertyDefaultWeightUomIdRemoved = c.IsPropertyDefaultWeightUomIdRemoved;
            e.IsPropertyGeoPointIdRemoved = c.IsPropertyGeoPointIdRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;


            return e;
        }

        protected virtual IFacilityStateDeleted Map(IDeleteFacility c)
        {
			var stateEventId = new FacilityEventId(c.FacilityId, c.Version);
            IFacilityStateDeleted e = NewFacilityStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected FacilityStateCreated NewFacilityStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new FacilityEventId(_state.FacilityId, version);
            var e = NewFacilityStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected FacilityStateMergePatched NewFacilityStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new FacilityEventId(_state.FacilityId, version);
            var e = NewFacilityStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected FacilityStateDeleted NewFacilityStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new FacilityEventId(_state.FacilityId, version);
            var e = NewFacilityStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private FacilityStateCreated NewFacilityStateCreated(FacilityEventId stateEventId)
		{
			return new FacilityStateCreated(stateEventId);			
		}

        private FacilityStateMergePatched NewFacilityStateMergePatched(FacilityEventId stateEventId)
		{
			return new FacilityStateMergePatched(stateEventId);
		}

        private FacilityStateDeleted NewFacilityStateDeleted(FacilityEventId stateEventId)
		{
			return new FacilityStateDeleted(stateEventId);
		}
    }

}

