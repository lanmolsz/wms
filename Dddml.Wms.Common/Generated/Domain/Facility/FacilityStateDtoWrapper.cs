// <autogenerated>
//   This file was generated by T4 code generator GenerateFacilityDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Facility;

namespace Dddml.Wms.Domain.Facility
{

	public partial class FacilityStateDtoWrapper : StateDtoWrapperBase, IFacilityStateDto, IFacilityState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IFacilityState _state;

        public FacilityStateDtoWrapper()
        {
            this._state = new FacilityState();
        }

		public FacilityStateDtoWrapper(IFacilityState state)
		{
            this._state = state;
		}

		public IFacilityState ToFacilityState()
		{
			return this._state;
		}

		public virtual string FacilityId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("FacilityId"))
                {
                    return _state.FacilityId;
                }
                return null;
            }
            set
            {
                _state.FacilityId = value;
            }
        }

        string IFacilityStateProperties.FacilityId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).FacilityId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).FacilityId = value;
            }
        }

		public virtual string FacilityTypeId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("FacilityTypeId"))
                {
                    return _state.FacilityTypeId;
                }
                return null;
            }
            set
            {
                _state.FacilityTypeId = value;
            }
        }

        string IFacilityStateProperties.FacilityTypeId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).FacilityTypeId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).FacilityTypeId = value;
            }
        }

		public virtual string ParentFacilityId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("ParentFacilityId"))
                {
                    return _state.ParentFacilityId;
                }
                return null;
            }
            set
            {
                _state.ParentFacilityId = value;
            }
        }

        string IFacilityStateProperties.ParentFacilityId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).ParentFacilityId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).ParentFacilityId = value;
            }
        }

		public virtual string OwnerPartyId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("OwnerPartyId"))
                {
                    return _state.OwnerPartyId;
                }
                return null;
            }
            set
            {
                _state.OwnerPartyId = value;
            }
        }

        string IFacilityStateProperties.OwnerPartyId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).OwnerPartyId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).OwnerPartyId = value;
            }
        }

		public virtual string DefaultInventoryItemTypeId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DefaultInventoryItemTypeId"))
                {
                    return _state.DefaultInventoryItemTypeId;
                }
                return null;
            }
            set
            {
                _state.DefaultInventoryItemTypeId = value;
            }
        }

        string IFacilityStateProperties.DefaultInventoryItemTypeId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).DefaultInventoryItemTypeId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).DefaultInventoryItemTypeId = value;
            }
        }

		public virtual string FacilityName
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("FacilityName"))
                {
                    return _state.FacilityName;
                }
                return null;
            }
            set
            {
                _state.FacilityName = value;
            }
        }

        string IFacilityStateProperties.FacilityName
        {
            get 
            {
                return (this._state as IFacilityStateProperties).FacilityName;
            }
            set 
            {
                (this._state as IFacilityStateProperties).FacilityName = value;
            }
        }

		public virtual string PrimaryFacilityGroupId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("PrimaryFacilityGroupId"))
                {
                    return _state.PrimaryFacilityGroupId;
                }
                return null;
            }
            set
            {
                _state.PrimaryFacilityGroupId = value;
            }
        }

        string IFacilityStateProperties.PrimaryFacilityGroupId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).PrimaryFacilityGroupId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).PrimaryFacilityGroupId = value;
            }
        }

		public virtual long? OldSquareFootage
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("OldSquareFootage"))
                {
                    return _state.OldSquareFootage;
                }
                return null;
            }
            set
            {
                _state.OldSquareFootage = value;
            }
        }

        long? IFacilityStateProperties.OldSquareFootage
        {
            get 
            {
                return (this._state as IFacilityStateProperties).OldSquareFootage;
            }
            set 
            {
                (this._state as IFacilityStateProperties).OldSquareFootage = value;
            }
        }

		public virtual decimal? FacilitySize
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("FacilitySize"))
                {
                    return _state.FacilitySize;
                }
                return null;
            }
            set
            {
                _state.FacilitySize = value;
            }
        }

        decimal? IFacilityStateProperties.FacilitySize
        {
            get 
            {
                return (this._state as IFacilityStateProperties).FacilitySize;
            }
            set 
            {
                (this._state as IFacilityStateProperties).FacilitySize = value;
            }
        }

		public virtual string FacilitySizeUomId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("FacilitySizeUomId"))
                {
                    return _state.FacilitySizeUomId;
                }
                return null;
            }
            set
            {
                _state.FacilitySizeUomId = value;
            }
        }

        string IFacilityStateProperties.FacilitySizeUomId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).FacilitySizeUomId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).FacilitySizeUomId = value;
            }
        }

		public virtual string ProductStoreId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("ProductStoreId"))
                {
                    return _state.ProductStoreId;
                }
                return null;
            }
            set
            {
                _state.ProductStoreId = value;
            }
        }

        string IFacilityStateProperties.ProductStoreId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).ProductStoreId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).ProductStoreId = value;
            }
        }

		public virtual long? DefaultDaysToShip
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DefaultDaysToShip"))
                {
                    return _state.DefaultDaysToShip;
                }
                return null;
            }
            set
            {
                _state.DefaultDaysToShip = value;
            }
        }

        long? IFacilityStateProperties.DefaultDaysToShip
        {
            get 
            {
                return (this._state as IFacilityStateProperties).DefaultDaysToShip;
            }
            set 
            {
                (this._state as IFacilityStateProperties).DefaultDaysToShip = value;
            }
        }

		public virtual DateTime? OpenedDate
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("OpenedDate"))
                {
                    return _state.OpenedDate;
                }
                return null;
            }
            set
            {
                _state.OpenedDate = value;
            }
        }

        DateTime? IFacilityStateProperties.OpenedDate
        {
            get 
            {
                return (this._state as IFacilityStateProperties).OpenedDate;
            }
            set 
            {
                (this._state as IFacilityStateProperties).OpenedDate = value;
            }
        }

		public virtual DateTime? ClosedDate
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("ClosedDate"))
                {
                    return _state.ClosedDate;
                }
                return null;
            }
            set
            {
                _state.ClosedDate = value;
            }
        }

        DateTime? IFacilityStateProperties.ClosedDate
        {
            get 
            {
                return (this._state as IFacilityStateProperties).ClosedDate;
            }
            set 
            {
                (this._state as IFacilityStateProperties).ClosedDate = value;
            }
        }

		public virtual string Description
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Description"))
                {
                    return _state.Description;
                }
                return null;
            }
            set
            {
                _state.Description = value;
            }
        }

        string IFacilityStateProperties.Description
        {
            get 
            {
                return (this._state as IFacilityStateProperties).Description;
            }
            set 
            {
                (this._state as IFacilityStateProperties).Description = value;
            }
        }

		public virtual string DefaultDimensionUomId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DefaultDimensionUomId"))
                {
                    return _state.DefaultDimensionUomId;
                }
                return null;
            }
            set
            {
                _state.DefaultDimensionUomId = value;
            }
        }

        string IFacilityStateProperties.DefaultDimensionUomId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).DefaultDimensionUomId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).DefaultDimensionUomId = value;
            }
        }

		public virtual string DefaultWeightUomId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("DefaultWeightUomId"))
                {
                    return _state.DefaultWeightUomId;
                }
                return null;
            }
            set
            {
                _state.DefaultWeightUomId = value;
            }
        }

        string IFacilityStateProperties.DefaultWeightUomId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).DefaultWeightUomId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).DefaultWeightUomId = value;
            }
        }

		public virtual string GeoPointId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("GeoPointId"))
                {
                    return _state.GeoPointId;
                }
                return null;
            }
            set
            {
                _state.GeoPointId = value;
            }
        }

        string IFacilityStateProperties.GeoPointId
        {
            get 
            {
                return (this._state as IFacilityStateProperties).GeoPointId;
            }
            set 
            {
                (this._state as IFacilityStateProperties).GeoPointId = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Active"))
                {
                    return (this._state as IFacilityStateProperties).Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IFacilityStateProperties).Active = value.Value;
                }
            }
        }

        bool IFacilityStateProperties.Active
        {
            get 
            {
                return (this._state as IFacilityStateProperties).Active;
            }
            set 
            {
                (this._state as IFacilityStateProperties).Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IFacilityStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IFacilityStateProperties).Version = value.Value;
                }
            }
        }

        long IFacilityStateProperties.Version
        {
            get 
            {
                return (this._state as IFacilityStateProperties).Version;
            }
            set 
            {
                (this._state as IFacilityStateProperties).Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get { return (_state as IFacilityState).GlobalId; }
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
            return (_state as IActive).IsActive();
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IFacilityState).CreatedBy; }
            set { (_state as IFacilityState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IFacilityState).CreatedAt; }
            set { (_state as IFacilityState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IFacilityState).UpdatedBy; }
            set { (_state as IFacilityState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IFacilityState).UpdatedAt; }
            set { (_state as IFacilityState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as IFacilityStateProperties).Version; }
		}

		#endregion

        bool IFacilityState.IsUnsaved
        {
            get { return this.Version == FacilityState.VersionZero; }
        }

		void IFacilityState.When(IFacilityStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IFacilityState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void IFacilityState.When(IFacilityStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IFacilityState.When(IFacilityStateDeleted e)
		{
            throw new NotSupportedException();
		}

		void IFacilityState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

	}

    partial class FacilityStateDtoWrapperCollection : StateDtoWrapperCollectionBase<FacilityStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(FacilityStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

