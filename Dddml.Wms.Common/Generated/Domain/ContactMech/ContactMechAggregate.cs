// <autogenerated>
//   This file was generated by T4 code generator GenerateContactMechDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ContactMech;

namespace Dddml.Wms.Domain.ContactMech
{
    public partial class ContactMechAggregate : AggregateBase, IContactMechAggregate
    {

        readonly IContactMechState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IContactMechState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public ContactMechAggregate(IContactMechState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IContactMechStateProperties)_state).Version == ContactMechState.VersionZero)
            {
                if (IsCommandCreate((IContactMechCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IContactMechCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IContactMechCommand c)
        {
            return c.Version == ContactMechState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateContactMech c)
        {
            IContactMechStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchContactMech c)
        {
            IContactMechStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteContactMech c)
        {
            IContactMechStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IContactMechStateCreated Map(ICreateContactMech c)
        {
			var stateEventId = new ContactMechEventId(c.ContactMechId, c.Version);
            IContactMechStateCreated e = NewContactMechStateCreated(stateEventId);
		
            e.ContactMechTypeId = c.ContactMechTypeId;
            e.InfoString = c.InfoString;
            e.ToName = c.ToName;
            e.AttnName = c.AttnName;
            e.Address1 = c.Address1;
            e.Address2 = c.Address2;
            e.Directions = c.Directions;
            e.City = c.City;
            e.PostalCode = c.PostalCode;
            e.PostalCodeExt = c.PostalCodeExt;
            e.CountryGeoId = c.CountryGeoId;
            e.StateProvinceGeoId = c.StateProvinceGeoId;
            e.CountyGeoId = c.CountyGeoId;
            e.PostalCodeGeoId = c.PostalCodeGeoId;
            e.GeoPointId = c.GeoPointId;
            e.CountryCode = c.CountryCode;
            e.AreaCode = c.AreaCode;
            e.ContactNumber = c.ContactNumber;
            e.AskForName = c.AskForName;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;


            return e;
        }

        protected virtual IContactMechStateMergePatched Map(IMergePatchContactMech c)
        {
			var stateEventId = new ContactMechEventId(c.ContactMechId, c.Version);
            IContactMechStateMergePatched e = NewContactMechStateMergePatched(stateEventId);

            e.ContactMechTypeId = c.ContactMechTypeId;
            e.InfoString = c.InfoString;
            e.ToName = c.ToName;
            e.AttnName = c.AttnName;
            e.Address1 = c.Address1;
            e.Address2 = c.Address2;
            e.Directions = c.Directions;
            e.City = c.City;
            e.PostalCode = c.PostalCode;
            e.PostalCodeExt = c.PostalCodeExt;
            e.CountryGeoId = c.CountryGeoId;
            e.StateProvinceGeoId = c.StateProvinceGeoId;
            e.CountyGeoId = c.CountyGeoId;
            e.PostalCodeGeoId = c.PostalCodeGeoId;
            e.GeoPointId = c.GeoPointId;
            e.CountryCode = c.CountryCode;
            e.AreaCode = c.AreaCode;
            e.ContactNumber = c.ContactNumber;
            e.AskForName = c.AskForName;
            e.Active = c.Active;
            e.IsPropertyContactMechTypeIdRemoved = c.IsPropertyContactMechTypeIdRemoved;
            e.IsPropertyInfoStringRemoved = c.IsPropertyInfoStringRemoved;
            e.IsPropertyToNameRemoved = c.IsPropertyToNameRemoved;
            e.IsPropertyAttnNameRemoved = c.IsPropertyAttnNameRemoved;
            e.IsPropertyAddress1Removed = c.IsPropertyAddress1Removed;
            e.IsPropertyAddress2Removed = c.IsPropertyAddress2Removed;
            e.IsPropertyDirectionsRemoved = c.IsPropertyDirectionsRemoved;
            e.IsPropertyCityRemoved = c.IsPropertyCityRemoved;
            e.IsPropertyPostalCodeRemoved = c.IsPropertyPostalCodeRemoved;
            e.IsPropertyPostalCodeExtRemoved = c.IsPropertyPostalCodeExtRemoved;
            e.IsPropertyCountryGeoIdRemoved = c.IsPropertyCountryGeoIdRemoved;
            e.IsPropertyStateProvinceGeoIdRemoved = c.IsPropertyStateProvinceGeoIdRemoved;
            e.IsPropertyCountyGeoIdRemoved = c.IsPropertyCountyGeoIdRemoved;
            e.IsPropertyPostalCodeGeoIdRemoved = c.IsPropertyPostalCodeGeoIdRemoved;
            e.IsPropertyGeoPointIdRemoved = c.IsPropertyGeoPointIdRemoved;
            e.IsPropertyCountryCodeRemoved = c.IsPropertyCountryCodeRemoved;
            e.IsPropertyAreaCodeRemoved = c.IsPropertyAreaCodeRemoved;
            e.IsPropertyContactNumberRemoved = c.IsPropertyContactNumberRemoved;
            e.IsPropertyAskForNameRemoved = c.IsPropertyAskForNameRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;


            return e;
        }

        protected virtual IContactMechStateDeleted Map(IDeleteContactMech c)
        {
			var stateEventId = new ContactMechEventId(c.ContactMechId, c.Version);
            IContactMechStateDeleted e = NewContactMechStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected ContactMechStateCreated NewContactMechStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new ContactMechEventId(_state.ContactMechId, version);
            var e = NewContactMechStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected ContactMechStateMergePatched NewContactMechStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new ContactMechEventId(_state.ContactMechId, version);
            var e = NewContactMechStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected ContactMechStateDeleted NewContactMechStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new ContactMechEventId(_state.ContactMechId, version);
            var e = NewContactMechStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private ContactMechStateCreated NewContactMechStateCreated(ContactMechEventId stateEventId)
		{
			return new ContactMechStateCreated(stateEventId);			
		}

        private ContactMechStateMergePatched NewContactMechStateMergePatched(ContactMechEventId stateEventId)
		{
			return new ContactMechStateMergePatched(stateEventId);
		}

        private ContactMechStateDeleted NewContactMechStateDeleted(ContactMechEventId stateEventId)
		{
			return new ContactMechStateDeleted(stateEventId);
		}
    }

}

