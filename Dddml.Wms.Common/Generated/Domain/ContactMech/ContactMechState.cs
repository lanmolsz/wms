// <autogenerated>
//   This file was generated by T4 code generator GenerateContactMechDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ContactMech;

namespace Dddml.Wms.Domain.ContactMech
{

	public partial class ContactMechState : ContactMechStateProperties, IContactMechState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get
			{
				return this.ContactMechId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IContactMechState.IsUnsaved
        {
            get { return this.Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public ContactMechState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.ContactMechId = ((IContactMechEvent)events.First()).ContactMechEventId.ContactMechId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.Version += 1;
                }
            }
        }

        public ContactMechState() : this(false)
        {
        }

        public ContactMechState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IContactMechStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.ContactMechTypeId = e.ContactMechTypeId;

			this.InfoString = e.InfoString;

			this.ToName = e.ToName;

			this.AttnName = e.AttnName;

			this.Address1 = e.Address1;

			this.Address2 = e.Address2;

			this.Directions = e.Directions;

			this.City = e.City;

			this.PostalCode = e.PostalCode;

			this.PostalCodeExt = e.PostalCodeExt;

			this.CountryGeoId = e.CountryGeoId;

			this.StateProvinceGeoId = e.StateProvinceGeoId;

			this.CountyGeoId = e.CountyGeoId;

			this.PostalCodeGeoId = e.PostalCodeGeoId;

			this.GeoPointId = e.GeoPointId;

			this.CountryCode = e.CountryCode;

			this.AreaCode = e.AreaCode;

			this.ContactNumber = e.ContactNumber;

			this.AskForName = e.AskForName;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IContactMechStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.ContactMechTypeId == null)
			{
				if (e.IsPropertyContactMechTypeIdRemoved)
				{
					this.ContactMechTypeId = default(string);
				}
			}
			else
			{
				this.ContactMechTypeId = e.ContactMechTypeId;
			}

			if (e.InfoString == null)
			{
				if (e.IsPropertyInfoStringRemoved)
				{
					this.InfoString = default(string);
				}
			}
			else
			{
				this.InfoString = e.InfoString;
			}

			if (e.ToName == null)
			{
				if (e.IsPropertyToNameRemoved)
				{
					this.ToName = default(string);
				}
			}
			else
			{
				this.ToName = e.ToName;
			}

			if (e.AttnName == null)
			{
				if (e.IsPropertyAttnNameRemoved)
				{
					this.AttnName = default(string);
				}
			}
			else
			{
				this.AttnName = e.AttnName;
			}

			if (e.Address1 == null)
			{
				if (e.IsPropertyAddress1Removed)
				{
					this.Address1 = default(string);
				}
			}
			else
			{
				this.Address1 = e.Address1;
			}

			if (e.Address2 == null)
			{
				if (e.IsPropertyAddress2Removed)
				{
					this.Address2 = default(string);
				}
			}
			else
			{
				this.Address2 = e.Address2;
			}

			if (e.Directions == null)
			{
				if (e.IsPropertyDirectionsRemoved)
				{
					this.Directions = default(string);
				}
			}
			else
			{
				this.Directions = e.Directions;
			}

			if (e.City == null)
			{
				if (e.IsPropertyCityRemoved)
				{
					this.City = default(string);
				}
			}
			else
			{
				this.City = e.City;
			}

			if (e.PostalCode == null)
			{
				if (e.IsPropertyPostalCodeRemoved)
				{
					this.PostalCode = default(string);
				}
			}
			else
			{
				this.PostalCode = e.PostalCode;
			}

			if (e.PostalCodeExt == null)
			{
				if (e.IsPropertyPostalCodeExtRemoved)
				{
					this.PostalCodeExt = default(string);
				}
			}
			else
			{
				this.PostalCodeExt = e.PostalCodeExt;
			}

			if (e.CountryGeoId == null)
			{
				if (e.IsPropertyCountryGeoIdRemoved)
				{
					this.CountryGeoId = default(string);
				}
			}
			else
			{
				this.CountryGeoId = e.CountryGeoId;
			}

			if (e.StateProvinceGeoId == null)
			{
				if (e.IsPropertyStateProvinceGeoIdRemoved)
				{
					this.StateProvinceGeoId = default(string);
				}
			}
			else
			{
				this.StateProvinceGeoId = e.StateProvinceGeoId;
			}

			if (e.CountyGeoId == null)
			{
				if (e.IsPropertyCountyGeoIdRemoved)
				{
					this.CountyGeoId = default(string);
				}
			}
			else
			{
				this.CountyGeoId = e.CountyGeoId;
			}

			if (e.PostalCodeGeoId == null)
			{
				if (e.IsPropertyPostalCodeGeoIdRemoved)
				{
					this.PostalCodeGeoId = default(string);
				}
			}
			else
			{
				this.PostalCodeGeoId = e.PostalCodeGeoId;
			}

			if (e.GeoPointId == null)
			{
				if (e.IsPropertyGeoPointIdRemoved)
				{
					this.GeoPointId = default(string);
				}
			}
			else
			{
				this.GeoPointId = e.GeoPointId;
			}

			if (e.CountryCode == null)
			{
				if (e.IsPropertyCountryCodeRemoved)
				{
					this.CountryCode = default(string);
				}
			}
			else
			{
				this.CountryCode = e.CountryCode;
			}

			if (e.AreaCode == null)
			{
				if (e.IsPropertyAreaCodeRemoved)
				{
					this.AreaCode = default(string);
				}
			}
			else
			{
				this.AreaCode = e.AreaCode;
			}

			if (e.ContactNumber == null)
			{
				if (e.IsPropertyContactNumberRemoved)
				{
					this.ContactNumber = default(string);
				}
			}
			else
			{
				this.ContactNumber = e.ContactNumber;
			}

			if (e.AskForName == null)
			{
				if (e.IsPropertyAskForNameRemoved)
				{
					this.AskForName = default(string);
				}
			}
			else
			{
				this.AskForName = e.AskForName;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}

		public virtual void When(IContactMechStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IContactMechEvent stateEvent)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("ContactMech|");

            var stateEntityId = this.ContactMechId; // Aggregate Id
            var eventEntityId = stateEvent.ContactMechEventId.ContactMechId;
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.Version;
            var eventVersion = stateEvent.ContactMechEventId.Version;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

    public class PostalAddressState : ContactMechState, IPostalAddressState
    {
        public PostalAddressState() : base()
        {}

        public PostalAddressState(bool b) : base(b)
        {}
    }

    public class TelecomNumberState : ContactMechState, ITelecomNumberState
    {
        public TelecomNumberState() : base()
        {}

        public TelecomNumberState(bool b) : base(b)
        {}
    }

}

