// <autogenerated>
//   This file was generated by T4 code generator GenerateContactMechDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ContactMech;

namespace Dddml.Wms.Domain.ContactMech
{

	public static partial class ContactMechStateInterfaceExtension
	{

        public static IContactMechCommand ToCreateOrMergePatchContactMech<TCreateContactMech, TMergePatchContactMech>(this IContactMechState state)
            where TCreateContactMech : ICreateContactMech, new()
            where TMergePatchContactMech : IMergePatchContactMech, new()
        {
            bool bUnsaved = ((IContactMechState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateContactMech<TCreateContactMech>();
            }
            else 
            {
                return state.ToMergePatchContactMech<TMergePatchContactMech>();
            }
        }

        public static TDeleteContactMech ToDeleteContactMech<TDeleteContactMech>(this IContactMechState state)
            where TDeleteContactMech : IDeleteContactMech, new()
        {
            var cmd = new TDeleteContactMech();
            cmd.ContactMechId = state.ContactMechId;
            cmd.Version = ((IContactMechStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchContactMech ToMergePatchContactMech<TMergePatchContactMech>(this IContactMechState state)
            where TMergePatchContactMech : IMergePatchContactMech, new()
        {
            var cmd = new TMergePatchContactMech();

            cmd.Version = ((IContactMechStateProperties)state).Version;

            cmd.ContactMechId = state.ContactMechId;
            cmd.ContactMechTypeId = state.ContactMechTypeId;
            cmd.InfoString = state.InfoString;
            cmd.ToName = state.ToName;
            cmd.AttnName = state.AttnName;
            cmd.Address1 = state.Address1;
            cmd.Address2 = state.Address2;
            cmd.Directions = state.Directions;
            cmd.City = state.City;
            cmd.PostalCode = state.PostalCode;
            cmd.PostalCodeExt = state.PostalCodeExt;
            cmd.CountryGeoId = state.CountryGeoId;
            cmd.StateProvinceGeoId = state.StateProvinceGeoId;
            cmd.CountyGeoId = state.CountyGeoId;
            cmd.PostalCodeGeoId = state.PostalCodeGeoId;
            cmd.GeoPointId = state.GeoPointId;
            cmd.CountryCode = state.CountryCode;
            cmd.AreaCode = state.AreaCode;
            cmd.ContactNumber = state.ContactNumber;
            cmd.AskForName = state.AskForName;
            cmd.Active = ((IContactMechStateProperties)state).Active;
            
            if (state.ContactMechTypeId == null) { cmd.IsPropertyContactMechTypeIdRemoved = true; }
            if (state.InfoString == null) { cmd.IsPropertyInfoStringRemoved = true; }
            if (state.ToName == null) { cmd.IsPropertyToNameRemoved = true; }
            if (state.AttnName == null) { cmd.IsPropertyAttnNameRemoved = true; }
            if (state.Address1 == null) { cmd.IsPropertyAddress1Removed = true; }
            if (state.Address2 == null) { cmd.IsPropertyAddress2Removed = true; }
            if (state.Directions == null) { cmd.IsPropertyDirectionsRemoved = true; }
            if (state.City == null) { cmd.IsPropertyCityRemoved = true; }
            if (state.PostalCode == null) { cmd.IsPropertyPostalCodeRemoved = true; }
            if (state.PostalCodeExt == null) { cmd.IsPropertyPostalCodeExtRemoved = true; }
            if (state.CountryGeoId == null) { cmd.IsPropertyCountryGeoIdRemoved = true; }
            if (state.StateProvinceGeoId == null) { cmd.IsPropertyStateProvinceGeoIdRemoved = true; }
            if (state.CountyGeoId == null) { cmd.IsPropertyCountyGeoIdRemoved = true; }
            if (state.PostalCodeGeoId == null) { cmd.IsPropertyPostalCodeGeoIdRemoved = true; }
            if (state.GeoPointId == null) { cmd.IsPropertyGeoPointIdRemoved = true; }
            if (state.CountryCode == null) { cmd.IsPropertyCountryCodeRemoved = true; }
            if (state.AreaCode == null) { cmd.IsPropertyAreaCodeRemoved = true; }
            if (state.ContactNumber == null) { cmd.IsPropertyContactNumberRemoved = true; }
            if (state.AskForName == null) { cmd.IsPropertyAskForNameRemoved = true; }
            return cmd;
        }

        public static TCreateContactMech ToCreateContactMech<TCreateContactMech>(this IContactMechState state)
            where TCreateContactMech : ICreateContactMech, new()
        {
            var cmd = new TCreateContactMech();

            cmd.Version = ((IContactMechStateProperties)state).Version;

            cmd.ContactMechId = state.ContactMechId;
            cmd.ContactMechTypeId = state.ContactMechTypeId;
            cmd.InfoString = state.InfoString;
            cmd.ToName = state.ToName;
            cmd.AttnName = state.AttnName;
            cmd.Address1 = state.Address1;
            cmd.Address2 = state.Address2;
            cmd.Directions = state.Directions;
            cmd.City = state.City;
            cmd.PostalCode = state.PostalCode;
            cmd.PostalCodeExt = state.PostalCodeExt;
            cmd.CountryGeoId = state.CountryGeoId;
            cmd.StateProvinceGeoId = state.StateProvinceGeoId;
            cmd.CountyGeoId = state.CountyGeoId;
            cmd.PostalCodeGeoId = state.PostalCodeGeoId;
            cmd.GeoPointId = state.GeoPointId;
            cmd.CountryCode = state.CountryCode;
            cmd.AreaCode = state.AreaCode;
            cmd.ContactNumber = state.ContactNumber;
            cmd.AskForName = state.AskForName;
            cmd.Active = ((IContactMechStateProperties)state).Active;
            return cmd;
        }
		

	}

}

