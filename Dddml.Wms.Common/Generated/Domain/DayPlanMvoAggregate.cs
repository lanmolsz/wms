// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{
    public partial class DayPlanMvoAggregate : AggregateBase, IDayPlanMvoAggregate
    {

        readonly IDayPlanMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IDayPlanMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        DayPlanId IGlobalIdentity<DayPlanId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public DayPlanMvoAggregate(IDayPlanMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IDayPlanMvoStateProperties)_state).PersonVersion == DayPlanMvoState.VersionZero)
            {
                if (IsCommandCreate((IDayPlanMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IDayPlanMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IDayPlanMvoCommand c)
        {
            return c.PersonVersion == DayPlanMvoState.VersionZero;
        }

        protected virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateDayPlanMvo c)
        {
            IDayPlanMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchDayPlanMvo c)
        {
            IDayPlanMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteDayPlanMvo c)
        {
            IDayPlanMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IDayPlanMvoStateCreated Map(ICreateDayPlanMvo c)
        {
			var stateEventId = new DayPlanMvoStateEventId(c.DayPlanId, c.PersonVersion);
            IDayPlanMvoStateCreated e = NewDayPlanMvoStateCreated(stateEventId);
		
            e.Description = c.Description;
            e.Version = c.Version;
            e.Active = c.Active;
            e.MonthPlanDescription = c.MonthPlanDescription;
            e.MonthPlanVersion = c.MonthPlanVersion;
            e.MonthPlanCreatedBy = c.MonthPlanCreatedBy;
            e.MonthPlanCreatedAt = c.MonthPlanCreatedAt;
            e.MonthPlanUpdatedBy = c.MonthPlanUpdatedBy;
            e.MonthPlanUpdatedAt = c.MonthPlanUpdatedAt;
            e.MonthPlanActive = c.MonthPlanActive;
            e.MonthPlanDeleted = c.MonthPlanDeleted;
            e.YearPlanDescription = c.YearPlanDescription;
            e.YearPlanVersion = c.YearPlanVersion;
            e.YearPlanCreatedBy = c.YearPlanCreatedBy;
            e.YearPlanCreatedAt = c.YearPlanCreatedAt;
            e.YearPlanUpdatedBy = c.YearPlanUpdatedBy;
            e.YearPlanUpdatedAt = c.YearPlanUpdatedAt;
            e.YearPlanActive = c.YearPlanActive;
            e.YearPlanDeleted = c.YearPlanDeleted;
            e.PersonBirthDate = c.PersonBirthDate;
            e.PersonLoves = c.PersonLoves;
            e.PersonEmergencyContact = c.PersonEmergencyContact;
            e.PersonCreatedBy = c.PersonCreatedBy;
            e.PersonCreatedAt = c.PersonCreatedAt;
            e.PersonUpdatedBy = c.PersonUpdatedBy;
            e.PersonUpdatedAt = c.PersonUpdatedAt;
            e.PersonActive = c.PersonActive;
            e.PersonDeleted = c.PersonDeleted;
            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var personVersion = c.PersonVersion;


            return e;
        }

        protected virtual IDayPlanMvoStateMergePatched Map(IMergePatchDayPlanMvo c)
        {
			var stateEventId = new DayPlanMvoStateEventId(c.DayPlanId, c.PersonVersion);
            IDayPlanMvoStateMergePatched e = NewDayPlanMvoStateMergePatched(stateEventId);

            e.Description = c.Description;
            e.Version = c.Version;
            e.Active = c.Active;
            e.MonthPlanDescription = c.MonthPlanDescription;
            e.MonthPlanVersion = c.MonthPlanVersion;
            e.MonthPlanCreatedBy = c.MonthPlanCreatedBy;
            e.MonthPlanCreatedAt = c.MonthPlanCreatedAt;
            e.MonthPlanUpdatedBy = c.MonthPlanUpdatedBy;
            e.MonthPlanUpdatedAt = c.MonthPlanUpdatedAt;
            e.MonthPlanActive = c.MonthPlanActive;
            e.MonthPlanDeleted = c.MonthPlanDeleted;
            e.YearPlanDescription = c.YearPlanDescription;
            e.YearPlanVersion = c.YearPlanVersion;
            e.YearPlanCreatedBy = c.YearPlanCreatedBy;
            e.YearPlanCreatedAt = c.YearPlanCreatedAt;
            e.YearPlanUpdatedBy = c.YearPlanUpdatedBy;
            e.YearPlanUpdatedAt = c.YearPlanUpdatedAt;
            e.YearPlanActive = c.YearPlanActive;
            e.YearPlanDeleted = c.YearPlanDeleted;
            e.PersonBirthDate = c.PersonBirthDate;
            e.PersonLoves = c.PersonLoves;
            e.PersonEmergencyContact = c.PersonEmergencyContact;
            e.PersonCreatedBy = c.PersonCreatedBy;
            e.PersonCreatedAt = c.PersonCreatedAt;
            e.PersonUpdatedBy = c.PersonUpdatedBy;
            e.PersonUpdatedAt = c.PersonUpdatedAt;
            e.PersonActive = c.PersonActive;
            e.PersonDeleted = c.PersonDeleted;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyMonthPlanDescriptionRemoved = c.IsPropertyMonthPlanDescriptionRemoved;
            e.IsPropertyMonthPlanVersionRemoved = c.IsPropertyMonthPlanVersionRemoved;
            e.IsPropertyMonthPlanCreatedByRemoved = c.IsPropertyMonthPlanCreatedByRemoved;
            e.IsPropertyMonthPlanCreatedAtRemoved = c.IsPropertyMonthPlanCreatedAtRemoved;
            e.IsPropertyMonthPlanUpdatedByRemoved = c.IsPropertyMonthPlanUpdatedByRemoved;
            e.IsPropertyMonthPlanUpdatedAtRemoved = c.IsPropertyMonthPlanUpdatedAtRemoved;
            e.IsPropertyMonthPlanActiveRemoved = c.IsPropertyMonthPlanActiveRemoved;
            e.IsPropertyMonthPlanDeletedRemoved = c.IsPropertyMonthPlanDeletedRemoved;
            e.IsPropertyYearPlanDescriptionRemoved = c.IsPropertyYearPlanDescriptionRemoved;
            e.IsPropertyYearPlanVersionRemoved = c.IsPropertyYearPlanVersionRemoved;
            e.IsPropertyYearPlanCreatedByRemoved = c.IsPropertyYearPlanCreatedByRemoved;
            e.IsPropertyYearPlanCreatedAtRemoved = c.IsPropertyYearPlanCreatedAtRemoved;
            e.IsPropertyYearPlanUpdatedByRemoved = c.IsPropertyYearPlanUpdatedByRemoved;
            e.IsPropertyYearPlanUpdatedAtRemoved = c.IsPropertyYearPlanUpdatedAtRemoved;
            e.IsPropertyYearPlanActiveRemoved = c.IsPropertyYearPlanActiveRemoved;
            e.IsPropertyYearPlanDeletedRemoved = c.IsPropertyYearPlanDeletedRemoved;
            e.IsPropertyPersonBirthDateRemoved = c.IsPropertyPersonBirthDateRemoved;
            e.IsPropertyPersonLovesRemoved = c.IsPropertyPersonLovesRemoved;
            e.IsPropertyPersonEmergencyContactRemoved = c.IsPropertyPersonEmergencyContactRemoved;
            e.IsPropertyPersonCreatedByRemoved = c.IsPropertyPersonCreatedByRemoved;
            e.IsPropertyPersonCreatedAtRemoved = c.IsPropertyPersonCreatedAtRemoved;
            e.IsPropertyPersonUpdatedByRemoved = c.IsPropertyPersonUpdatedByRemoved;
            e.IsPropertyPersonUpdatedAtRemoved = c.IsPropertyPersonUpdatedAtRemoved;
            e.IsPropertyPersonActiveRemoved = c.IsPropertyPersonActiveRemoved;
            e.IsPropertyPersonDeletedRemoved = c.IsPropertyPersonDeletedRemoved;

            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var personVersion = c.PersonVersion;


            return e;
        }

        protected virtual IDayPlanMvoStateDeleted Map(IDeleteDayPlanMvo c)
        {
			var stateEventId = new DayPlanMvoStateEventId(c.DayPlanId, c.PersonVersion);
            IDayPlanMvoStateDeleted e = NewDayPlanMvoStateDeleted(stateEventId);
			
            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected DayPlanMvoStateCreated NewDayPlanMvoStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new DayPlanMvoStateEventId(_state.DayPlanId, ((IDayPlanMvoStateProperties)_state).PersonVersion);
            var e = NewDayPlanMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected DayPlanMvoStateMergePatched NewDayPlanMvoStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new DayPlanMvoStateEventId(_state.DayPlanId, ((IDayPlanMvoStateProperties)_state).PersonVersion);
            var e = NewDayPlanMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


        protected DayPlanMvoStateDeleted NewDayPlanMvoStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new DayPlanMvoStateEventId(_state.DayPlanId, ((IDayPlanMvoStateProperties)_state).PersonVersion);
            var e = NewDayPlanMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private DayPlanMvoStateCreated NewDayPlanMvoStateCreated(DayPlanMvoStateEventId stateEventId)
		{
			return new DayPlanMvoStateCreated(stateEventId);			
		}

        private DayPlanMvoStateMergePatched NewDayPlanMvoStateMergePatched(DayPlanMvoStateEventId stateEventId)
		{
			return new DayPlanMvoStateMergePatched(stateEventId);
		}

        private DayPlanMvoStateDeleted NewDayPlanMvoStateDeleted(DayPlanMvoStateEventId stateEventId)
		{
			return new DayPlanMvoStateDeleted(stateEventId);
		}


    }

}

