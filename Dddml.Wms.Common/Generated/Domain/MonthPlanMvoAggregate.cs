// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{
    public partial class MonthPlanMvoAggregate : AggregateBase, IMonthPlanMvoAggregate
    {

        readonly IMonthPlanMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IMonthPlanMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        MonthPlanId IGlobalIdentity<MonthPlanId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public MonthPlanMvoAggregate(IMonthPlanMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IMonthPlanMvoStateProperties)_state).PersonVersion == MonthPlanMvoState.VersionZero)
            {
                if (IsCommandCreate((IMonthPlanMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IMonthPlanMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IMonthPlanMvoCommand c)
        {
            return c.PersonVersion == MonthPlanMvoState.VersionZero;
        }

        protected virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateMonthPlanMvo c)
        {
            IMonthPlanMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchMonthPlanMvo c)
        {
            IMonthPlanMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteMonthPlanMvo c)
        {
            IMonthPlanMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IMonthPlanMvoStateCreated Map(ICreateMonthPlanMvo c)
        {
			var stateEventId = new MonthPlanMvoStateEventId(c.MonthPlanId, c.PersonVersion);
            IMonthPlanMvoStateCreated e = NewMonthPlanMvoStateCreated(stateEventId);
		
            e.Description = c.Description;
            e.Version = c.Version;
            e.Active = c.Active;
            e.YearPlanDescription = c.YearPlanDescription;
            e.YearPlanVersion = c.YearPlanVersion;
            e.YearPlanCreatedBy = c.YearPlanCreatedBy;
            e.YearPlanCreatedAt = c.YearPlanCreatedAt;
            e.YearPlanUpdatedBy = c.YearPlanUpdatedBy;
            e.YearPlanUpdatedAt = c.YearPlanUpdatedAt;
            e.YearPlanActive = c.YearPlanActive;
            e.YearPlanDeleted = c.YearPlanDeleted;
            e.PersonBirthDate = c.PersonBirthDate;
            e.PersonLoves = c.PersonLoves;
            e.PersonEmergencyContact = c.PersonEmergencyContact;
            e.PersonCreatedBy = c.PersonCreatedBy;
            e.PersonCreatedAt = c.PersonCreatedAt;
            e.PersonUpdatedBy = c.PersonUpdatedBy;
            e.PersonUpdatedAt = c.PersonUpdatedAt;
            e.PersonActive = c.PersonActive;
            e.PersonDeleted = c.PersonDeleted;
            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var personVersion = c.PersonVersion;


            return e;
        }

        protected virtual IMonthPlanMvoStateMergePatched Map(IMergePatchMonthPlanMvo c)
        {
			var stateEventId = new MonthPlanMvoStateEventId(c.MonthPlanId, c.PersonVersion);
            IMonthPlanMvoStateMergePatched e = NewMonthPlanMvoStateMergePatched(stateEventId);

            e.Description = c.Description;
            e.Version = c.Version;
            e.Active = c.Active;
            e.YearPlanDescription = c.YearPlanDescription;
            e.YearPlanVersion = c.YearPlanVersion;
            e.YearPlanCreatedBy = c.YearPlanCreatedBy;
            e.YearPlanCreatedAt = c.YearPlanCreatedAt;
            e.YearPlanUpdatedBy = c.YearPlanUpdatedBy;
            e.YearPlanUpdatedAt = c.YearPlanUpdatedAt;
            e.YearPlanActive = c.YearPlanActive;
            e.YearPlanDeleted = c.YearPlanDeleted;
            e.PersonBirthDate = c.PersonBirthDate;
            e.PersonLoves = c.PersonLoves;
            e.PersonEmergencyContact = c.PersonEmergencyContact;
            e.PersonCreatedBy = c.PersonCreatedBy;
            e.PersonCreatedAt = c.PersonCreatedAt;
            e.PersonUpdatedBy = c.PersonUpdatedBy;
            e.PersonUpdatedAt = c.PersonUpdatedAt;
            e.PersonActive = c.PersonActive;
            e.PersonDeleted = c.PersonDeleted;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyYearPlanDescriptionRemoved = c.IsPropertyYearPlanDescriptionRemoved;
            e.IsPropertyYearPlanVersionRemoved = c.IsPropertyYearPlanVersionRemoved;
            e.IsPropertyYearPlanCreatedByRemoved = c.IsPropertyYearPlanCreatedByRemoved;
            e.IsPropertyYearPlanCreatedAtRemoved = c.IsPropertyYearPlanCreatedAtRemoved;
            e.IsPropertyYearPlanUpdatedByRemoved = c.IsPropertyYearPlanUpdatedByRemoved;
            e.IsPropertyYearPlanUpdatedAtRemoved = c.IsPropertyYearPlanUpdatedAtRemoved;
            e.IsPropertyYearPlanActiveRemoved = c.IsPropertyYearPlanActiveRemoved;
            e.IsPropertyYearPlanDeletedRemoved = c.IsPropertyYearPlanDeletedRemoved;
            e.IsPropertyPersonBirthDateRemoved = c.IsPropertyPersonBirthDateRemoved;
            e.IsPropertyPersonLovesRemoved = c.IsPropertyPersonLovesRemoved;
            e.IsPropertyPersonEmergencyContactRemoved = c.IsPropertyPersonEmergencyContactRemoved;
            e.IsPropertyPersonCreatedByRemoved = c.IsPropertyPersonCreatedByRemoved;
            e.IsPropertyPersonCreatedAtRemoved = c.IsPropertyPersonCreatedAtRemoved;
            e.IsPropertyPersonUpdatedByRemoved = c.IsPropertyPersonUpdatedByRemoved;
            e.IsPropertyPersonUpdatedAtRemoved = c.IsPropertyPersonUpdatedAtRemoved;
            e.IsPropertyPersonActiveRemoved = c.IsPropertyPersonActiveRemoved;
            e.IsPropertyPersonDeletedRemoved = c.IsPropertyPersonDeletedRemoved;

            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var personVersion = c.PersonVersion;


            return e;
        }

        protected virtual IMonthPlanMvoStateDeleted Map(IDeleteMonthPlanMvo c)
        {
			var stateEventId = new MonthPlanMvoStateEventId(c.MonthPlanId, c.PersonVersion);
            IMonthPlanMvoStateDeleted e = NewMonthPlanMvoStateDeleted(stateEventId);
			
            ReflectUtils.CopyPropertyValue("CommandId", c, e);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected MonthPlanMvoStateCreated NewMonthPlanMvoStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new MonthPlanMvoStateEventId(_state.MonthPlanId, ((IMonthPlanMvoStateProperties)_state).PersonVersion);
            var e = NewMonthPlanMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected MonthPlanMvoStateMergePatched NewMonthPlanMvoStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new MonthPlanMvoStateEventId(_state.MonthPlanId, ((IMonthPlanMvoStateProperties)_state).PersonVersion);
            var e = NewMonthPlanMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


        protected MonthPlanMvoStateDeleted NewMonthPlanMvoStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new MonthPlanMvoStateEventId(_state.MonthPlanId, ((IMonthPlanMvoStateProperties)_state).PersonVersion);
            var e = NewMonthPlanMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private MonthPlanMvoStateCreated NewMonthPlanMvoStateCreated(MonthPlanMvoStateEventId stateEventId)
		{
			return new MonthPlanMvoStateCreated(stateEventId);			
		}

        private MonthPlanMvoStateMergePatched NewMonthPlanMvoStateMergePatched(MonthPlanMvoStateEventId stateEventId)
		{
			return new MonthPlanMvoStateMergePatched(stateEventId);
		}

        private MonthPlanMvoStateDeleted NewMonthPlanMvoStateDeleted(MonthPlanMvoStateEventId stateEventId)
		{
			return new MonthPlanMvoStateDeleted(stateEventId);
		}


    }

}

