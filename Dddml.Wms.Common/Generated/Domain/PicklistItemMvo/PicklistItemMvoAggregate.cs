// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistItemMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PicklistItemMvo;
using Dddml.Wms.Domain.PicklistBin;

namespace Dddml.Wms.Domain.PicklistItemMvo
{
    public partial class PicklistItemMvoAggregate : AggregateBase, IPicklistItemMvoAggregate
    {

        readonly IPicklistItemMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IPicklistItemMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        PicklistBinPicklistItemId IGlobalIdentity<PicklistBinPicklistItemId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public PicklistItemMvoAggregate(IPicklistItemMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IPicklistItemMvoStateProperties)_state).PicklistBinVersion == PicklistItemMvoState.VersionZero)
            {
                if (IsCommandCreate((IPicklistItemMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IPicklistItemMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IPicklistItemMvoCommand c)
        {
            return c.PicklistBinVersion == PicklistItemMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreatePicklistItemMvo c)
        {
            IPicklistItemMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchPicklistItemMvo c)
        {
            IPicklistItemMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeletePicklistItemMvo c)
        {
            IPicklistItemMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IPicklistItemMvoStateCreated Map(ICreatePicklistItemMvo c)
        {
			var stateEventId = new PicklistItemMvoEventId(c.PicklistBinPicklistItemId, c.PicklistBinVersion);
            IPicklistItemMvoStateCreated e = NewPicklistItemMvoStateCreated(stateEventId);
		
            e.ItemStatusId = c.ItemStatusId;
            e.Quantity = c.Quantity;
            e.Version = c.Version;
            e.Active = c.Active;
            e.PicklistBinPicklistId = c.PicklistBinPicklistId;
            e.PicklistBinBinLocationNumber = c.PicklistBinBinLocationNumber;
            e.PicklistBinPrimaryOrderId = c.PicklistBinPrimaryOrderId;
            e.PicklistBinPrimaryShipGroupSeqId = c.PicklistBinPrimaryShipGroupSeqId;
            e.PicklistBinCreatedBy = c.PicklistBinCreatedBy;
            e.PicklistBinCreatedAt = c.PicklistBinCreatedAt;
            e.PicklistBinUpdatedBy = c.PicklistBinUpdatedBy;
            e.PicklistBinUpdatedAt = c.PicklistBinUpdatedAt;
            e.PicklistBinActive = c.PicklistBinActive;
            e.PicklistBinDeleted = c.PicklistBinDeleted;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var picklistBinVersion = c.PicklistBinVersion;


            return e;
        }

        protected virtual IPicklistItemMvoStateMergePatched Map(IMergePatchPicklistItemMvo c)
        {
			var stateEventId = new PicklistItemMvoEventId(c.PicklistBinPicklistItemId, c.PicklistBinVersion);
            IPicklistItemMvoStateMergePatched e = NewPicklistItemMvoStateMergePatched(stateEventId);

            e.ItemStatusId = c.ItemStatusId;
            e.Quantity = c.Quantity;
            e.Version = c.Version;
            e.Active = c.Active;
            e.PicklistBinPicklistId = c.PicklistBinPicklistId;
            e.PicklistBinBinLocationNumber = c.PicklistBinBinLocationNumber;
            e.PicklistBinPrimaryOrderId = c.PicklistBinPrimaryOrderId;
            e.PicklistBinPrimaryShipGroupSeqId = c.PicklistBinPrimaryShipGroupSeqId;
            e.PicklistBinCreatedBy = c.PicklistBinCreatedBy;
            e.PicklistBinCreatedAt = c.PicklistBinCreatedAt;
            e.PicklistBinUpdatedBy = c.PicklistBinUpdatedBy;
            e.PicklistBinUpdatedAt = c.PicklistBinUpdatedAt;
            e.PicklistBinActive = c.PicklistBinActive;
            e.PicklistBinDeleted = c.PicklistBinDeleted;
            e.IsPropertyItemStatusIdRemoved = c.IsPropertyItemStatusIdRemoved;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyPicklistBinPicklistIdRemoved = c.IsPropertyPicklistBinPicklistIdRemoved;
            e.IsPropertyPicklistBinBinLocationNumberRemoved = c.IsPropertyPicklistBinBinLocationNumberRemoved;
            e.IsPropertyPicklistBinPrimaryOrderIdRemoved = c.IsPropertyPicklistBinPrimaryOrderIdRemoved;
            e.IsPropertyPicklistBinPrimaryShipGroupSeqIdRemoved = c.IsPropertyPicklistBinPrimaryShipGroupSeqIdRemoved;
            e.IsPropertyPicklistBinCreatedByRemoved = c.IsPropertyPicklistBinCreatedByRemoved;
            e.IsPropertyPicklistBinCreatedAtRemoved = c.IsPropertyPicklistBinCreatedAtRemoved;
            e.IsPropertyPicklistBinUpdatedByRemoved = c.IsPropertyPicklistBinUpdatedByRemoved;
            e.IsPropertyPicklistBinUpdatedAtRemoved = c.IsPropertyPicklistBinUpdatedAtRemoved;
            e.IsPropertyPicklistBinActiveRemoved = c.IsPropertyPicklistBinActiveRemoved;
            e.IsPropertyPicklistBinDeletedRemoved = c.IsPropertyPicklistBinDeletedRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var picklistBinVersion = c.PicklistBinVersion;


            return e;
        }

        protected virtual IPicklistItemMvoStateDeleted Map(IDeletePicklistItemMvo c)
        {
			var stateEventId = new PicklistItemMvoEventId(c.PicklistBinPicklistItemId, c.PicklistBinVersion);
            IPicklistItemMvoStateDeleted e = NewPicklistItemMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected PicklistItemMvoStateCreated NewPicklistItemMvoStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new PicklistItemMvoEventId(_state.PicklistBinPicklistItemId, version);
            var e = NewPicklistItemMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected PicklistItemMvoStateMergePatched NewPicklistItemMvoStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new PicklistItemMvoEventId(_state.PicklistBinPicklistItemId, version);
            var e = NewPicklistItemMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected PicklistItemMvoStateDeleted NewPicklistItemMvoStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new PicklistItemMvoEventId(_state.PicklistBinPicklistItemId, version);
            var e = NewPicklistItemMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private PicklistItemMvoStateCreated NewPicklistItemMvoStateCreated(PicklistItemMvoEventId stateEventId)
		{
			return new PicklistItemMvoStateCreated(stateEventId);			
		}

        private PicklistItemMvoStateMergePatched NewPicklistItemMvoStateMergePatched(PicklistItemMvoEventId stateEventId)
		{
			return new PicklistItemMvoStateMergePatched(stateEventId);
		}

        private PicklistItemMvoStateDeleted NewPicklistItemMvoStateDeleted(PicklistItemMvoEventId stateEventId)
		{
			return new PicklistItemMvoStateDeleted(stateEventId);
		}
    }

}

