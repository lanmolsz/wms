// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistItemMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PicklistItemMvo;
using Dddml.Wms.Domain.PicklistBin;

namespace Dddml.Wms.Domain.PicklistItemMvo
{

	public partial class PicklistItemMvoState : PicklistItemMvoStateProperties, IPicklistItemMvoState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		PicklistBinPicklistItemId IGlobalIdentity<PicklistBinPicklistItemId>.GlobalId
		{
			get
			{
				return this.PicklistBinPicklistItemId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.PicklistBinVersion;
			}
		}


		#endregion

        bool IPicklistItemMvoState.IsUnsaved
        {
            get { return this.PicklistBinVersion == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public PicklistItemMvoState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.PicklistBinPicklistItemId = ((IPicklistItemMvoEvent)events.First()).PicklistItemMvoEventId.PicklistBinPicklistItemId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.PicklistBinVersion += 1;
                }
            }
        }

        public PicklistItemMvoState() : this(false)
        {
        }

        public PicklistItemMvoState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IPicklistItemMvoStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.ItemStatusId = e.ItemStatusId;

			this.Quantity = e.Quantity;

            this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.PicklistBinPicklistId = e.PicklistBinPicklistId;

			this.PicklistBinBinLocationNumber = e.PicklistBinBinLocationNumber;

			this.PicklistBinPrimaryOrderId = e.PicklistBinPrimaryOrderId;

			this.PicklistBinPrimaryShipGroupSeqId = e.PicklistBinPrimaryShipGroupSeqId;

			this.PicklistBinCreatedBy = e.PicklistBinCreatedBy;

            this.PicklistBinCreatedAt = (e.PicklistBinCreatedAt != null && e.PicklistBinCreatedAt.HasValue) ? e.PicklistBinCreatedAt.Value : default(DateTime);

			this.PicklistBinUpdatedBy = e.PicklistBinUpdatedBy;

            this.PicklistBinUpdatedAt = (e.PicklistBinUpdatedAt != null && e.PicklistBinUpdatedAt.HasValue) ? e.PicklistBinUpdatedAt.Value : default(DateTime);

            this.PicklistBinActive = (e.PicklistBinActive != null && e.PicklistBinActive.HasValue) ? e.PicklistBinActive.Value : default(bool);

            this.PicklistBinDeleted = (e.PicklistBinDeleted != null && e.PicklistBinDeleted.HasValue) ? e.PicklistBinDeleted.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IPicklistItemMvoStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.ItemStatusId == null)
			{
				if (e.IsPropertyItemStatusIdRemoved)
				{
					this.ItemStatusId = default(string);
				}
			}
			else
			{
				this.ItemStatusId = e.ItemStatusId;
			}

			if (e.Quantity == null)
			{
				if (e.IsPropertyQuantityRemoved)
				{
					this.Quantity = default(decimal?);
				}
			}
			else
			{
				this.Quantity = e.Quantity;
			}

			if (e.Version == null)
			{
				if (e.IsPropertyVersionRemoved)
				{
					this.Version = default(long);
				}
			}
			else
			{
				this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}

			if (e.PicklistBinPicklistId == null)
			{
				if (e.IsPropertyPicklistBinPicklistIdRemoved)
				{
					this.PicklistBinPicklistId = default(string);
				}
			}
			else
			{
				this.PicklistBinPicklistId = e.PicklistBinPicklistId;
			}

			if (e.PicklistBinBinLocationNumber == null)
			{
				if (e.IsPropertyPicklistBinBinLocationNumberRemoved)
				{
					this.PicklistBinBinLocationNumber = default(long?);
				}
			}
			else
			{
				this.PicklistBinBinLocationNumber = e.PicklistBinBinLocationNumber;
			}

			if (e.PicklistBinPrimaryOrderId == null)
			{
				if (e.IsPropertyPicklistBinPrimaryOrderIdRemoved)
				{
					this.PicklistBinPrimaryOrderId = default(string);
				}
			}
			else
			{
				this.PicklistBinPrimaryOrderId = e.PicklistBinPrimaryOrderId;
			}

			if (e.PicklistBinPrimaryShipGroupSeqId == null)
			{
				if (e.IsPropertyPicklistBinPrimaryShipGroupSeqIdRemoved)
				{
					this.PicklistBinPrimaryShipGroupSeqId = default(long?);
				}
			}
			else
			{
				this.PicklistBinPrimaryShipGroupSeqId = e.PicklistBinPrimaryShipGroupSeqId;
			}

			if (e.PicklistBinCreatedBy == null)
			{
				if (e.IsPropertyPicklistBinCreatedByRemoved)
				{
					this.PicklistBinCreatedBy = default(string);
				}
			}
			else
			{
				this.PicklistBinCreatedBy = e.PicklistBinCreatedBy;
			}

			if (e.PicklistBinCreatedAt == null)
			{
				if (e.IsPropertyPicklistBinCreatedAtRemoved)
				{
					this.PicklistBinCreatedAt = default(DateTime);
				}
			}
			else
			{
				this.PicklistBinCreatedAt = (e.PicklistBinCreatedAt != null && e.PicklistBinCreatedAt.HasValue) ? e.PicklistBinCreatedAt.Value : default(DateTime);
			}

			if (e.PicklistBinUpdatedBy == null)
			{
				if (e.IsPropertyPicklistBinUpdatedByRemoved)
				{
					this.PicklistBinUpdatedBy = default(string);
				}
			}
			else
			{
				this.PicklistBinUpdatedBy = e.PicklistBinUpdatedBy;
			}

			if (e.PicklistBinUpdatedAt == null)
			{
				if (e.IsPropertyPicklistBinUpdatedAtRemoved)
				{
					this.PicklistBinUpdatedAt = default(DateTime);
				}
			}
			else
			{
				this.PicklistBinUpdatedAt = (e.PicklistBinUpdatedAt != null && e.PicklistBinUpdatedAt.HasValue) ? e.PicklistBinUpdatedAt.Value : default(DateTime);
			}

			if (e.PicklistBinActive == null)
			{
				if (e.IsPropertyPicklistBinActiveRemoved)
				{
					this.PicklistBinActive = default(bool);
				}
			}
			else
			{
				this.PicklistBinActive = (e.PicklistBinActive != null && e.PicklistBinActive.HasValue) ? e.PicklistBinActive.Value : default(bool);
			}

			if (e.PicklistBinDeleted == null)
			{
				if (e.IsPropertyPicklistBinDeletedRemoved)
				{
					this.PicklistBinDeleted = default(bool);
				}
			}
			else
			{
				this.PicklistBinDeleted = (e.PicklistBinDeleted != null && e.PicklistBinDeleted.HasValue) ? e.PicklistBinDeleted.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}

		public virtual void When(IPicklistItemMvoStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IPicklistItemMvoEvent e)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("PicklistItemMvo|");

            var stateEntityId = this.PicklistBinPicklistItemId; // Aggregate Id
            var eventEntityId = e.PicklistItemMvoEventId.PicklistBinPicklistItemId;
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.PicklistBinVersion;
            var eventVersion = e.PicklistItemMvoEventId.PicklistBinVersion;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

