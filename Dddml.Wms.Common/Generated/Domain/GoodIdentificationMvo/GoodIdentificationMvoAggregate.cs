// <autogenerated>
//   This file was generated by T4 code generator GenerateGoodIdentificationMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.GoodIdentificationMvo;
using Dddml.Wms.Domain.Product;

namespace Dddml.Wms.Domain.GoodIdentificationMvo
{
    public partial class GoodIdentificationMvoAggregate : AggregateBase, IGoodIdentificationMvoAggregate
    {

        readonly IGoodIdentificationMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IGoodIdentificationMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        ProductGoodIdentificationId IGlobalIdentity<ProductGoodIdentificationId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public GoodIdentificationMvoAggregate(IGoodIdentificationMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IGoodIdentificationMvoStateProperties)_state).ProductVersion == GoodIdentificationMvoState.VersionZero)
            {
                if (IsCommandCreate((IGoodIdentificationMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IGoodIdentificationMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IGoodIdentificationMvoCommand c)
        {
            return c.ProductVersion == GoodIdentificationMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateGoodIdentificationMvo c)
        {
            IGoodIdentificationMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchGoodIdentificationMvo c)
        {
            IGoodIdentificationMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteGoodIdentificationMvo c)
        {
            IGoodIdentificationMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IGoodIdentificationMvoStateCreated Map(ICreateGoodIdentificationMvo c)
        {
			var stateEventId = new GoodIdentificationMvoEventId(c.ProductGoodIdentificationId, c.ProductVersion);
            IGoodIdentificationMvoStateCreated e = NewGoodIdentificationMvoStateCreated(stateEventId);
		
            e.IdValue = c.IdValue;
            e.Version = c.Version;
            e.Active = c.Active;
            e.ProductProductTypeId = c.ProductProductTypeId;
            e.ProductPrimaryProductCategoryId = c.ProductPrimaryProductCategoryId;
            e.ProductManufacturerPartyId = c.ProductManufacturerPartyId;
            e.ProductFacilityId = c.ProductFacilityId;
            e.ProductIntroductionDate = c.ProductIntroductionDate;
            e.ProductReleaseDate = c.ProductReleaseDate;
            e.ProductSupportDiscontinuationDate = c.ProductSupportDiscontinuationDate;
            e.ProductSalesDiscontinuationDate = c.ProductSalesDiscontinuationDate;
            e.ProductSalesDiscWhenNotAvail = c.ProductSalesDiscWhenNotAvail;
            e.ProductInternalName = c.ProductInternalName;
            e.ProductBrandName = c.ProductBrandName;
            e.ProductComments = c.ProductComments;
            e.ProductProductName = c.ProductProductName;
            e.ProductDescription = c.ProductDescription;
            e.ProductPriceDetailText = c.ProductPriceDetailText;
            e.ProductSmallImageUrl = c.ProductSmallImageUrl;
            e.ProductMediumImageUrl = c.ProductMediumImageUrl;
            e.ProductLargeImageUrl = c.ProductLargeImageUrl;
            e.ProductDetailImageUrl = c.ProductDetailImageUrl;
            e.ProductOriginalImageUrl = c.ProductOriginalImageUrl;
            e.ProductDetailScreen = c.ProductDetailScreen;
            e.ProductInventoryMessage = c.ProductInventoryMessage;
            e.ProductInventoryItemTypeId = c.ProductInventoryItemTypeId;
            e.ProductRequireInventory = c.ProductRequireInventory;
            e.ProductQuantityUomId = c.ProductQuantityUomId;
            e.ProductQuantityIncluded = c.ProductQuantityIncluded;
            e.ProductPiecesIncluded = c.ProductPiecesIncluded;
            e.ProductRequireAmount = c.ProductRequireAmount;
            e.ProductFixedAmount = c.ProductFixedAmount;
            e.ProductAmountUomTypeId = c.ProductAmountUomTypeId;
            e.ProductWeightUomId = c.ProductWeightUomId;
            e.ProductShippingWeight = c.ProductShippingWeight;
            e.ProductProductWeight = c.ProductProductWeight;
            e.ProductHeightUomId = c.ProductHeightUomId;
            e.ProductProductHeight = c.ProductProductHeight;
            e.ProductShippingHeight = c.ProductShippingHeight;
            e.ProductWidthUomId = c.ProductWidthUomId;
            e.ProductProductWidth = c.ProductProductWidth;
            e.ProductShippingWidth = c.ProductShippingWidth;
            e.ProductDepthUomId = c.ProductDepthUomId;
            e.ProductProductDepth = c.ProductProductDepth;
            e.ProductShippingDepth = c.ProductShippingDepth;
            e.ProductDiameterUomId = c.ProductDiameterUomId;
            e.ProductProductDiameter = c.ProductProductDiameter;
            e.ProductProductRating = c.ProductProductRating;
            e.ProductRatingTypeEnum = c.ProductRatingTypeEnum;
            e.ProductReturnable = c.ProductReturnable;
            e.ProductTaxable = c.ProductTaxable;
            e.ProductChargeShipping = c.ProductChargeShipping;
            e.ProductAutoCreateKeywords = c.ProductAutoCreateKeywords;
            e.ProductIncludeInPromotions = c.ProductIncludeInPromotions;
            e.ProductIsVirtual = c.ProductIsVirtual;
            e.ProductIsVariant = c.ProductIsVariant;
            e.ProductVirtualVariantMethodEnum = c.ProductVirtualVariantMethodEnum;
            e.ProductInShippingBox = c.ProductInShippingBox;
            e.ProductDefaultShipmentBoxTypeId = c.ProductDefaultShipmentBoxTypeId;
            e.ProductIsSerialNumbered = c.ProductIsSerialNumbered;
            e.ProductIsManagedByLot = c.ProductIsManagedByLot;
            e.ProductAttributeSetId = c.ProductAttributeSetId;
            e.ProductAttributeSetInstanceId = c.ProductAttributeSetInstanceId;
            e.ProductCreatedBy = c.ProductCreatedBy;
            e.ProductCreatedAt = c.ProductCreatedAt;
            e.ProductUpdatedBy = c.ProductUpdatedBy;
            e.ProductUpdatedAt = c.ProductUpdatedAt;
            e.ProductActive = c.ProductActive;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var productVersion = c.ProductVersion;


            return e;
        }

        protected virtual IGoodIdentificationMvoStateMergePatched Map(IMergePatchGoodIdentificationMvo c)
        {
			var stateEventId = new GoodIdentificationMvoEventId(c.ProductGoodIdentificationId, c.ProductVersion);
            IGoodIdentificationMvoStateMergePatched e = NewGoodIdentificationMvoStateMergePatched(stateEventId);

            e.IdValue = c.IdValue;
            e.Version = c.Version;
            e.Active = c.Active;
            e.ProductProductTypeId = c.ProductProductTypeId;
            e.ProductPrimaryProductCategoryId = c.ProductPrimaryProductCategoryId;
            e.ProductManufacturerPartyId = c.ProductManufacturerPartyId;
            e.ProductFacilityId = c.ProductFacilityId;
            e.ProductIntroductionDate = c.ProductIntroductionDate;
            e.ProductReleaseDate = c.ProductReleaseDate;
            e.ProductSupportDiscontinuationDate = c.ProductSupportDiscontinuationDate;
            e.ProductSalesDiscontinuationDate = c.ProductSalesDiscontinuationDate;
            e.ProductSalesDiscWhenNotAvail = c.ProductSalesDiscWhenNotAvail;
            e.ProductInternalName = c.ProductInternalName;
            e.ProductBrandName = c.ProductBrandName;
            e.ProductComments = c.ProductComments;
            e.ProductProductName = c.ProductProductName;
            e.ProductDescription = c.ProductDescription;
            e.ProductPriceDetailText = c.ProductPriceDetailText;
            e.ProductSmallImageUrl = c.ProductSmallImageUrl;
            e.ProductMediumImageUrl = c.ProductMediumImageUrl;
            e.ProductLargeImageUrl = c.ProductLargeImageUrl;
            e.ProductDetailImageUrl = c.ProductDetailImageUrl;
            e.ProductOriginalImageUrl = c.ProductOriginalImageUrl;
            e.ProductDetailScreen = c.ProductDetailScreen;
            e.ProductInventoryMessage = c.ProductInventoryMessage;
            e.ProductInventoryItemTypeId = c.ProductInventoryItemTypeId;
            e.ProductRequireInventory = c.ProductRequireInventory;
            e.ProductQuantityUomId = c.ProductQuantityUomId;
            e.ProductQuantityIncluded = c.ProductQuantityIncluded;
            e.ProductPiecesIncluded = c.ProductPiecesIncluded;
            e.ProductRequireAmount = c.ProductRequireAmount;
            e.ProductFixedAmount = c.ProductFixedAmount;
            e.ProductAmountUomTypeId = c.ProductAmountUomTypeId;
            e.ProductWeightUomId = c.ProductWeightUomId;
            e.ProductShippingWeight = c.ProductShippingWeight;
            e.ProductProductWeight = c.ProductProductWeight;
            e.ProductHeightUomId = c.ProductHeightUomId;
            e.ProductProductHeight = c.ProductProductHeight;
            e.ProductShippingHeight = c.ProductShippingHeight;
            e.ProductWidthUomId = c.ProductWidthUomId;
            e.ProductProductWidth = c.ProductProductWidth;
            e.ProductShippingWidth = c.ProductShippingWidth;
            e.ProductDepthUomId = c.ProductDepthUomId;
            e.ProductProductDepth = c.ProductProductDepth;
            e.ProductShippingDepth = c.ProductShippingDepth;
            e.ProductDiameterUomId = c.ProductDiameterUomId;
            e.ProductProductDiameter = c.ProductProductDiameter;
            e.ProductProductRating = c.ProductProductRating;
            e.ProductRatingTypeEnum = c.ProductRatingTypeEnum;
            e.ProductReturnable = c.ProductReturnable;
            e.ProductTaxable = c.ProductTaxable;
            e.ProductChargeShipping = c.ProductChargeShipping;
            e.ProductAutoCreateKeywords = c.ProductAutoCreateKeywords;
            e.ProductIncludeInPromotions = c.ProductIncludeInPromotions;
            e.ProductIsVirtual = c.ProductIsVirtual;
            e.ProductIsVariant = c.ProductIsVariant;
            e.ProductVirtualVariantMethodEnum = c.ProductVirtualVariantMethodEnum;
            e.ProductInShippingBox = c.ProductInShippingBox;
            e.ProductDefaultShipmentBoxTypeId = c.ProductDefaultShipmentBoxTypeId;
            e.ProductIsSerialNumbered = c.ProductIsSerialNumbered;
            e.ProductIsManagedByLot = c.ProductIsManagedByLot;
            e.ProductAttributeSetId = c.ProductAttributeSetId;
            e.ProductAttributeSetInstanceId = c.ProductAttributeSetInstanceId;
            e.ProductCreatedBy = c.ProductCreatedBy;
            e.ProductCreatedAt = c.ProductCreatedAt;
            e.ProductUpdatedBy = c.ProductUpdatedBy;
            e.ProductUpdatedAt = c.ProductUpdatedAt;
            e.ProductActive = c.ProductActive;
            e.IsPropertyIdValueRemoved = c.IsPropertyIdValueRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyProductProductTypeIdRemoved = c.IsPropertyProductProductTypeIdRemoved;
            e.IsPropertyProductPrimaryProductCategoryIdRemoved = c.IsPropertyProductPrimaryProductCategoryIdRemoved;
            e.IsPropertyProductManufacturerPartyIdRemoved = c.IsPropertyProductManufacturerPartyIdRemoved;
            e.IsPropertyProductFacilityIdRemoved = c.IsPropertyProductFacilityIdRemoved;
            e.IsPropertyProductIntroductionDateRemoved = c.IsPropertyProductIntroductionDateRemoved;
            e.IsPropertyProductReleaseDateRemoved = c.IsPropertyProductReleaseDateRemoved;
            e.IsPropertyProductSupportDiscontinuationDateRemoved = c.IsPropertyProductSupportDiscontinuationDateRemoved;
            e.IsPropertyProductSalesDiscontinuationDateRemoved = c.IsPropertyProductSalesDiscontinuationDateRemoved;
            e.IsPropertyProductSalesDiscWhenNotAvailRemoved = c.IsPropertyProductSalesDiscWhenNotAvailRemoved;
            e.IsPropertyProductInternalNameRemoved = c.IsPropertyProductInternalNameRemoved;
            e.IsPropertyProductBrandNameRemoved = c.IsPropertyProductBrandNameRemoved;
            e.IsPropertyProductCommentsRemoved = c.IsPropertyProductCommentsRemoved;
            e.IsPropertyProductProductNameRemoved = c.IsPropertyProductProductNameRemoved;
            e.IsPropertyProductDescriptionRemoved = c.IsPropertyProductDescriptionRemoved;
            e.IsPropertyProductPriceDetailTextRemoved = c.IsPropertyProductPriceDetailTextRemoved;
            e.IsPropertyProductSmallImageUrlRemoved = c.IsPropertyProductSmallImageUrlRemoved;
            e.IsPropertyProductMediumImageUrlRemoved = c.IsPropertyProductMediumImageUrlRemoved;
            e.IsPropertyProductLargeImageUrlRemoved = c.IsPropertyProductLargeImageUrlRemoved;
            e.IsPropertyProductDetailImageUrlRemoved = c.IsPropertyProductDetailImageUrlRemoved;
            e.IsPropertyProductOriginalImageUrlRemoved = c.IsPropertyProductOriginalImageUrlRemoved;
            e.IsPropertyProductDetailScreenRemoved = c.IsPropertyProductDetailScreenRemoved;
            e.IsPropertyProductInventoryMessageRemoved = c.IsPropertyProductInventoryMessageRemoved;
            e.IsPropertyProductInventoryItemTypeIdRemoved = c.IsPropertyProductInventoryItemTypeIdRemoved;
            e.IsPropertyProductRequireInventoryRemoved = c.IsPropertyProductRequireInventoryRemoved;
            e.IsPropertyProductQuantityUomIdRemoved = c.IsPropertyProductQuantityUomIdRemoved;
            e.IsPropertyProductQuantityIncludedRemoved = c.IsPropertyProductQuantityIncludedRemoved;
            e.IsPropertyProductPiecesIncludedRemoved = c.IsPropertyProductPiecesIncludedRemoved;
            e.IsPropertyProductRequireAmountRemoved = c.IsPropertyProductRequireAmountRemoved;
            e.IsPropertyProductFixedAmountRemoved = c.IsPropertyProductFixedAmountRemoved;
            e.IsPropertyProductAmountUomTypeIdRemoved = c.IsPropertyProductAmountUomTypeIdRemoved;
            e.IsPropertyProductWeightUomIdRemoved = c.IsPropertyProductWeightUomIdRemoved;
            e.IsPropertyProductShippingWeightRemoved = c.IsPropertyProductShippingWeightRemoved;
            e.IsPropertyProductProductWeightRemoved = c.IsPropertyProductProductWeightRemoved;
            e.IsPropertyProductHeightUomIdRemoved = c.IsPropertyProductHeightUomIdRemoved;
            e.IsPropertyProductProductHeightRemoved = c.IsPropertyProductProductHeightRemoved;
            e.IsPropertyProductShippingHeightRemoved = c.IsPropertyProductShippingHeightRemoved;
            e.IsPropertyProductWidthUomIdRemoved = c.IsPropertyProductWidthUomIdRemoved;
            e.IsPropertyProductProductWidthRemoved = c.IsPropertyProductProductWidthRemoved;
            e.IsPropertyProductShippingWidthRemoved = c.IsPropertyProductShippingWidthRemoved;
            e.IsPropertyProductDepthUomIdRemoved = c.IsPropertyProductDepthUomIdRemoved;
            e.IsPropertyProductProductDepthRemoved = c.IsPropertyProductProductDepthRemoved;
            e.IsPropertyProductShippingDepthRemoved = c.IsPropertyProductShippingDepthRemoved;
            e.IsPropertyProductDiameterUomIdRemoved = c.IsPropertyProductDiameterUomIdRemoved;
            e.IsPropertyProductProductDiameterRemoved = c.IsPropertyProductProductDiameterRemoved;
            e.IsPropertyProductProductRatingRemoved = c.IsPropertyProductProductRatingRemoved;
            e.IsPropertyProductRatingTypeEnumRemoved = c.IsPropertyProductRatingTypeEnumRemoved;
            e.IsPropertyProductReturnableRemoved = c.IsPropertyProductReturnableRemoved;
            e.IsPropertyProductTaxableRemoved = c.IsPropertyProductTaxableRemoved;
            e.IsPropertyProductChargeShippingRemoved = c.IsPropertyProductChargeShippingRemoved;
            e.IsPropertyProductAutoCreateKeywordsRemoved = c.IsPropertyProductAutoCreateKeywordsRemoved;
            e.IsPropertyProductIncludeInPromotionsRemoved = c.IsPropertyProductIncludeInPromotionsRemoved;
            e.IsPropertyProductIsVirtualRemoved = c.IsPropertyProductIsVirtualRemoved;
            e.IsPropertyProductIsVariantRemoved = c.IsPropertyProductIsVariantRemoved;
            e.IsPropertyProductVirtualVariantMethodEnumRemoved = c.IsPropertyProductVirtualVariantMethodEnumRemoved;
            e.IsPropertyProductInShippingBoxRemoved = c.IsPropertyProductInShippingBoxRemoved;
            e.IsPropertyProductDefaultShipmentBoxTypeIdRemoved = c.IsPropertyProductDefaultShipmentBoxTypeIdRemoved;
            e.IsPropertyProductIsSerialNumberedRemoved = c.IsPropertyProductIsSerialNumberedRemoved;
            e.IsPropertyProductIsManagedByLotRemoved = c.IsPropertyProductIsManagedByLotRemoved;
            e.IsPropertyProductAttributeSetIdRemoved = c.IsPropertyProductAttributeSetIdRemoved;
            e.IsPropertyProductAttributeSetInstanceIdRemoved = c.IsPropertyProductAttributeSetInstanceIdRemoved;
            e.IsPropertyProductCreatedByRemoved = c.IsPropertyProductCreatedByRemoved;
            e.IsPropertyProductCreatedAtRemoved = c.IsPropertyProductCreatedAtRemoved;
            e.IsPropertyProductUpdatedByRemoved = c.IsPropertyProductUpdatedByRemoved;
            e.IsPropertyProductUpdatedAtRemoved = c.IsPropertyProductUpdatedAtRemoved;
            e.IsPropertyProductActiveRemoved = c.IsPropertyProductActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var productVersion = c.ProductVersion;


            return e;
        }

        protected virtual IGoodIdentificationMvoStateDeleted Map(IDeleteGoodIdentificationMvo c)
        {
			var stateEventId = new GoodIdentificationMvoEventId(c.ProductGoodIdentificationId, c.ProductVersion);
            IGoodIdentificationMvoStateDeleted e = NewGoodIdentificationMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected GoodIdentificationMvoStateCreated NewGoodIdentificationMvoStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new GoodIdentificationMvoEventId(_state.ProductGoodIdentificationId, version);
            var e = NewGoodIdentificationMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected GoodIdentificationMvoStateMergePatched NewGoodIdentificationMvoStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new GoodIdentificationMvoEventId(_state.ProductGoodIdentificationId, version);
            var e = NewGoodIdentificationMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected GoodIdentificationMvoStateDeleted NewGoodIdentificationMvoStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new GoodIdentificationMvoEventId(_state.ProductGoodIdentificationId, version);
            var e = NewGoodIdentificationMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private GoodIdentificationMvoStateCreated NewGoodIdentificationMvoStateCreated(GoodIdentificationMvoEventId stateEventId)
		{
			return new GoodIdentificationMvoStateCreated(stateEventId);			
		}

        private GoodIdentificationMvoStateMergePatched NewGoodIdentificationMvoStateMergePatched(GoodIdentificationMvoEventId stateEventId)
		{
			return new GoodIdentificationMvoStateMergePatched(stateEventId);
		}

        private GoodIdentificationMvoStateDeleted NewGoodIdentificationMvoStateDeleted(GoodIdentificationMvoEventId stateEventId)
		{
			return new GoodIdentificationMvoStateDeleted(stateEventId);
		}
    }

}

