// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryPostingRuleDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryPostingRule;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryPostingRule
{

	public abstract class InventoryPostingRuleCommandDtoBase : ICommandDto, ICreateInventoryPostingRule, IMergePatchInventoryPostingRule, IDeleteInventoryPostingRule
	{

		string IAggregateCommand<string, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteInventoryPostingRule)this).InventoryPostingRuleId;
			}
		}


		long IAggregateCommand<string, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string InventoryPostingRuleId { get; set; }


		public virtual InventoryItemIdDto TriggerInventoryItemId { get; set; }

        InventoryItemId ICreateOrMergePatchOrDeleteInventoryPostingRule.TriggerInventoryItemId
        {
            get 
            {
                return (this.TriggerInventoryItemId == null) ? null : this.TriggerInventoryItemId.ToInventoryItemId();
            }
            set 
            {
                this.TriggerInventoryItemId = (value == null) ? null : new InventoryItemIdDtoWrapper(value);
            }
        }


		public virtual InventoryItemIdDto OutputInventoryItemId { get; set; }

        InventoryItemId ICreateOrMergePatchOrDeleteInventoryPostingRule.OutputInventoryItemId
        {
            get 
            {
                return (this.OutputInventoryItemId == null) ? null : this.OutputInventoryItemId.ToInventoryItemId();
            }
            set 
            {
                this.OutputInventoryItemId = (value == null) ? null : new InventoryItemIdDtoWrapper(value);
            }
        }

		public virtual string TriggerAccountName { get; set; }

		public virtual string OutputAccountName { get; set; }

		public virtual bool? IsOutputNegated { get; set; }

		public virtual bool? Active { get; set; }

		public virtual bool? IsPropertyTriggerInventoryItemIdRemoved { get; set; }

        bool IMergePatchInventoryPostingRule.IsPropertyTriggerInventoryItemIdRemoved
        {
            get
            {
                var b = this.IsPropertyTriggerInventoryItemIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyTriggerInventoryItemIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyOutputInventoryItemIdRemoved { get; set; }

        bool IMergePatchInventoryPostingRule.IsPropertyOutputInventoryItemIdRemoved
        {
            get
            {
                var b = this.IsPropertyOutputInventoryItemIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyOutputInventoryItemIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyTriggerAccountNameRemoved { get; set; }

        bool IMergePatchInventoryPostingRule.IsPropertyTriggerAccountNameRemoved
        {
            get
            {
                var b = this.IsPropertyTriggerAccountNameRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyTriggerAccountNameRemoved = value;
            }
        }

		public virtual bool? IsPropertyOutputAccountNameRemoved { get; set; }

        bool IMergePatchInventoryPostingRule.IsPropertyOutputAccountNameRemoved
        {
            get
            {
                var b = this.IsPropertyOutputAccountNameRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyOutputAccountNameRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsOutputNegatedRemoved { get; set; }

        bool IMergePatchInventoryPostingRule.IsPropertyIsOutputNegatedRemoved
        {
            get
            {
                var b = this.IsPropertyIsOutputNegatedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsOutputNegatedRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchInventoryPostingRule.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteInventoryPostingRuleDto : InventoryPostingRuleCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateInventoryPostingRuleDto : CreateOrMergePatchOrDeleteInventoryPostingRuleDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchInventoryPostingRuleDto : CreateOrMergePatchOrDeleteInventoryPostingRuleDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteInventoryPostingRuleDto : CreateOrMergePatchOrDeleteInventoryPostingRuleDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}

    public static partial class InventoryPostingRuleCommandDtos
    {

    }

}

