// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryPostingRuleDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryPostingRule;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryPostingRule
{

	public partial class InventoryPostingRuleStateDtoWrapper : StateDtoWrapperBase, IInventoryPostingRuleStateDto, IInventoryPostingRuleState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IInventoryPostingRuleState _state;

        public InventoryPostingRuleStateDtoWrapper()
        {
            this._state = new InventoryPostingRuleState();
        }

		public InventoryPostingRuleStateDtoWrapper(IInventoryPostingRuleState state)
		{
            this._state = state;
		}

		public IInventoryPostingRuleState ToInventoryPostingRuleState()
		{
			return this._state;
		}

		public virtual string InventoryPostingRuleId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("InventoryPostingRuleId"))
                {
                    return _state.InventoryPostingRuleId;
                }
                return null;
            }
            set
            {
                _state.InventoryPostingRuleId = value;
            }
        }

        string IInventoryPostingRuleStateProperties.InventoryPostingRuleId
        {
            get 
            {
                return (this._state as IInventoryPostingRuleStateProperties).InventoryPostingRuleId;
            }
            set 
            {
                (this._state as IInventoryPostingRuleStateProperties).InventoryPostingRuleId = value;
            }
        }

        public InventoryItemIdDto Trigger
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Trigger"))
                {
					return (_state.Trigger == null) ? null : new InventoryItemIdDtoWrapper(_state.Trigger);
                }
                return null;
            }
            set
            {
                _state.Trigger = (value == null) ? null : value.ToInventoryItemId();
            }
        }

        InventoryItemId IInventoryPostingRuleStateProperties.Trigger
        {
            get 
            {
                return (this._state as IInventoryPostingRuleStateProperties).Trigger;
            }
            set 
            {
                (this._state as IInventoryPostingRuleStateProperties).Trigger = value;
            }
        }

        public InventoryItemIdDto Output
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Output"))
                {
					return (_state.Output == null) ? null : new InventoryItemIdDtoWrapper(_state.Output);
                }
                return null;
            }
            set
            {
                _state.Output = (value == null) ? null : value.ToInventoryItemId();
            }
        }

        InventoryItemId IInventoryPostingRuleStateProperties.Output
        {
            get 
            {
                return (this._state as IInventoryPostingRuleStateProperties).Output;
            }
            set 
            {
                (this._state as IInventoryPostingRuleStateProperties).Output = value;
            }
        }

		public virtual string TriggerAccountName
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("TriggerAccountName"))
                {
                    return _state.TriggerAccountName;
                }
                return null;
            }
            set
            {
                _state.TriggerAccountName = value;
            }
        }

        string IInventoryPostingRuleStateProperties.TriggerAccountName
        {
            get 
            {
                return (this._state as IInventoryPostingRuleStateProperties).TriggerAccountName;
            }
            set 
            {
                (this._state as IInventoryPostingRuleStateProperties).TriggerAccountName = value;
            }
        }

		public virtual string OutputAccountName
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("OutputAccountName"))
                {
                    return _state.OutputAccountName;
                }
                return null;
            }
            set
            {
                _state.OutputAccountName = value;
            }
        }

        string IInventoryPostingRuleStateProperties.OutputAccountName
        {
            get 
            {
                return (this._state as IInventoryPostingRuleStateProperties).OutputAccountName;
            }
            set 
            {
                (this._state as IInventoryPostingRuleStateProperties).OutputAccountName = value;
            }
        }

		public virtual bool? IsOutputNegated
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("IsOutputNegated"))
                {
                    return _state.IsOutputNegated;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.IsOutputNegated = value.Value;
                }
            }
        }

        bool IInventoryPostingRuleStateProperties.IsOutputNegated
        {
            get 
            {
                return (this._state as IInventoryPostingRuleStateProperties).IsOutputNegated;
            }
            set 
            {
                (this._state as IInventoryPostingRuleStateProperties).IsOutputNegated = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Active"))
                {
                    return (this._state as IInventoryPostingRuleStateProperties).Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IInventoryPostingRuleStateProperties).Active = value.Value;
                }
            }
        }

        bool IInventoryPostingRuleStateProperties.Active
        {
            get 
            {
                return (this._state as IInventoryPostingRuleStateProperties).Active;
            }
            set 
            {
                (this._state as IInventoryPostingRuleStateProperties).Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IInventoryPostingRuleStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IInventoryPostingRuleStateProperties).Version = value.Value;
                }
            }
        }

        long IInventoryPostingRuleStateProperties.Version
        {
            get 
            {
                return (this._state as IInventoryPostingRuleStateProperties).Version;
            }
            set 
            {
                (this._state as IInventoryPostingRuleStateProperties).Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get { return (_state as IInventoryPostingRuleState).GlobalId; }
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
            return (_state as IActive).IsActive();
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IInventoryPostingRuleState).CreatedBy; }
            set { (_state as IInventoryPostingRuleState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IInventoryPostingRuleState).CreatedAt; }
            set { (_state as IInventoryPostingRuleState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IInventoryPostingRuleState).UpdatedBy; }
            set { (_state as IInventoryPostingRuleState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IInventoryPostingRuleState).UpdatedAt; }
            set { (_state as IInventoryPostingRuleState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as IInventoryPostingRuleStateProperties).Version; }
		}

		#endregion

        bool IInventoryPostingRuleState.IsUnsaved
        {
            get { return this.Version == InventoryPostingRuleState.VersionZero; }
        }

		void IInventoryPostingRuleState.When(IInventoryPostingRuleStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IInventoryPostingRuleState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void IInventoryPostingRuleState.When(IInventoryPostingRuleStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IInventoryPostingRuleState.When(IInventoryPostingRuleStateDeleted e)
		{
            throw new NotSupportedException();
		}

		void IInventoryPostingRuleState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

	}

    partial class InventoryPostingRuleStateDtoWrapperCollection : StateDtoWrapperCollectionBase<InventoryPostingRuleStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(InventoryPostingRuleStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

