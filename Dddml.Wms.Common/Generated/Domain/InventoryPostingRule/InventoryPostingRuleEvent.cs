// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryPostingRuleDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryPostingRule;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryPostingRule
{

	public abstract class InventoryPostingRuleEventBase : IInventoryPostingRuleEvent
	{

		public virtual InventoryPostingRuleEventId InventoryPostingRuleEventId { get; set; }

        public virtual string InventoryPostingRuleId
        {
            get { return InventoryPostingRuleEventId.InventoryPostingRuleId; }
            set { InventoryPostingRuleEventId.InventoryPostingRuleId = value; }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		InventoryPostingRuleEventId IGlobalIdentity<InventoryPostingRuleEventId>.GlobalId {
			get
			{
				return this.InventoryPostingRuleEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IInventoryPostingRuleEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected InventoryPostingRuleEventBase()
        {
        }

        protected InventoryPostingRuleEventBase(InventoryPostingRuleEventId stateEventId)
        {
            this.InventoryPostingRuleEventId = stateEventId;
        }


        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

    public abstract class InventoryPostingRuleStateEventBase : InventoryPostingRuleEventBase, IInventoryPostingRuleStateEvent
    {

		public virtual InventoryItemId TriggerInventoryItemId { get; set; }

		public virtual InventoryItemId OutputInventoryItemId { get; set; }

		public virtual string TriggerAccountName { get; set; }

		public virtual string OutputAccountName { get; set; }

		public virtual bool? IsOutputNegated { get; set; }

		public virtual bool? Active { get; set; }

        protected InventoryPostingRuleStateEventBase() : base()
        {
        }

        protected InventoryPostingRuleStateEventBase(InventoryPostingRuleEventId stateEventId) : base(stateEventId)
        {
        }

    }

	public class InventoryPostingRuleStateCreated : InventoryPostingRuleStateEventBase, IInventoryPostingRuleStateCreated
	{
		public InventoryPostingRuleStateCreated () : this(new InventoryPostingRuleEventId())
		{
		}

		public InventoryPostingRuleStateCreated (InventoryPostingRuleEventId stateEventId) : base(stateEventId)
		{
		}


        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class InventoryPostingRuleStateMergePatched : InventoryPostingRuleStateEventBase, IInventoryPostingRuleStateMergePatched
	{
		public virtual bool IsPropertyTriggerInventoryItemIdRemoved { get; set; }

		public virtual bool IsPropertyOutputInventoryItemIdRemoved { get; set; }

		public virtual bool IsPropertyTriggerAccountNameRemoved { get; set; }

		public virtual bool IsPropertyOutputAccountNameRemoved { get; set; }

		public virtual bool IsPropertyIsOutputNegatedRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public InventoryPostingRuleStateMergePatched ()
		{
		}

		public InventoryPostingRuleStateMergePatched (InventoryPostingRuleEventId stateEventId) : base(stateEventId)
		{
		}


        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class InventoryPostingRuleStateDeleted : InventoryPostingRuleStateEventBase, IInventoryPostingRuleStateDeleted
	{
		public InventoryPostingRuleStateDeleted ()
		{
		}

		public InventoryPostingRuleStateDeleted (InventoryPostingRuleEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }



	}



}

