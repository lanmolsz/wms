// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryPostingRuleDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryPostingRule;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryPostingRule
{

	public abstract class InventoryPostingRuleStateEventDtoBase : IStateEventDto, IInventoryPostingRuleStateCreated, IInventoryPostingRuleStateMergePatched, IInventoryPostingRuleStateDeleted
	{

        private InventoryPostingRuleEventId _inventoryPostingRuleEventId;

		protected internal virtual InventoryPostingRuleEventId InventoryPostingRuleEventId 
        {
            get 
            {
                if (_inventoryPostingRuleEventId == null) { _inventoryPostingRuleEventId = new InventoryPostingRuleEventId(); }
                return _inventoryPostingRuleEventId;
            }
            set
            {
                _inventoryPostingRuleEventId = value;
            }
        }

        public virtual string InventoryPostingRuleId
        {
            get { return InventoryPostingRuleEventId.InventoryPostingRuleId; }
            set { InventoryPostingRuleEventId.InventoryPostingRuleId = value; }
        }

        public virtual long Version
        {
            get { return InventoryPostingRuleEventId.Version; }
            set { InventoryPostingRuleEventId.Version = value; }
        }

		public virtual InventoryItemId TriggerInventoryItemId { get; set; }

		public virtual InventoryItemId OutputInventoryItemId { get; set; }

		public virtual string TriggerAccountName { get; set; }

		public virtual string OutputAccountName { get; set; }

		public virtual bool? IsOutputNegated { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		InventoryPostingRuleEventId IGlobalIdentity<InventoryPostingRuleEventId>.GlobalId {
			get 
			{
				return this.InventoryPostingRuleEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IInventoryPostingRuleStateEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }

		public virtual bool? IsPropertyTriggerInventoryItemIdRemoved { get; set; }

        bool IInventoryPostingRuleStateMergePatched.IsPropertyTriggerInventoryItemIdRemoved
        {
            get 
            {
                var b = this.IsPropertyTriggerInventoryItemIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyTriggerInventoryItemIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyOutputInventoryItemIdRemoved { get; set; }

        bool IInventoryPostingRuleStateMergePatched.IsPropertyOutputInventoryItemIdRemoved
        {
            get 
            {
                var b = this.IsPropertyOutputInventoryItemIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyOutputInventoryItemIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyTriggerAccountNameRemoved { get; set; }

        bool IInventoryPostingRuleStateMergePatched.IsPropertyTriggerAccountNameRemoved
        {
            get 
            {
                var b = this.IsPropertyTriggerAccountNameRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyTriggerAccountNameRemoved = value;
            }
        }

		public virtual bool? IsPropertyOutputAccountNameRemoved { get; set; }

        bool IInventoryPostingRuleStateMergePatched.IsPropertyOutputAccountNameRemoved
        {
            get 
            {
                var b = this.IsPropertyOutputAccountNameRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyOutputAccountNameRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsOutputNegatedRemoved { get; set; }

        bool IInventoryPostingRuleStateMergePatched.IsPropertyIsOutputNegatedRemoved
        {
            get 
            {
                var b = this.IsPropertyIsOutputNegatedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyIsOutputNegatedRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IInventoryPostingRuleStateMergePatched.IsPropertyActiveRemoved
        {
            get 
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        InventoryPostingRuleEventId IInventoryPostingRuleStateEvent.InventoryPostingRuleEventId
        {
            get { return this.InventoryPostingRuleEventId; }
        }

        protected InventoryPostingRuleStateEventDtoBase()
        {
        }

        protected InventoryPostingRuleStateEventDtoBase(InventoryPostingRuleEventId stateEventId)
        {
            this.InventoryPostingRuleEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IStateEventDto.StateEventType 
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}


    public class InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto : InventoryPostingRuleStateEventDtoBase
    {
        private string _eventType;

        public virtual string EventType
        {
            get { return _eventType; }
            set { _eventType = value; }
        }

        protected override string GetStateEventType()
        {
            return this._eventType;
        }

    }



	public class InventoryPostingRuleStateCreatedDto : InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto
	{
		public InventoryPostingRuleStateCreatedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class InventoryPostingRuleStateMergePatchedDto : InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto
	{
		public InventoryPostingRuleStateMergePatchedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class InventoryPostingRuleStateDeletedDto : InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto
	{
		public InventoryPostingRuleStateDeletedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

	}


    public partial class InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDtos : IEnumerable<IInventoryPostingRuleStateCreated>, IEnumerable<IInventoryPostingRuleStateMergePatched>, IEnumerable<IInventoryPostingRuleStateDeleted>
    {
        private List<InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto> _innerStateEvents = new List<InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto>();

        public virtual InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IInventoryPostingRuleStateCreated> IEnumerable<IInventoryPostingRuleStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IInventoryPostingRuleStateMergePatched> IEnumerable<IInventoryPostingRuleStateMergePatched>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IInventoryPostingRuleStateDeleted> IEnumerable<IInventoryPostingRuleStateDeleted>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        public void AddInventoryPostingRuleEvent(IInventoryPostingRuleStateCreated e)
        {
            _innerStateEvents.Add((InventoryPostingRuleStateCreatedDto)e);
        }

        public void AddInventoryPostingRuleEvent(IInventoryPostingRuleStateEvent e)
        {
            _innerStateEvents.Add((InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto)e);
        }

        public void AddInventoryPostingRuleEvent(IInventoryPostingRuleStateDeleted e)
        {
            _innerStateEvents.Add((InventoryPostingRuleStateDeletedDto)e);
        }

    }


}

