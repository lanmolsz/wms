// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderItem;

namespace Dddml.Wms.Domain.OrderItem
{
    public partial class OrderItemAggregate : AggregateBase, IOrderItemAggregate
    {

        readonly IOrderItemState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IOrderItemState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        OrderItemId IGlobalIdentity<OrderItemId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public OrderItemAggregate(IOrderItemState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IOrderItemStateProperties)_state).Version == OrderItemState.VersionZero)
            {
                if (IsCommandCreate((IOrderItemCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (IsCommandCreate((IOrderItemCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IOrderItemCommand c)
        {
            return c.Version == OrderItemState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateOrderItem c)
        {
            IOrderItemStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchOrderItem c)
        {
            IOrderItemStateMergePatched e = Map(c);
            Apply(e);
        }


        protected virtual IOrderItemStateCreated Map(ICreateOrderItem c)
        {
			var stateEventId = new OrderItemStateEventId(c.OrderItemId, c.Version);
            IOrderItemStateCreated e = NewOrderItemStateCreated(stateEventId);
		
            e.ProductId = c.ProductId;
            e.ExternalProductId = c.ExternalProductId;
            e.Quantity = c.Quantity;
            e.CancelQuantity = c.CancelQuantity;
            e.SelectedAmount = c.SelectedAmount;
            e.ExternalId = c.ExternalId;
            e.OrderItemTypeId = c.OrderItemTypeId;
            e.OrderItemGroupSeqId = c.OrderItemGroupSeqId;
            e.IsItemGroupPrimary = c.IsItemGroupPrimary;
            e.FromInventoryItemId = c.FromInventoryItemId;
            e.IsPromo = c.IsPromo;
            e.QuoteId = c.QuoteId;
            e.QuoteItemSeqId = c.QuoteItemSeqId;
            e.ShoppingListId = c.ShoppingListId;
            e.ShoppingListItemSeqId = c.ShoppingListItemSeqId;
            e.UnitPrice = c.UnitPrice;
            e.UnitListPrice = c.UnitListPrice;
            e.UnitAverageCost = c.UnitAverageCost;
            e.UnitRecurringPrice = c.UnitRecurringPrice;
            e.IsModifiedPrice = c.IsModifiedPrice;
            e.RecurringFreqUomId = c.RecurringFreqUomId;
            e.ItemDescription = c.ItemDescription;
            e.Comments = c.Comments;
            e.CorrespondingPoId = c.CorrespondingPoId;
            e.SyncStatusId = c.SyncStatusId;
            e.EstimatedShipDate = c.EstimatedShipDate;
            e.EstimatedDeliveryDate = c.EstimatedDeliveryDate;
            e.AutoCancelDate = c.AutoCancelDate;
            e.DontCancelSetDate = c.DontCancelSetDate;
            e.DontCancelSetBy = c.DontCancelSetBy;
            e.ShipBeforeDate = c.ShipBeforeDate;
            e.ShipAfterDate = c.ShipAfterDate;
            e.CancelBackOrderDate = c.CancelBackOrderDate;
            e.OverrideGlAccountId = c.OverrideGlAccountId;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var version = c.Version;


            return e;
        }

        protected virtual IOrderItemStateMergePatched Map(IMergePatchOrderItem c)
        {
			var stateEventId = new OrderItemStateEventId(c.OrderItemId, c.Version);
            IOrderItemStateMergePatched e = NewOrderItemStateMergePatched(stateEventId);

            e.ProductId = c.ProductId;
            e.ExternalProductId = c.ExternalProductId;
            e.Quantity = c.Quantity;
            e.CancelQuantity = c.CancelQuantity;
            e.SelectedAmount = c.SelectedAmount;
            e.ExternalId = c.ExternalId;
            e.OrderItemTypeId = c.OrderItemTypeId;
            e.OrderItemGroupSeqId = c.OrderItemGroupSeqId;
            e.IsItemGroupPrimary = c.IsItemGroupPrimary;
            e.FromInventoryItemId = c.FromInventoryItemId;
            e.IsPromo = c.IsPromo;
            e.QuoteId = c.QuoteId;
            e.QuoteItemSeqId = c.QuoteItemSeqId;
            e.ShoppingListId = c.ShoppingListId;
            e.ShoppingListItemSeqId = c.ShoppingListItemSeqId;
            e.UnitPrice = c.UnitPrice;
            e.UnitListPrice = c.UnitListPrice;
            e.UnitAverageCost = c.UnitAverageCost;
            e.UnitRecurringPrice = c.UnitRecurringPrice;
            e.IsModifiedPrice = c.IsModifiedPrice;
            e.RecurringFreqUomId = c.RecurringFreqUomId;
            e.ItemDescription = c.ItemDescription;
            e.Comments = c.Comments;
            e.CorrespondingPoId = c.CorrespondingPoId;
            e.SyncStatusId = c.SyncStatusId;
            e.EstimatedShipDate = c.EstimatedShipDate;
            e.EstimatedDeliveryDate = c.EstimatedDeliveryDate;
            e.AutoCancelDate = c.AutoCancelDate;
            e.DontCancelSetDate = c.DontCancelSetDate;
            e.DontCancelSetBy = c.DontCancelSetBy;
            e.ShipBeforeDate = c.ShipBeforeDate;
            e.ShipAfterDate = c.ShipAfterDate;
            e.CancelBackOrderDate = c.CancelBackOrderDate;
            e.OverrideGlAccountId = c.OverrideGlAccountId;
            e.Active = c.Active;
            e.IsPropertyProductIdRemoved = c.IsPropertyProductIdRemoved;
            e.IsPropertyExternalProductIdRemoved = c.IsPropertyExternalProductIdRemoved;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertyCancelQuantityRemoved = c.IsPropertyCancelQuantityRemoved;
            e.IsPropertySelectedAmountRemoved = c.IsPropertySelectedAmountRemoved;
            e.IsPropertyExternalIdRemoved = c.IsPropertyExternalIdRemoved;
            e.IsPropertyOrderItemTypeIdRemoved = c.IsPropertyOrderItemTypeIdRemoved;
            e.IsPropertyOrderItemGroupSeqIdRemoved = c.IsPropertyOrderItemGroupSeqIdRemoved;
            e.IsPropertyIsItemGroupPrimaryRemoved = c.IsPropertyIsItemGroupPrimaryRemoved;
            e.IsPropertyFromInventoryItemIdRemoved = c.IsPropertyFromInventoryItemIdRemoved;
            e.IsPropertyIsPromoRemoved = c.IsPropertyIsPromoRemoved;
            e.IsPropertyQuoteIdRemoved = c.IsPropertyQuoteIdRemoved;
            e.IsPropertyQuoteItemSeqIdRemoved = c.IsPropertyQuoteItemSeqIdRemoved;
            e.IsPropertyShoppingListIdRemoved = c.IsPropertyShoppingListIdRemoved;
            e.IsPropertyShoppingListItemSeqIdRemoved = c.IsPropertyShoppingListItemSeqIdRemoved;
            e.IsPropertyUnitPriceRemoved = c.IsPropertyUnitPriceRemoved;
            e.IsPropertyUnitListPriceRemoved = c.IsPropertyUnitListPriceRemoved;
            e.IsPropertyUnitAverageCostRemoved = c.IsPropertyUnitAverageCostRemoved;
            e.IsPropertyUnitRecurringPriceRemoved = c.IsPropertyUnitRecurringPriceRemoved;
            e.IsPropertyIsModifiedPriceRemoved = c.IsPropertyIsModifiedPriceRemoved;
            e.IsPropertyRecurringFreqUomIdRemoved = c.IsPropertyRecurringFreqUomIdRemoved;
            e.IsPropertyItemDescriptionRemoved = c.IsPropertyItemDescriptionRemoved;
            e.IsPropertyCommentsRemoved = c.IsPropertyCommentsRemoved;
            e.IsPropertyCorrespondingPoIdRemoved = c.IsPropertyCorrespondingPoIdRemoved;
            e.IsPropertySyncStatusIdRemoved = c.IsPropertySyncStatusIdRemoved;
            e.IsPropertyEstimatedShipDateRemoved = c.IsPropertyEstimatedShipDateRemoved;
            e.IsPropertyEstimatedDeliveryDateRemoved = c.IsPropertyEstimatedDeliveryDateRemoved;
            e.IsPropertyAutoCancelDateRemoved = c.IsPropertyAutoCancelDateRemoved;
            e.IsPropertyDontCancelSetDateRemoved = c.IsPropertyDontCancelSetDateRemoved;
            e.IsPropertyDontCancelSetByRemoved = c.IsPropertyDontCancelSetByRemoved;
            e.IsPropertyShipBeforeDateRemoved = c.IsPropertyShipBeforeDateRemoved;
            e.IsPropertyShipAfterDateRemoved = c.IsPropertyShipAfterDateRemoved;
            e.IsPropertyCancelBackOrderDateRemoved = c.IsPropertyCancelBackOrderDateRemoved;
            e.IsPropertyOverrideGlAccountIdRemoved = c.IsPropertyOverrideGlAccountIdRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var version = c.Version;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected OrderItemStateCreated NewOrderItemStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new OrderItemStateEventId(_state.OrderItemId, ((IOrderItemStateProperties)_state).Version);
            var e = NewOrderItemStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected OrderItemStateMergePatched NewOrderItemStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new OrderItemStateEventId(_state.OrderItemId, ((IOrderItemStateProperties)_state).Version);
            var e = NewOrderItemStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


////////////////////////

		private OrderItemStateCreated NewOrderItemStateCreated(OrderItemStateEventId stateEventId)
		{
			return new OrderItemStateCreated(stateEventId);			
		}

        private OrderItemStateMergePatched NewOrderItemStateMergePatched(OrderItemStateEventId stateEventId)
		{
			return new OrderItemStateMergePatched(stateEventId);
		}


    }

}

