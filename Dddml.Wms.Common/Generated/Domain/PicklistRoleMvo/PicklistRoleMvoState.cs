// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistRoleMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PicklistRoleMvo;
using Dddml.Wms.Domain.Picklist;

namespace Dddml.Wms.Domain.PicklistRoleMvo
{

	public partial class PicklistRoleMvoState : PicklistRoleMvoStateProperties, IPicklistRoleMvoState
	{

		public virtual string CreatedByUserLogin { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string LastModifiedByUserLogin { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		PicklistRoleId IGlobalIdentity<PicklistRoleId>.GlobalId
		{
			get
			{
				return this.PicklistRoleId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedByUserLogin;
			}
			set
			{
				this.CreatedByUserLogin = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.LastModifiedByUserLogin; }
			set { this.LastModifiedByUserLogin = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.PicklistVersion;
			}
		}


		#endregion

        bool IPicklistRoleMvoState.IsUnsaved
        {
            get { return this.PicklistVersion == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public PicklistRoleMvoState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.PicklistRoleId = ((IPicklistRoleMvoEvent)events.First()).PicklistRoleMvoEventId.PicklistRoleId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.PicklistVersion += 1;
                }
            }
        }

        public PicklistRoleMvoState() : this(false)
        {
        }

        public PicklistRoleMvoState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IPicklistRoleMvoStateCreated e)
		{
			ThrowOnWrongEvent(e);
            this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.PicklistDescription = e.PicklistDescription;

			this.PicklistFacilityId = e.PicklistFacilityId;

			this.PicklistShipmentMethodTypeId = e.PicklistShipmentMethodTypeId;

			this.PicklistStatusId = e.PicklistStatusId;

			this.PicklistPicklistDate = e.PicklistPicklistDate;

			this.PicklistPickwaveId = e.PicklistPickwaveId;

			this.PicklistCreatedBy = e.PicklistCreatedBy;

            this.PicklistCreatedAt = (e.PicklistCreatedAt != null && e.PicklistCreatedAt.HasValue) ? e.PicklistCreatedAt.Value : default(DateTime);

			this.PicklistUpdatedBy = e.PicklistUpdatedBy;

            this.PicklistUpdatedAt = (e.PicklistUpdatedAt != null && e.PicklistUpdatedAt.HasValue) ? e.PicklistUpdatedAt.Value : default(DateTime);

            this.PicklistActive = (e.PicklistActive != null && e.PicklistActive.HasValue) ? e.PicklistActive.Value : default(bool);

            this.PicklistDeleted = (e.PicklistDeleted != null && e.PicklistDeleted.HasValue) ? e.PicklistDeleted.Value : default(bool);

			this.Deleted = false;

			this.CreatedByUserLogin = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IPicklistRoleMvoStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.Version == null)
			{
				if (e.IsPropertyVersionRemoved)
				{
					this.Version = default(long);
				}
			}
			else
			{
				this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}

			if (e.PicklistDescription == null)
			{
				if (e.IsPropertyPicklistDescriptionRemoved)
				{
					this.PicklistDescription = default(string);
				}
			}
			else
			{
				this.PicklistDescription = e.PicklistDescription;
			}

			if (e.PicklistFacilityId == null)
			{
				if (e.IsPropertyPicklistFacilityIdRemoved)
				{
					this.PicklistFacilityId = default(string);
				}
			}
			else
			{
				this.PicklistFacilityId = e.PicklistFacilityId;
			}

			if (e.PicklistShipmentMethodTypeId == null)
			{
				if (e.IsPropertyPicklistShipmentMethodTypeIdRemoved)
				{
					this.PicklistShipmentMethodTypeId = default(string);
				}
			}
			else
			{
				this.PicklistShipmentMethodTypeId = e.PicklistShipmentMethodTypeId;
			}

			if (e.PicklistStatusId == null)
			{
				if (e.IsPropertyPicklistStatusIdRemoved)
				{
					this.PicklistStatusId = default(string);
				}
			}
			else
			{
				this.PicklistStatusId = e.PicklistStatusId;
			}

			if (e.PicklistPicklistDate == null)
			{
				if (e.IsPropertyPicklistPicklistDateRemoved)
				{
					this.PicklistPicklistDate = default(DateTime?);
				}
			}
			else
			{
				this.PicklistPicklistDate = e.PicklistPicklistDate;
			}

			if (e.PicklistPickwaveId == null)
			{
				if (e.IsPropertyPicklistPickwaveIdRemoved)
				{
					this.PicklistPickwaveId = default(long?);
				}
			}
			else
			{
				this.PicklistPickwaveId = e.PicklistPickwaveId;
			}

			if (e.PicklistCreatedBy == null)
			{
				if (e.IsPropertyPicklistCreatedByRemoved)
				{
					this.PicklistCreatedBy = default(string);
				}
			}
			else
			{
				this.PicklistCreatedBy = e.PicklistCreatedBy;
			}

			if (e.PicklistCreatedAt == null)
			{
				if (e.IsPropertyPicklistCreatedAtRemoved)
				{
					this.PicklistCreatedAt = default(DateTime);
				}
			}
			else
			{
				this.PicklistCreatedAt = (e.PicklistCreatedAt != null && e.PicklistCreatedAt.HasValue) ? e.PicklistCreatedAt.Value : default(DateTime);
			}

			if (e.PicklistUpdatedBy == null)
			{
				if (e.IsPropertyPicklistUpdatedByRemoved)
				{
					this.PicklistUpdatedBy = default(string);
				}
			}
			else
			{
				this.PicklistUpdatedBy = e.PicklistUpdatedBy;
			}

			if (e.PicklistUpdatedAt == null)
			{
				if (e.IsPropertyPicklistUpdatedAtRemoved)
				{
					this.PicklistUpdatedAt = default(DateTime);
				}
			}
			else
			{
				this.PicklistUpdatedAt = (e.PicklistUpdatedAt != null && e.PicklistUpdatedAt.HasValue) ? e.PicklistUpdatedAt.Value : default(DateTime);
			}

			if (e.PicklistActive == null)
			{
				if (e.IsPropertyPicklistActiveRemoved)
				{
					this.PicklistActive = default(bool);
				}
			}
			else
			{
				this.PicklistActive = (e.PicklistActive != null && e.PicklistActive.HasValue) ? e.PicklistActive.Value : default(bool);
			}

			if (e.PicklistDeleted == null)
			{
				if (e.IsPropertyPicklistDeletedRemoved)
				{
					this.PicklistDeleted = default(bool);
				}
			}
			else
			{
				this.PicklistDeleted = (e.PicklistDeleted != null && e.PicklistDeleted.HasValue) ? e.PicklistDeleted.Value : default(bool);
			}


			this.LastModifiedByUserLogin = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}

		public virtual void When(IPicklistRoleMvoStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.LastModifiedByUserLogin = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IPicklistRoleMvoEvent e)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("PicklistRoleMvo|");

            var stateEntityId = this.PicklistRoleId; // Aggregate Id
            var eventEntityId = e.PicklistRoleMvoEventId.PicklistRoleId;
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.PicklistVersion;
            var eventVersion = e.PicklistRoleMvoEventId.PicklistVersion;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

