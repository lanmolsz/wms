// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirementEntryMvo;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirementEntryMvo
{

	public partial class InventoryItemRequirementEntryMvoState : InventoryItemRequirementEntryMvoStateProperties, IInventoryItemRequirementEntryMvoState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }


		#region IIdentity implementation

		InventoryItemRequirementEntryId IGlobalIdentity<InventoryItemRequirementEntryId>.GlobalId
		{
			get
			{
				return this.InventoryItemRequirementEntryId;
			}
		}

		#endregion


		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.InventoryItemRequirementVersion;
			}
		}


		#endregion

        bool IInventoryItemRequirementEntryMvoState.IsUnsaved
        {
            get { return this.InventoryItemRequirementVersion == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public InventoryItemRequirementEntryMvoState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.InventoryItemRequirementEntryId = ((IInventoryItemRequirementEntryMvoStateEvent)events.First()).InventoryItemRequirementEntryMvoEventId.InventoryItemRequirementEntryId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.InventoryItemRequirementVersion += 1;
                }
            }
        }

        public InventoryItemRequirementEntryMvoState() : this(false)
        {
        }

        public InventoryItemRequirementEntryMvoState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IInventoryItemRequirementEntryMvoStateCreated e)
		{
			ThrowOnWrongEvent(e);
            this.Quantity = (e.Quantity != null && e.Quantity.HasValue) ? e.Quantity.Value : default(decimal);

			this.SourceEventId = e.SourceEventId;

            this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);

            this.InventoryItemRequirementQuantity = (e.InventoryItemRequirementQuantity != null && e.InventoryItemRequirementQuantity.HasValue) ? e.InventoryItemRequirementQuantity.Value : default(decimal);

			this.InventoryItemRequirementCreatedBy = e.InventoryItemRequirementCreatedBy;

            this.InventoryItemRequirementCreatedAt = (e.InventoryItemRequirementCreatedAt != null && e.InventoryItemRequirementCreatedAt.HasValue) ? e.InventoryItemRequirementCreatedAt.Value : default(DateTime);

			this.InventoryItemRequirementUpdatedBy = e.InventoryItemRequirementUpdatedBy;

            this.InventoryItemRequirementUpdatedAt = (e.InventoryItemRequirementUpdatedAt != null && e.InventoryItemRequirementUpdatedAt.HasValue) ? e.InventoryItemRequirementUpdatedAt.Value : default(DateTime);

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IInventoryItemRequirementEntryMvoStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.Quantity == null)
			{
				if (e.IsPropertyQuantityRemoved)
				{
					this.Quantity = default(decimal);
				}
			}
			else
			{
				this.Quantity = (e.Quantity != null && e.Quantity.HasValue) ? e.Quantity.Value : default(decimal);
			}

			if (e.SourceEventId == null)
			{
				if (e.IsPropertySourceEventIdRemoved)
				{
					this.SourceEventId = default(InventoryPRTriggeredId);
				}
			}
			else
			{
				this.SourceEventId = e.SourceEventId;
			}

			if (e.Version == null)
			{
				if (e.IsPropertyVersionRemoved)
				{
					this.Version = default(long);
				}
			}
			else
			{
				this.Version = (e.Version != null && e.Version.HasValue) ? e.Version.Value : default(long);
			}

			if (e.InventoryItemRequirementQuantity == null)
			{
				if (e.IsPropertyInventoryItemRequirementQuantityRemoved)
				{
					this.InventoryItemRequirementQuantity = default(decimal);
				}
			}
			else
			{
				this.InventoryItemRequirementQuantity = (e.InventoryItemRequirementQuantity != null && e.InventoryItemRequirementQuantity.HasValue) ? e.InventoryItemRequirementQuantity.Value : default(decimal);
			}

			if (e.InventoryItemRequirementCreatedBy == null)
			{
				if (e.IsPropertyInventoryItemRequirementCreatedByRemoved)
				{
					this.InventoryItemRequirementCreatedBy = default(string);
				}
			}
			else
			{
				this.InventoryItemRequirementCreatedBy = e.InventoryItemRequirementCreatedBy;
			}

			if (e.InventoryItemRequirementCreatedAt == null)
			{
				if (e.IsPropertyInventoryItemRequirementCreatedAtRemoved)
				{
					this.InventoryItemRequirementCreatedAt = default(DateTime);
				}
			}
			else
			{
				this.InventoryItemRequirementCreatedAt = (e.InventoryItemRequirementCreatedAt != null && e.InventoryItemRequirementCreatedAt.HasValue) ? e.InventoryItemRequirementCreatedAt.Value : default(DateTime);
			}

			if (e.InventoryItemRequirementUpdatedBy == null)
			{
				if (e.IsPropertyInventoryItemRequirementUpdatedByRemoved)
				{
					this.InventoryItemRequirementUpdatedBy = default(string);
				}
			}
			else
			{
				this.InventoryItemRequirementUpdatedBy = e.InventoryItemRequirementUpdatedBy;
			}

			if (e.InventoryItemRequirementUpdatedAt == null)
			{
				if (e.IsPropertyInventoryItemRequirementUpdatedAtRemoved)
				{
					this.InventoryItemRequirementUpdatedAt = default(DateTime);
				}
			}
			else
			{
				this.InventoryItemRequirementUpdatedAt = (e.InventoryItemRequirementUpdatedAt != null && e.InventoryItemRequirementUpdatedAt.HasValue) ? e.InventoryItemRequirementUpdatedAt.Value : default(DateTime);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IInventoryItemRequirementEntryMvoStateEvent stateEvent)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("InventoryItemRequirementEntryMvo|");

            var stateEntityId = this.InventoryItemRequirementEntryId; // Aggregate Id
            var eventEntityId = stateEvent.InventoryItemRequirementEntryMvoEventId.InventoryItemRequirementEntryId;
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.InventoryItemRequirementVersion;
            var eventVersion = stateEvent.InventoryItemRequirementEntryMvoEventId.InventoryItemRequirementVersion;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

