// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirementEntryMvo;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirementEntryMvo
{

    public class InventoryItemRequirementEntryMvoStateEventDtoConverter
    {
        public virtual InventoryItemRequirementEntryMvoStateCreatedOrMergePatchedOrDeletedDto ToInventoryItemRequirementEntryMvoStateEventDto(IInventoryItemRequirementEntryMvoStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IInventoryItemRequirementEntryMvoStateCreated)stateEvent;
                return ToInventoryItemRequirementEntryMvoStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IInventoryItemRequirementEntryMvoStateMergePatched)stateEvent;
                return ToInventoryItemRequirementEntryMvoStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual InventoryItemRequirementEntryMvoStateCreatedDto ToInventoryItemRequirementEntryMvoStateCreatedDto(IInventoryItemRequirementEntryMvoStateCreated e)
        {
            var dto = new InventoryItemRequirementEntryMvoStateCreatedDto();
            dto.StateEventId = new InventoryItemRequirementEntryMvoEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Quantity = e.Quantity;
            dto.SourceEventId = (e.SourceEventId == null) ? null : new InventoryPRTriggeredIdDtoWrapper(e.SourceEventId);
            dto.Version = e.Version;
            dto.InventoryItemRequirementQuantity = e.InventoryItemRequirementQuantity;
            dto.InventoryItemRequirementCreatedBy = e.InventoryItemRequirementCreatedBy;
            dto.InventoryItemRequirementCreatedAt = e.InventoryItemRequirementCreatedAt;
            dto.InventoryItemRequirementUpdatedBy = e.InventoryItemRequirementUpdatedBy;
            dto.InventoryItemRequirementUpdatedAt = e.InventoryItemRequirementUpdatedAt;
            return dto;
        }

        public virtual InventoryItemRequirementEntryMvoStateMergePatchedDto ToInventoryItemRequirementEntryMvoStateMergePatchedDto(IInventoryItemRequirementEntryMvoStateMergePatched e)
        {
            var dto = new InventoryItemRequirementEntryMvoStateMergePatchedDto();
            dto.StateEventId = new InventoryItemRequirementEntryMvoEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Quantity = e.Quantity;
            dto.SourceEventId = (e.SourceEventId == null) ? null : new InventoryPRTriggeredIdDtoWrapper(e.SourceEventId);
            dto.Version = e.Version;
            dto.InventoryItemRequirementQuantity = e.InventoryItemRequirementQuantity;
            dto.InventoryItemRequirementCreatedBy = e.InventoryItemRequirementCreatedBy;
            dto.InventoryItemRequirementCreatedAt = e.InventoryItemRequirementCreatedAt;
            dto.InventoryItemRequirementUpdatedBy = e.InventoryItemRequirementUpdatedBy;
            dto.InventoryItemRequirementUpdatedAt = e.InventoryItemRequirementUpdatedAt;
            dto.IsPropertyQuantityRemoved = e.IsPropertyQuantityRemoved;
            dto.IsPropertySourceEventIdRemoved = e.IsPropertySourceEventIdRemoved;
            dto.IsPropertyVersionRemoved = e.IsPropertyVersionRemoved;
            dto.IsPropertyInventoryItemRequirementQuantityRemoved = e.IsPropertyInventoryItemRequirementQuantityRemoved;
            dto.IsPropertyInventoryItemRequirementCreatedByRemoved = e.IsPropertyInventoryItemRequirementCreatedByRemoved;
            dto.IsPropertyInventoryItemRequirementCreatedAtRemoved = e.IsPropertyInventoryItemRequirementCreatedAtRemoved;
            dto.IsPropertyInventoryItemRequirementUpdatedByRemoved = e.IsPropertyInventoryItemRequirementUpdatedByRemoved;
            dto.IsPropertyInventoryItemRequirementUpdatedAtRemoved = e.IsPropertyInventoryItemRequirementUpdatedAtRemoved;

            return dto;
        }



    }


}

