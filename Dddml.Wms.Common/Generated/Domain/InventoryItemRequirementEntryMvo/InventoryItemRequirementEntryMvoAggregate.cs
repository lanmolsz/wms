// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirementEntryMvo;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirementEntryMvo
{
    public partial class InventoryItemRequirementEntryMvoAggregate : AggregateBase, IInventoryItemRequirementEntryMvoAggregate
    {

        readonly IInventoryItemRequirementEntryMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IInventoryItemRequirementEntryMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        InventoryItemRequirementEntryId IGlobalIdentity<InventoryItemRequirementEntryId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public InventoryItemRequirementEntryMvoAggregate(IInventoryItemRequirementEntryMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IInventoryItemRequirementEntryMvoStateProperties)_state).InventoryItemRequirementVersion == InventoryItemRequirementEntryMvoState.VersionZero)
            {
                if (IsCommandCreate((IInventoryItemRequirementEntryMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (IsCommandCreate((IInventoryItemRequirementEntryMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IInventoryItemRequirementEntryMvoCommand c)
        {
            return c.InventoryItemRequirementVersion == InventoryItemRequirementEntryMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateInventoryItemRequirementEntryMvo c)
        {
            IInventoryItemRequirementEntryMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchInventoryItemRequirementEntryMvo c)
        {
            IInventoryItemRequirementEntryMvoStateMergePatched e = Map(c);
            Apply(e);
        }


        protected virtual IInventoryItemRequirementEntryMvoStateCreated Map(ICreateInventoryItemRequirementEntryMvo c)
        {
			var stateEventId = new InventoryItemRequirementEntryMvoStateEventId(c.InventoryItemRequirementEntryId, c.InventoryItemRequirementVersion);
            IInventoryItemRequirementEntryMvoStateCreated e = NewInventoryItemRequirementEntryMvoStateCreated(stateEventId);
		
            e.Quantity = c.Quantity;
            e.SourceEventId = c.SourceEventId;
            e.Version = c.Version;
            e.InventoryItemRequirementQuantity = c.InventoryItemRequirementQuantity;
            e.InventoryItemRequirementCreatedBy = c.InventoryItemRequirementCreatedBy;
            e.InventoryItemRequirementCreatedAt = c.InventoryItemRequirementCreatedAt;
            e.InventoryItemRequirementUpdatedBy = c.InventoryItemRequirementUpdatedBy;
            e.InventoryItemRequirementUpdatedAt = c.InventoryItemRequirementUpdatedAt;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var inventoryItemRequirementVersion = c.InventoryItemRequirementVersion;


            return e;
        }

        protected virtual IInventoryItemRequirementEntryMvoStateMergePatched Map(IMergePatchInventoryItemRequirementEntryMvo c)
        {
			var stateEventId = new InventoryItemRequirementEntryMvoStateEventId(c.InventoryItemRequirementEntryId, c.InventoryItemRequirementVersion);
            IInventoryItemRequirementEntryMvoStateMergePatched e = NewInventoryItemRequirementEntryMvoStateMergePatched(stateEventId);

            e.Quantity = c.Quantity;
            e.SourceEventId = c.SourceEventId;
            e.Version = c.Version;
            e.InventoryItemRequirementQuantity = c.InventoryItemRequirementQuantity;
            e.InventoryItemRequirementCreatedBy = c.InventoryItemRequirementCreatedBy;
            e.InventoryItemRequirementCreatedAt = c.InventoryItemRequirementCreatedAt;
            e.InventoryItemRequirementUpdatedBy = c.InventoryItemRequirementUpdatedBy;
            e.InventoryItemRequirementUpdatedAt = c.InventoryItemRequirementUpdatedAt;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertySourceEventIdRemoved = c.IsPropertySourceEventIdRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyInventoryItemRequirementQuantityRemoved = c.IsPropertyInventoryItemRequirementQuantityRemoved;
            e.IsPropertyInventoryItemRequirementCreatedByRemoved = c.IsPropertyInventoryItemRequirementCreatedByRemoved;
            e.IsPropertyInventoryItemRequirementCreatedAtRemoved = c.IsPropertyInventoryItemRequirementCreatedAtRemoved;
            e.IsPropertyInventoryItemRequirementUpdatedByRemoved = c.IsPropertyInventoryItemRequirementUpdatedByRemoved;
            e.IsPropertyInventoryItemRequirementUpdatedAtRemoved = c.IsPropertyInventoryItemRequirementUpdatedAtRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var inventoryItemRequirementVersion = c.InventoryItemRequirementVersion;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected InventoryItemRequirementEntryMvoStateCreated NewInventoryItemRequirementEntryMvoStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new InventoryItemRequirementEntryMvoStateEventId(_state.InventoryItemRequirementEntryId, ((IInventoryItemRequirementEntryMvoStateProperties)_state).InventoryItemRequirementVersion);
            var e = NewInventoryItemRequirementEntryMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected InventoryItemRequirementEntryMvoStateMergePatched NewInventoryItemRequirementEntryMvoStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new InventoryItemRequirementEntryMvoStateEventId(_state.InventoryItemRequirementEntryId, ((IInventoryItemRequirementEntryMvoStateProperties)_state).InventoryItemRequirementVersion);
            var e = NewInventoryItemRequirementEntryMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


////////////////////////

		private InventoryItemRequirementEntryMvoStateCreated NewInventoryItemRequirementEntryMvoStateCreated(InventoryItemRequirementEntryMvoStateEventId stateEventId)
		{
			return new InventoryItemRequirementEntryMvoStateCreated(stateEventId);			
		}

        private InventoryItemRequirementEntryMvoStateMergePatched NewInventoryItemRequirementEntryMvoStateMergePatched(InventoryItemRequirementEntryMvoStateEventId stateEventId)
		{
			return new InventoryItemRequirementEntryMvoStateMergePatched(stateEventId);
		}


    }

}

