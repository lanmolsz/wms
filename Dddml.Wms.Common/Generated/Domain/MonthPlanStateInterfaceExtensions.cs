// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public static partial class MonthPlanStateInterfaceExtensions
	{

        public static IMonthPlanCommand ToCreateOrMergePatchMonthPlan<TCreateMonthPlan, TMergePatchMonthPlan, TCreateDayPlan, TMergePatchDayPlan>(this IMonthPlanState state)
            where TCreateMonthPlan : ICreateMonthPlan, new()
            where TMergePatchMonthPlan : IMergePatchMonthPlan, new()
            where TCreateDayPlan : ICreateDayPlan, new()
            where TMergePatchDayPlan : IMergePatchDayPlan, new()
        {
            bool bUnsaved = ((IMonthPlanState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateMonthPlan<TCreateMonthPlan, TCreateDayPlan>();
            }
            else 
            {
                return state.ToMergePatchMonthPlan<TMergePatchMonthPlan, TCreateDayPlan, TMergePatchDayPlan>();
            }
        }

        public static TRemoveMonthPlan ToRemoveMonthPlan<TRemoveMonthPlan>(this IMonthPlanState state)
            where TRemoveMonthPlan : IRemoveMonthPlan, new()
        {
            var cmd = new TRemoveMonthPlan();
            cmd.Month = state.Month;
            return cmd;
        }

        public static TMergePatchMonthPlan ToMergePatchMonthPlan<TMergePatchMonthPlan, TCreateDayPlan, TMergePatchDayPlan>(this IMonthPlanState state)
            where TMergePatchMonthPlan : IMergePatchMonthPlan, new()
            where TCreateDayPlan : ICreateDayPlan, new()
            where TMergePatchDayPlan : IMergePatchDayPlan, new()
        {
            var cmd = new TMergePatchMonthPlan();

            cmd.Month = state.Month;
            cmd.Description = state.Description;
            cmd.Active = ((IMonthPlanStateProperties)state).Active;
            cmd.PersonalName = state.PersonalName;
            cmd.Year = state.Year;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            foreach (var d in state.DayPlans)
            {
                var c = d.ToCreateOrMergePatchDayPlan<TCreateDayPlan, TMergePatchDayPlan>();
                cmd.DayPlanCommands.Add(c);
            }
            return cmd;
        }

        public static TCreateMonthPlan ToCreateMonthPlan<TCreateMonthPlan, TCreateDayPlan>(this IMonthPlanState state)
            where TCreateMonthPlan : ICreateMonthPlan, new()
            where TCreateDayPlan : ICreateDayPlan, new()
        {
            var cmd = new TCreateMonthPlan();

            cmd.Month = state.Month;
            cmd.Description = state.Description;
            cmd.Active = ((IMonthPlanStateProperties)state).Active;
            cmd.PersonalName = state.PersonalName;
            cmd.Year = state.Year;
            foreach (var d in state.DayPlans)
            {
                var c = d.ToCreateDayPlan<TCreateDayPlan>();
                cmd.DayPlans.Add(c);
            }
            return cmd;
        }
		

	}

}

