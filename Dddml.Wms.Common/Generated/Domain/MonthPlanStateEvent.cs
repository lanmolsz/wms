// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public abstract class MonthPlanStateEventBase : IMonthPlanStateEvent
	{

		public virtual MonthPlanStateEventId StateEventId { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }


		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

		MonthPlanStateEventId IGlobalIdentity<MonthPlanStateEventId>.GlobalId {
			get {
				return this.StateEventId;
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IMonthPlanStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }

		public virtual long Version { get; set; }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected MonthPlanStateEventBase()
        {
        }

        protected MonthPlanStateEventBase(MonthPlanStateEventId stateEventId)
        {
            this.StateEventId = stateEventId;
        }

		protected IDayPlanStateEventDao DayPlanStateEventDao
		{
			get { return ApplicationContext.Current["DayPlanStateEventDao"] as IDayPlanStateEventDao; }
		}

        protected DayPlanStateEventId NewDayPlanStateEventId(int day)
        {
            var stateEventId = new DayPlanStateEventId(this.StateEventId.PersonalName, this.StateEventId.Year, this.StateEventId.Month, day, this.StateEventId.PersonVersion);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IDayPlanStateEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IMonthPlanStateEvent oe, IDayPlanStateEvent e)
		{
			if (!oe.StateEventId.PersonalName.Equals(e.StateEventId.PersonalName))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id PersonalName {0} but inner id PersonalName {1}", 
					oe.StateEventId.PersonalName, e.StateEventId.PersonalName);
			}
			if (!oe.StateEventId.Year.Equals(e.StateEventId.Year))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id Year {0} but inner id Year {1}", 
					oe.StateEventId.Year, e.StateEventId.Year);
			}
			if (!oe.StateEventId.Month.Equals(e.StateEventId.Month))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id Month {0} but inner id Month {1}", 
					oe.StateEventId.Month, e.StateEventId.Month);
			}
		}



        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class MonthPlanStateCreated : MonthPlanStateEventBase, IMonthPlanStateCreated, ISaveable
	{
		public MonthPlanStateCreated ()
		{
		}

		public MonthPlanStateCreated (MonthPlanStateEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<DayPlanStateEventId, IDayPlanStateCreated> _dayPlanEvents = new Dictionary<DayPlanStateEventId, IDayPlanStateCreated>();
		
        private IEnumerable<IDayPlanStateCreated> _readOnlyDayPlanEvents;

        public virtual IEnumerable<IDayPlanStateCreated> DayPlanEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
					return this._dayPlanEvents.Values;
                }
                else
                {
                    if (_readOnlyDayPlanEvents != null) { return _readOnlyDayPlanEvents; }
                    var eventDao = DayPlanStateEventDao;
                    var eL = new List<IDayPlanStateCreated>();
                    foreach (var e in eventDao.FindByMonthPlanStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IDayPlanStateCreated)e);
                    }
                    return (_readOnlyDayPlanEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddDayPlanEvent(e);
                    }
                }
                else { this._dayPlanEvents.Clear(); }
            }
        }
	
		public virtual void AddDayPlanEvent(IDayPlanStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._dayPlanEvents[e.StateEventId] = e;
		}

        public virtual IDayPlanStateCreated NewDayPlanStateCreated(int day)
        {
            var stateEvent = new DayPlanStateCreated(NewDayPlanStateEventId(day));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IDayPlanStateCreated e in this.DayPlanEvents) {
				DayPlanStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class MonthPlanStateMergePatched : MonthPlanStateEventBase, IMonthPlanStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MonthPlanStateMergePatched ()
		{
		}

		public MonthPlanStateMergePatched (MonthPlanStateEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<DayPlanStateEventId, IDayPlanStateEvent> _dayPlanEvents = new Dictionary<DayPlanStateEventId, IDayPlanStateEvent>();

	    private IEnumerable<IDayPlanStateEvent> _readOnlyDayPlanEvents;
		
        public virtual IEnumerable<IDayPlanStateEvent> DayPlanEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
					return this._dayPlanEvents.Values;
                }
                else
                {
                    if (_readOnlyDayPlanEvents != null) { return _readOnlyDayPlanEvents; }
                    var eventDao = DayPlanStateEventDao;
                    var eL = new List<IDayPlanStateEvent>();
                    foreach (var e in eventDao.FindByMonthPlanStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IDayPlanStateEvent)e);
                    }
                    return (_readOnlyDayPlanEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddDayPlanEvent(e);
                    }
                }
                else { this._dayPlanEvents.Clear(); }
            }
        }

		public virtual void AddDayPlanEvent(IDayPlanStateEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._dayPlanEvents[e.StateEventId] = e;
		}

        public virtual IDayPlanStateCreated NewDayPlanStateCreated(int day)
        {
            var stateEvent = new DayPlanStateCreated(NewDayPlanStateEventId(day));
            return stateEvent;
        }

        public virtual IDayPlanStateMergePatched NewDayPlanStateMergePatched(int day)
        {
            var stateEvent = new DayPlanStateMergePatched(NewDayPlanStateEventId(day));
            return stateEvent;
        }

        public virtual IDayPlanStateRemoved NewDayPlanStateRemoved(int day)
        {
            var stateEvent = new DayPlanStateRemoved(NewDayPlanStateEventId(day));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IDayPlanStateEvent e in this.DayPlanEvents) {
				DayPlanStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class MonthPlanStateRemoved : MonthPlanStateEventBase, IMonthPlanStateRemoved, ISaveable
	{
		public MonthPlanStateRemoved ()
		{
		}

		public MonthPlanStateRemoved (MonthPlanStateEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Removed;
        }

		private Dictionary<DayPlanStateEventId, IDayPlanStateRemoved> _dayPlanEvents = new Dictionary<DayPlanStateEventId, IDayPlanStateRemoved>();
		
        private IEnumerable<IDayPlanStateRemoved> _readOnlyDayPlanEvents;

        public virtual IEnumerable<IDayPlanStateRemoved> DayPlanEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
					return this._dayPlanEvents.Values;
                }
                else
                {
                    if (_readOnlyDayPlanEvents != null) { return _readOnlyDayPlanEvents; }
                    var eventDao = DayPlanStateEventDao;
                    var eL = new List<IDayPlanStateRemoved>();
                    foreach (var e in eventDao.FindByMonthPlanStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IDayPlanStateRemoved)e);
                    }
                    return (_readOnlyDayPlanEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddDayPlanEvent(e);
                    }
                }
                else { this._dayPlanEvents.Clear(); }
            }
        }
	
		public virtual void AddDayPlanEvent(IDayPlanStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._dayPlanEvents[e.StateEventId] = e;
		}

        public virtual IDayPlanStateRemoved NewDayPlanStateRemoved(int day)
        {
            var stateEvent = new DayPlanStateRemoved(NewDayPlanStateEventId(day));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IDayPlanStateRemoved e in this.DayPlanEvents) {
				DayPlanStateEventDao.Save(e);
			}
		}


	}



}

