// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public abstract class DayPlanCommandDtoBase : ICommandDto, ICreateDayPlan, IMergePatchDayPlan, IRemoveDayPlan
	{

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual int Day { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }


		public virtual PersonalNameDto PersonalName { get; set; }

        PersonalName ICreateOrMergePatchOrRemoveDayPlan.PersonalName
        {
            get 
            {
                return (this.PersonalName == null) ? null : this.PersonalName.ToPersonalName();
            }
            set 
            {
                this.PersonalName = (value == null) ? null : new PersonalNameDto(value);
            }
        }

		public virtual int? Year { get; set; }

		public virtual int? Month { get; set; }


        int ICreateOrMergePatchOrRemoveDayPlan.Year
        {
            get 
            {
                var b = this.Year;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(int);
            }
            set 
            {
                this.Year = value;
            }
        }


        int ICreateOrMergePatchOrRemoveDayPlan.Month
        {
            get 
            {
                var b = this.Month;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(int);
            }
            set 
            {
                this.Month = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IMergePatchDayPlan.IsPropertyDescriptionRemoved
        {
            get
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchDayPlan.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrRemoveDayPlanDto : DayPlanCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateDayPlanDto : CreateOrMergePatchOrRemoveDayPlanDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchDayPlanDto : CreateOrMergePatchOrRemoveDayPlanDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class RemoveDayPlanDto : CreateOrMergePatchOrRemoveDayPlanDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Remove;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}


    public partial class CreateOrMergePatchOrRemoveDayPlanDtos : IDayPlanCommands, ICreateDayPlanCommands, IEnumerable<CreateOrMergePatchOrRemoveDayPlanDto>
    {
        private List<CreateOrMergePatchOrRemoveDayPlanDto> _innerCommands = new List<CreateOrMergePatchOrRemoveDayPlanDto>();

        public virtual CreateOrMergePatchOrRemoveDayPlanDto[] ToArray()
        {
            return _innerCommands.ToArray();
        }

        public virtual void Clear()
        {
            _innerCommands.Clear();
        }

        public virtual void AddRange(IEnumerable<CreateOrMergePatchOrRemoveDayPlanDto> cs)
        {
            _innerCommands.AddRange(cs);
        }

        void IDayPlanCommands.Add(IDayPlanCommand c)
        {
            _innerCommands.Add((CreateOrMergePatchOrRemoveDayPlanDto)c);
        }

        void IDayPlanCommands.Remove(IDayPlanCommand c)
        {
            _innerCommands.Remove((CreateOrMergePatchOrRemoveDayPlanDto)c);
        }


        IEnumerator<CreateOrMergePatchOrRemoveDayPlanDto> IEnumerable<CreateOrMergePatchOrRemoveDayPlanDto>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        IEnumerator<IDayPlanCommand> IEnumerable<IDayPlanCommand>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        void ICreateDayPlanCommands.Add(ICreateDayPlan c)
        {
            _innerCommands.Add((CreateDayPlanDto)c);
        }

        void ICreateDayPlanCommands.Remove(ICreateDayPlan c)
        {
            _innerCommands.Remove((CreateDayPlanDto)c);
        }

        IEnumerator<ICreateDayPlan> IEnumerable<ICreateDayPlan>.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }






}

