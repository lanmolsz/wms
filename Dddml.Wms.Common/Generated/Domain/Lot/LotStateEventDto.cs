// <autogenerated>
//   This file was generated by T4 code generator GenerateLotDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Lot;

namespace Dddml.Wms.Domain.Lot
{

	public abstract class LotStateEventDtoBase : IStateEventDto, ILotStateCreated, ILotStateMergePatched, ILotStateDeleted
	{

        private LotEventIdDto _stateEventId;

		protected internal virtual LotEventIdDto StateEventId 
        {
            get 
            {
                if (_stateEventId == null) { _stateEventId = new LotEventIdDto(); }
                return _stateEventId;
            }
            set
            {
                _stateEventId = value;
            }
        }

        public virtual string LotId
        {
            get { return StateEventId.LotId; }
            set { StateEventId.LotId = value; }
        }

        public virtual long Version
        {
            get { return StateEventId.Version; }
            set { StateEventId.Version = value; }
        }

		public virtual decimal? Quantity { get; set; }

		public virtual DateTime? ExpirationDate { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		LotEventId IGlobalIdentity<LotEventId>.GlobalId {
			get 
			{
				return this.StateEventId.ToLotEventId();
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool ILotStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }

		public virtual bool? IsPropertyQuantityRemoved { get; set; }

        bool ILotStateMergePatched.IsPropertyQuantityRemoved
        {
            get 
            {
                var b = this.IsPropertyQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyExpirationDateRemoved { get; set; }

        bool ILotStateMergePatched.IsPropertyExpirationDateRemoved
        {
            get 
            {
                var b = this.IsPropertyExpirationDateRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyExpirationDateRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool ILotStateMergePatched.IsPropertyActiveRemoved
        {
            get 
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        LotEventId ILotStateEvent.StateEventId
        {
            get { return this.StateEventId.ToLotEventId(); }
        }

        protected LotStateEventDtoBase()
        {
        }

        protected LotStateEventDtoBase(LotEventIdDto stateEventId)
        {
            this.StateEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IStateEventDto.StateEventType 
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}


    public class LotStateCreatedOrMergePatchedOrDeletedDto : LotStateEventDtoBase
    {
        private string _stateEventType;

        public virtual string StateEventType
        {
            get { return _stateEventType; }
            set { _stateEventType = value; }
        }

        protected override string GetStateEventType()
        {
            return this._stateEventType;
        }

    }



	public class LotStateCreatedDto : LotStateCreatedOrMergePatchedOrDeletedDto
	{
		public LotStateCreatedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class LotStateMergePatchedDto : LotStateCreatedOrMergePatchedOrDeletedDto
	{
		public LotStateMergePatchedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class LotStateDeletedDto : LotStateCreatedOrMergePatchedOrDeletedDto
	{
		public LotStateDeletedDto()
		{
		}

        public override string StateEventType
        {
            get { return this.GetStateEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

	}


    public partial class LotStateCreatedOrMergePatchedOrDeletedDtos : IEnumerable<ILotStateCreated>, IEnumerable<ILotStateMergePatched>, IEnumerable<ILotStateDeleted>
    {
        private List<LotStateCreatedOrMergePatchedOrDeletedDto> _innerStateEvents = new List<LotStateCreatedOrMergePatchedOrDeletedDto>();

        public virtual LotStateCreatedOrMergePatchedOrDeletedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<LotStateCreatedOrMergePatchedOrDeletedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<ILotStateCreated> IEnumerable<ILotStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<ILotStateMergePatched> IEnumerable<ILotStateMergePatched>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<ILotStateDeleted> IEnumerable<ILotStateDeleted>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        public void AddLotEvent(ILotStateCreated e)
        {
            _innerStateEvents.Add((LotStateCreatedDto)e);
        }

        public void AddLotEvent(ILotStateEvent e)
        {
            _innerStateEvents.Add((LotStateCreatedOrMergePatchedOrDeletedDto)e);
        }

        public void AddLotEvent(ILotStateDeleted e)
        {
            _innerStateEvents.Add((LotStateDeletedDto)e);
        }

    }


}

