// <autogenerated>
//   This file was generated by T4 code generator GenerateLotDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Lot;

namespace Dddml.Wms.Domain.Lot
{
    public partial class LotAggregate : AggregateBase, ILotAggregate
    {

        readonly ILotState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public ILotState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public LotAggregate(ILotState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((ILotStateProperties)_state).Version == LotState.VersionZero)
            {
                if (IsCommandCreate((ILotCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((ILotCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(ILotCommand c)
        {
            return c.Version == LotState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateLot c)
        {
            ILotStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchLot c)
        {
            ILotStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteLot c)
        {
            ILotStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual ILotStateCreated Map(ICreateLot c)
        {
			var stateEventId = new LotStateEventId(c.LotId, c.Version);
            ILotStateCreated e = NewLotStateCreated(stateEventId);
		
            e.CreationDate = c.CreationDate;
            e.Quantity = c.Quantity;
            e.ExpirationDate = c.ExpirationDate;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;


            return e;
        }

        protected virtual ILotStateMergePatched Map(IMergePatchLot c)
        {
			var stateEventId = new LotStateEventId(c.LotId, c.Version);
            ILotStateMergePatched e = NewLotStateMergePatched(stateEventId);

            e.CreationDate = c.CreationDate;
            e.Quantity = c.Quantity;
            e.ExpirationDate = c.ExpirationDate;
            e.Active = c.Active;
            e.IsPropertyCreationDateRemoved = c.IsPropertyCreationDateRemoved;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertyExpirationDateRemoved = c.IsPropertyExpirationDateRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;


            return e;
        }

        protected virtual ILotStateDeleted Map(IDeleteLot c)
        {
			var stateEventId = new LotStateEventId(c.LotId, c.Version);
            ILotStateDeleted e = NewLotStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected LotStateCreated NewLotStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new LotStateEventId(_state.LotId, ((ILotStateProperties)_state).Version);
            var e = NewLotStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected LotStateMergePatched NewLotStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new LotStateEventId(_state.LotId, ((ILotStateProperties)_state).Version);
            var e = NewLotStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected LotStateDeleted NewLotStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new LotStateEventId(_state.LotId, ((ILotStateProperties)_state).Version);
            var e = NewLotStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private LotStateCreated NewLotStateCreated(LotStateEventId stateEventId)
		{
			return new LotStateCreated(stateEventId);			
		}

        private LotStateMergePatched NewLotStateMergePatched(LotStateEventId stateEventId)
		{
			return new LotStateMergePatched(stateEventId);
		}

        private LotStateDeleted NewLotStateDeleted(LotStateEventId stateEventId)
		{
			return new LotStateDeleted(stateEventId);
		}
    }

}

