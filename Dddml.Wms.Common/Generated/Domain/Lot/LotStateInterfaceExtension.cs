// <autogenerated>
//   This file was generated by T4 code generator GenerateLotDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Lot;

namespace Dddml.Wms.Domain.Lot
{

	public static partial class LotStateInterfaceExtension
	{

        public static ILotCommand ToCreateOrMergePatchLot<TCreateLot, TMergePatchLot>(this ILotState state)
            where TCreateLot : ICreateLot, new()
            where TMergePatchLot : IMergePatchLot, new()
        {
            bool bUnsaved = ((ILotState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateLot<TCreateLot>();
            }
            else 
            {
                return state.ToMergePatchLot<TMergePatchLot>();
            }
        }

        public static TDeleteLot ToDeleteLot<TDeleteLot>(this ILotState state)
            where TDeleteLot : IDeleteLot, new()
        {
            var cmd = new TDeleteLot();
            cmd.LotId = state.LotId;
            cmd.Version = ((ILotStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchLot ToMergePatchLot<TMergePatchLot>(this ILotState state)
            where TMergePatchLot : IMergePatchLot, new()
        {
            var cmd = new TMergePatchLot();

            cmd.Version = ((ILotStateProperties)state).Version;

            cmd.LotId = state.LotId;
            cmd.CreationDate = state.CreationDate;
            cmd.Quantity = state.Quantity;
            cmd.ExpirationDate = state.ExpirationDate;
            cmd.Active = ((ILotStateProperties)state).Active;
            
            if (state.CreationDate == null) { cmd.IsPropertyCreationDateRemoved = true; }
            if (state.Quantity == null) { cmd.IsPropertyQuantityRemoved = true; }
            if (state.ExpirationDate == null) { cmd.IsPropertyExpirationDateRemoved = true; }
            return cmd;
        }

        public static TCreateLot ToCreateLot<TCreateLot>(this ILotState state)
            where TCreateLot : ICreateLot, new()
        {
            var cmd = new TCreateLot();

            cmd.Version = ((ILotStateProperties)state).Version;

            cmd.LotId = state.LotId;
            cmd.CreationDate = state.CreationDate;
            cmd.Quantity = state.Quantity;
            cmd.ExpirationDate = state.ExpirationDate;
            cmd.Active = ((ILotStateProperties)state).Active;
            return cmd;
        }
		

	}

}

