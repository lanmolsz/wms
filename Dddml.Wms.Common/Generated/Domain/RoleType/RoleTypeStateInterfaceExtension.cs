// <autogenerated>
//   This file was generated by T4 code generator GenerateRoleTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.RoleType;

namespace Dddml.Wms.Domain.RoleType
{

	public static partial class RoleTypeStateInterfaceExtension
	{

        public static IRoleTypeCommand ToCreateOrMergePatchRoleType<TCreateRoleType, TMergePatchRoleType>(this IRoleTypeState state)
            where TCreateRoleType : ICreateRoleType, new()
            where TMergePatchRoleType : IMergePatchRoleType, new()
        {
            bool bUnsaved = ((IRoleTypeState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateRoleType<TCreateRoleType>();
            }
            else 
            {
                return state.ToMergePatchRoleType<TMergePatchRoleType>();
            }
        }

        public static TDeleteRoleType ToDeleteRoleType<TDeleteRoleType>(this IRoleTypeState state)
            where TDeleteRoleType : IDeleteRoleType, new()
        {
            var cmd = new TDeleteRoleType();
            cmd.RoleTypeId = state.RoleTypeId;
            cmd.Version = ((IRoleTypeStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchRoleType ToMergePatchRoleType<TMergePatchRoleType>(this IRoleTypeState state)
            where TMergePatchRoleType : IMergePatchRoleType, new()
        {
            var cmd = new TMergePatchRoleType();

            cmd.Version = ((IRoleTypeStateProperties)state).Version;

            cmd.RoleTypeId = state.RoleTypeId;
            cmd.ParentTypeId = state.ParentTypeId;
            cmd.HasTable = state.HasTable;
            cmd.Description = state.Description;
            cmd.Active = ((IRoleTypeStateProperties)state).Active;
            
            if (state.ParentTypeId == null) { cmd.IsPropertyParentTypeIdRemoved = true; }
            if (state.HasTable == null) { cmd.IsPropertyHasTableRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreateRoleType ToCreateRoleType<TCreateRoleType>(this IRoleTypeState state)
            where TCreateRoleType : ICreateRoleType, new()
        {
            var cmd = new TCreateRoleType();

            cmd.Version = ((IRoleTypeStateProperties)state).Version;

            cmd.RoleTypeId = state.RoleTypeId;
            cmd.ParentTypeId = state.ParentTypeId;
            cmd.HasTable = state.HasTable;
            cmd.Description = state.Description;
            cmd.Active = ((IRoleTypeStateProperties)state).Active;
            return cmd;
        }
		

	}

}

