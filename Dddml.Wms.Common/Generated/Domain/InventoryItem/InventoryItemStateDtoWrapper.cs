// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

	public partial class InventoryItemStateDtoWrapper : StateDtoWrapperBase, IInventoryItemStateDto, IInventoryItemState
	{

        internal static IList<string> _collectionFieldNames = new string[] { "Entries" };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IInventoryItemState _state;

        public InventoryItemStateDtoWrapper()
        {
            this._state = new InventoryItemState();
        }

		public InventoryItemStateDtoWrapper(IInventoryItemState state)
		{
            this._state = state;
		}

		public IInventoryItemState ToInventoryItemState()
		{
			return this._state;
		}

		public virtual InventoryItemId InventoryItemId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("InventoryItemId"))
                {
                    return _state.InventoryItemId;
                }
                return null;
            }
            set
            {
                _state.InventoryItemId = value;
            }
        }

        InventoryItemId IInventoryItemStateProperties.InventoryItemId
        {
            get 
            {
                return (this._state as IInventoryItemStateProperties).InventoryItemId;
            }
            set 
            {
                (this._state as IInventoryItemStateProperties).InventoryItemId = value;
            }
        }

		public virtual decimal? OnHandQuantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("OnHandQuantity"))
                {
                    return _state.OnHandQuantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.OnHandQuantity = value.Value;
                }
            }
        }

        decimal IInventoryItemStateProperties.OnHandQuantity
        {
            get 
            {
                return (this._state as IInventoryItemStateProperties).OnHandQuantity;
            }
            set 
            {
                (this._state as IInventoryItemStateProperties).OnHandQuantity = value;
            }
        }

		public virtual decimal? InTransitQuantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("InTransitQuantity"))
                {
                    return _state.InTransitQuantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.InTransitQuantity = value.Value;
                }
            }
        }

        decimal IInventoryItemStateProperties.InTransitQuantity
        {
            get 
            {
                return (this._state as IInventoryItemStateProperties).InTransitQuantity;
            }
            set 
            {
                (this._state as IInventoryItemStateProperties).InTransitQuantity = value;
            }
        }

		public virtual decimal? ReservedQuantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("ReservedQuantity"))
                {
                    return _state.ReservedQuantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.ReservedQuantity = value.Value;
                }
            }
        }

        decimal IInventoryItemStateProperties.ReservedQuantity
        {
            get 
            {
                return (this._state as IInventoryItemStateProperties).ReservedQuantity;
            }
            set 
            {
                (this._state as IInventoryItemStateProperties).ReservedQuantity = value;
            }
        }

		public virtual decimal? OccupiedQuantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("OccupiedQuantity"))
                {
                    return _state.OccupiedQuantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.OccupiedQuantity = value.Value;
                }
            }
        }

        decimal IInventoryItemStateProperties.OccupiedQuantity
        {
            get 
            {
                return (this._state as IInventoryItemStateProperties).OccupiedQuantity;
            }
            set 
            {
                (this._state as IInventoryItemStateProperties).OccupiedQuantity = value;
            }
        }

		public virtual decimal? VirtualQuantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("VirtualQuantity"))
                {
                    return _state.VirtualQuantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.VirtualQuantity = value.Value;
                }
            }
        }

        decimal IInventoryItemStateProperties.VirtualQuantity
        {
            get 
            {
                return (this._state as IInventoryItemStateProperties).VirtualQuantity;
            }
            set 
            {
                (this._state as IInventoryItemStateProperties).VirtualQuantity = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IInventoryItemStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IInventoryItemStateProperties).Version = value.Value;
                }
            }
        }

        long IInventoryItemStateProperties.Version
        {
            get 
            {
                return (this._state as IInventoryItemStateProperties).Version;
            }
            set 
            {
                (this._state as IInventoryItemStateProperties).Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		InventoryItemId IGlobalIdentity<InventoryItemId>.GlobalId
		{
			get { return (_state as IInventoryItemState).GlobalId; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IInventoryItemState).CreatedBy; }
            set { (_state as IInventoryItemState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IInventoryItemState).CreatedAt; }
            set { (_state as IInventoryItemState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IInventoryItemState).UpdatedBy; }
            set { (_state as IInventoryItemState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IInventoryItemState).UpdatedAt; }
            set { (_state as IInventoryItemState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as IInventoryItemStateProperties).Version; }
		}

		#endregion

        bool IInventoryItemState.IsUnsaved
        {
            get { return this.Version == InventoryItemState.VersionZero; }
        }

        public virtual IInventoryItemEntryStateDto[] Entries
        {
            get 
            {
                if (!(this as IStateDtoWrapper).ReturnedFieldsContains("Entries"))
                {
                    return null;
                }
                var dtos = new List<IInventoryItemEntryStateDto>();
                if (this._state.Entries != null)
                {
                    foreach (var s in this._state.Entries)
                    {
                        var dto = new InventoryItemEntryStateDtoWrapper((InventoryItemEntryState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "Entries");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDtoWrapper).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDtoWrapper).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new InventoryItemEntryStateDtoWrapper[0]; }
                var states = new List<IInventoryItemEntryState>();
                foreach (var s in value)
                {
                    states.Add(s.ToInventoryItemEntryState());
                }
                this._state.Entries = new DtoInventoryItemEntryStates(this._state, states);
            }
        }

        IInventoryItemEntryStates IInventoryItemState.Entries
        {
            get { return _state.Entries; }
            set { _state.Entries = value; }
        }

		void IInventoryItemState.When(IInventoryItemStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IInventoryItemState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void IInventoryItemState.When(IInventoryItemStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IInventoryItemState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

        public class DtoInventoryItemEntryStates : IInventoryItemEntryStates
        {

            private IInventoryItemState _outerState;

            private IEnumerable<IInventoryItemEntryState> _innerStates;

            public DtoInventoryItemEntryStates(IInventoryItemState outerState, IEnumerable<IInventoryItemEntryState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new IInventoryItemEntryState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<IInventoryItemEntryState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public IInventoryItemEntryState Get(long entrySeqId)
            {
                throw new NotSupportedException();
            }

            public IInventoryItemEntryState Get(long entrySeqId, bool forCreation)
            {
                throw new NotSupportedException();
            }

            public IInventoryItemEntryState Get(long entrySeqId, bool forCreation, bool nullAllowed)
            {
                throw new NotSupportedException();
            }

            public void Remove(IInventoryItemEntryState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(IInventoryItemEntryState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

	}

    partial class InventoryItemStateDtoWrapperCollection : StateDtoWrapperCollectionBase<InventoryItemStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(InventoryItemStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

