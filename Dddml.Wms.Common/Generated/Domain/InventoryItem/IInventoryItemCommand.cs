// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{
	public interface IInventoryItemCommand : IAggregateCommand<InventoryItemId, long>, ICommandDto
	{
		long Version { get; set; }

		InventoryItemId InventoryItemId { get; set; }

	}


	public interface ICreateOrMergePatchOrDeleteInventoryItem : IInventoryItemCommand
	{

		decimal? QuantityOnHand { get; set; }

		decimal? QuantityReserved { get; set; }

		decimal? QuantityOccupied { get; set; }

		decimal? QuantityVirtual { get; set; }

		bool? Active { get; set; }


	}

	public interface ICreateInventoryItem : ICreateOrMergePatchOrDeleteInventoryItem
	{
        ICreateInventoryItemEntryCommands Entries { get; }

        ICreateInventoryItemEntry NewCreateInventoryItemEntry();

	}

	public interface IMergePatchInventoryItem : ICreateOrMergePatchOrDeleteInventoryItem
	{

		bool IsPropertyQuantityOnHandRemoved { get; set; }

		bool IsPropertyQuantityReservedRemoved { get; set; }

		bool IsPropertyQuantityOccupiedRemoved { get; set; }

		bool IsPropertyQuantityVirtualRemoved { get; set; }

		bool IsPropertyActiveRemoved { get; set; }

        IInventoryItemEntryCommands InventoryItemEntryCommands { get; }

        ICreateInventoryItemEntry NewCreateInventoryItemEntry();


	}

	public interface IDeleteInventoryItem : ICreateOrMergePatchOrDeleteInventoryItem
	{
	}

    public interface ICreateInventoryItemEntryCommands : IEnumerable<ICreateInventoryItemEntry>
    {
        void Add(ICreateInventoryItemEntry c);

        void Remove(ICreateInventoryItemEntry c);

        void Clear();

    }

    public interface IInventoryItemEntryCommands : IEnumerable<IInventoryItemEntryCommand>
    {
        void Add(IInventoryItemEntryCommand c);

        void Remove(IInventoryItemEntryCommand c);

        void Clear();

    }


}

