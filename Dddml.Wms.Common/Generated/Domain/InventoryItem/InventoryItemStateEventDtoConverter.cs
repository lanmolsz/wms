// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

    public class InventoryItemStateEventDtoConverter
    {
        public virtual InventoryItemStateCreatedOrMergePatchedOrDeletedDto ToInventoryItemStateEventDto(IInventoryItemStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IInventoryItemStateCreated)stateEvent;
                return ToInventoryItemStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IInventoryItemStateMergePatched)stateEvent;
                return ToInventoryItemStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual InventoryItemStateCreatedDto ToInventoryItemStateCreatedDto(IInventoryItemStateCreated e)
        {
            var dto = new InventoryItemStateCreatedDto();
            dto.InventoryItemEventId = e.InventoryItemEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.OnHandQuantity = e.OnHandQuantity;
            dto.InTransitQuantity = e.InTransitQuantity;
            dto.ReservedQuantity = e.ReservedQuantity;
            dto.OccupiedQuantity = e.OccupiedQuantity;
            dto.VirtualQuantity = e.VirtualQuantity;
            var inventoryItemEntryEvents = new List<InventoryItemEntryStateCreatedDto>();
            foreach (var ee in e.InventoryItemEntryEvents)
            {
                InventoryItemEntryStateCreatedDto eeDto = InventoryItemEntryStateEventDtoConverter.ToInventoryItemEntryStateCreatedDto(ee);
                inventoryItemEntryEvents.Add(eeDto);
            }
            dto.InventoryItemEntryEvents = inventoryItemEntryEvents.ToArray();

            return dto;
        }

        public virtual InventoryItemStateMergePatchedDto ToInventoryItemStateMergePatchedDto(IInventoryItemStateMergePatched e)
        {
            var dto = new InventoryItemStateMergePatchedDto();
            dto.InventoryItemEventId = e.InventoryItemEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.OnHandQuantity = e.OnHandQuantity;
            dto.InTransitQuantity = e.InTransitQuantity;
            dto.ReservedQuantity = e.ReservedQuantity;
            dto.OccupiedQuantity = e.OccupiedQuantity;
            dto.VirtualQuantity = e.VirtualQuantity;
            dto.IsPropertyOnHandQuantityRemoved = e.IsPropertyOnHandQuantityRemoved;
            dto.IsPropertyInTransitQuantityRemoved = e.IsPropertyInTransitQuantityRemoved;
            dto.IsPropertyReservedQuantityRemoved = e.IsPropertyReservedQuantityRemoved;
            dto.IsPropertyOccupiedQuantityRemoved = e.IsPropertyOccupiedQuantityRemoved;
            dto.IsPropertyVirtualQuantityRemoved = e.IsPropertyVirtualQuantityRemoved;
            var inventoryItemEntryEvents = new List<InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.InventoryItemEntryEvents)
            {
                InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto eeDto = InventoryItemEntryStateEventDtoConverter.ToInventoryItemEntryStateEventDto(ee);
                inventoryItemEntryEvents.Add(eeDto);
            }
            dto.InventoryItemEntryEvents = inventoryItemEntryEvents.ToArray();


            return dto;
        }


        protected virtual InventoryItemEntryStateEventDtoConverter InventoryItemEntryStateEventDtoConverter
        {
            get
            {
                return new InventoryItemEntryStateEventDtoConverter();
            }
        }


    }


}

