// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

	public abstract class InventoryItemCommandBase : IInventoryItemCommand
	{
		public virtual InventoryItemId InventoryItemId { get; set; }


		InventoryItemId IAggregateCommand<InventoryItemId, long>.AggregateId
		{
			get
			{
				return this.InventoryItemId;
			}
		}


		long IAggregateCommand<InventoryItemId, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual bool? Active { get; set; }


		// //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();


	}


	public class CreateInventoryItem : InventoryItemCommandBase, ICreateInventoryItem
	{
		
		public CreateInventoryItem ()
		{
		}


        private CreateInventoryItemEntryCommands _entries = new CreateInventoryItemEntryCommands();

        public ICreateInventoryItemEntryCommands Entries
        {
            get
            {
                return this._entries;
            }
        }

        public CreateInventoryItemEntry NewCreateInventoryItemEntry()
        {
            var c = new CreateInventoryItemEntry();
            c.InventoryItemId = this.InventoryItemId;

            return c;
        }

        ICreateInventoryItemEntry ICreateInventoryItem.NewCreateInventoryItemEntry()
        {
            return this.NewCreateInventoryItemEntry();
        }



        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }
	}


	public class MergePatchInventoryItem :InventoryItemCommandBase, IMergePatchInventoryItem
	{

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MergePatchInventoryItem ()
		{
		}

        private InventoryItemEntryCommands _inventoryItemEntryCommands = new InventoryItemEntryCommands();

        public IInventoryItemEntryCommands InventoryItemEntryCommands
        {
            get
            {
                return this._inventoryItemEntryCommands;
            }
        }


        public CreateInventoryItemEntry NewCreateInventoryItemEntry()
        {
            var c = new CreateInventoryItemEntry();
            c.InventoryItemId = this.InventoryItemId;

            return c;
        }

        ICreateInventoryItemEntry IMergePatchInventoryItem.NewCreateInventoryItemEntry()
        {
            return this.NewCreateInventoryItemEntry();
        }


        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteInventoryItem : InventoryItemCommandBase, IDeleteInventoryItem
	{
		public DeleteInventoryItem ()
		{
		}

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }

	}


    public class CreateInventoryItemEntryCommands : ICreateInventoryItemEntryCommands
    {
        private List<ICreateInventoryItemEntry> _innerCommands = new List<ICreateInventoryItemEntry>();

        public void Add(ICreateInventoryItemEntry c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(ICreateInventoryItemEntry c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<ICreateInventoryItemEntry> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public class InventoryItemEntryCommands : IInventoryItemEntryCommands
    {
        private List<IInventoryItemEntryCommand> _innerCommands = new List<IInventoryItemEntryCommand>();

        public void Add(IInventoryItemEntryCommand c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(IInventoryItemEntryCommand c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<IInventoryItemEntryCommand> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public static partial class InventoryItemCommands
    {
    }

}
