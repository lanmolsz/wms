// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

	public abstract class InventoryItemStateEventBase : IInventoryItemStateEvent
	{

		public virtual InventoryItemEventId StateEventId { get; set; }

        public virtual InventoryItemId InventoryItemId
        {
            get { return StateEventId.InventoryItemId; }
            set { StateEventId.InventoryItemId = value; }
        }

		public virtual decimal? OnHandQuantity { get; set; }

		public virtual decimal? InTransitQuantity { get; set; }

		public virtual decimal? ReservedQuantity { get; set; }

		public virtual decimal? OccupiedQuantity { get; set; }

		public virtual decimal? VirtualQuantity { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		InventoryItemEventId IGlobalIdentity<InventoryItemEventId>.GlobalId {
			get
			{
				return this.StateEventId;
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IInventoryItemStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected InventoryItemStateEventBase()
        {
        }

        protected InventoryItemStateEventBase(InventoryItemEventId stateEventId)
        {
            this.StateEventId = stateEventId;
        }

		protected IInventoryItemEntryStateEventDao InventoryItemEntryStateEventDao
		{
			get { return ApplicationContext.Current["InventoryItemEntryStateEventDao"] as IInventoryItemEntryStateEventDao; }
		}

        protected InventoryItemEntryEventId NewInventoryItemEntryEventId(long entrySeqId)
        {
            var stateEventId = new InventoryItemEntryEventId(this.StateEventId.InventoryItemId, entrySeqId, this.StateEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IInventoryItemEntryStateEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IInventoryItemStateEvent oe, IInventoryItemEntryStateEvent e)
		{
			if (!oe.StateEventId.InventoryItemId.Equals(e.StateEventId.InventoryItemId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id InventoryItemId {0} but inner id InventoryItemId {1}", 
					oe.StateEventId.InventoryItemId, e.StateEventId.InventoryItemId);
			}
		}



        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class InventoryItemStateCreated : InventoryItemStateEventBase, IInventoryItemStateCreated, ISaveable
	{
		public InventoryItemStateCreated () : this(new InventoryItemEventId())
		{
		}

		public InventoryItemStateCreated (InventoryItemEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<InventoryItemEntryEventId, IInventoryItemEntryStateCreated> _inventoryItemEntryEvents = new Dictionary<InventoryItemEntryEventId, IInventoryItemEntryStateCreated>();
        
        private IEnumerable<IInventoryItemEntryStateCreated> _readOnlyInventoryItemEntryEvents;

        public virtual IEnumerable<IInventoryItemEntryStateCreated> InventoryItemEntryEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._inventoryItemEntryEvents.Values;
                }
                else
                {
                    if (_readOnlyInventoryItemEntryEvents != null) { return _readOnlyInventoryItemEntryEvents; }
                    var eventDao = InventoryItemEntryStateEventDao;
                    var eL = new List<IInventoryItemEntryStateCreated>();
                    foreach (var e in eventDao.FindByInventoryItemEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IInventoryItemEntryStateCreated)e);
                    }
                    return (_readOnlyInventoryItemEntryEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddInventoryItemEntryEvent(e);
                    }
                }
                else { this._inventoryItemEntryEvents.Clear(); }
            }
        }
    
		public virtual void AddInventoryItemEntryEvent(IInventoryItemEntryStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._inventoryItemEntryEvents[e.StateEventId] = e;
		}

        public virtual IInventoryItemEntryStateCreated NewInventoryItemEntryStateCreated(long entrySeqId)
        {
            var stateEvent = new InventoryItemEntryStateCreated(NewInventoryItemEntryEventId(entrySeqId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IInventoryItemEntryStateCreated e in this.InventoryItemEntryEvents) {
				InventoryItemEntryStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class InventoryItemStateMergePatched : InventoryItemStateEventBase, IInventoryItemStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyOnHandQuantityRemoved { get; set; }

		public virtual bool IsPropertyInTransitQuantityRemoved { get; set; }

		public virtual bool IsPropertyReservedQuantityRemoved { get; set; }

		public virtual bool IsPropertyOccupiedQuantityRemoved { get; set; }

		public virtual bool IsPropertyVirtualQuantityRemoved { get; set; }


		public InventoryItemStateMergePatched ()
		{
		}

		public InventoryItemStateMergePatched (InventoryItemEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<InventoryItemEntryEventId, IInventoryItemEntryStateEvent> _inventoryItemEntryEvents = new Dictionary<InventoryItemEntryEventId, IInventoryItemEntryStateEvent>();

        private IEnumerable<IInventoryItemEntryStateEvent> _readOnlyInventoryItemEntryEvents;
        
        public virtual IEnumerable<IInventoryItemEntryStateEvent> InventoryItemEntryEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._inventoryItemEntryEvents.Values;
                }
                else
                {
                    if (_readOnlyInventoryItemEntryEvents != null) { return _readOnlyInventoryItemEntryEvents; }
                    var eventDao = InventoryItemEntryStateEventDao;
                    var eL = new List<IInventoryItemEntryStateEvent>();
                    foreach (var e in eventDao.FindByInventoryItemEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IInventoryItemEntryStateEvent)e);
                    }
                    return (_readOnlyInventoryItemEntryEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddInventoryItemEntryEvent(e);
                    }
                }
                else { this._inventoryItemEntryEvents.Clear(); }
            }
        }

		public virtual void AddInventoryItemEntryEvent(IInventoryItemEntryStateEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._inventoryItemEntryEvents[e.StateEventId] = e;
		}

        public virtual IInventoryItemEntryStateCreated NewInventoryItemEntryStateCreated(long entrySeqId)
        {
            var stateEvent = new InventoryItemEntryStateCreated(NewInventoryItemEntryEventId(entrySeqId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IInventoryItemEntryStateEvent e in this.InventoryItemEntryEvents) {
				InventoryItemEntryStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

