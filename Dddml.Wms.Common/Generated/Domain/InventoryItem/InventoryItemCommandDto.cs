// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

	public abstract class InventoryItemCommandDtoBase : ICommandDto, ICreateInventoryItem, IMergePatchInventoryItem, IDeleteInventoryItem
	{

		InventoryItemId IAggregateCommand<InventoryItemId, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteInventoryItem)this).InventoryItemId;
			}
		}


		long IAggregateCommand<InventoryItemId, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual InventoryItemIdDto InventoryItemId { get; set; }

		public virtual decimal? QuantityOnHand { get; set; }

		public virtual decimal? QuantityReserved { get; set; }

		public virtual decimal? QuantityOccupied { get; set; }

		public virtual decimal? QuantityVirtual { get; set; }

		public virtual bool? Active { get; set; }


        InventoryItemId IInventoryItemCommand.InventoryItemId
        {
            get 
            {
                return this.InventoryItemId.ToInventoryItemId();
            }
            set 
            {
                this.InventoryItemId = new InventoryItemIdDtoWrapper(value);
            }
        }

		public virtual bool? IsPropertyQuantityOnHandRemoved { get; set; }

        bool IMergePatchInventoryItem.IsPropertyQuantityOnHandRemoved
        {
            get
            {
                var b = this.IsPropertyQuantityOnHandRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyQuantityOnHandRemoved = value;
            }
        }

		public virtual bool? IsPropertyQuantityReservedRemoved { get; set; }

        bool IMergePatchInventoryItem.IsPropertyQuantityReservedRemoved
        {
            get
            {
                var b = this.IsPropertyQuantityReservedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyQuantityReservedRemoved = value;
            }
        }

		public virtual bool? IsPropertyQuantityOccupiedRemoved { get; set; }

        bool IMergePatchInventoryItem.IsPropertyQuantityOccupiedRemoved
        {
            get
            {
                var b = this.IsPropertyQuantityOccupiedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyQuantityOccupiedRemoved = value;
            }
        }

		public virtual bool? IsPropertyQuantityVirtualRemoved { get; set; }

        bool IMergePatchInventoryItem.IsPropertyQuantityVirtualRemoved
        {
            get
            {
                var b = this.IsPropertyQuantityVirtualRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyQuantityVirtualRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchInventoryItem.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

        ICreateInventoryItemEntryCommands ICreateInventoryItem.Entries
        {
            get
            {
                return this._entries;
            }
        }

        IInventoryItemEntryCommands IMergePatchInventoryItem.InventoryItemEntryCommands
        {
            get
            {
                return this._entries;
            }
        }

        public virtual CreateInventoryItemEntryDto NewCreateInventoryItemEntry()
        {
            var c = new CreateInventoryItemEntryDto();
            c.InventoryItemId = this.InventoryItemId;

            return c;
        }

        ICreateInventoryItemEntry ICreateInventoryItem.NewCreateInventoryItemEntry()
        {
            return this.NewCreateInventoryItemEntry();
        }

        ICreateInventoryItemEntry IMergePatchInventoryItem.NewCreateInventoryItemEntry()
        {
            return this.NewCreateInventoryItemEntry();
        }

        public virtual MergePatchInventoryItemEntryDto NewMergePatchInventoryItemEntry()
        {
            var c = new MergePatchInventoryItemEntryDto();
            c.InventoryItemId = this.InventoryItemId;

            return c;
        }

        public virtual RemoveInventoryItemEntryDto NewRemoveInventoryItemEntry()
        {
            var c = new RemoveInventoryItemEntryDto();
            c.InventoryItemId = this.InventoryItemId;

            return c;
        }

        private CreateOrMergePatchOrRemoveInventoryItemEntryDtos _entries = new CreateOrMergePatchOrRemoveInventoryItemEntryDtos();

        public virtual CreateOrMergePatchOrRemoveInventoryItemEntryDto[] Entries
        {
            get
            {
                return _entries.ToArray();
            }
            set
            {
                _entries.Clear();
                _entries.AddRange(value);
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteInventoryItemDto : InventoryItemCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateInventoryItemDto : CreateOrMergePatchOrDeleteInventoryItemDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchInventoryItemDto : CreateOrMergePatchOrDeleteInventoryItemDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteInventoryItemDto : CreateOrMergePatchOrDeleteInventoryItemDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}

    public static partial class InventoryItemCommandDtos
    {

    }

}

