// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

	public partial class InventoryItemEntryStateDtoWrapper : StateDtoWrapperBase, IInventoryItemEntryStateDto, IInventoryItemEntryState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IInventoryItemEntryState _state;

        public InventoryItemEntryStateDtoWrapper()
        {
            this._state = new InventoryItemEntryState();
        }

		public InventoryItemEntryStateDtoWrapper(IInventoryItemEntryState state)
		{
            this._state = state;
		}

		public IInventoryItemEntryState ToInventoryItemEntryState()
		{
			return this._state;
		}

		public virtual long? EntrySeqId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("EntrySeqId"))
                {
                    return _state.EntrySeqId;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.EntrySeqId = value.Value;
                }
            }
        }

        long IInventoryItemEntryStateProperties.EntrySeqId
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).EntrySeqId;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).EntrySeqId = value;
            }
        }

		public virtual decimal? QuantityOnHand
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("QuantityOnHand"))
                {
                    return _state.QuantityOnHand;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.QuantityOnHand = value.Value;
                }
            }
        }

        decimal IInventoryItemEntryStateProperties.QuantityOnHand
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).QuantityOnHand;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).QuantityOnHand = value;
            }
        }

		public virtual decimal? QuantityInTransit
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("QuantityInTransit"))
                {
                    return _state.QuantityInTransit;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.QuantityInTransit = value.Value;
                }
            }
        }

        decimal IInventoryItemEntryStateProperties.QuantityInTransit
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).QuantityInTransit;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).QuantityInTransit = value;
            }
        }

		public virtual decimal? QuantityReserved
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("QuantityReserved"))
                {
                    return _state.QuantityReserved;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.QuantityReserved = value.Value;
                }
            }
        }

        decimal IInventoryItemEntryStateProperties.QuantityReserved
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).QuantityReserved;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).QuantityReserved = value;
            }
        }

		public virtual decimal? QuantityOccupied
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("QuantityOccupied"))
                {
                    return _state.QuantityOccupied;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.QuantityOccupied = value.Value;
                }
            }
        }

        decimal IInventoryItemEntryStateProperties.QuantityOccupied
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).QuantityOccupied;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).QuantityOccupied = value;
            }
        }

		public virtual decimal? QuantityVirtual
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("QuantityVirtual"))
                {
                    return _state.QuantityVirtual;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.QuantityVirtual = value.Value;
                }
            }
        }

        decimal IInventoryItemEntryStateProperties.QuantityVirtual
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).QuantityVirtual;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).QuantityVirtual = value;
            }
        }

        public InventoryItemSourceInfoDto Source
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Source"))
                {
					return (_state.Source == null) ? null : new InventoryItemSourceInfoDtoWrapper(_state.Source);
                }
                return null;
            }
            set
            {
                _state.Source = (value == null) ? null : value.ToInventoryItemSourceInfo();
            }
        }

        InventoryItemSourceInfo IInventoryItemEntryStateProperties.Source
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).Source;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).Source = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IInventoryItemEntryStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IInventoryItemEntryStateProperties).Version = value.Value;
                }
            }
        }

        long IInventoryItemEntryStateProperties.Version
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).Version;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).Version = value;
            }
        }

        public InventoryItemIdDto InventoryItemId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("InventoryItemId"))
                {
					return (_state.InventoryItemId == null) ? null : new InventoryItemIdDtoWrapper(_state.InventoryItemId);
                }
                return null;
            }
            set
            {
                _state.InventoryItemId = (value == null) ? null : value.ToInventoryItemId();
            }
        }

        InventoryItemId IInventoryItemEntryStateProperties.InventoryItemId
        {
            get 
            {
                return (this._state as IInventoryItemEntryStateProperties).InventoryItemId;
            }
            set 
            {
                (this._state as IInventoryItemEntryStateProperties).InventoryItemId = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation


		InventoryItemEntryId IGlobalIdentity<InventoryItemEntryId>.GlobalId {
			get { return (_state as IInventoryItemEntryState).GlobalId; }
		}

        long ILocalIdentity<long>.LocalId
        {
			get { return (_state as IInventoryItemEntryState).LocalId; }
        }

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IInventoryItemEntryState).CreatedBy; }
            set { (_state as IInventoryItemEntryState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IInventoryItemEntryState).CreatedAt; }
            set { (_state as IInventoryItemEntryState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IInventoryItemEntryState).UpdatedBy; }
            set { (_state as IInventoryItemEntryState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IInventoryItemEntryState).UpdatedAt; }
            set { (_state as IInventoryItemEntryState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IEntityVersioned<long>.EntityVersion
		{
            get { return (_state as IInventoryItemEntryStateProperties).Version; }
		}

		#endregion

        bool IInventoryItemEntryState.IsUnsaved
        {
            get { return this.Version == InventoryItemEntryState.VersionZero; }
        }

		void IInventoryItemEntryState.When(IInventoryItemEntryStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IInventoryItemEntryState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

        public virtual string CommandId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CommandId"))
                {
                    return _state.CommandId; 
                }
                return null;
            }
            set { _state.CommandId = value; }
        }

		void IInventoryItemEntryState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

	}

    partial class InventoryItemEntryStateDtoWrapperCollection : StateDtoWrapperCollectionBase<InventoryItemEntryStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(InventoryItemEntryStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

