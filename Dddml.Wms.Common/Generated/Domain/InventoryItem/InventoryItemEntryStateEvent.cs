// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

	public abstract class InventoryItemEntryStateEventBase : IInventoryItemEntryStateEvent
	{

        private InventoryItemEntryState _state;

        public virtual InventoryItemEntryState InventoryItemEntryState { get { return _state; } }

        public virtual InventoryItemEntryStateEventId StateEventId
        {
            get
            {
                InventoryItemEntryStateEventId eventId = new InventoryItemEntryStateEventId(_state.InventoryItemId, _state.EntrySeqId, default(long));
                return eventId;
            }
            set
            {
                _state.InventoryItemId = value.InventoryItemId;
                _state.EntrySeqId = value.EntrySeqId;
            }
        }

        public virtual long EntrySeqId
        {
            get { return StateEventId.EntrySeqId; }
            set { StateEventId.EntrySeqId = value; }
        }

        public virtual decimal? QuantityOnHand { get { return _state.QuantityOnHand; } set { _state.QuantityOnHand = (value != null && value.HasValue) ? value.Value : default(decimal); } }

        public virtual decimal? QuantityReserved { get { return _state.QuantityReserved; } set { _state.QuantityReserved = (value != null && value.HasValue) ? value.Value : default(decimal); } }

        public virtual decimal? QuantityOccupied { get { return _state.QuantityOccupied; } set { _state.QuantityOccupied = (value != null && value.HasValue) ? value.Value : default(decimal); } }

        public virtual decimal? QuantityVirtual { get { return _state.QuantityVirtual; } set { _state.QuantityVirtual = (value != null && value.HasValue) ? value.Value : default(decimal); } }

        public virtual InventoryItemSourceVO Source { get { return _state.Source; } set { _state.Source = value; } }

		public virtual string CreatedBy { get { return _state.CreatedBy; } set { _state.CreatedBy = value; } }

		public virtual DateTime CreatedAt { get { return _state.CreatedAt; } set { _state.CreatedAt = value; } }

        public virtual string CommandId { get { return _state.CommandId; } set { _state.CommandId = value; } }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		InventoryItemEntryStateEventId IGlobalIdentity<InventoryItemEntryStateEventId>.GlobalId {
			get
			{
				return this.StateEventId;
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IInventoryItemEntryStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }

		public virtual long Version { get; set; }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected InventoryItemEntryStateEventBase() : this(new InventoryItemEntryState())
        {
        }

        protected InventoryItemEntryStateEventBase(InventoryItemEntryStateEventId stateEventId) : this(new InventoryItemEntryState())
        {
            this.StateEventId = stateEventId;
        }

        protected InventoryItemEntryStateEventBase(InventoryItemEntryState state)
        {
            if (state == null) { throw new ArgumentNullException(); }
            this._state = state;
        }


        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class InventoryItemEntryStateCreated : InventoryItemEntryStateEventBase, IInventoryItemEntryStateCreated
	{
		public InventoryItemEntryStateCreated () : this(new InventoryItemEntryStateEventId())
		{
		}

		public InventoryItemEntryStateCreated (InventoryItemEntryStateEventId stateEventId) : base(stateEventId)
		{
		}

        public InventoryItemEntryStateCreated(InventoryItemEntryState state) : base(state)
        {
        }


        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}




}

