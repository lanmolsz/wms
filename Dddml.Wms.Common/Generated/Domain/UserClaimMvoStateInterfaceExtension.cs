// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public static partial class UserClaimMvoStateInterfaceExtension
	{

        public static IUserClaimMvoCommand ToCreateOrMergePatchUserClaimMvo<TCreateUserClaimMvo, TMergePatchUserClaimMvo>(this IUserClaimMvoState state)
            where TCreateUserClaimMvo : ICreateUserClaimMvo, new()
            where TMergePatchUserClaimMvo : IMergePatchUserClaimMvo, new()
        {
            bool bUnsaved = ((IUserClaimMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateUserClaimMvo<TCreateUserClaimMvo>();
            }
            else 
            {
                return state.ToMergePatchUserClaimMvo<TMergePatchUserClaimMvo>();
            }
        }

        public static TDeleteUserClaimMvo ToDeleteUserClaimMvo<TDeleteUserClaimMvo>(this IUserClaimMvoState state)
            where TDeleteUserClaimMvo : IDeleteUserClaimMvo, new()
        {
            var cmd = new TDeleteUserClaimMvo();
            cmd.UserClaimId = state.UserClaimId;
            cmd.UserVersion = ((IUserClaimMvoStateProperties)state).UserVersion;

            return cmd;
        }

        public static TMergePatchUserClaimMvo ToMergePatchUserClaimMvo<TMergePatchUserClaimMvo>(this IUserClaimMvoState state)
            where TMergePatchUserClaimMvo : IMergePatchUserClaimMvo, new()
        {
            var cmd = new TMergePatchUserClaimMvo();

            cmd.UserVersion = ((IUserClaimMvoStateProperties)state).UserVersion;

            cmd.UserClaimId = state.UserClaimId;
            cmd.ClaimType = state.ClaimType;
            cmd.ClaimValue = state.ClaimValue;
            cmd.Version = ((IUserClaimMvoStateProperties)state).Version;
            cmd.Active = ((IUserClaimMvoStateProperties)state).Active;
            cmd.UserUserName = state.UserUserName;
            cmd.UserAccessFailedCount = state.UserAccessFailedCount;
            cmd.UserEmail = state.UserEmail;
            cmd.UserEmailConfirmed = state.UserEmailConfirmed;
            cmd.UserLockoutEnabled = state.UserLockoutEnabled;
            cmd.UserLockoutEndDateUtc = state.UserLockoutEndDateUtc;
            cmd.UserPasswordHash = state.UserPasswordHash;
            cmd.UserPhoneNumber = state.UserPhoneNumber;
            cmd.UserPhoneNumberConfirmed = state.UserPhoneNumberConfirmed;
            cmd.UserTwoFactorEnabled = state.UserTwoFactorEnabled;
            cmd.UserSecurityStamp = state.UserSecurityStamp;
            cmd.UserCreatedBy = state.UserCreatedBy;
            cmd.UserCreatedAt = state.UserCreatedAt;
            cmd.UserUpdatedBy = state.UserUpdatedBy;
            cmd.UserUpdatedAt = state.UserUpdatedAt;
            cmd.UserActive = state.UserActive;
            cmd.UserDeleted = state.UserDeleted;
            
            if (state.ClaimType == null) { cmd.IsPropertyClaimTypeRemoved = true; }
            if (state.ClaimValue == null) { cmd.IsPropertyClaimValueRemoved = true; }
            if (state.UserUserName == null) { cmd.IsPropertyUserUserNameRemoved = true; }
            if (state.UserEmail == null) { cmd.IsPropertyUserEmailRemoved = true; }
            if (state.UserLockoutEndDateUtc == null) { cmd.IsPropertyUserLockoutEndDateUtcRemoved = true; }
            if (state.UserPasswordHash == null) { cmd.IsPropertyUserPasswordHashRemoved = true; }
            if (state.UserPhoneNumber == null) { cmd.IsPropertyUserPhoneNumberRemoved = true; }
            if (state.UserSecurityStamp == null) { cmd.IsPropertyUserSecurityStampRemoved = true; }
            if (state.UserCreatedBy == null) { cmd.IsPropertyUserCreatedByRemoved = true; }
            if (state.UserUpdatedBy == null) { cmd.IsPropertyUserUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateUserClaimMvo ToCreateUserClaimMvo<TCreateUserClaimMvo>(this IUserClaimMvoState state)
            where TCreateUserClaimMvo : ICreateUserClaimMvo, new()
        {
            var cmd = new TCreateUserClaimMvo();

            cmd.UserVersion = ((IUserClaimMvoStateProperties)state).UserVersion;

            cmd.UserClaimId = state.UserClaimId;
            cmd.ClaimType = state.ClaimType;
            cmd.ClaimValue = state.ClaimValue;
            cmd.Version = ((IUserClaimMvoStateProperties)state).Version;
            cmd.Active = ((IUserClaimMvoStateProperties)state).Active;
            cmd.UserUserName = state.UserUserName;
            cmd.UserAccessFailedCount = state.UserAccessFailedCount;
            cmd.UserEmail = state.UserEmail;
            cmd.UserEmailConfirmed = state.UserEmailConfirmed;
            cmd.UserLockoutEnabled = state.UserLockoutEnabled;
            cmd.UserLockoutEndDateUtc = state.UserLockoutEndDateUtc;
            cmd.UserPasswordHash = state.UserPasswordHash;
            cmd.UserPhoneNumber = state.UserPhoneNumber;
            cmd.UserPhoneNumberConfirmed = state.UserPhoneNumberConfirmed;
            cmd.UserTwoFactorEnabled = state.UserTwoFactorEnabled;
            cmd.UserSecurityStamp = state.UserSecurityStamp;
            cmd.UserCreatedBy = state.UserCreatedBy;
            cmd.UserCreatedAt = state.UserCreatedAt;
            cmd.UserUpdatedBy = state.UserUpdatedBy;
            cmd.UserUpdatedAt = state.UserUpdatedAt;
            cmd.UserActive = state.UserActive;
            cmd.UserDeleted = state.UserDeleted;
            return cmd;
        }
		

	}

}

