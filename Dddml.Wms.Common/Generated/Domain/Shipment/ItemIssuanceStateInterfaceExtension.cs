// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

	public static partial class ItemIssuanceStateInterfaceExtension
	{

        public static IItemIssuanceCommand ToCreateOrMergePatchItemIssuance<TCreateItemIssuance, TMergePatchItemIssuance>(this IItemIssuanceState state)
            where TCreateItemIssuance : ICreateItemIssuance, new()
            where TMergePatchItemIssuance : IMergePatchItemIssuance, new()
        {
            bool bUnsaved = ((IItemIssuanceState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateItemIssuance<TCreateItemIssuance>();
            }
            else 
            {
                return state.ToMergePatchItemIssuance<TMergePatchItemIssuance>();
            }
        }

        public static TRemoveItemIssuance ToRemoveItemIssuance<TRemoveItemIssuance>(this IItemIssuanceState state)
            where TRemoveItemIssuance : IRemoveItemIssuance, new()
        {
            var cmd = new TRemoveItemIssuance();
            cmd.ItemIssuanceSeqId = state.ItemIssuanceSeqId;
            return cmd;
        }

        public static TMergePatchItemIssuance ToMergePatchItemIssuance<TMergePatchItemIssuance>(this IItemIssuanceState state)
            where TMergePatchItemIssuance : IMergePatchItemIssuance, new()
        {
            var cmd = new TMergePatchItemIssuance();

            cmd.ItemIssuanceSeqId = state.ItemIssuanceSeqId;
            cmd.OrderId = state.OrderId;
            cmd.OrderItemSeqId = state.OrderItemSeqId;
            cmd.ShipGroupSeqId = state.ShipGroupSeqId;
            cmd.ProductId = state.ProductId;
            cmd.LocatorId = state.LocatorId;
            cmd.AttributeSetInstanceId = state.AttributeSetInstanceId;
            cmd.ShipmentItemSeqId = state.ShipmentItemSeqId;
            cmd.FixedAssetId = state.FixedAssetId;
            cmd.MaintHistSeqId = state.MaintHistSeqId;
            cmd.IssuedDateTime = state.IssuedDateTime;
            cmd.IssuedByUserLoginId = state.IssuedByUserLoginId;
            cmd.Quantity = state.Quantity;
            cmd.CancelQuantity = state.CancelQuantity;
            cmd.Active = ((IItemIssuanceStateProperties)state).Active;
            cmd.ShipmentId = state.ShipmentId;
            
            if (state.OrderId == null) { cmd.IsPropertyOrderIdRemoved = true; }
            if (state.OrderItemSeqId == null) { cmd.IsPropertyOrderItemSeqIdRemoved = true; }
            if (state.ShipGroupSeqId == null) { cmd.IsPropertyShipGroupSeqIdRemoved = true; }
            if (state.ProductId == null) { cmd.IsPropertyProductIdRemoved = true; }
            if (state.LocatorId == null) { cmd.IsPropertyLocatorIdRemoved = true; }
            if (state.AttributeSetInstanceId == null) { cmd.IsPropertyAttributeSetInstanceIdRemoved = true; }
            if (state.ShipmentItemSeqId == null) { cmd.IsPropertyShipmentItemSeqIdRemoved = true; }
            if (state.FixedAssetId == null) { cmd.IsPropertyFixedAssetIdRemoved = true; }
            if (state.MaintHistSeqId == null) { cmd.IsPropertyMaintHistSeqIdRemoved = true; }
            if (state.IssuedDateTime == null) { cmd.IsPropertyIssuedDateTimeRemoved = true; }
            if (state.IssuedByUserLoginId == null) { cmd.IsPropertyIssuedByUserLoginIdRemoved = true; }
            if (state.Quantity == null) { cmd.IsPropertyQuantityRemoved = true; }
            if (state.CancelQuantity == null) { cmd.IsPropertyCancelQuantityRemoved = true; }
            return cmd;
        }

        public static TCreateItemIssuance ToCreateItemIssuance<TCreateItemIssuance>(this IItemIssuanceState state)
            where TCreateItemIssuance : ICreateItemIssuance, new()
        {
            var cmd = new TCreateItemIssuance();

            cmd.ItemIssuanceSeqId = state.ItemIssuanceSeqId;
            cmd.OrderId = state.OrderId;
            cmd.OrderItemSeqId = state.OrderItemSeqId;
            cmd.ShipGroupSeqId = state.ShipGroupSeqId;
            cmd.ProductId = state.ProductId;
            cmd.LocatorId = state.LocatorId;
            cmd.AttributeSetInstanceId = state.AttributeSetInstanceId;
            cmd.ShipmentItemSeqId = state.ShipmentItemSeqId;
            cmd.FixedAssetId = state.FixedAssetId;
            cmd.MaintHistSeqId = state.MaintHistSeqId;
            cmd.IssuedDateTime = state.IssuedDateTime;
            cmd.IssuedByUserLoginId = state.IssuedByUserLoginId;
            cmd.Quantity = state.Quantity;
            cmd.CancelQuantity = state.CancelQuantity;
            cmd.Active = ((IItemIssuanceStateProperties)state).Active;
            cmd.ShipmentId = state.ShipmentId;
            return cmd;
        }
		

	}

}

