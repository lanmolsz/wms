// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{
    public partial class ShipmentAggregate : AggregateBase, IShipmentAggregate
    {

        readonly IShipmentState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IShipmentState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public ShipmentAggregate(IShipmentState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IShipmentStateProperties)_state).Version == ShipmentState.VersionZero)
            {
                if (IsCommandCreate((IShipmentCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (IsCommandCreate((IShipmentCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IShipmentCommand c)
        {
            return c.Version == ShipmentState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateShipment c)
        {
            IShipmentStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchShipment c)
        {
            IShipmentStateMergePatched e = Map(c);
            Apply(e);
        }


        protected virtual IShipmentStateCreated Map(ICreateShipment c)
        {
			var stateEventId = new ShipmentStateEventId(c.ShipmentId, c.Version);
            IShipmentStateCreated e = NewShipmentStateCreated(stateEventId);
		
            e.ShipmentTypeId = c.ShipmentTypeId;
            e.StatusId = c.StatusId;
            e.PrimaryOrderId = c.PrimaryOrderId;
            e.PrimaryReturnId = c.PrimaryReturnId;
            e.PicklistBinId = c.PicklistBinId;
            e.EstimatedReadyDate = c.EstimatedReadyDate;
            e.EstimatedShipDate = c.EstimatedShipDate;
            e.EstimatedShipWorkEffId = c.EstimatedShipWorkEffId;
            e.EstimatedArrivalDate = c.EstimatedArrivalDate;
            e.EstimatedArrivalWorkEffId = c.EstimatedArrivalWorkEffId;
            e.LatestCancelDate = c.LatestCancelDate;
            e.EstimatedShipCost = c.EstimatedShipCost;
            e.CurrencyUomId = c.CurrencyUomId;
            e.HandlingInstructions = c.HandlingInstructions;
            e.OriginFacilityId = c.OriginFacilityId;
            e.DestinationFacilityId = c.DestinationFacilityId;
            e.OriginContactMechId = c.OriginContactMechId;
            e.OriginTelecomNumberId = c.OriginTelecomNumberId;
            e.DestinationContactMechId = c.DestinationContactMechId;
            e.DestinationTelecomNumberId = c.DestinationTelecomNumberId;
            e.PartyIdTo = c.PartyIdTo;
            e.PartyIdFrom = c.PartyIdFrom;
            e.AdditionalShippingCharge = c.AdditionalShippingCharge;
            e.AddtlShippingChargeDesc = c.AddtlShippingChargeDesc;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var version = c.Version;


            return e;
        }

        protected virtual IShipmentStateMergePatched Map(IMergePatchShipment c)
        {
			var stateEventId = new ShipmentStateEventId(c.ShipmentId, c.Version);
            IShipmentStateMergePatched e = NewShipmentStateMergePatched(stateEventId);

            e.ShipmentTypeId = c.ShipmentTypeId;
            e.StatusId = c.StatusId;
            e.PrimaryOrderId = c.PrimaryOrderId;
            e.PrimaryReturnId = c.PrimaryReturnId;
            e.PicklistBinId = c.PicklistBinId;
            e.EstimatedReadyDate = c.EstimatedReadyDate;
            e.EstimatedShipDate = c.EstimatedShipDate;
            e.EstimatedShipWorkEffId = c.EstimatedShipWorkEffId;
            e.EstimatedArrivalDate = c.EstimatedArrivalDate;
            e.EstimatedArrivalWorkEffId = c.EstimatedArrivalWorkEffId;
            e.LatestCancelDate = c.LatestCancelDate;
            e.EstimatedShipCost = c.EstimatedShipCost;
            e.CurrencyUomId = c.CurrencyUomId;
            e.HandlingInstructions = c.HandlingInstructions;
            e.OriginFacilityId = c.OriginFacilityId;
            e.DestinationFacilityId = c.DestinationFacilityId;
            e.OriginContactMechId = c.OriginContactMechId;
            e.OriginTelecomNumberId = c.OriginTelecomNumberId;
            e.DestinationContactMechId = c.DestinationContactMechId;
            e.DestinationTelecomNumberId = c.DestinationTelecomNumberId;
            e.PartyIdTo = c.PartyIdTo;
            e.PartyIdFrom = c.PartyIdFrom;
            e.AdditionalShippingCharge = c.AdditionalShippingCharge;
            e.AddtlShippingChargeDesc = c.AddtlShippingChargeDesc;
            e.Active = c.Active;
            e.IsPropertyShipmentTypeIdRemoved = c.IsPropertyShipmentTypeIdRemoved;
            e.IsPropertyStatusIdRemoved = c.IsPropertyStatusIdRemoved;
            e.IsPropertyPrimaryOrderIdRemoved = c.IsPropertyPrimaryOrderIdRemoved;
            e.IsPropertyPrimaryReturnIdRemoved = c.IsPropertyPrimaryReturnIdRemoved;
            e.IsPropertyPicklistBinIdRemoved = c.IsPropertyPicklistBinIdRemoved;
            e.IsPropertyEstimatedReadyDateRemoved = c.IsPropertyEstimatedReadyDateRemoved;
            e.IsPropertyEstimatedShipDateRemoved = c.IsPropertyEstimatedShipDateRemoved;
            e.IsPropertyEstimatedShipWorkEffIdRemoved = c.IsPropertyEstimatedShipWorkEffIdRemoved;
            e.IsPropertyEstimatedArrivalDateRemoved = c.IsPropertyEstimatedArrivalDateRemoved;
            e.IsPropertyEstimatedArrivalWorkEffIdRemoved = c.IsPropertyEstimatedArrivalWorkEffIdRemoved;
            e.IsPropertyLatestCancelDateRemoved = c.IsPropertyLatestCancelDateRemoved;
            e.IsPropertyEstimatedShipCostRemoved = c.IsPropertyEstimatedShipCostRemoved;
            e.IsPropertyCurrencyUomIdRemoved = c.IsPropertyCurrencyUomIdRemoved;
            e.IsPropertyHandlingInstructionsRemoved = c.IsPropertyHandlingInstructionsRemoved;
            e.IsPropertyOriginFacilityIdRemoved = c.IsPropertyOriginFacilityIdRemoved;
            e.IsPropertyDestinationFacilityIdRemoved = c.IsPropertyDestinationFacilityIdRemoved;
            e.IsPropertyOriginContactMechIdRemoved = c.IsPropertyOriginContactMechIdRemoved;
            e.IsPropertyOriginTelecomNumberIdRemoved = c.IsPropertyOriginTelecomNumberIdRemoved;
            e.IsPropertyDestinationContactMechIdRemoved = c.IsPropertyDestinationContactMechIdRemoved;
            e.IsPropertyDestinationTelecomNumberIdRemoved = c.IsPropertyDestinationTelecomNumberIdRemoved;
            e.IsPropertyPartyIdToRemoved = c.IsPropertyPartyIdToRemoved;
            e.IsPropertyPartyIdFromRemoved = c.IsPropertyPartyIdFromRemoved;
            e.IsPropertyAdditionalShippingChargeRemoved = c.IsPropertyAdditionalShippingChargeRemoved;
            e.IsPropertyAddtlShippingChargeDescRemoved = c.IsPropertyAddtlShippingChargeDescRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var version = c.Version;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected ShipmentStateCreated NewShipmentStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new ShipmentStateEventId(_state.ShipmentId, ((IShipmentStateProperties)_state).Version);
            var e = NewShipmentStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected ShipmentStateMergePatched NewShipmentStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new ShipmentStateEventId(_state.ShipmentId, ((IShipmentStateProperties)_state).Version);
            var e = NewShipmentStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


////////////////////////

		private ShipmentStateCreated NewShipmentStateCreated(ShipmentStateEventId stateEventId)
		{
			return new ShipmentStateCreated(stateEventId);			
		}

        private ShipmentStateMergePatched NewShipmentStateMergePatched(ShipmentStateEventId stateEventId)
		{
			return new ShipmentStateMergePatched(stateEventId);
		}


    }

}

