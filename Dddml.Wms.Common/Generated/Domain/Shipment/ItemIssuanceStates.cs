// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

    public class ItemIssuanceStates : IItemIssuanceStates
    {
        
		protected IItemIssuanceStateDao ItemIssuanceStateDao
		{
			get
			{
				return ApplicationContext.Current["ItemIssuanceStateDao"] as IItemIssuanceStateDao;
			}
		}

		private Dictionary<ShipmentItemIssuanceId, IItemIssuanceState> _loadedItemIssuanceStates = new Dictionary<ShipmentItemIssuanceId, IItemIssuanceState>();

		private Dictionary<ShipmentItemIssuanceId, IItemIssuanceState> _removedItemIssuanceStates = new Dictionary<ShipmentItemIssuanceId, IItemIssuanceState>();

		protected virtual IEnumerable<IItemIssuanceState> LoadedItemIssuanceStates {
			get {
				return this._loadedItemIssuanceStates.Values;
			}
		}

        private IShipmentState _shipmentState;

        private IEnumerable<IItemIssuanceState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return ItemIssuanceStateDao.FindByShipmentId(_shipmentState.ShipmentId);
                }
                else
                {
                    return _loadedItemIssuanceStates.Values.Where(s => !(_removedItemIssuanceStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public ItemIssuanceStates(IShipmentState outerState)
        {
            this._shipmentState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IItemIssuanceState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IItemIssuanceState state)
        {
            this._removedItemIssuanceStates.Add(state.GlobalId, state);
        }

        public virtual IItemIssuanceState Get(string itemIssuanceSeqId)
		{
			return Get(itemIssuanceSeqId, false, false);
		}

        public virtual IItemIssuanceState Get(string itemIssuanceSeqId, bool forCreation)
        {
			return Get(itemIssuanceSeqId, forCreation, false);
        }

        public virtual IItemIssuanceState Get(string itemIssuanceSeqId, bool forCreation, bool nullAllowed)
        {
            ShipmentItemIssuanceId globalId = new ShipmentItemIssuanceId(_shipmentState.ShipmentId, itemIssuanceSeqId);
            if (_loadedItemIssuanceStates.ContainsKey(globalId)) {
                var state = _loadedItemIssuanceStates[globalId];
                if (this._shipmentState != null && this._shipmentState.ReadOnly == false) { ((IItemIssuanceState)state).ReadOnly = false; }
                return state;
            }
            if (forCreation || ForReapplying)
            {
                var state = new ItemIssuanceState(ForReapplying);
                state.ShipmentItemIssuanceId = globalId;
                _loadedItemIssuanceStates.Add(globalId, state);
                if (this._shipmentState != null && this._shipmentState.ReadOnly == false) { ((IItemIssuanceState)state).ReadOnly = false; }
                return state;
            }
            else
            {
                var state = ItemIssuanceStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedItemIssuanceStates.Add(globalId, state);
                }
                if (this._shipmentState != null && this._shipmentState.ReadOnly == false) { ((IItemIssuanceState)state).ReadOnly = false; }
                return state;
            }
        }

        public virtual void AddToSave(IItemIssuanceState state)
        {
            this._loadedItemIssuanceStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IItemIssuanceState s in this.LoadedItemIssuanceStates) {
                ItemIssuanceStateDao.Save(s);
			}
            foreach(IItemIssuanceState s in this._removedItemIssuanceStates.Values)
            {
                ItemIssuanceStateDao.Delete(s);
            }
		}

		#endregion


    }



}


