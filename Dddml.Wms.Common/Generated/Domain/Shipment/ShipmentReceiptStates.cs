// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

    public class ShipmentReceiptStates : IShipmentReceiptStates
    {
        
		protected IShipmentReceiptStateDao ShipmentReceiptStateDao
		{
			get
			{
				return ApplicationContext.Current["ShipmentReceiptStateDao"] as IShipmentReceiptStateDao;
			}
		}

		private Dictionary<ShipmentReceiptId, IShipmentReceiptState> _loadedShipmentReceiptStates = new Dictionary<ShipmentReceiptId, IShipmentReceiptState>();

		private Dictionary<ShipmentReceiptId, IShipmentReceiptState> _removedShipmentReceiptStates = new Dictionary<ShipmentReceiptId, IShipmentReceiptState>();

		protected virtual IEnumerable<IShipmentReceiptState> LoadedShipmentReceiptStates {
			get {
				return this._loadedShipmentReceiptStates.Values;
			}
		}

        private IShipmentState _shipmentState;

        private IEnumerable<IShipmentReceiptState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return ShipmentReceiptStateDao.FindByShipmentId(_shipmentState.ShipmentId);
                }
                else
                {
                    return _loadedShipmentReceiptStates.Values.Where(s => !(_removedShipmentReceiptStates.ContainsKey(s.GlobalId)));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public ShipmentReceiptStates(IShipmentState outerState)
        {
            this._shipmentState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IShipmentReceiptState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IShipmentReceiptState state)
        {
            this._removedShipmentReceiptStates.Add(state.GlobalId, state);
        }

        public virtual IShipmentReceiptState Get(string receiptSeqId)
		{
			return Get(receiptSeqId, false, false);
		}

        public virtual IShipmentReceiptState Get(string receiptSeqId, bool forCreation)
        {
			return Get(receiptSeqId, forCreation, false);
        }

        public virtual IShipmentReceiptState Get(string receiptSeqId, bool forCreation, bool nullAllowed)
        {
            ShipmentReceiptId globalId = new ShipmentReceiptId(_shipmentState.ShipmentId, receiptSeqId);
            if (_loadedShipmentReceiptStates.ContainsKey(globalId)) {
                var state = _loadedShipmentReceiptStates[globalId];
                if (this._shipmentState != null && this._shipmentState.ReadOnly == false) { ((IShipmentReceiptState)state).ReadOnly = false; }
                return state;
            }
            if (forCreation || ForReapplying)
            {
                var state = new ShipmentReceiptState(ForReapplying);
                state.ShipmentReceiptId = globalId;
                _loadedShipmentReceiptStates.Add(globalId, state);
                if (this._shipmentState != null && this._shipmentState.ReadOnly == false) { ((IShipmentReceiptState)state).ReadOnly = false; }
                return state;
            }
            else
            {
                var state = ShipmentReceiptStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedShipmentReceiptStates.Add(globalId, state);
                }
                if (this._shipmentState != null && this._shipmentState.ReadOnly == false) { ((IShipmentReceiptState)state).ReadOnly = false; }
                return state;
            }
        }

        public virtual void AddToSave(IShipmentReceiptState state)
        {
            this._loadedShipmentReceiptStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IShipmentReceiptState s in this.LoadedShipmentReceiptStates) {
                ShipmentReceiptStateDao.Save(s);
			}
            foreach(IShipmentReceiptState s in this._removedShipmentReceiptStates.Values)
            {
                ShipmentReceiptStateDao.Delete(s);
            }
		}

		#endregion


    }



}


