// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

	public class ShipmentReceiptStateEventId
	{

		private string _shipmentId;

		public virtual string ShipmentId { 
			get { return this._shipmentId; } 
			set { _shipmentId = value; } 
		}

		private string _receiptSeqId;

		public virtual string ReceiptSeqId { 
			get { return this._receiptSeqId; } 
			set { _receiptSeqId = value; } 
		}

		private long _shipmentVersion;

		public virtual long ShipmentVersion { 
			get { return this._shipmentVersion; } 
			set { _shipmentVersion = value; } 
		}


        #region  Flattened Properties


        #endregion

		public ShipmentReceiptStateEventId ()
		{
		}

		public ShipmentReceiptStateEventId (string shipmentId, string receiptSeqId, long shipmentVersion)
		{
			this._shipmentId = shipmentId;
			this._receiptSeqId = receiptSeqId;
			this._shipmentVersion = shipmentVersion;

		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			ShipmentReceiptStateEventId other = obj as ShipmentReceiptStateEventId;
			if (other == null) {
				return false;
			}

			return true 
				&& Object.Equals (this.ShipmentId, other.ShipmentId)
				&& Object.Equals (this.ReceiptSeqId, other.ReceiptSeqId)
				&& Object.Equals (this.ShipmentVersion, other.ShipmentVersion)
				;
		}

		public override int GetHashCode ()
		{
			int hash = 0;
			if (this.ShipmentId != null) {
				hash += 13 * this.ShipmentId.GetHashCode ();
			}
			if (this.ReceiptSeqId != null) {
				hash += 13 * this.ReceiptSeqId.GetHashCode ();
			}
			if (this.ShipmentVersion != null) {
				hash += 13 * this.ShipmentVersion.GetHashCode ();
			}
			return hash;
		}

        public static bool operator ==(ShipmentReceiptStateEventId obj1, ShipmentReceiptStateEventId obj2)
        {
            return Object.Equals(obj1, obj2);
        }

        public static bool operator !=(ShipmentReceiptStateEventId obj1, ShipmentReceiptStateEventId obj2)
        {
            return !Object.Equals(obj1, obj2);
        }

        public override string ToString()
        {
            return String.Empty
                + "ShipmentId: " + this.ShipmentId + ", "
                + "ReceiptSeqId: " + this.ReceiptSeqId + ", "
                + "ShipmentVersion: " + this.ShipmentVersion + ", "
                ;
        }
	}

}


