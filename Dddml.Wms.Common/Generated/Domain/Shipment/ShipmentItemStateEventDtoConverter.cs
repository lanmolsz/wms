// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

    public class ShipmentItemStateEventDtoConverter
    {
        public virtual ShipmentItemStateCreatedOrMergePatchedOrRemovedDto ToShipmentItemStateEventDto(IShipmentItemStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IShipmentItemStateCreated)stateEvent;
                return ToShipmentItemStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IShipmentItemStateMergePatched)stateEvent;
                return ToShipmentItemStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual ShipmentItemStateCreatedDto ToShipmentItemStateCreatedDto(IShipmentItemStateCreated e)
        {
            var dto = new ShipmentItemStateCreatedDto();
            dto.StateEventId = new ShipmentItemStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.ProductId = e.ProductId;
            dto.AttributeSetInstanceId = e.AttributeSetInstanceId;
            dto.Quantity = e.Quantity;
            dto.TargetQuantity = e.TargetQuantity;
            dto.ShipmentContentDescription = e.ShipmentContentDescription;
            dto.Active = e.Active;
            return dto;
        }

        public virtual ShipmentItemStateMergePatchedDto ToShipmentItemStateMergePatchedDto(IShipmentItemStateMergePatched e)
        {
            var dto = new ShipmentItemStateMergePatchedDto();
            dto.StateEventId = new ShipmentItemStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.ProductId = e.ProductId;
            dto.AttributeSetInstanceId = e.AttributeSetInstanceId;
            dto.Quantity = e.Quantity;
            dto.TargetQuantity = e.TargetQuantity;
            dto.ShipmentContentDescription = e.ShipmentContentDescription;
            dto.Active = e.Active;
            dto.IsPropertyProductIdRemoved = e.IsPropertyProductIdRemoved;
            dto.IsPropertyAttributeSetInstanceIdRemoved = e.IsPropertyAttributeSetInstanceIdRemoved;
            dto.IsPropertyQuantityRemoved = e.IsPropertyQuantityRemoved;
            dto.IsPropertyTargetQuantityRemoved = e.IsPropertyTargetQuantityRemoved;
            dto.IsPropertyShipmentContentDescriptionRemoved = e.IsPropertyShipmentContentDescriptionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }



    }


}

