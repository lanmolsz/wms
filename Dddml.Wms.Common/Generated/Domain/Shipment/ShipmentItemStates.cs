// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

    public class ShipmentItemStates : IShipmentItemStates
    {
        
		protected IShipmentItemStateDao ShipmentItemStateDao
		{
			get
			{
				return ApplicationContext.Current["ShipmentItemStateDao"] as IShipmentItemStateDao;
			}
		}

		private Dictionary<ShipmentItemId, IShipmentItemState> _loadedShipmentItemStates = new Dictionary<ShipmentItemId, IShipmentItemState>();

		private Dictionary<ShipmentItemId, IShipmentItemState> _removedShipmentItemStates = new Dictionary<ShipmentItemId, IShipmentItemState>();

		protected virtual IEnumerable<IShipmentItemState> LoadedShipmentItemStates {
			get {
				return this._loadedShipmentItemStates.Values;
			}
		}

        private IShipmentState _shipmentState;

        private IEnumerable<IShipmentItemState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return ShipmentItemStateDao.FindByShipmentId(_shipmentState.ShipmentId);
                }
                else
                {
                    return _loadedShipmentItemStates.Values.Where(s => !(_removedShipmentItemStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public ShipmentItemStates(IShipmentState outerState)
        {
            this._shipmentState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IShipmentItemState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IShipmentItemState state)
        {
            this._removedShipmentItemStates.Add(state.GlobalId, state);
        }

        public virtual IShipmentItemState Get(string shipmentItemSeqId)
		{
			return Get(shipmentItemSeqId, false, false);
		}

        public virtual IShipmentItemState Get(string shipmentItemSeqId, bool forCreation)
        {
			return Get(shipmentItemSeqId, forCreation, false);
        }

        public virtual IShipmentItemState Get(string shipmentItemSeqId, bool forCreation, bool nullAllowed)
        {
            ShipmentItemId globalId = new ShipmentItemId(_shipmentState.ShipmentId, shipmentItemSeqId);
            if (_loadedShipmentItemStates.ContainsKey(globalId)) {
                return _loadedShipmentItemStates[globalId];
            }
            if (forCreation || ForReapplying)
            {
                var state = new ShipmentItemState(ForReapplying);
                state.ShipmentItemId = globalId;
                _loadedShipmentItemStates.Add(globalId, state);
                return state;
            }
            else
            {
                var state = ShipmentItemStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedShipmentItemStates.Add(globalId, state);
                }
                return state;
            }
        }

        public virtual void AddToSave(IShipmentItemState state)
        {
            this._loadedShipmentItemStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IShipmentItemState s in this.LoadedShipmentItemStates) {
                ShipmentItemStateDao.Save(s);
			}
            foreach(IShipmentItemState s in this._removedShipmentItemStates.Values)
            {
                ShipmentItemStateDao.Delete(s);
            }
		}

		#endregion


    }



}


