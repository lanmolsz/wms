// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class MonthPlanStateEventDtoConverter
    {
        public virtual MonthPlanStateCreatedOrMergePatchedOrRemovedDto ToMonthPlanStateEventDto(IMonthPlanStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IMonthPlanStateCreated)stateEvent;
                return ToMonthPlanStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IMonthPlanStateMergePatched)stateEvent;
                return ToMonthPlanStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Removed)
            {
                var e = (IMonthPlanStateRemoved)stateEvent;
                return ToMonthPlanStateRemovedDto(e);
            }

            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual MonthPlanStateCreatedDto ToMonthPlanStateCreatedDto(IMonthPlanStateCreated e)
        {
            var dto = new MonthPlanStateCreatedDto();
            dto.StateEventId = new MonthPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            var dayPlanEvents = new List<DayPlanStateCreatedDto>();
            foreach (var ee in e.DayPlanEvents)
            {
                DayPlanStateCreatedDto eeDto = DayPlanStateEventDtoConverter.ToDayPlanStateCreatedDto(ee);
                dayPlanEvents.Add(eeDto);
            }
            dto.DayPlanEvents = dayPlanEvents.ToArray();

            return dto;
        }

        public virtual MonthPlanStateMergePatchedDto ToMonthPlanStateMergePatchedDto(IMonthPlanStateMergePatched e)
        {
            var dto = new MonthPlanStateMergePatchedDto();
            dto.StateEventId = new MonthPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var dayPlanEvents = new List<DayPlanStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.DayPlanEvents)
            {
                DayPlanStateCreatedOrMergePatchedOrRemovedDto eeDto = DayPlanStateEventDtoConverter.ToDayPlanStateEventDto(ee);
                dayPlanEvents.Add(eeDto);
            }
            dto.DayPlanEvents = dayPlanEvents.ToArray();


            return dto;
        }


        public virtual MonthPlanStateRemovedDto ToMonthPlanStateRemovedDto(IMonthPlanStateRemoved e)
        {
            var dto = new MonthPlanStateRemovedDto();
            dto.StateEventId = new MonthPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            var dayPlanEvents = new List<DayPlanStateRemovedDto>();
            foreach (var ee in e.DayPlanEvents)
            {
                DayPlanStateRemovedDto eeDto = DayPlanStateEventDtoConverter.ToDayPlanStateRemovedDto(ee);
                dayPlanEvents.Add(eeDto);
            }
            dto.DayPlanEvents = dayPlanEvents.ToArray();


            return dto;
        }

        protected virtual DayPlanStateEventDtoConverter DayPlanStateEventDtoConverter
        {
            get
            {
                return new DayPlanStateEventDtoConverter();
            }
        }


    }


}

