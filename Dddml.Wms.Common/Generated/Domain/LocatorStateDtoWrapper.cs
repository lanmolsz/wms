// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public partial class LocatorStateDtoWrapper : StateDtoWrapperBase, ILocatorStateDto, ILocatorState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private LocatorState _state;

        public LocatorStateDtoWrapper()
        {
            this._state = new LocatorState();
        }

		public LocatorStateDtoWrapper(LocatorState state)
		{
            this._state = state;
		}

		public ILocatorState ToLocatorState()
		{
			return this._state;
		}

		public virtual string LocatorId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("LocatorId"))
                {
                    return _state.LocatorId;
                }
                return null;
            }
            set
            {
                _state.LocatorId = value;
            }
        }

        string ILocatorStateProperties.LocatorId
        {
            get 
            {
                return (this._state as ILocatorStateProperties).LocatorId;
            }
            set 
            {
                this._state.LocatorId = value;
            }
        }

		public virtual string WarehouseId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("WarehouseId"))
                {
                    return _state.WarehouseId;
                }
                return null;
            }
            set
            {
                _state.WarehouseId = value;
            }
        }

        string ILocatorStateProperties.WarehouseId
        {
            get 
            {
                return (this._state as ILocatorStateProperties).WarehouseId;
            }
            set 
            {
                this._state.WarehouseId = value;
            }
        }

		public virtual string ParentLocatorId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("ParentLocatorId"))
                {
                    return _state.ParentLocatorId;
                }
                return null;
            }
            set
            {
                _state.ParentLocatorId = value;
            }
        }

        string ILocatorStateProperties.ParentLocatorId
        {
            get 
            {
                return (this._state as ILocatorStateProperties).ParentLocatorId;
            }
            set 
            {
                this._state.ParentLocatorId = value;
            }
        }

		public virtual string LocatorType
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("LocatorType"))
                {
                    return _state.LocatorType;
                }
                return null;
            }
            set
            {
                _state.LocatorType = value;
            }
        }

        string ILocatorStateProperties.LocatorType
        {
            get 
            {
                return (this._state as ILocatorStateProperties).LocatorType;
            }
            set 
            {
                this._state.LocatorType = value;
            }
        }

		public virtual string PriorityNumber
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("PriorityNumber"))
                {
                    return _state.PriorityNumber;
                }
                return null;
            }
            set
            {
                _state.PriorityNumber = value;
            }
        }

        string ILocatorStateProperties.PriorityNumber
        {
            get 
            {
                return (this._state as ILocatorStateProperties).PriorityNumber;
            }
            set 
            {
                this._state.PriorityNumber = value;
            }
        }

		public virtual bool? IsDefault
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("IsDefault"))
                {
                    return _state.IsDefault;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.IsDefault = value.Value;
                }
            }
        }

        bool ILocatorStateProperties.IsDefault
        {
            get 
            {
                return (this._state as ILocatorStateProperties).IsDefault;
            }
            set 
            {
                this._state.IsDefault = value;
            }
        }

		public virtual string X
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("X"))
                {
                    return _state.X;
                }
                return null;
            }
            set
            {
                _state.X = value;
            }
        }

        string ILocatorStateProperties.X
        {
            get 
            {
                return (this._state as ILocatorStateProperties).X;
            }
            set 
            {
                this._state.X = value;
            }
        }

		public virtual string Y
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Y"))
                {
                    return _state.Y;
                }
                return null;
            }
            set
            {
                _state.Y = value;
            }
        }

        string ILocatorStateProperties.Y
        {
            get 
            {
                return (this._state as ILocatorStateProperties).Y;
            }
            set 
            {
                this._state.Y = value;
            }
        }

		public virtual string Z
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Z"))
                {
                    return _state.Z;
                }
                return null;
            }
            set
            {
                _state.Z = value;
            }
        }

        string ILocatorStateProperties.Z
        {
            get 
            {
                return (this._state as ILocatorStateProperties).Z;
            }
            set 
            {
                this._state.Z = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Active"))
                {
                    return _state.Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Active = value.Value;
                }
            }
        }

        bool ILocatorStateProperties.Active
        {
            get 
            {
                return (this._state as ILocatorStateProperties).Active;
            }
            set 
            {
                this._state.Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return _state.Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Version = value.Value;
                }
            }
        }

        long ILocatorStateProperties.Version
        {
            get 
            {
                return (this._state as ILocatorStateProperties).Version;
            }
            set 
            {
                this._state.Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }
		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }
		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }
		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get { return (_state as ILocatorState).GlobalId; }
		}

		#endregion


		#region IActive implementation

		bool IActive.Active
		{
            get { return (_state as IActive).Active; }
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as ILocatorState).CreatedBy; }
            set { (_state as ILocatorState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as ILocatorState).CreatedAt; }
            set { (_state as ILocatorState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as ILocatorState).UpdatedBy; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as ILocatorState).UpdatedAt; }
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
            get { return _state.Version; }
		}

		#endregion

        bool ILocatorState.IsUnsaved
        {
            get { return ((IVersioned<long>)this).Version == LocatorState.VersionZero; }
        }


		void ILocatorState.When(ILocatorStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool ILocatorState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void ILocatorState.When(ILocatorStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void ILocatorState.When(ILocatorStateDeleted e)
		{
            throw new NotSupportedException();
		}


		void ILocatorState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////


	}

    partial class LocatorStateDtoWrapperCollection : StateDtoWrapperCollectionBase<LocatorStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(LocatorStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

