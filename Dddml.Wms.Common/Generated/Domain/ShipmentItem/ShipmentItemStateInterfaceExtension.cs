// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentItem;

namespace Dddml.Wms.Domain.ShipmentItem
{

	public static partial class ShipmentItemStateInterfaceExtension
	{

        public static IShipmentItemCommand ToCreateOrMergePatchShipmentItem<TCreateShipmentItem, TMergePatchShipmentItem>(this IShipmentItemState state)
            where TCreateShipmentItem : ICreateShipmentItem, new()
            where TMergePatchShipmentItem : IMergePatchShipmentItem, new()
        {
            bool bUnsaved = ((IShipmentItemState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateShipmentItem<TCreateShipmentItem>();
            }
            else 
            {
                return state.ToMergePatchShipmentItem<TMergePatchShipmentItem>();
            }
        }

        public static TDeleteShipmentItem ToDeleteShipmentItem<TDeleteShipmentItem>(this IShipmentItemState state)
            where TDeleteShipmentItem : IDeleteShipmentItem, new()
        {
            var cmd = new TDeleteShipmentItem();
            cmd.ShipmentItemId = state.ShipmentItemId;
            cmd.Version = ((IShipmentItemStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchShipmentItem ToMergePatchShipmentItem<TMergePatchShipmentItem>(this IShipmentItemState state)
            where TMergePatchShipmentItem : IMergePatchShipmentItem, new()
        {
            var cmd = new TMergePatchShipmentItem();

            cmd.Version = ((IShipmentItemStateProperties)state).Version;

            cmd.ShipmentItemId = state.ShipmentItemId;
            cmd.ProductId = state.ProductId;
            cmd.Quantity = state.Quantity;
            cmd.ShipmentContentDescription = state.ShipmentContentDescription;
            cmd.Active = ((IShipmentItemStateProperties)state).Active;
            
            if (state.ProductId == null) { cmd.IsPropertyProductIdRemoved = true; }
            if (state.Quantity == null) { cmd.IsPropertyQuantityRemoved = true; }
            if (state.ShipmentContentDescription == null) { cmd.IsPropertyShipmentContentDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreateShipmentItem ToCreateShipmentItem<TCreateShipmentItem>(this IShipmentItemState state)
            where TCreateShipmentItem : ICreateShipmentItem, new()
        {
            var cmd = new TCreateShipmentItem();

            cmd.Version = ((IShipmentItemStateProperties)state).Version;

            cmd.ShipmentItemId = state.ShipmentItemId;
            cmd.ProductId = state.ProductId;
            cmd.Quantity = state.Quantity;
            cmd.ShipmentContentDescription = state.ShipmentContentDescription;
            cmd.Active = ((IShipmentItemStateProperties)state).Active;
            return cmd;
        }
		

	}

}

