// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentItem;

namespace Dddml.Wms.Domain.ShipmentItem
{
    public partial class ShipmentItemAggregate : AggregateBase, IShipmentItemAggregate
    {

        readonly IShipmentItemState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IShipmentItemState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        ShipmentItemId IGlobalIdentity<ShipmentItemId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public ShipmentItemAggregate(IShipmentItemState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IShipmentItemStateProperties)_state).Version == ShipmentItemState.VersionZero)
            {
                if (IsCommandCreate((IShipmentItemCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (IsCommandCreate((IShipmentItemCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IShipmentItemCommand c)
        {
            return c.Version == ShipmentItemState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateShipmentItem c)
        {
            IShipmentItemStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchShipmentItem c)
        {
            IShipmentItemStateMergePatched e = Map(c);
            Apply(e);
        }


        protected virtual IShipmentItemStateCreated Map(ICreateShipmentItem c)
        {
			var stateEventId = new ShipmentItemStateEventId(c.ShipmentItemId, c.Version);
            IShipmentItemStateCreated e = NewShipmentItemStateCreated(stateEventId);
		
            e.ProductId = c.ProductId;
            e.Quantity = c.Quantity;
            e.ShipmentContentDescription = c.ShipmentContentDescription;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var version = c.Version;


            return e;
        }

        protected virtual IShipmentItemStateMergePatched Map(IMergePatchShipmentItem c)
        {
			var stateEventId = new ShipmentItemStateEventId(c.ShipmentItemId, c.Version);
            IShipmentItemStateMergePatched e = NewShipmentItemStateMergePatched(stateEventId);

            e.ProductId = c.ProductId;
            e.Quantity = c.Quantity;
            e.ShipmentContentDescription = c.ShipmentContentDescription;
            e.Active = c.Active;
            e.IsPropertyProductIdRemoved = c.IsPropertyProductIdRemoved;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertyShipmentContentDescriptionRemoved = c.IsPropertyShipmentContentDescriptionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var version = c.Version;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected ShipmentItemStateCreated NewShipmentItemStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new ShipmentItemStateEventId(_state.ShipmentItemId, ((IShipmentItemStateProperties)_state).Version);
            var e = NewShipmentItemStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected ShipmentItemStateMergePatched NewShipmentItemStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new ShipmentItemStateEventId(_state.ShipmentItemId, ((IShipmentItemStateProperties)_state).Version);
            var e = NewShipmentItemStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


////////////////////////

		private ShipmentItemStateCreated NewShipmentItemStateCreated(ShipmentItemStateEventId stateEventId)
		{
			return new ShipmentItemStateCreated(stateEventId);			
		}

        private ShipmentItemStateMergePatched NewShipmentItemStateMergePatched(ShipmentItemStateEventId stateEventId)
		{
			return new ShipmentItemStateMergePatched(stateEventId);
		}


    }

}

