// <autogenerated>
//   This file was generated by T4 code generator GenerateLocatorTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.LocatorType;

namespace Dddml.Wms.Domain.LocatorType
{

	public static partial class LocatorTypeStateInterfaceExtension
	{

        public static ILocatorTypeCommand ToCreateOrMergePatchLocatorType<TCreateLocatorType, TMergePatchLocatorType>(this ILocatorTypeState state)
            where TCreateLocatorType : ICreateLocatorType, new()
            where TMergePatchLocatorType : IMergePatchLocatorType, new()
        {
            bool bUnsaved = ((ILocatorTypeState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateLocatorType<TCreateLocatorType>();
            }
            else 
            {
                return state.ToMergePatchLocatorType<TMergePatchLocatorType>();
            }
        }

        public static TDeleteLocatorType ToDeleteLocatorType<TDeleteLocatorType>(this ILocatorTypeState state)
            where TDeleteLocatorType : IDeleteLocatorType, new()
        {
            var cmd = new TDeleteLocatorType();
            cmd.LocatorTypeId = state.LocatorTypeId;
            cmd.Version = ((ILocatorTypeStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchLocatorType ToMergePatchLocatorType<TMergePatchLocatorType>(this ILocatorTypeState state)
            where TMergePatchLocatorType : IMergePatchLocatorType, new()
        {
            var cmd = new TMergePatchLocatorType();

            cmd.Version = ((ILocatorTypeStateProperties)state).Version;

            cmd.LocatorTypeId = state.LocatorTypeId;
            cmd.Description = state.Description;
            cmd.Active = ((ILocatorTypeStateProperties)state).Active;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreateLocatorType ToCreateLocatorType<TCreateLocatorType>(this ILocatorTypeState state)
            where TCreateLocatorType : ICreateLocatorType, new()
        {
            var cmd = new TCreateLocatorType();

            cmd.Version = ((ILocatorTypeStateProperties)state).Version;

            cmd.LocatorTypeId = state.LocatorTypeId;
            cmd.Description = state.Description;
            cmd.Active = ((ILocatorTypeStateProperties)state).Active;
            return cmd;
        }
		

	}

}

