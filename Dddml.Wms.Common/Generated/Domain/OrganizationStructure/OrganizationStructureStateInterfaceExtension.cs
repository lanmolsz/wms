// <autogenerated>
//   This file was generated by T4 code generator GenerateOrganizationStructureDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrganizationStructure;

namespace Dddml.Wms.Domain.OrganizationStructure
{

	public static partial class OrganizationStructureStateInterfaceExtension
	{

        public static IOrganizationStructureCommand ToCreateOrMergePatchOrganizationStructure<TCreateOrganizationStructure, TMergePatchOrganizationStructure>(this IOrganizationStructureState state)
            where TCreateOrganizationStructure : ICreateOrganizationStructure, new()
            where TMergePatchOrganizationStructure : IMergePatchOrganizationStructure, new()
        {
            bool bUnsaved = ((IOrganizationStructureState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateOrganizationStructure<TCreateOrganizationStructure>();
            }
            else 
            {
                return state.ToMergePatchOrganizationStructure<TMergePatchOrganizationStructure>();
            }
        }

        public static TDeleteOrganizationStructure ToDeleteOrganizationStructure<TDeleteOrganizationStructure>(this IOrganizationStructureState state)
            where TDeleteOrganizationStructure : IDeleteOrganizationStructure, new()
        {
            var cmd = new TDeleteOrganizationStructure();
            cmd.Id = state.Id;
            cmd.Version = ((IOrganizationStructureStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchOrganizationStructure ToMergePatchOrganizationStructure<TMergePatchOrganizationStructure>(this IOrganizationStructureState state)
            where TMergePatchOrganizationStructure : IMergePatchOrganizationStructure, new()
        {
            var cmd = new TMergePatchOrganizationStructure();

            cmd.Version = ((IOrganizationStructureStateProperties)state).Version;

            cmd.Id = state.Id;
            cmd.Active = ((IOrganizationStructureStateProperties)state).Active;
            
            return cmd;
        }

        public static TCreateOrganizationStructure ToCreateOrganizationStructure<TCreateOrganizationStructure>(this IOrganizationStructureState state)
            where TCreateOrganizationStructure : ICreateOrganizationStructure, new()
        {
            var cmd = new TCreateOrganizationStructure();

            cmd.Version = ((IOrganizationStructureStateProperties)state).Version;

            cmd.Id = state.Id;
            cmd.Active = ((IOrganizationStructureStateProperties)state).Active;
            return cmd;
        }
		

	}

}

