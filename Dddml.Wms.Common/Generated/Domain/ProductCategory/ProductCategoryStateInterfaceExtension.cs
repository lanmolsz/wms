// <autogenerated>
//   This file was generated by T4 code generator GenerateProductCategoryDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ProductCategory;

namespace Dddml.Wms.Domain.ProductCategory
{

	public static partial class ProductCategoryStateInterfaceExtension
	{

        public static IProductCategoryCommand ToCreateOrMergePatchProductCategory<TCreateProductCategory, TMergePatchProductCategory>(this IProductCategoryState state)
            where TCreateProductCategory : ICreateProductCategory, new()
            where TMergePatchProductCategory : IMergePatchProductCategory, new()
        {
            bool bUnsaved = ((IProductCategoryState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateProductCategory<TCreateProductCategory>();
            }
            else 
            {
                return state.ToMergePatchProductCategory<TMergePatchProductCategory>();
            }
        }

        public static TDeleteProductCategory ToDeleteProductCategory<TDeleteProductCategory>(this IProductCategoryState state)
            where TDeleteProductCategory : IDeleteProductCategory, new()
        {
            var cmd = new TDeleteProductCategory();
            cmd.ProductCategoryId = state.ProductCategoryId;
            cmd.Version = ((IProductCategoryStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchProductCategory ToMergePatchProductCategory<TMergePatchProductCategory>(this IProductCategoryState state)
            where TMergePatchProductCategory : IMergePatchProductCategory, new()
        {
            var cmd = new TMergePatchProductCategory();

            cmd.Version = ((IProductCategoryStateProperties)state).Version;

            cmd.ProductCategoryId = state.ProductCategoryId;
            cmd.ProductCategoryTypeId = state.ProductCategoryTypeId;
            cmd.PrimaryParentCategoryId = state.PrimaryParentCategoryId;
            cmd.CategoryName = state.CategoryName;
            cmd.Description = state.Description;
            cmd.CategoryImageUrl = state.CategoryImageUrl;
            cmd.DetailScreen = state.DetailScreen;
            cmd.ShowInSelect = state.ShowInSelect;
            cmd.Active = ((IProductCategoryStateProperties)state).Active;
            
            if (state.ProductCategoryTypeId == null) { cmd.IsPropertyProductCategoryTypeIdRemoved = true; }
            if (state.PrimaryParentCategoryId == null) { cmd.IsPropertyPrimaryParentCategoryIdRemoved = true; }
            if (state.CategoryName == null) { cmd.IsPropertyCategoryNameRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.CategoryImageUrl == null) { cmd.IsPropertyCategoryImageUrlRemoved = true; }
            if (state.DetailScreen == null) { cmd.IsPropertyDetailScreenRemoved = true; }
            return cmd;
        }

        public static TCreateProductCategory ToCreateProductCategory<TCreateProductCategory>(this IProductCategoryState state)
            where TCreateProductCategory : ICreateProductCategory, new()
        {
            var cmd = new TCreateProductCategory();

            cmd.Version = ((IProductCategoryStateProperties)state).Version;

            cmd.ProductCategoryId = state.ProductCategoryId;
            cmd.ProductCategoryTypeId = state.ProductCategoryTypeId;
            cmd.PrimaryParentCategoryId = state.PrimaryParentCategoryId;
            cmd.CategoryName = state.CategoryName;
            cmd.Description = state.Description;
            cmd.CategoryImageUrl = state.CategoryImageUrl;
            cmd.DetailScreen = state.DetailScreen;
            cmd.ShowInSelect = state.ShowInSelect;
            cmd.Active = ((IProductCategoryStateProperties)state).Active;
            return cmd;
        }
		

	}

}

