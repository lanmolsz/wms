// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public partial class YearPlanStateDto : StateDtoBase, IYearPlanState
	{

        internal static IList<string> _collectionFieldNames = new string[] { "MonthPlans" };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private YearPlanState _state;

        public YearPlanStateDto()
        {
            this._state = new YearPlanState();
        }

		public YearPlanStateDto(YearPlanState state)
		{
            this._state = state;
		}

		internal YearPlanState ToYearPlanState()
		{
			return this._state;
		}

		public virtual int? Year
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Year"))
                {
                    return _state.Year;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Year = value.Value;
                }
            }
        }

        int IYearPlanStateProperties.Year
        {
            get 
            {
                return (this._state as IYearPlanStateProperties).Year;
            }
            set 
            {
                this._state.Year = value;
            }
        }

		public virtual string Description
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Description"))
                {
                    return _state.Description;
                }
                return null;
            }
            set
            {
                _state.Description = value;
            }
        }

        string IYearPlanStateProperties.Description
        {
            get 
            {
                return (this._state as IYearPlanStateProperties).Description;
            }
            set 
            {
                this._state.Description = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Active"))
                {
                    return _state.Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Active = value.Value;
                }
            }
        }

        bool IYearPlanStateProperties.Active
        {
            get 
            {
                return (this._state as IYearPlanStateProperties).Active;
            }
            set 
            {
                this._state.Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Version"))
                {
                    return _state.Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Version = value.Value;
                }
            }
        }

        long IYearPlanStateProperties.Version
        {
            get 
            {
                return (this._state as IYearPlanStateProperties).Version;
            }
            set 
            {
                this._state.Version = value;
            }
        }


        public PersonalNameDto PersonalName
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("PersonalName"))
                {
					return (_state.PersonalName == null) ? null : new PersonalNameDto(_state.PersonalName);
                }
                return null;
            }
            set
            {
                _state.PersonalName = (value == null) ? null : value.ToPersonalName();
            }
        }


        PersonalName IYearPlanStateProperties.PersonalName
        {
            get 
            {
                return (this._state as IYearPlanStateProperties).PersonalName;
            }
            set 
            {
                this._state.PersonalName = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }
		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }
		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }
		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation


		YearPlanId IGlobalIdentity<YearPlanId>.GlobalId {
			get { return (_state as IYearPlanState).GlobalId; }
		}

        int ILocalIdentity<int>.LocalId
        {
			get { return (_state as IYearPlanState).LocalId; }
        }

		#endregion


		#region IActive implementation

		bool IActive.Active
		{
            get { return (_state as IActive).Active; }
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IYearPlanState).CreatedBy; }
            set { (_state as IYearPlanState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IYearPlanState).CreatedAt; }
            set { (_state as IYearPlanState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IYearPlanState).UpdatedBy; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IYearPlanState).UpdatedAt; }
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
            get { return _state.Version; }
		}

		#endregion

        bool IYearPlanState.IsUnsaved
        {
            get { return ((IVersioned<long>)this).Version == YearPlanState.VersionZero; }
        }

        public virtual MonthPlanStateDto[] MonthPlans
        {
            get 
            {
                if (!(this as IStateDto).ReturnedFieldsContains("MonthPlans"))
                {
                    return null;
                }
                var dtos = new List<MonthPlanStateDto>();
                if (this._state.MonthPlans != null)
                {
                    foreach (var s in this._state.MonthPlans)
                    {
                        var dto = new MonthPlanStateDto((MonthPlanState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "MonthPlans");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDto).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDto).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new MonthPlanStateDto[0]; }
                var states = new List<MonthPlanState>();
                foreach (var s in value)
                {
                    states.Add(s.ToMonthPlanState());
                }
                this._state.SetMonthPlans(new DtoMonthPlanStates(this._state, states));
            }
        }

        IMonthPlanStates IYearPlanState.MonthPlans
        {
            get { return _state.MonthPlans; }
        }


		void IYearPlanState.When(IYearPlanStateCreated e)
		{
            throw new NotSupportedException();
		}


		void IYearPlanState.When(IYearPlanStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IYearPlanState.When(IYearPlanStateRemoved e)
		{
            throw new NotSupportedException();
		}


		void IYearPlanState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////


        public class DtoMonthPlanStates : IMonthPlanStates
        {

            private IYearPlanState _outerState;

            private IEnumerable<IMonthPlanState> _innerStates;

            public DtoMonthPlanStates(IYearPlanState outerState, IEnumerable<IMonthPlanState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new IMonthPlanState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<IMonthPlanState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public IMonthPlanState Get(int month)
            {
                throw new NotSupportedException();
            }

            public void Remove(IMonthPlanState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(IMonthPlanState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

	}

    partial class YearPlanStateDtoCollection : StateDtoCollectionBase<YearPlanStateDto>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(YearPlanStateDto._collectionFieldNames, fieldName);
        }

    }

}

