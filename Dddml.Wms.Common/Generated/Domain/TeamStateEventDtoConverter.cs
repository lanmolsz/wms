// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class TeamStateEventDtoConverter
    {
        public virtual TeamStateCreatedOrMergePatchedOrDeletedDto ToTeamStateEventDto(ITeamStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (ITeamStateCreated)stateEvent;
                return ToTeamStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (ITeamStateMergePatched)stateEvent;
                return ToTeamStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (ITeamStateDeleted)stateEvent;
                return ToTeamStateDeletedDto(e);
            }

            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual TeamStateCreatedDto ToTeamStateCreatedDto(ITeamStateCreated e)
        {
            var dto = new TeamStateCreatedDto();
            dto.StateEventId = new TeamStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            dto.Players = e.Players.Select(p => p == null ? null : new PersonalNameDto(p)).ToArray();
            dto.Mascots = e.Mascots.ToArray();
            return dto;
        }

        public virtual TeamStateMergePatchedDto ToTeamStateMergePatchedDto(ITeamStateMergePatched e)
        {
            var dto = new TeamStateMergePatchedDto();
            dto.StateEventId = new TeamStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            dto.Players = e.Players.Select(p => p == null ? null : new PersonalNameDto(p)).ToArray();
            dto.Mascots = e.Mascots.ToArray();
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyPlayersRemoved = e.IsPropertyPlayersRemoved;
            dto.IsPropertyMascotsRemoved = e.IsPropertyMascotsRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual TeamStateDeletedDto ToTeamStateDeletedDto(ITeamStateDeleted e)
        {
            var dto = new TeamStateDeletedDto();
            dto.StateEventId = new TeamStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

