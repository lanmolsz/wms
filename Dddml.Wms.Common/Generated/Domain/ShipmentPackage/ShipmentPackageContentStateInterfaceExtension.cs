// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentPackageDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentPackage;

namespace Dddml.Wms.Domain.ShipmentPackage
{

	public static partial class ShipmentPackageContentStateInterfaceExtension
	{

        public static IShipmentPackageContentCommand ToCreateOrMergePatchShipmentPackageContent<TCreateShipmentPackageContent, TMergePatchShipmentPackageContent>(this IShipmentPackageContentState state)
            where TCreateShipmentPackageContent : ICreateShipmentPackageContent, new()
            where TMergePatchShipmentPackageContent : IMergePatchShipmentPackageContent, new()
        {
            bool bUnsaved = ((IShipmentPackageContentState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateShipmentPackageContent<TCreateShipmentPackageContent>();
            }
            else 
            {
                return state.ToMergePatchShipmentPackageContent<TMergePatchShipmentPackageContent>();
            }
        }

        public static TRemoveShipmentPackageContent ToRemoveShipmentPackageContent<TRemoveShipmentPackageContent>(this IShipmentPackageContentState state)
            where TRemoveShipmentPackageContent : IRemoveShipmentPackageContent, new()
        {
            var cmd = new TRemoveShipmentPackageContent();
            cmd.ShipmentItemSeqId = state.ShipmentItemSeqId;
            return cmd;
        }

        public static TMergePatchShipmentPackageContent ToMergePatchShipmentPackageContent<TMergePatchShipmentPackageContent>(this IShipmentPackageContentState state)
            where TMergePatchShipmentPackageContent : IMergePatchShipmentPackageContent, new()
        {
            var cmd = new TMergePatchShipmentPackageContent();

            cmd.ShipmentItemSeqId = state.ShipmentItemSeqId;
            cmd.Quantity = state.Quantity;
            cmd.SubProductId = state.SubProductId;
            cmd.SubProductQuantity = state.SubProductQuantity;
            cmd.Active = ((IShipmentPackageContentStateProperties)state).Active;
            cmd.ShipmentPackageId = state.ShipmentPackageId;
            
            if (state.Quantity == null) { cmd.IsPropertyQuantityRemoved = true; }
            if (state.SubProductId == null) { cmd.IsPropertySubProductIdRemoved = true; }
            if (state.SubProductQuantity == null) { cmd.IsPropertySubProductQuantityRemoved = true; }
            return cmd;
        }

        public static TCreateShipmentPackageContent ToCreateShipmentPackageContent<TCreateShipmentPackageContent>(this IShipmentPackageContentState state)
            where TCreateShipmentPackageContent : ICreateShipmentPackageContent, new()
        {
            var cmd = new TCreateShipmentPackageContent();

            cmd.ShipmentItemSeqId = state.ShipmentItemSeqId;
            cmd.Quantity = state.Quantity;
            cmd.SubProductId = state.SubProductId;
            cmd.SubProductQuantity = state.SubProductQuantity;
            cmd.Active = ((IShipmentPackageContentStateProperties)state).Active;
            cmd.ShipmentPackageId = state.ShipmentPackageId;
            return cmd;
        }
		

	}

}

