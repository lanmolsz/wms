// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentPackageDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentPackage;

namespace Dddml.Wms.Domain.ShipmentPackage
{
    public partial class ShipmentPackageAggregate : AggregateBase, IShipmentPackageAggregate
    {

        readonly IShipmentPackageState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IShipmentPackageState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        ShipmentPackageId IGlobalIdentity<ShipmentPackageId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public ShipmentPackageAggregate(IShipmentPackageState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IShipmentPackageStateProperties)_state).Version == ShipmentPackageState.VersionZero)
            {
                if (IsCommandCreate((IShipmentPackageCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IShipmentPackageCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IShipmentPackageCommand c)
        {
            return c.Version == ShipmentPackageState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateShipmentPackage c)
        {
            IShipmentPackageStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchShipmentPackage c)
        {
            IShipmentPackageStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteShipmentPackage c)
        {
            IShipmentPackageStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IShipmentPackageStateCreated Map(ICreateShipmentPackage c)
        {
			var stateEventId = new ShipmentPackageEventId(c.ShipmentPackageId, c.Version);
            IShipmentPackageStateCreated e = NewShipmentPackageStateCreated(stateEventId);
		
            e.ShipmentBoxTypeId = c.ShipmentBoxTypeId;
            e.DateCreated = c.DateCreated;
            e.BoxLength = c.BoxLength;
            e.BoxHeight = c.BoxHeight;
            e.BoxWidth = c.BoxWidth;
            e.DimensionUomId = c.DimensionUomId;
            e.Weight = c.Weight;
            e.WeightUomId = c.WeightUomId;
            e.InsuredValue = c.InsuredValue;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;

            foreach (ICreateShipmentPackageContent innerCommand in c.ShipmentPackageContents)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IShipmentPackageContentStateCreated innerEvent = MapCreate(innerCommand, c, version, _state);
                e.AddShipmentPackageContentEvent(innerEvent);
            }


            return e;
        }

        protected virtual IShipmentPackageStateMergePatched Map(IMergePatchShipmentPackage c)
        {
			var stateEventId = new ShipmentPackageEventId(c.ShipmentPackageId, c.Version);
            IShipmentPackageStateMergePatched e = NewShipmentPackageStateMergePatched(stateEventId);

            e.ShipmentBoxTypeId = c.ShipmentBoxTypeId;
            e.DateCreated = c.DateCreated;
            e.BoxLength = c.BoxLength;
            e.BoxHeight = c.BoxHeight;
            e.BoxWidth = c.BoxWidth;
            e.DimensionUomId = c.DimensionUomId;
            e.Weight = c.Weight;
            e.WeightUomId = c.WeightUomId;
            e.InsuredValue = c.InsuredValue;
            e.Active = c.Active;
            e.IsPropertyShipmentBoxTypeIdRemoved = c.IsPropertyShipmentBoxTypeIdRemoved;
            e.IsPropertyDateCreatedRemoved = c.IsPropertyDateCreatedRemoved;
            e.IsPropertyBoxLengthRemoved = c.IsPropertyBoxLengthRemoved;
            e.IsPropertyBoxHeightRemoved = c.IsPropertyBoxHeightRemoved;
            e.IsPropertyBoxWidthRemoved = c.IsPropertyBoxWidthRemoved;
            e.IsPropertyDimensionUomIdRemoved = c.IsPropertyDimensionUomIdRemoved;
            e.IsPropertyWeightRemoved = c.IsPropertyWeightRemoved;
            e.IsPropertyWeightUomIdRemoved = c.IsPropertyWeightUomIdRemoved;
            e.IsPropertyInsuredValueRemoved = c.IsPropertyInsuredValueRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;

            foreach (IShipmentPackageContentCommand innerCommand in c.ShipmentPackageContentCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IShipmentPackageContentStateEvent innerEvent = Map(innerCommand, c, version, _state);
                e.AddShipmentPackageContentEvent(innerEvent);
            }


            return e;
        }

        protected virtual IShipmentPackageStateDeleted Map(IDeleteShipmentPackage c)
        {
			var stateEventId = new ShipmentPackageEventId(c.ShipmentPackageId, c.Version);
            IShipmentPackageStateDeleted e = NewShipmentPackageStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }


        protected void ThrowOnInconsistentCommands(IShipmentPackageCommand command, IShipmentPackageContentCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrDeleteShipmentPackage;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemoveShipmentPackageContent;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.ShipmentPackageId == default(ShipmentPackageId))
            {
                innerProperties.ShipmentPackageId = properties.ShipmentPackageId;
            }
            else
            {
                var outerShipmentPackageIdName = "ShipmentPackageId";
                var outerShipmentPackageIdValue = properties.ShipmentPackageId;
                var innerShipmentPackageIdName = "ShipmentPackageId";
                var innerShipmentPackageIdValue = innerProperties.ShipmentPackageId;
                ThrowOnInconsistentIds(innerProperties, innerShipmentPackageIdName, innerShipmentPackageIdValue, outerShipmentPackageIdName, outerShipmentPackageIdValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected virtual IShipmentPackageContentStateEvent Map(IShipmentPackageContentCommand c, IShipmentPackageCommand outerCommand, long version, IShipmentPackageState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreateShipmentPackageContent) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            var merge = (c.CommandType == CommandType.MergePatch || c.CommandType == null) ? (c as IMergePatchShipmentPackageContent) : null;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, version, outerState);
            }

            var remove = (c.CommandType == CommandType.Remove) ? (c as IRemoveShipmentPackageContent) : null;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, version);
            }
            throw new NotSupportedException();
        }


        protected virtual IShipmentPackageContentStateCreated MapCreate(ICreateShipmentPackageContent c, IShipmentPackageCommand outerCommand, long version, IShipmentPackageState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new ShipmentPackageContentEventId(c.ShipmentPackageId, c.ShipmentItemSeqId, version);
            IShipmentPackageContentStateCreated e = NewShipmentPackageContentStateCreated(stateEventId);
            var s = outerState.ShipmentPackageContents.Get(c.ShipmentItemSeqId, true);

            e.Quantity = c.Quantity;
            e.SubProductId = c.SubProductId;
            e.SubProductQuantity = c.SubProductQuantity;
            e.Active = c.Active;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IShipmentPackageContentStateMergePatched MapMergePatch(IMergePatchShipmentPackageContent c, IShipmentPackageCommand outerCommand, long version, IShipmentPackageState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new ShipmentPackageContentEventId(c.ShipmentPackageId, c.ShipmentItemSeqId, version);
            IShipmentPackageContentStateMergePatched e = NewShipmentPackageContentStateMergePatched(stateEventId);
            var s = outerState.ShipmentPackageContents.Get(c.ShipmentItemSeqId);

            e.Quantity = c.Quantity;
            e.SubProductId = c.SubProductId;
            e.SubProductQuantity = c.SubProductQuantity;
            e.Active = c.Active;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertySubProductIdRemoved = c.IsPropertySubProductIdRemoved;
            e.IsPropertySubProductQuantityRemoved = c.IsPropertySubProductQuantityRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IShipmentPackageContentStateRemoved MapRemove(IRemoveShipmentPackageContent c, IShipmentPackageCommand outerCommand, long version)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new ShipmentPackageContentEventId(c.ShipmentPackageId, c.ShipmentItemSeqId, version);
            IShipmentPackageContentStateRemoved e = NewShipmentPackageContentStateRemoved(stateEventId);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;

        }// END Map(IRemove... ////////////////////////////

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected ShipmentPackageStateCreated NewShipmentPackageStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new ShipmentPackageEventId(_state.ShipmentPackageId, version);
            var e = NewShipmentPackageStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected ShipmentPackageStateMergePatched NewShipmentPackageStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new ShipmentPackageEventId(_state.ShipmentPackageId, version);
            var e = NewShipmentPackageStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected ShipmentPackageStateDeleted NewShipmentPackageStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new ShipmentPackageEventId(_state.ShipmentPackageId, version);
            var e = NewShipmentPackageStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private ShipmentPackageStateCreated NewShipmentPackageStateCreated(ShipmentPackageEventId stateEventId)
		{
			return new ShipmentPackageStateCreated(stateEventId);			
		}

        private ShipmentPackageStateMergePatched NewShipmentPackageStateMergePatched(ShipmentPackageEventId stateEventId)
		{
			return new ShipmentPackageStateMergePatched(stateEventId);
		}

        private ShipmentPackageStateDeleted NewShipmentPackageStateDeleted(ShipmentPackageEventId stateEventId)
		{
			return new ShipmentPackageStateDeleted(stateEventId);
		}

		private ShipmentPackageContentStateCreated NewShipmentPackageContentStateCreated(ShipmentPackageContentEventId stateEventId)
		{
			return new ShipmentPackageContentStateCreated(stateEventId);
		}

        private ShipmentPackageContentStateMergePatched NewShipmentPackageContentStateMergePatched(ShipmentPackageContentEventId stateEventId)
		{
			return new ShipmentPackageContentStateMergePatched(stateEventId);
		}

        private ShipmentPackageContentStateRemoved NewShipmentPackageContentStateRemoved(ShipmentPackageContentEventId stateEventId)
		{
			return new ShipmentPackageContentStateRemoved(stateEventId);
		}

    }

}

