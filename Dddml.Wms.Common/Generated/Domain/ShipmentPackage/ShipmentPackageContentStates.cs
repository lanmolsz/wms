// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentPackageDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentPackage;

namespace Dddml.Wms.Domain.ShipmentPackage
{

    public class ShipmentPackageContentStates : IShipmentPackageContentStates
    {
        
		protected IShipmentPackageContentStateDao ShipmentPackageContentStateDao
		{
			get
			{
				return ApplicationContext.Current["ShipmentPackageContentStateDao"] as IShipmentPackageContentStateDao;
			}
		}

		private Dictionary<ShipmentPackageContentId, IShipmentPackageContentState> _loadedShipmentPackageContentStates = new Dictionary<ShipmentPackageContentId, IShipmentPackageContentState>();

		private Dictionary<ShipmentPackageContentId, IShipmentPackageContentState> _removedShipmentPackageContentStates = new Dictionary<ShipmentPackageContentId, IShipmentPackageContentState>();

		protected virtual IEnumerable<IShipmentPackageContentState> LoadedShipmentPackageContentStates {
			get {
				return this._loadedShipmentPackageContentStates.Values;
			}
		}

        private IShipmentPackageState _shipmentPackageState;

        private IEnumerable<IShipmentPackageContentState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return ShipmentPackageContentStateDao.FindByShipmentPackageId(_shipmentPackageState.ShipmentPackageId);
                }
                else
                {
                    return _loadedShipmentPackageContentStates.Values.Where(s => !(_removedShipmentPackageContentStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public ShipmentPackageContentStates(IShipmentPackageState outerState)
        {
            this._shipmentPackageState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IShipmentPackageContentState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IShipmentPackageContentState state)
        {
            this._removedShipmentPackageContentStates.Add(state.GlobalId, state);
        }

        public virtual IShipmentPackageContentState Get(string shipmentItemSeqId)
		{
			return Get(shipmentItemSeqId, false, false);
		}

        public virtual IShipmentPackageContentState Get(string shipmentItemSeqId, bool forCreation)
        {
			return Get(shipmentItemSeqId, forCreation, false);
        }

        public virtual IShipmentPackageContentState Get(string shipmentItemSeqId, bool forCreation, bool nullAllowed)
        {
            ShipmentPackageContentId globalId = new ShipmentPackageContentId(_shipmentPackageState.ShipmentPackageId, shipmentItemSeqId);
            if (_loadedShipmentPackageContentStates.ContainsKey(globalId)) {
                var state = _loadedShipmentPackageContentStates[globalId];
                if (this._shipmentPackageState != null && this._shipmentPackageState.ReadOnly == false) { ((IShipmentPackageContentState)state).ReadOnly = false; }
                return state;
            }
            if (forCreation || ForReapplying)
            {
                var state = new ShipmentPackageContentState(ForReapplying);
                state.ShipmentPackageContentId = globalId;
                _loadedShipmentPackageContentStates.Add(globalId, state);
                if (this._shipmentPackageState != null && this._shipmentPackageState.ReadOnly == false) { ((IShipmentPackageContentState)state).ReadOnly = false; }
                return state;
            }
            else
            {
                var state = ShipmentPackageContentStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedShipmentPackageContentStates.Add(globalId, state);
                }
                if (this._shipmentPackageState != null && this._shipmentPackageState.ReadOnly == false) { ((IShipmentPackageContentState)state).ReadOnly = false; }
                return state;
            }
        }

        public virtual void AddToSave(IShipmentPackageContentState state)
        {
            this._loadedShipmentPackageContentStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IShipmentPackageContentState s in this.LoadedShipmentPackageContentStates) {
                ShipmentPackageContentStateDao.Save(s);
			}
            foreach(IShipmentPackageContentState s in this._removedShipmentPackageContentStates.Values)
            {
                ShipmentPackageContentStateDao.Delete(s);
            }
		}

		#endregion


    }



}


