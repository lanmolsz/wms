// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentPackageDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentPackage;

namespace Dddml.Wms.Domain.ShipmentPackage
{

	public static partial class ShipmentPackageStateInterfaceExtension
	{

        public static IShipmentPackageCommand ToCreateOrMergePatchShipmentPackage<TCreateShipmentPackage, TMergePatchShipmentPackage, TCreateShipmentPackageContent, TMergePatchShipmentPackageContent>(this IShipmentPackageState state)
            where TCreateShipmentPackage : ICreateShipmentPackage, new()
            where TMergePatchShipmentPackage : IMergePatchShipmentPackage, new()
            where TCreateShipmentPackageContent : ICreateShipmentPackageContent, new()
            where TMergePatchShipmentPackageContent : IMergePatchShipmentPackageContent, new()
        {
            bool bUnsaved = ((IShipmentPackageState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateShipmentPackage<TCreateShipmentPackage, TCreateShipmentPackageContent>();
            }
            else 
            {
                return state.ToMergePatchShipmentPackage<TMergePatchShipmentPackage, TCreateShipmentPackageContent, TMergePatchShipmentPackageContent>();
            }
        }

        public static TDeleteShipmentPackage ToDeleteShipmentPackage<TDeleteShipmentPackage>(this IShipmentPackageState state)
            where TDeleteShipmentPackage : IDeleteShipmentPackage, new()
        {
            var cmd = new TDeleteShipmentPackage();
            cmd.ShipmentPackageId = state.ShipmentPackageId;
            cmd.Version = ((IShipmentPackageStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchShipmentPackage ToMergePatchShipmentPackage<TMergePatchShipmentPackage, TCreateShipmentPackageContent, TMergePatchShipmentPackageContent>(this IShipmentPackageState state)
            where TMergePatchShipmentPackage : IMergePatchShipmentPackage, new()
            where TCreateShipmentPackageContent : ICreateShipmentPackageContent, new()
            where TMergePatchShipmentPackageContent : IMergePatchShipmentPackageContent, new()
        {
            var cmd = new TMergePatchShipmentPackage();

            cmd.Version = ((IShipmentPackageStateProperties)state).Version;

            cmd.ShipmentPackageId = state.ShipmentPackageId;
            cmd.ShipmentBoxTypeId = state.ShipmentBoxTypeId;
            cmd.DateCreated = state.DateCreated;
            cmd.BoxLength = state.BoxLength;
            cmd.BoxHeight = state.BoxHeight;
            cmd.BoxWidth = state.BoxWidth;
            cmd.DimensionUomId = state.DimensionUomId;
            cmd.Weight = state.Weight;
            cmd.WeightUomId = state.WeightUomId;
            cmd.InsuredValue = state.InsuredValue;
            cmd.Active = ((IShipmentPackageStateProperties)state).Active;
            
            if (state.ShipmentBoxTypeId == null) { cmd.IsPropertyShipmentBoxTypeIdRemoved = true; }
            if (state.DateCreated == null) { cmd.IsPropertyDateCreatedRemoved = true; }
            if (state.BoxLength == null) { cmd.IsPropertyBoxLengthRemoved = true; }
            if (state.BoxHeight == null) { cmd.IsPropertyBoxHeightRemoved = true; }
            if (state.BoxWidth == null) { cmd.IsPropertyBoxWidthRemoved = true; }
            if (state.DimensionUomId == null) { cmd.IsPropertyDimensionUomIdRemoved = true; }
            if (state.Weight == null) { cmd.IsPropertyWeightRemoved = true; }
            if (state.WeightUomId == null) { cmd.IsPropertyWeightUomIdRemoved = true; }
            if (state.InsuredValue == null) { cmd.IsPropertyInsuredValueRemoved = true; }
            foreach (var d in state.ShipmentPackageContents)
            {
                var c = d.ToCreateOrMergePatchShipmentPackageContent<TCreateShipmentPackageContent, TMergePatchShipmentPackageContent>();
                cmd.ShipmentPackageContentCommands.Add(c);
            }
            return cmd;
        }

        public static TCreateShipmentPackage ToCreateShipmentPackage<TCreateShipmentPackage, TCreateShipmentPackageContent>(this IShipmentPackageState state)
            where TCreateShipmentPackage : ICreateShipmentPackage, new()
            where TCreateShipmentPackageContent : ICreateShipmentPackageContent, new()
        {
            var cmd = new TCreateShipmentPackage();

            cmd.Version = ((IShipmentPackageStateProperties)state).Version;

            cmd.ShipmentPackageId = state.ShipmentPackageId;
            cmd.ShipmentBoxTypeId = state.ShipmentBoxTypeId;
            cmd.DateCreated = state.DateCreated;
            cmd.BoxLength = state.BoxLength;
            cmd.BoxHeight = state.BoxHeight;
            cmd.BoxWidth = state.BoxWidth;
            cmd.DimensionUomId = state.DimensionUomId;
            cmd.Weight = state.Weight;
            cmd.WeightUomId = state.WeightUomId;
            cmd.InsuredValue = state.InsuredValue;
            cmd.Active = ((IShipmentPackageStateProperties)state).Active;
            foreach (var d in state.ShipmentPackageContents)
            {
                var c = d.ToCreateShipmentPackageContent<TCreateShipmentPackageContent>();
                cmd.ShipmentPackageContents.Add(c);
            }
            return cmd;
        }
		

	}

}

