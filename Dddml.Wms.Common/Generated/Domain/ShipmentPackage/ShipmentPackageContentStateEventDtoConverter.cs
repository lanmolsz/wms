// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentPackageDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentPackage;

namespace Dddml.Wms.Domain.ShipmentPackage
{

    public class ShipmentPackageContentStateEventDtoConverter
    {
        public virtual ShipmentPackageContentStateCreatedOrMergePatchedOrRemovedDto ToShipmentPackageContentStateEventDto(IShipmentPackageContentEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IShipmentPackageContentStateCreated)stateEvent;
                return ToShipmentPackageContentStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IShipmentPackageContentStateMergePatched)stateEvent;
                return ToShipmentPackageContentStateMergePatchedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.Removed)
            {
                var e = (IShipmentPackageContentStateRemoved)stateEvent;
                return ToShipmentPackageContentStateRemovedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual ShipmentPackageContentStateCreatedDto ToShipmentPackageContentStateCreatedDto(IShipmentPackageContentStateCreated e)
        {
            var dto = new ShipmentPackageContentStateCreatedDto();
            dto.ShipmentPackageContentEventId = e.ShipmentPackageContentEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.Quantity = e.Quantity;
            dto.SubProductId = e.SubProductId;
            dto.SubProductQuantity = e.SubProductQuantity;
            dto.Active = e.Active;
            return dto;
        }

        public virtual ShipmentPackageContentStateMergePatchedDto ToShipmentPackageContentStateMergePatchedDto(IShipmentPackageContentStateMergePatched e)
        {
            var dto = new ShipmentPackageContentStateMergePatchedDto();
            dto.ShipmentPackageContentEventId = e.ShipmentPackageContentEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.Quantity = e.Quantity;
            dto.SubProductId = e.SubProductId;
            dto.SubProductQuantity = e.SubProductQuantity;
            dto.Active = e.Active;
            dto.IsPropertyQuantityRemoved = e.IsPropertyQuantityRemoved;
            dto.IsPropertySubProductIdRemoved = e.IsPropertySubProductIdRemoved;
            dto.IsPropertySubProductQuantityRemoved = e.IsPropertySubProductQuantityRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual ShipmentPackageContentStateRemovedDto ToShipmentPackageContentStateRemovedDto(IShipmentPackageContentStateRemoved e)
        {
            var dto = new ShipmentPackageContentStateRemovedDto();
            dto.ShipmentPackageContentEventId = e.ShipmentPackageContentEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

