// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderShipment;

namespace Dddml.Wms.Domain.OrderShipment
{

	public static partial class OrderShipmentStateInterfaceExtension
	{

        public static IOrderShipmentCommand ToCreateOrMergePatchOrderShipment<TCreateOrderShipment, TMergePatchOrderShipment>(this IOrderShipmentState state)
            where TCreateOrderShipment : ICreateOrderShipment, new()
            where TMergePatchOrderShipment : IMergePatchOrderShipment, new()
        {
            bool bUnsaved = ((IOrderShipmentState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateOrderShipment<TCreateOrderShipment>();
            }
            else 
            {
                return state.ToMergePatchOrderShipment<TMergePatchOrderShipment>();
            }
        }

        public static TDeleteOrderShipment ToDeleteOrderShipment<TDeleteOrderShipment>(this IOrderShipmentState state)
            where TDeleteOrderShipment : IDeleteOrderShipment, new()
        {
            var cmd = new TDeleteOrderShipment();
            cmd.OrderShipmentId = state.OrderShipmentId;
            cmd.Version = ((IOrderShipmentStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchOrderShipment ToMergePatchOrderShipment<TMergePatchOrderShipment>(this IOrderShipmentState state)
            where TMergePatchOrderShipment : IMergePatchOrderShipment, new()
        {
            var cmd = new TMergePatchOrderShipment();

            cmd.Version = ((IOrderShipmentStateProperties)state).Version;

            cmd.OrderShipmentId = state.OrderShipmentId;
            cmd.Quantity = state.Quantity;
            cmd.Active = ((IOrderShipmentStateProperties)state).Active;
            
            if (state.Quantity == null) { cmd.IsPropertyQuantityRemoved = true; }
            return cmd;
        }

        public static TCreateOrderShipment ToCreateOrderShipment<TCreateOrderShipment>(this IOrderShipmentState state)
            where TCreateOrderShipment : ICreateOrderShipment, new()
        {
            var cmd = new TCreateOrderShipment();

            cmd.Version = ((IOrderShipmentStateProperties)state).Version;

            cmd.OrderShipmentId = state.OrderShipmentId;
            cmd.Quantity = state.Quantity;
            cmd.Active = ((IOrderShipmentStateProperties)state).Active;
            return cmd;
        }
		

	}

}

