// <autogenerated>
//   This file was generated by T4 code generator GeneratePartyDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Party;
using Dddml.Support.Criterion;

namespace Dddml.Wms.Domain.Party
{

	public partial interface IPartyApplicationService : IApplicationService
	{
		void When(ICreateParty c);

		void When(IMergePatchParty c);

		void When(IDeleteParty c);

 		IPartyState Get(string partyId);

        IEnumerable<IPartyState> GetAll(int firstResult, int maxResults);

        IEnumerable<IPartyState> Get(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IPartyState> Get(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IPartyState> GetByProperty(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        long GetCount(IEnumerable<KeyValuePair<string, object>> filter);

        long GetCount(ICriterion filter);

        IEnumerable<T> GetAll<T>(int firstResult, int maxResults) where T : class, IPartyState;

        IEnumerable<T> Get<T>(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue) where T : class, IPartyState;

        IEnumerable<T> Get<T>(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue) where T : class, IPartyState;

        IEnumerable<T> GetByProperty<T>(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue) where T : class, IPartyState;

        long GetCount<T>(IEnumerable<KeyValuePair<string, object>> filter) where T : class, IPartyState;

        long GetCount<T>(ICriterion filter) where T : class, IPartyState;

        IPartyEvent GetEvent(string partyId, long version);

        IPartyState GetHistoryState(string partyId, long version);


	}

    public static partial class PartyApplicationServiceExtension
    {
        public static IEnumerable<IPartyState> GetByProperty(this IPartyApplicationService applicationService,
            System.Linq.Expressions.Expression<Func<IPartyState, object>> propertySelector, 
            object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return applicationService.GetByProperty(ReflectUtils.GetPropertyName<IPartyState>(propertySelector), propertyValue, orders, firstResult, maxResults);
        }

        public static IEnumerable<IPartyState> GetByProperty<TPropertyType>(this IPartyApplicationService applicationService,
            System.Linq.Expressions.Expression<Func<IPartyState, TPropertyType>> propertySelector,
            TPropertyType propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return applicationService.GetByProperty(ReflectUtils.GetPropertyName<IPartyState, TPropertyType>(propertySelector), propertyValue, orders, firstResult, maxResults);
        }
    }

}

