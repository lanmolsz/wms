// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public partial class PersonStateDto : StateDtoBase, IPersonState
	{

        internal static IList<string> _collectionFieldNames = new string[] { "YearPlans" };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private PersonState _state;

        public PersonStateDto()
        {
            this._state = new PersonState();
        }

		public PersonStateDto(PersonState state)
		{
            this._state = state;
		}

		internal PersonState ToPersonState()
		{
			return this._state;
		}


        public PersonalNameDto PersonalName
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("PersonalName"))
                {
					return (_state.PersonalName == null) ? null : new PersonalNameDto(_state.PersonalName);
                }
                return null;
            }
            set
            {
                _state.PersonalName = (value == null) ? null : value.ToPersonalName();
            }
        }


        PersonalName IPersonStateProperties.PersonalName
        {
            get 
            {
                return (this._state as IPersonStateProperties).PersonalName;
            }
            set 
            {
                this._state.PersonalName = value;
            }
        }

		public virtual DateTime? BirthDate
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("BirthDate"))
                {
                    return _state.BirthDate;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.BirthDate = value.Value;
                }
            }
        }

        DateTime IPersonStateProperties.BirthDate
        {
            get 
            {
                return (this._state as IPersonStateProperties).BirthDate;
            }
            set 
            {
                this._state.BirthDate = value;
            }
        }


        public PersonalNameDto Loves
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Loves"))
                {
					return (_state.Loves == null) ? null : new PersonalNameDto(_state.Loves);
                }
                return null;
            }
            set
            {
                _state.Loves = (value == null) ? null : value.ToPersonalName();
            }
        }


        PersonalName IPersonStateProperties.Loves
        {
            get 
            {
                return (this._state as IPersonStateProperties).Loves;
            }
            set 
            {
                this._state.Loves = value;
            }
        }


        public ContactDto EmergencyContact
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("EmergencyContact"))
                {
					return (_state.EmergencyContact == null) ? null : new ContactDto(_state.EmergencyContact);
                }
                return null;
            }
            set
            {
                _state.EmergencyContact = (value == null) ? null : value.ToContact();
            }
        }


        Contact IPersonStateProperties.EmergencyContact
        {
            get 
            {
                return (this._state as IPersonStateProperties).EmergencyContact;
            }
            set 
            {
                this._state.EmergencyContact = value;
            }
        }

		public virtual string Email
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Email"))
                {
                    return _state.Email;
                }
                return null;
            }
            set
            {
                _state.Email = value;
            }
        }

        string IPersonStateProperties.Email
        {
            get 
            {
                return (this._state as IPersonStateProperties).Email;
            }
            set 
            {
                this._state.Email = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Active"))
                {
                    return _state.Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Active = value.Value;
                }
            }
        }

        bool IPersonStateProperties.Active
        {
            get 
            {
                return (this._state as IPersonStateProperties).Active;
            }
            set 
            {
                this._state.Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("Version"))
                {
                    return _state.Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Version = value.Value;
                }
            }
        }

        long IPersonStateProperties.Version
        {
            get 
            {
                return (this._state as IPersonStateProperties).Version;
            }
            set 
            {
                this._state.Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }
		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }
		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }
		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDto).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		PersonalName IGlobalIdentity<PersonalName>.GlobalId
		{
			get { return (_state as IPersonState).GlobalId; }
		}

		#endregion


		#region IActive implementation

		bool IActive.Active
		{
            get { return (_state as IActive).Active; }
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IPersonState).CreatedBy; }
            set { (_state as IPersonState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IPersonState).CreatedAt; }
            set { (_state as IPersonState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IPersonState).UpdatedBy; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IPersonState).UpdatedAt; }
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
            get { return _state.Version; }
		}

		#endregion

        bool IPersonState.IsUnsaved
        {
            get { return ((IVersioned<long>)this).Version == PersonState.VersionZero; }
        }

        public virtual YearPlanStateDto[] YearPlans
        {
            get 
            {
                if (!(this as IStateDto).ReturnedFieldsContains("YearPlans"))
                {
                    return null;
                }
                var dtos = new List<YearPlanStateDto>();
                if (this._state.YearPlans != null)
                {
                    foreach (var s in this._state.YearPlans)
                    {
                        var dto = new YearPlanStateDto((YearPlanState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "YearPlans");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDto).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDto).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new YearPlanStateDto[0]; }
                var states = new List<YearPlanState>();
                foreach (var s in value)
                {
                    states.Add(s.ToYearPlanState());
                }
                this._state.SetYearPlans(new DtoYearPlanStates(this._state, states));
            }
        }

        IYearPlanStates IPersonState.YearPlans
        {
            get { return _state.YearPlans; }
        }


		void IPersonState.When(IPersonStateCreated e)
		{
            throw new NotSupportedException();
		}


		void IPersonState.When(IPersonStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IPersonState.When(IPersonStateDeleted e)
		{
            throw new NotSupportedException();
		}


		void IPersonState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////


        public class DtoYearPlanStates : IYearPlanStates
        {

            private IPersonState _outerState;

            private IEnumerable<IYearPlanState> _innerStates;

            public DtoYearPlanStates(IPersonState outerState, IEnumerable<IYearPlanState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new IYearPlanState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<IYearPlanState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public IYearPlanState Get(int year)
            {
                throw new NotSupportedException();
            }

            public void Remove(IYearPlanState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(IYearPlanState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

	}

    partial class PersonStateDtoCollection : StateDtoCollectionBase<PersonStateDto>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(PersonStateDto._collectionFieldNames, fieldName);
        }

    }

}

