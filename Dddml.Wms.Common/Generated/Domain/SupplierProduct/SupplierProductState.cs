// <autogenerated>
//   This file was generated by T4 code generator GenerateSupplierProductDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SupplierProduct;

namespace Dddml.Wms.Domain.SupplierProduct
{

	public partial class SupplierProductState : SupplierProductStateProperties, ISupplierProductState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }


		#region IIdentity implementation

		SupplierProductId IGlobalIdentity<SupplierProductId>.GlobalId
		{
			get
			{
				return this.SupplierProductId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion


		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool ISupplierProductState.IsUnsaved
        {
            get { return this.Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public SupplierProductState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.SupplierProductId = ((ISupplierProductEvent)events.First()).SupplierProductEventId.SupplierProductId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.Version += 1;
                }
            }
        }

        public SupplierProductState() : this(false)
        {
        }

        public SupplierProductState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(ISupplierProductStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.AvailableThruDate = e.AvailableThruDate;

			this.SupplierPrefOrderId = e.SupplierPrefOrderId;

			this.SupplierRatingTypeId = e.SupplierRatingTypeId;

			this.StandardLeadTimeDays = e.StandardLeadTimeDays;

			this.ManufacturingLeadTimeDays = e.ManufacturingLeadTimeDays;

			this.DeliveryLeadTimeDays = e.DeliveryLeadTimeDays;

			this.QuantityUomId = e.QuantityUomId;

			this.LastPrice = e.LastPrice;

			this.ShippingPrice = e.ShippingPrice;

			this.ExternalProductName = e.ExternalProductName;

			this.ExternalProductId = e.ExternalProductId;

            this.CanDropShip = (e.CanDropShip != null && e.CanDropShip.HasValue) ? e.CanDropShip.Value : default(bool);

			this.Comments = e.Comments;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(ISupplierProductStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.AvailableThruDate == null)
			{
				if (e.IsPropertyAvailableThruDateRemoved)
				{
					this.AvailableThruDate = default(DateTime?);
				}
			}
			else
			{
				this.AvailableThruDate = e.AvailableThruDate;
			}

			if (e.SupplierPrefOrderId == null)
			{
				if (e.IsPropertySupplierPrefOrderIdRemoved)
				{
					this.SupplierPrefOrderId = default(string);
				}
			}
			else
			{
				this.SupplierPrefOrderId = e.SupplierPrefOrderId;
			}

			if (e.SupplierRatingTypeId == null)
			{
				if (e.IsPropertySupplierRatingTypeIdRemoved)
				{
					this.SupplierRatingTypeId = default(string);
				}
			}
			else
			{
				this.SupplierRatingTypeId = e.SupplierRatingTypeId;
			}

			if (e.StandardLeadTimeDays == null)
			{
				if (e.IsPropertyStandardLeadTimeDaysRemoved)
				{
					this.StandardLeadTimeDays = default(decimal?);
				}
			}
			else
			{
				this.StandardLeadTimeDays = e.StandardLeadTimeDays;
			}

			if (e.ManufacturingLeadTimeDays == null)
			{
				if (e.IsPropertyManufacturingLeadTimeDaysRemoved)
				{
					this.ManufacturingLeadTimeDays = default(decimal?);
				}
			}
			else
			{
				this.ManufacturingLeadTimeDays = e.ManufacturingLeadTimeDays;
			}

			if (e.DeliveryLeadTimeDays == null)
			{
				if (e.IsPropertyDeliveryLeadTimeDaysRemoved)
				{
					this.DeliveryLeadTimeDays = default(decimal?);
				}
			}
			else
			{
				this.DeliveryLeadTimeDays = e.DeliveryLeadTimeDays;
			}

			if (e.QuantityUomId == null)
			{
				if (e.IsPropertyQuantityUomIdRemoved)
				{
					this.QuantityUomId = default(string);
				}
			}
			else
			{
				this.QuantityUomId = e.QuantityUomId;
			}

			if (e.LastPrice == null)
			{
				if (e.IsPropertyLastPriceRemoved)
				{
					this.LastPrice = default(decimal?);
				}
			}
			else
			{
				this.LastPrice = e.LastPrice;
			}

			if (e.ShippingPrice == null)
			{
				if (e.IsPropertyShippingPriceRemoved)
				{
					this.ShippingPrice = default(decimal?);
				}
			}
			else
			{
				this.ShippingPrice = e.ShippingPrice;
			}

			if (e.ExternalProductName == null)
			{
				if (e.IsPropertyExternalProductNameRemoved)
				{
					this.ExternalProductName = default(string);
				}
			}
			else
			{
				this.ExternalProductName = e.ExternalProductName;
			}

			if (e.ExternalProductId == null)
			{
				if (e.IsPropertyExternalProductIdRemoved)
				{
					this.ExternalProductId = default(string);
				}
			}
			else
			{
				this.ExternalProductId = e.ExternalProductId;
			}

			if (e.CanDropShip == null)
			{
				if (e.IsPropertyCanDropShipRemoved)
				{
					this.CanDropShip = default(bool);
				}
			}
			else
			{
				this.CanDropShip = (e.CanDropShip != null && e.CanDropShip.HasValue) ? e.CanDropShip.Value : default(bool);
			}

			if (e.Comments == null)
			{
				if (e.IsPropertyCommentsRemoved)
				{
					this.Comments = default(string);
				}
			}
			else
			{
				this.Comments = e.Comments;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(ISupplierProductEvent e)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("SupplierProduct|");

            var stateEntityId = this.SupplierProductId; // Aggregate Id
            var eventEntityId = e.SupplierProductEventId.SupplierProductId;
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.Version;
            var eventVersion = e.SupplierProductEventId.Version;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

