// <autogenerated>
//   This file was generated by T4 code generator GenerateSupplierProductDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SupplierProduct;

namespace Dddml.Wms.Domain.SupplierProduct
{

	public class SupplierProductId
	{

		private string _productId;

		public virtual string ProductId { 
			get { return this._productId; } 
			internal set { _productId = value; } 
		}

		private string _partyId;

		public virtual string PartyId { 
			get { return this._partyId; } 
			internal set { _partyId = value; } 
		}

		private string _currencyUomId;

		public virtual string CurrencyUomId { 
			get { return this._currencyUomId; } 
			internal set { _currencyUomId = value; } 
		}

		private decimal? _minimumOrderQuantity;

		public virtual decimal? MinimumOrderQuantity { 
			get { return this._minimumOrderQuantity; } 
			internal set { _minimumOrderQuantity = value; } 
		}


        #region  Flattened Properties


        #endregion

		internal SupplierProductId ()
		{
		}

		public SupplierProductId (string productId, string partyId, string currencyUomId, decimal? minimumOrderQuantity)
		{
			this._productId = productId;
			this._partyId = partyId;
			this._currencyUomId = currencyUomId;
			this._minimumOrderQuantity = minimumOrderQuantity;

		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			SupplierProductId other = obj as SupplierProductId;
			if (other == null) {
				return false;
			}

			return true 
				&& Object.Equals (this.ProductId, other.ProductId)
				&& Object.Equals (this.PartyId, other.PartyId)
				&& Object.Equals (this.CurrencyUomId, other.CurrencyUomId)
				&& Object.Equals (this.MinimumOrderQuantity, other.MinimumOrderQuantity)
				;
		}

		public override int GetHashCode ()
		{
			int hash = 0;
			if (this.ProductId != null) {
				hash += 13 * this.ProductId.GetHashCode ();
			}
			if (this.PartyId != null) {
				hash += 13 * this.PartyId.GetHashCode ();
			}
			if (this.CurrencyUomId != null) {
				hash += 13 * this.CurrencyUomId.GetHashCode ();
			}
			if (this.MinimumOrderQuantity != null) {
				hash += 13 * this.MinimumOrderQuantity.GetHashCode ();
			}
			return hash;
		}

        public static bool operator ==(SupplierProductId obj1, SupplierProductId obj2)
        {
            return Object.Equals(obj1, obj2);
        }

        public static bool operator !=(SupplierProductId obj1, SupplierProductId obj2)
        {
            return !Object.Equals(obj1, obj2);
        }

	}

}


