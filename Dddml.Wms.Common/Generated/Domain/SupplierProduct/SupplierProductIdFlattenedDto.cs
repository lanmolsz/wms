// <autogenerated>
//   This file was generated by T4 code generator GenerateSupplierProductDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SupplierProduct;

namespace Dddml.Wms.Domain.SupplierProduct
{

	public class SupplierProductIdFlattenedDto : IIdFlattenedDto
	{

        private static string[] _flattenedPropertyNames = new string[] { "ProductId", "PartyId", "CurrencyUomId", "MinimumOrderQuantity" };

        string[] IIdFlattenedDto.FieldNames
        {
            get { return _flattenedPropertyNames; }
        }

        object IIdFlattenedDto.GetFieldValue(string fieldName)
        {
            return ReflectUtils.GetPropertyValue(fieldName, this._value);
        }

        void IIdFlattenedDto.SetFieldValue(string fieldName, object fieldValue)
        {
            ReflectUtils.SetPropertyValue(fieldName, this._value, fieldValue);
        }

        Type IIdFlattenedDto.GetFieldType(string fieldName)
        {
            if (fieldName.Equals("ProductId", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(string);
            }

            if (fieldName.Equals("PartyId", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(string);
            }

            if (fieldName.Equals("CurrencyUomId", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(string);
            }

            if (fieldName.Equals("MinimumOrderQuantity", StringComparison.InvariantCultureIgnoreCase))
            {
                return typeof(decimal?);
            }

            throw new ArgumentException(String.Format("Unknown fileName: {0}", fieldName));
        }


        private SupplierProductIdDto _value = new SupplierProductIdDto();

		public SupplierProductIdFlattenedDto()
		{
		}

		public SupplierProductIdFlattenedDto(SupplierProductIdDto val)
		{
			this._value = val;
		}

        public SupplierProductIdDto ToSupplierProductIdDto()
        {
            return this._value;
        }

		public SupplierProductIdFlattenedDto(SupplierProductId val)
		{
			this._value = new SupplierProductIdDtoWrapper(val);
		}

        public SupplierProductId ToSupplierProductId()
        {
            return this._value.ToSupplierProductId();
        }

		public virtual string ProductId { 
			get { return _value.ProductId; } 
			set { _value.ProductId = value; } 
		}

		public virtual string PartyId { 
			get { return _value.PartyId; } 
			set { _value.PartyId = value; } 
		}

		public virtual string CurrencyUomId { 
			get { return _value.CurrencyUomId; } 
			set { _value.CurrencyUomId = value; } 
		}

		public virtual decimal? MinimumOrderQuantity { 
			get { return _value.MinimumOrderQuantity; } 
			set { _value.MinimumOrderQuantity = value; } 
		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			SupplierProductIdFlattenedDto other = obj as SupplierProductIdFlattenedDto;
			if (other == null) {
				return false;
			}

            return _value.Equals(other._value);

		}

		public override int GetHashCode ()
		{
			return _value.GetHashCode();
		}

	}

    public class SupplierProductIdFlattenedDtoFormatter : IdFlattenedDtoFormatterBase<SupplierProductIdFlattenedDto>
    {

    }

}


