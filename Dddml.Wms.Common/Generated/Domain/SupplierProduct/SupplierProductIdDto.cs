// <autogenerated>
//   This file was generated by T4 code generator GenerateSupplierProductDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SupplierProduct;

namespace Dddml.Wms.Domain.SupplierProduct
{

	public class SupplierProductIdDto
	{

		public SupplierProductIdDto()
		{
		}

        public virtual SupplierProductId ToSupplierProductId()
        {
            SupplierProductId v = new SupplierProductId();
            v.ProductId = this.ProductId;
            v.PartyId = this.PartyId;
            v.CurrencyUomId = this.CurrencyUomId;
            v.MinimumOrderQuantity = this.MinimumOrderQuantity;
            return v;
        }

		public virtual string ProductId { 
			get;
			set;
		}

		public virtual string PartyId { 
			get;
			set;
		}

		public virtual string CurrencyUomId { 
			get;
			set;
		}

		public virtual decimal? MinimumOrderQuantity { 
			get;
			set;
		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			SupplierProductIdDto other = obj as SupplierProductIdDto;
			if (other == null) {
				return false;
			}

			return true 
				&& Object.Equals (this.ProductId, other.ProductId)
				&& Object.Equals (this.PartyId, other.PartyId)
				&& Object.Equals (this.CurrencyUomId, other.CurrencyUomId)
				&& Object.Equals (this.MinimumOrderQuantity, other.MinimumOrderQuantity)
				;
		}

		public override int GetHashCode ()
		{
			int hash = 0;
			if (this.ProductId != null) {
				hash += 13 * this.ProductId.GetHashCode ();
			}
			if (this.PartyId != null) {
				hash += 13 * this.PartyId.GetHashCode ();
			}
			if (this.CurrencyUomId != null) {
				hash += 13 * this.CurrencyUomId.GetHashCode ();
			}
			if (this.MinimumOrderQuantity != null) {
				hash += 13 * this.MinimumOrderQuantity.GetHashCode ();
			}
			return hash;
		}

	}

}


