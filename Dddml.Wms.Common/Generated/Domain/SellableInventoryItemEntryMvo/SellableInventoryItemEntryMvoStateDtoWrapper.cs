// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItemEntryMvo;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.SellableInventoryItemEntryMvo
{

	public partial class SellableInventoryItemEntryMvoStateDtoWrapper : StateDtoWrapperBase, ISellableInventoryItemEntryMvoStateDto, ISellableInventoryItemEntryMvoState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private ISellableInventoryItemEntryMvoState _state;

        public SellableInventoryItemEntryMvoStateDtoWrapper()
        {
            this._state = new SellableInventoryItemEntryMvoState();
        }

		public SellableInventoryItemEntryMvoStateDtoWrapper(ISellableInventoryItemEntryMvoState state)
		{
            this._state = state;
		}

		public ISellableInventoryItemEntryMvoState ToSellableInventoryItemEntryMvoState()
		{
			return this._state;
		}

        public SellableInventoryItemEntryIdDto SellableInventoryItemEntryId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableInventoryItemEntryId"))
                {
					return (_state.SellableInventoryItemEntryId == null) ? null : new SellableInventoryItemEntryIdDtoWrapper(_state.SellableInventoryItemEntryId);
                }
                return null;
            }
            set
            {
                _state.SellableInventoryItemEntryId = (value == null) ? null : value.ToSellableInventoryItemEntryId();
            }
        }

        SellableInventoryItemEntryId ISellableInventoryItemEntryMvoStateProperties.SellableInventoryItemEntryId
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemEntryId;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemEntryId = value;
            }
        }

		public virtual decimal? QuantitySellable
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("QuantitySellable"))
                {
                    return _state.QuantitySellable;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.QuantitySellable = value.Value;
                }
            }
        }

        decimal ISellableInventoryItemEntryMvoStateProperties.QuantitySellable
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).QuantitySellable;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).QuantitySellable = value;
            }
        }

        public InventoryPRTriggeredIdDto SourceEventId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SourceEventId"))
                {
					return (_state.SourceEventId == null) ? null : new InventoryPRTriggeredIdDtoWrapper(_state.SourceEventId);
                }
                return null;
            }
            set
            {
                _state.SourceEventId = (value == null) ? null : value.ToInventoryPRTriggeredId();
            }
        }

        InventoryPRTriggeredId ISellableInventoryItemEntryMvoStateProperties.SourceEventId
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).SourceEventId;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).SourceEventId = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as ISellableInventoryItemEntryMvoStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as ISellableInventoryItemEntryMvoStateProperties).Version = value.Value;
                }
            }
        }

        long ISellableInventoryItemEntryMvoStateProperties.Version
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).Version;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).Version = value;
            }
        }

		public virtual decimal? SellableInventoryItemQuantitySellable
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableInventoryItemQuantitySellable"))
                {
                    return _state.SellableInventoryItemQuantitySellable;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.SellableInventoryItemQuantitySellable = value.Value;
                }
            }
        }

        decimal ISellableInventoryItemEntryMvoStateProperties.SellableInventoryItemQuantitySellable
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemQuantitySellable;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemQuantitySellable = value;
            }
        }

		public virtual string SellableInventoryItemCreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableInventoryItemCreatedBy"))
                {
                    return _state.SellableInventoryItemCreatedBy;
                }
                return null;
            }
            set
            {
                _state.SellableInventoryItemCreatedBy = value;
            }
        }

        string ISellableInventoryItemEntryMvoStateProperties.SellableInventoryItemCreatedBy
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemCreatedBy;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemCreatedBy = value;
            }
        }

		public virtual DateTime? SellableInventoryItemCreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableInventoryItemCreatedAt"))
                {
                    return _state.SellableInventoryItemCreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.SellableInventoryItemCreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.SellableInventoryItemCreatedAt = value.Value;
                }
            }
        }

        DateTime ISellableInventoryItemEntryMvoStateProperties.SellableInventoryItemCreatedAt
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemCreatedAt;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemCreatedAt = value;
            }
        }

		public virtual string SellableInventoryItemUpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableInventoryItemUpdatedBy"))
                {
                    return _state.SellableInventoryItemUpdatedBy;
                }
                return null;
            }
            set
            {
                _state.SellableInventoryItemUpdatedBy = value;
            }
        }

        string ISellableInventoryItemEntryMvoStateProperties.SellableInventoryItemUpdatedBy
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemUpdatedBy;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemUpdatedBy = value;
            }
        }

		public virtual DateTime? SellableInventoryItemUpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableInventoryItemUpdatedAt"))
                {
                    return _state.SellableInventoryItemUpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.SellableInventoryItemUpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.SellableInventoryItemUpdatedAt = value.Value;
                }
            }
        }

        DateTime ISellableInventoryItemEntryMvoStateProperties.SellableInventoryItemUpdatedAt
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemUpdatedAt;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemUpdatedAt = value;
            }
        }

		public virtual long? SellableInventoryItemVersion
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableInventoryItemVersion"))
                {
                    return _state.SellableInventoryItemVersion;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.SellableInventoryItemVersion = value.Value;
                }
            }
        }

        long ISellableInventoryItemEntryMvoStateProperties.SellableInventoryItemVersion
        {
            get 
            {
                return (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemVersion;
            }
            set 
            {
                (this._state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemVersion = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		SellableInventoryItemEntryId IGlobalIdentity<SellableInventoryItemEntryId>.GlobalId
		{
			get { return (_state as ISellableInventoryItemEntryMvoState).GlobalId; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as ISellableInventoryItemEntryMvoState).CreatedBy; }
            set { (_state as ISellableInventoryItemEntryMvoState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as ISellableInventoryItemEntryMvoState).CreatedAt; }
            set { (_state as ISellableInventoryItemEntryMvoState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as ISellableInventoryItemEntryMvoState).UpdatedBy; }
            set { (_state as ISellableInventoryItemEntryMvoState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as ISellableInventoryItemEntryMvoState).UpdatedAt; }
            set { (_state as ISellableInventoryItemEntryMvoState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as ISellableInventoryItemEntryMvoStateProperties).SellableInventoryItemVersion; }
		}

		#endregion

        bool ISellableInventoryItemEntryMvoState.IsUnsaved
        {
            get { return this.SellableInventoryItemVersion == SellableInventoryItemEntryMvoState.VersionZero; }
        }

		void ISellableInventoryItemEntryMvoState.When(ISellableInventoryItemEntryMvoStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool ISellableInventoryItemEntryMvoState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void ISellableInventoryItemEntryMvoState.When(ISellableInventoryItemEntryMvoStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void ISellableInventoryItemEntryMvoState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

	}

    partial class SellableInventoryItemEntryMvoStateDtoWrapperCollection : StateDtoWrapperCollectionBase<SellableInventoryItemEntryMvoStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(SellableInventoryItemEntryMvoStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

