// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItemEntryMvo;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.SellableInventoryItemEntryMvo
{

	public abstract class SellableInventoryItemEntryMvoCommandBase : ISellableInventoryItemEntryMvoCommand
	{
		public virtual SellableInventoryItemEntryId SellableInventoryItemEntryId { get; set; }


		SellableInventoryItemEntryId IAggregateCommand<SellableInventoryItemEntryId, long>.AggregateId
		{
			get
			{
				return this.SellableInventoryItemEntryId;
			}
		}


		long IAggregateCommand<SellableInventoryItemEntryId, long>.AggregateVersion
		{
			get
			{
				return this.SellableInventoryItemVersion;
			}
		}

		public virtual long SellableInventoryItemVersion { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual decimal? SellableQuantity { get; set; }

		public virtual InventoryPRTriggeredId SourceEventId { get; set; }

		public virtual long? Version { get; set; }

		public virtual bool? Active { get; set; }

		public virtual decimal? SellableInventoryItemSellableQuantity { get; set; }

		public virtual string SellableInventoryItemCreatedBy { get; set; }

		public virtual DateTime? SellableInventoryItemCreatedAt { get; set; }

		public virtual string SellableInventoryItemUpdatedBy { get; set; }

		public virtual DateTime? SellableInventoryItemUpdatedAt { get; set; }


		// //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();


	}


	public class CreateSellableInventoryItemEntryMvo : SellableInventoryItemEntryMvoCommandBase, ICreateSellableInventoryItemEntryMvo
	{
		
		public CreateSellableInventoryItemEntryMvo ()
		{
		}


        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }
	}


	public class MergePatchSellableInventoryItemEntryMvo :SellableInventoryItemEntryMvoCommandBase, IMergePatchSellableInventoryItemEntryMvo
	{

		public virtual bool IsPropertySellableQuantityRemoved { get; set; }

		public virtual bool IsPropertySourceEventIdRemoved { get; set; }

		public virtual bool IsPropertyVersionRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }

		public virtual bool IsPropertySellableInventoryItemSellableQuantityRemoved { get; set; }

		public virtual bool IsPropertySellableInventoryItemCreatedByRemoved { get; set; }

		public virtual bool IsPropertySellableInventoryItemCreatedAtRemoved { get; set; }

		public virtual bool IsPropertySellableInventoryItemUpdatedByRemoved { get; set; }

		public virtual bool IsPropertySellableInventoryItemUpdatedAtRemoved { get; set; }


		public MergePatchSellableInventoryItemEntryMvo ()
		{
		}

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteSellableInventoryItemEntryMvo : SellableInventoryItemEntryMvoCommandBase, IDeleteSellableInventoryItemEntryMvo
	{
		public DeleteSellableInventoryItemEntryMvo ()
		{
		}

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }

	}

    public static partial class SellableInventoryItemEntryMvoCommands
    {
    }

}
