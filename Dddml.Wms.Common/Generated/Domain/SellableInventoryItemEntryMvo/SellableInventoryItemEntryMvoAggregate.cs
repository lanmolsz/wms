// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItemEntryMvo;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.SellableInventoryItemEntryMvo
{
    public partial class SellableInventoryItemEntryMvoAggregate : AggregateBase, ISellableInventoryItemEntryMvoAggregate
    {

        readonly ISellableInventoryItemEntryMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public ISellableInventoryItemEntryMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        SellableInventoryItemEntryId IGlobalIdentity<SellableInventoryItemEntryId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public SellableInventoryItemEntryMvoAggregate(ISellableInventoryItemEntryMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((ISellableInventoryItemEntryMvoStateProperties)_state).SellableInventoryItemVersion == SellableInventoryItemEntryMvoState.VersionZero)
            {
                if (IsCommandCreate((ISellableInventoryItemEntryMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (IsCommandCreate((ISellableInventoryItemEntryMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(ISellableInventoryItemEntryMvoCommand c)
        {
            return c.SellableInventoryItemVersion == SellableInventoryItemEntryMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateSellableInventoryItemEntryMvo c)
        {
            ISellableInventoryItemEntryMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchSellableInventoryItemEntryMvo c)
        {
            ISellableInventoryItemEntryMvoStateMergePatched e = Map(c);
            Apply(e);
        }


        protected virtual ISellableInventoryItemEntryMvoStateCreated Map(ICreateSellableInventoryItemEntryMvo c)
        {
			var stateEventId = new SellableInventoryItemEntryMvoStateEventId(c.SellableInventoryItemEntryId, c.SellableInventoryItemVersion);
            ISellableInventoryItemEntryMvoStateCreated e = NewSellableInventoryItemEntryMvoStateCreated(stateEventId);
		
            e.QuantitySellable = c.QuantitySellable;
            e.SourceEventId = c.SourceEventId;
            e.Version = c.Version;
            e.SellableInventoryItemQuantitySellable = c.SellableInventoryItemQuantitySellable;
            e.SellableInventoryItemCreatedBy = c.SellableInventoryItemCreatedBy;
            e.SellableInventoryItemCreatedAt = c.SellableInventoryItemCreatedAt;
            e.SellableInventoryItemUpdatedBy = c.SellableInventoryItemUpdatedBy;
            e.SellableInventoryItemUpdatedAt = c.SellableInventoryItemUpdatedAt;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var sellableInventoryItemVersion = c.SellableInventoryItemVersion;


            return e;
        }

        protected virtual ISellableInventoryItemEntryMvoStateMergePatched Map(IMergePatchSellableInventoryItemEntryMvo c)
        {
			var stateEventId = new SellableInventoryItemEntryMvoStateEventId(c.SellableInventoryItemEntryId, c.SellableInventoryItemVersion);
            ISellableInventoryItemEntryMvoStateMergePatched e = NewSellableInventoryItemEntryMvoStateMergePatched(stateEventId);

            e.QuantitySellable = c.QuantitySellable;
            e.SourceEventId = c.SourceEventId;
            e.Version = c.Version;
            e.SellableInventoryItemQuantitySellable = c.SellableInventoryItemQuantitySellable;
            e.SellableInventoryItemCreatedBy = c.SellableInventoryItemCreatedBy;
            e.SellableInventoryItemCreatedAt = c.SellableInventoryItemCreatedAt;
            e.SellableInventoryItemUpdatedBy = c.SellableInventoryItemUpdatedBy;
            e.SellableInventoryItemUpdatedAt = c.SellableInventoryItemUpdatedAt;
            e.IsPropertyQuantitySellableRemoved = c.IsPropertyQuantitySellableRemoved;
            e.IsPropertySourceEventIdRemoved = c.IsPropertySourceEventIdRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertySellableInventoryItemQuantitySellableRemoved = c.IsPropertySellableInventoryItemQuantitySellableRemoved;
            e.IsPropertySellableInventoryItemCreatedByRemoved = c.IsPropertySellableInventoryItemCreatedByRemoved;
            e.IsPropertySellableInventoryItemCreatedAtRemoved = c.IsPropertySellableInventoryItemCreatedAtRemoved;
            e.IsPropertySellableInventoryItemUpdatedByRemoved = c.IsPropertySellableInventoryItemUpdatedByRemoved;
            e.IsPropertySellableInventoryItemUpdatedAtRemoved = c.IsPropertySellableInventoryItemUpdatedAtRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var sellableInventoryItemVersion = c.SellableInventoryItemVersion;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected SellableInventoryItemEntryMvoStateCreated NewSellableInventoryItemEntryMvoStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new SellableInventoryItemEntryMvoStateEventId(_state.SellableInventoryItemEntryId, ((ISellableInventoryItemEntryMvoStateProperties)_state).SellableInventoryItemVersion);
            var e = NewSellableInventoryItemEntryMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected SellableInventoryItemEntryMvoStateMergePatched NewSellableInventoryItemEntryMvoStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new SellableInventoryItemEntryMvoStateEventId(_state.SellableInventoryItemEntryId, ((ISellableInventoryItemEntryMvoStateProperties)_state).SellableInventoryItemVersion);
            var e = NewSellableInventoryItemEntryMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


////////////////////////

		private SellableInventoryItemEntryMvoStateCreated NewSellableInventoryItemEntryMvoStateCreated(SellableInventoryItemEntryMvoStateEventId stateEventId)
		{
			return new SellableInventoryItemEntryMvoStateCreated(stateEventId);			
		}

        private SellableInventoryItemEntryMvoStateMergePatched NewSellableInventoryItemEntryMvoStateMergePatched(SellableInventoryItemEntryMvoStateEventId stateEventId)
		{
			return new SellableInventoryItemEntryMvoStateMergePatched(stateEventId);
		}


    }

}

