// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{
	public interface IMonthPlanStateEvent : IEvent, IStateEventDto, IGlobalIdentity<MonthPlanStateEventId>, ICreated<string>
	{
		MonthPlanStateEventId StateEventId { get; }

        bool ReadOnly { get; set; }

		long Version { get; set; }

		string Description { get; set; }

		bool? Active { get; set; }

		// Outer Id:
		//PersonalName PersonalName { get; set; }

		// Outer Id:
		//int Year { get; set; }

	}

	public interface IMonthPlanStateCreated : IMonthPlanStateEvent//, IMonthPlanStateProperties
	{
		IEnumerable<IDayPlanStateCreated> DayPlanEvents { get; }
		
		void AddDayPlanEvent(IDayPlanStateCreated e);

		IDayPlanStateCreated NewDayPlanStateCreated(int day);

	
	}


	public interface IMonthPlanStateMergePatched : IMonthPlanStateEvent//, IMonthPlanStateProperties
	{
		bool IsPropertyDescriptionRemoved { get; set; }

		bool IsPropertyActiveRemoved { get; set; }

		IEnumerable<IDayPlanStateEvent> DayPlanEvents { get; }
		
		void AddDayPlanEvent(IDayPlanStateEvent e);

		IDayPlanStateCreated NewDayPlanStateCreated(int day);

		IDayPlanStateMergePatched NewDayPlanStateMergePatched(int day);

		IDayPlanStateRemoved NewDayPlanStateRemoved(int day);


	}

	public interface IMonthPlanStateRemoved : IMonthPlanStateEvent
	{
		IEnumerable<IDayPlanStateRemoved> DayPlanEvents { get; }
		
		void AddDayPlanEvent(IDayPlanStateRemoved e);
		
		IDayPlanStateRemoved NewDayPlanStateRemoved(int day);

	}


}

