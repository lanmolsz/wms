// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using NodaMoney;

namespace Dddml.Wms.Domain
{

	public class InOutLineStateEventIdDto
	{

		public InOutLineStateEventIdDto()
		{
		}

        public virtual InOutLineStateEventId ToInOutLineStateEventId()
        {
            InOutLineStateEventId v = new InOutLineStateEventId();
            v.InOutDocumentNumber = this.InOutDocumentNumber;
            v.SkuId = this.SkuId.ToSkuId();
            v.InOutVersion = this.InOutVersion;
            return v;
        }

		public virtual string InOutDocumentNumber { 
			get;
			set;
		}

		private SkuIdDto _skuId = new SkuIdDto();

		public virtual SkuIdDto SkuId { 
			get { return this._skuId; } 
			set { this._skuId = value; } 
		}

		public virtual long InOutVersion { 
			get;
			set;
		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			InOutLineStateEventIdDto other = obj as InOutLineStateEventIdDto;
			if (other == null) {
				return false;
			}

			return true 
				&& Object.Equals (this.InOutDocumentNumber, other.InOutDocumentNumber)
				&& Object.Equals (this.SkuId, other.SkuId)
				&& Object.Equals (this.InOutVersion, other.InOutVersion)
				;
		}

		public override int GetHashCode ()
		{
			int hash = 0;
			if (this.InOutDocumentNumber != null) {
				hash += 13 * this.InOutDocumentNumber.GetHashCode ();
			}
			if (this.SkuId != null) {
				hash += 13 * this.SkuId.GetHashCode ();
			}
			if (this.InOutVersion != null) {
				hash += 13 * this.InOutVersion.GetHashCode ();
			}
			return hash;
		}

	}

}


