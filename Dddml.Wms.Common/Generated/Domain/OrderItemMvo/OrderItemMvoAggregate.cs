// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderItemMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderItemMvo;
using Dddml.Wms.Domain.Order;

namespace Dddml.Wms.Domain.OrderItemMvo
{
    public partial class OrderItemMvoAggregate : AggregateBase, IOrderItemMvoAggregate
    {

        readonly IOrderItemMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IOrderItemMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        OrderItemId IGlobalIdentity<OrderItemId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public OrderItemMvoAggregate(IOrderItemMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IOrderItemMvoStateProperties)_state).OrderVersion == OrderItemMvoState.VersionZero)
            {
                if (IsCommandCreate((IOrderItemMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IOrderItemMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IOrderItemMvoCommand c)
        {
            return c.OrderVersion == OrderItemMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateOrderItemMvo c)
        {
            IOrderItemMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchOrderItemMvo c)
        {
            IOrderItemMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteOrderItemMvo c)
        {
            IOrderItemMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IOrderItemMvoStateCreated Map(ICreateOrderItemMvo c)
        {
			var stateEventId = new OrderItemMvoStateEventId(c.OrderItemId, c.OrderVersion);
            IOrderItemMvoStateCreated e = NewOrderItemMvoStateCreated(stateEventId);
		
            e.ProductId = c.ProductId;
            e.ExternalProductId = c.ExternalProductId;
            e.Quantity = c.Quantity;
            e.CancelQuantity = c.CancelQuantity;
            e.SelectedAmount = c.SelectedAmount;
            e.ExternalId = c.ExternalId;
            e.OrderItemTypeId = c.OrderItemTypeId;
            e.OrderItemGroupSeqId = c.OrderItemGroupSeqId;
            e.IsItemGroupPrimary = c.IsItemGroupPrimary;
            e.FromInventoryItemId = c.FromInventoryItemId;
            e.IsPromo = c.IsPromo;
            e.QuoteId = c.QuoteId;
            e.QuoteItemSeqId = c.QuoteItemSeqId;
            e.ShoppingListId = c.ShoppingListId;
            e.ShoppingListItemSeqId = c.ShoppingListItemSeqId;
            e.UnitPrice = c.UnitPrice;
            e.UnitListPrice = c.UnitListPrice;
            e.UnitAverageCost = c.UnitAverageCost;
            e.UnitRecurringPrice = c.UnitRecurringPrice;
            e.IsModifiedPrice = c.IsModifiedPrice;
            e.RecurringFreqUomId = c.RecurringFreqUomId;
            e.ItemDescription = c.ItemDescription;
            e.Comments = c.Comments;
            e.CorrespondingPoId = c.CorrespondingPoId;
            e.StatusId = c.StatusId;
            e.SyncStatusId = c.SyncStatusId;
            e.EstimatedShipDate = c.EstimatedShipDate;
            e.EstimatedDeliveryDate = c.EstimatedDeliveryDate;
            e.AutoCancelDate = c.AutoCancelDate;
            e.DontCancelSetDate = c.DontCancelSetDate;
            e.DontCancelSetBy = c.DontCancelSetBy;
            e.ShipBeforeDate = c.ShipBeforeDate;
            e.ShipAfterDate = c.ShipAfterDate;
            e.CancelBackOrderDate = c.CancelBackOrderDate;
            e.OverrideGlAccountId = c.OverrideGlAccountId;
            e.Version = c.Version;
            e.Active = c.Active;
            e.OrderOrderTypeId = c.OrderOrderTypeId;
            e.OrderOrderName = c.OrderOrderName;
            e.OrderExternalId = c.OrderExternalId;
            e.OrderSalesChannelEnumId = c.OrderSalesChannelEnumId;
            e.OrderOrderDate = c.OrderOrderDate;
            e.OrderPriority = c.OrderPriority;
            e.OrderEntryDate = c.OrderEntryDate;
            e.OrderPickSheetPrintedDate = c.OrderPickSheetPrintedDate;
            e.OrderStatusId = c.OrderStatusId;
            e.OrderCurrencyUom = c.OrderCurrencyUom;
            e.OrderSyncStatusId = c.OrderSyncStatusId;
            e.OrderBillingAccountId = c.OrderBillingAccountId;
            e.OrderOriginFacilityId = c.OrderOriginFacilityId;
            e.OrderWebSiteId = c.OrderWebSiteId;
            e.OrderProductStoreId = c.OrderProductStoreId;
            e.OrderTerminalId = c.OrderTerminalId;
            e.OrderTransactionId = c.OrderTransactionId;
            e.OrderAutoOrderShoppingListId = c.OrderAutoOrderShoppingListId;
            e.OrderNeedsInventoryIssuance = c.OrderNeedsInventoryIssuance;
            e.OrderIsRushOrder = c.OrderIsRushOrder;
            e.OrderInternalCode = c.OrderInternalCode;
            e.OrderRemainingSubTotal = c.OrderRemainingSubTotal;
            e.OrderGrandTotal = c.OrderGrandTotal;
            e.OrderInvoicePerShipment = c.OrderInvoicePerShipment;
            e.OrderCreatedBy = c.OrderCreatedBy;
            e.OrderCreatedAt = c.OrderCreatedAt;
            e.OrderUpdatedBy = c.OrderUpdatedBy;
            e.OrderUpdatedAt = c.OrderUpdatedAt;
            e.OrderActive = c.OrderActive;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var orderVersion = c.OrderVersion;


            return e;
        }

        protected virtual IOrderItemMvoStateMergePatched Map(IMergePatchOrderItemMvo c)
        {
			var stateEventId = new OrderItemMvoStateEventId(c.OrderItemId, c.OrderVersion);
            IOrderItemMvoStateMergePatched e = NewOrderItemMvoStateMergePatched(stateEventId);

            e.ProductId = c.ProductId;
            e.ExternalProductId = c.ExternalProductId;
            e.Quantity = c.Quantity;
            e.CancelQuantity = c.CancelQuantity;
            e.SelectedAmount = c.SelectedAmount;
            e.ExternalId = c.ExternalId;
            e.OrderItemTypeId = c.OrderItemTypeId;
            e.OrderItemGroupSeqId = c.OrderItemGroupSeqId;
            e.IsItemGroupPrimary = c.IsItemGroupPrimary;
            e.FromInventoryItemId = c.FromInventoryItemId;
            e.IsPromo = c.IsPromo;
            e.QuoteId = c.QuoteId;
            e.QuoteItemSeqId = c.QuoteItemSeqId;
            e.ShoppingListId = c.ShoppingListId;
            e.ShoppingListItemSeqId = c.ShoppingListItemSeqId;
            e.UnitPrice = c.UnitPrice;
            e.UnitListPrice = c.UnitListPrice;
            e.UnitAverageCost = c.UnitAverageCost;
            e.UnitRecurringPrice = c.UnitRecurringPrice;
            e.IsModifiedPrice = c.IsModifiedPrice;
            e.RecurringFreqUomId = c.RecurringFreqUomId;
            e.ItemDescription = c.ItemDescription;
            e.Comments = c.Comments;
            e.CorrespondingPoId = c.CorrespondingPoId;
            e.StatusId = c.StatusId;
            e.SyncStatusId = c.SyncStatusId;
            e.EstimatedShipDate = c.EstimatedShipDate;
            e.EstimatedDeliveryDate = c.EstimatedDeliveryDate;
            e.AutoCancelDate = c.AutoCancelDate;
            e.DontCancelSetDate = c.DontCancelSetDate;
            e.DontCancelSetBy = c.DontCancelSetBy;
            e.ShipBeforeDate = c.ShipBeforeDate;
            e.ShipAfterDate = c.ShipAfterDate;
            e.CancelBackOrderDate = c.CancelBackOrderDate;
            e.OverrideGlAccountId = c.OverrideGlAccountId;
            e.Version = c.Version;
            e.Active = c.Active;
            e.OrderOrderTypeId = c.OrderOrderTypeId;
            e.OrderOrderName = c.OrderOrderName;
            e.OrderExternalId = c.OrderExternalId;
            e.OrderSalesChannelEnumId = c.OrderSalesChannelEnumId;
            e.OrderOrderDate = c.OrderOrderDate;
            e.OrderPriority = c.OrderPriority;
            e.OrderEntryDate = c.OrderEntryDate;
            e.OrderPickSheetPrintedDate = c.OrderPickSheetPrintedDate;
            e.OrderStatusId = c.OrderStatusId;
            e.OrderCurrencyUom = c.OrderCurrencyUom;
            e.OrderSyncStatusId = c.OrderSyncStatusId;
            e.OrderBillingAccountId = c.OrderBillingAccountId;
            e.OrderOriginFacilityId = c.OrderOriginFacilityId;
            e.OrderWebSiteId = c.OrderWebSiteId;
            e.OrderProductStoreId = c.OrderProductStoreId;
            e.OrderTerminalId = c.OrderTerminalId;
            e.OrderTransactionId = c.OrderTransactionId;
            e.OrderAutoOrderShoppingListId = c.OrderAutoOrderShoppingListId;
            e.OrderNeedsInventoryIssuance = c.OrderNeedsInventoryIssuance;
            e.OrderIsRushOrder = c.OrderIsRushOrder;
            e.OrderInternalCode = c.OrderInternalCode;
            e.OrderRemainingSubTotal = c.OrderRemainingSubTotal;
            e.OrderGrandTotal = c.OrderGrandTotal;
            e.OrderInvoicePerShipment = c.OrderInvoicePerShipment;
            e.OrderCreatedBy = c.OrderCreatedBy;
            e.OrderCreatedAt = c.OrderCreatedAt;
            e.OrderUpdatedBy = c.OrderUpdatedBy;
            e.OrderUpdatedAt = c.OrderUpdatedAt;
            e.OrderActive = c.OrderActive;
            e.IsPropertyProductIdRemoved = c.IsPropertyProductIdRemoved;
            e.IsPropertyExternalProductIdRemoved = c.IsPropertyExternalProductIdRemoved;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertyCancelQuantityRemoved = c.IsPropertyCancelQuantityRemoved;
            e.IsPropertySelectedAmountRemoved = c.IsPropertySelectedAmountRemoved;
            e.IsPropertyExternalIdRemoved = c.IsPropertyExternalIdRemoved;
            e.IsPropertyOrderItemTypeIdRemoved = c.IsPropertyOrderItemTypeIdRemoved;
            e.IsPropertyOrderItemGroupSeqIdRemoved = c.IsPropertyOrderItemGroupSeqIdRemoved;
            e.IsPropertyIsItemGroupPrimaryRemoved = c.IsPropertyIsItemGroupPrimaryRemoved;
            e.IsPropertyFromInventoryItemIdRemoved = c.IsPropertyFromInventoryItemIdRemoved;
            e.IsPropertyIsPromoRemoved = c.IsPropertyIsPromoRemoved;
            e.IsPropertyQuoteIdRemoved = c.IsPropertyQuoteIdRemoved;
            e.IsPropertyQuoteItemSeqIdRemoved = c.IsPropertyQuoteItemSeqIdRemoved;
            e.IsPropertyShoppingListIdRemoved = c.IsPropertyShoppingListIdRemoved;
            e.IsPropertyShoppingListItemSeqIdRemoved = c.IsPropertyShoppingListItemSeqIdRemoved;
            e.IsPropertyUnitPriceRemoved = c.IsPropertyUnitPriceRemoved;
            e.IsPropertyUnitListPriceRemoved = c.IsPropertyUnitListPriceRemoved;
            e.IsPropertyUnitAverageCostRemoved = c.IsPropertyUnitAverageCostRemoved;
            e.IsPropertyUnitRecurringPriceRemoved = c.IsPropertyUnitRecurringPriceRemoved;
            e.IsPropertyIsModifiedPriceRemoved = c.IsPropertyIsModifiedPriceRemoved;
            e.IsPropertyRecurringFreqUomIdRemoved = c.IsPropertyRecurringFreqUomIdRemoved;
            e.IsPropertyItemDescriptionRemoved = c.IsPropertyItemDescriptionRemoved;
            e.IsPropertyCommentsRemoved = c.IsPropertyCommentsRemoved;
            e.IsPropertyCorrespondingPoIdRemoved = c.IsPropertyCorrespondingPoIdRemoved;
            e.IsPropertyStatusIdRemoved = c.IsPropertyStatusIdRemoved;
            e.IsPropertySyncStatusIdRemoved = c.IsPropertySyncStatusIdRemoved;
            e.IsPropertyEstimatedShipDateRemoved = c.IsPropertyEstimatedShipDateRemoved;
            e.IsPropertyEstimatedDeliveryDateRemoved = c.IsPropertyEstimatedDeliveryDateRemoved;
            e.IsPropertyAutoCancelDateRemoved = c.IsPropertyAutoCancelDateRemoved;
            e.IsPropertyDontCancelSetDateRemoved = c.IsPropertyDontCancelSetDateRemoved;
            e.IsPropertyDontCancelSetByRemoved = c.IsPropertyDontCancelSetByRemoved;
            e.IsPropertyShipBeforeDateRemoved = c.IsPropertyShipBeforeDateRemoved;
            e.IsPropertyShipAfterDateRemoved = c.IsPropertyShipAfterDateRemoved;
            e.IsPropertyCancelBackOrderDateRemoved = c.IsPropertyCancelBackOrderDateRemoved;
            e.IsPropertyOverrideGlAccountIdRemoved = c.IsPropertyOverrideGlAccountIdRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyOrderOrderTypeIdRemoved = c.IsPropertyOrderOrderTypeIdRemoved;
            e.IsPropertyOrderOrderNameRemoved = c.IsPropertyOrderOrderNameRemoved;
            e.IsPropertyOrderExternalIdRemoved = c.IsPropertyOrderExternalIdRemoved;
            e.IsPropertyOrderSalesChannelEnumIdRemoved = c.IsPropertyOrderSalesChannelEnumIdRemoved;
            e.IsPropertyOrderOrderDateRemoved = c.IsPropertyOrderOrderDateRemoved;
            e.IsPropertyOrderPriorityRemoved = c.IsPropertyOrderPriorityRemoved;
            e.IsPropertyOrderEntryDateRemoved = c.IsPropertyOrderEntryDateRemoved;
            e.IsPropertyOrderPickSheetPrintedDateRemoved = c.IsPropertyOrderPickSheetPrintedDateRemoved;
            e.IsPropertyOrderStatusIdRemoved = c.IsPropertyOrderStatusIdRemoved;
            e.IsPropertyOrderCurrencyUomRemoved = c.IsPropertyOrderCurrencyUomRemoved;
            e.IsPropertyOrderSyncStatusIdRemoved = c.IsPropertyOrderSyncStatusIdRemoved;
            e.IsPropertyOrderBillingAccountIdRemoved = c.IsPropertyOrderBillingAccountIdRemoved;
            e.IsPropertyOrderOriginFacilityIdRemoved = c.IsPropertyOrderOriginFacilityIdRemoved;
            e.IsPropertyOrderWebSiteIdRemoved = c.IsPropertyOrderWebSiteIdRemoved;
            e.IsPropertyOrderProductStoreIdRemoved = c.IsPropertyOrderProductStoreIdRemoved;
            e.IsPropertyOrderTerminalIdRemoved = c.IsPropertyOrderTerminalIdRemoved;
            e.IsPropertyOrderTransactionIdRemoved = c.IsPropertyOrderTransactionIdRemoved;
            e.IsPropertyOrderAutoOrderShoppingListIdRemoved = c.IsPropertyOrderAutoOrderShoppingListIdRemoved;
            e.IsPropertyOrderNeedsInventoryIssuanceRemoved = c.IsPropertyOrderNeedsInventoryIssuanceRemoved;
            e.IsPropertyOrderIsRushOrderRemoved = c.IsPropertyOrderIsRushOrderRemoved;
            e.IsPropertyOrderInternalCodeRemoved = c.IsPropertyOrderInternalCodeRemoved;
            e.IsPropertyOrderRemainingSubTotalRemoved = c.IsPropertyOrderRemainingSubTotalRemoved;
            e.IsPropertyOrderGrandTotalRemoved = c.IsPropertyOrderGrandTotalRemoved;
            e.IsPropertyOrderInvoicePerShipmentRemoved = c.IsPropertyOrderInvoicePerShipmentRemoved;
            e.IsPropertyOrderCreatedByRemoved = c.IsPropertyOrderCreatedByRemoved;
            e.IsPropertyOrderCreatedAtRemoved = c.IsPropertyOrderCreatedAtRemoved;
            e.IsPropertyOrderUpdatedByRemoved = c.IsPropertyOrderUpdatedByRemoved;
            e.IsPropertyOrderUpdatedAtRemoved = c.IsPropertyOrderUpdatedAtRemoved;
            e.IsPropertyOrderActiveRemoved = c.IsPropertyOrderActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var orderVersion = c.OrderVersion;


            return e;
        }

        protected virtual IOrderItemMvoStateDeleted Map(IDeleteOrderItemMvo c)
        {
			var stateEventId = new OrderItemMvoStateEventId(c.OrderItemId, c.OrderVersion);
            IOrderItemMvoStateDeleted e = NewOrderItemMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected OrderItemMvoStateCreated NewOrderItemMvoStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new OrderItemMvoStateEventId(_state.OrderItemId, ((IOrderItemMvoStateProperties)_state).OrderVersion);
            var e = NewOrderItemMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected OrderItemMvoStateMergePatched NewOrderItemMvoStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new OrderItemMvoStateEventId(_state.OrderItemId, ((IOrderItemMvoStateProperties)_state).OrderVersion);
            var e = NewOrderItemMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


        protected OrderItemMvoStateDeleted NewOrderItemMvoStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new OrderItemMvoStateEventId(_state.OrderItemId, ((IOrderItemMvoStateProperties)_state).OrderVersion);
            var e = NewOrderItemMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private OrderItemMvoStateCreated NewOrderItemMvoStateCreated(OrderItemMvoStateEventId stateEventId)
		{
			return new OrderItemMvoStateCreated(stateEventId);			
		}

        private OrderItemMvoStateMergePatched NewOrderItemMvoStateMergePatched(OrderItemMvoStateEventId stateEventId)
		{
			return new OrderItemMvoStateMergePatched(stateEventId);
		}

        private OrderItemMvoStateDeleted NewOrderItemMvoStateDeleted(OrderItemMvoStateEventId stateEventId)
		{
			return new OrderItemMvoStateDeleted(stateEventId);
		}

    }

}

