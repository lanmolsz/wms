// <autogenerated>
//   This file was generated by T4 code generator GenerateRejectionReasonDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.RejectionReason;

namespace Dddml.Wms.Domain.RejectionReason
{

	public static partial class RejectionReasonStateInterfaceExtension
	{

        public static IRejectionReasonCommand ToCreateOrMergePatchRejectionReason<TCreateRejectionReason, TMergePatchRejectionReason>(this IRejectionReasonState state)
            where TCreateRejectionReason : ICreateRejectionReason, new()
            where TMergePatchRejectionReason : IMergePatchRejectionReason, new()
        {
            bool bUnsaved = ((IRejectionReasonState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateRejectionReason<TCreateRejectionReason>();
            }
            else 
            {
                return state.ToMergePatchRejectionReason<TMergePatchRejectionReason>();
            }
        }

        public static TDeleteRejectionReason ToDeleteRejectionReason<TDeleteRejectionReason>(this IRejectionReasonState state)
            where TDeleteRejectionReason : IDeleteRejectionReason, new()
        {
            var cmd = new TDeleteRejectionReason();
            cmd.RejectionReasonId = state.RejectionReasonId;
            cmd.Version = ((IRejectionReasonStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchRejectionReason ToMergePatchRejectionReason<TMergePatchRejectionReason>(this IRejectionReasonState state)
            where TMergePatchRejectionReason : IMergePatchRejectionReason, new()
        {
            var cmd = new TMergePatchRejectionReason();

            cmd.Version = ((IRejectionReasonStateProperties)state).Version;

            cmd.RejectionReasonId = state.RejectionReasonId;
            cmd.Description = state.Description;
            cmd.Active = ((IRejectionReasonStateProperties)state).Active;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreateRejectionReason ToCreateRejectionReason<TCreateRejectionReason>(this IRejectionReasonState state)
            where TCreateRejectionReason : ICreateRejectionReason, new()
        {
            var cmd = new TCreateRejectionReason();

            cmd.Version = ((IRejectionReasonStateProperties)state).Version;

            cmd.RejectionReasonId = state.RejectionReasonId;
            cmd.Description = state.Description;
            cmd.Active = ((IRejectionReasonStateProperties)state).Active;
            return cmd;
        }
		

	}

}

