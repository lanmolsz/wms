// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Picklist;
using Dddml.Wms.Domain.PartyRole;

namespace Dddml.Wms.Domain.Picklist
{

	public abstract class PicklistStateEventBase : IPicklistStateEvent
	{

		public virtual PicklistEventId PicklistEventId { get; set; }

        public virtual string PicklistId
        {
            get { return PicklistEventId.PicklistId; }
            set { PicklistEventId.PicklistId = value; }
        }

		public virtual string Description { get; set; }

		public virtual string FacilityId { get; set; }

		public virtual string ShipmentMethodTypeId { get; set; }

		public virtual string StatusId { get; set; }

		public virtual DateTime? PicklistDate { get; set; }

		public virtual long? PickwaveId { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedByUserLogin { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		PicklistEventId IGlobalIdentity<PicklistEventId>.GlobalId {
			get
			{
				return this.PicklistEventId;
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IPicklistStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedByUserLogin;
			}
			set {
				this.CreatedByUserLogin = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected PicklistStateEventBase()
        {
        }

        protected PicklistStateEventBase(PicklistEventId stateEventId)
        {
            this.PicklistEventId = stateEventId;
        }

		protected IPicklistRoleStateEventDao PicklistRoleStateEventDao
		{
			get { return ApplicationContext.Current["PicklistRoleStateEventDao"] as IPicklistRoleStateEventDao; }
		}

        protected PicklistRoleEventId NewPicklistRoleEventId(PartyRoleId partyRoleId)
        {
            var stateEventId = new PicklistRoleEventId(this.PicklistEventId.PicklistId, partyRoleId, this.PicklistEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IPicklistRoleStateEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IPicklistStateEvent oe, IPicklistRoleStateEvent e)
		{
			if (!oe.PicklistEventId.PicklistId.Equals(e.PicklistRoleEventId.PicklistId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id PicklistId {0} but inner id PicklistId {1}", 
					oe.PicklistEventId.PicklistId, e.PicklistRoleEventId.PicklistId);
			}
		}



        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class PicklistStateCreated : PicklistStateEventBase, IPicklistStateCreated, ISaveable
	{
		public PicklistStateCreated () : this(new PicklistEventId())
		{
		}

		public PicklistStateCreated (PicklistEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<PicklistRoleEventId, IPicklistRoleStateCreated> _picklistRoleEvents = new Dictionary<PicklistRoleEventId, IPicklistRoleStateCreated>();
        
        private IEnumerable<IPicklistRoleStateCreated> _readOnlyPicklistRoleEvents;

        public virtual IEnumerable<IPicklistRoleStateCreated> PicklistRoleEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._picklistRoleEvents.Values;
                }
                else
                {
                    if (_readOnlyPicklistRoleEvents != null) { return _readOnlyPicklistRoleEvents; }
                    var eventDao = PicklistRoleStateEventDao;
                    var eL = new List<IPicklistRoleStateCreated>();
                    foreach (var e in eventDao.FindByPicklistEventId(this.PicklistEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IPicklistRoleStateCreated)e);
                    }
                    return (_readOnlyPicklistRoleEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddPicklistRoleEvent(e);
                    }
                }
                else { this._picklistRoleEvents.Clear(); }
            }
        }
    
		public virtual void AddPicklistRoleEvent(IPicklistRoleStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._picklistRoleEvents[e.PicklistRoleEventId] = e;
		}

        public virtual IPicklistRoleStateCreated NewPicklistRoleStateCreated(PartyRoleId partyRoleId)
        {
            var stateEvent = new PicklistRoleStateCreated(NewPicklistRoleEventId(partyRoleId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IPicklistRoleStateCreated e in this.PicklistRoleEvents) {
				PicklistRoleStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class PicklistStateMergePatched : PicklistStateEventBase, IPicklistStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyFacilityIdRemoved { get; set; }

		public virtual bool IsPropertyShipmentMethodTypeIdRemoved { get; set; }

		public virtual bool IsPropertyStatusIdRemoved { get; set; }

		public virtual bool IsPropertyPicklistDateRemoved { get; set; }

		public virtual bool IsPropertyPickwaveIdRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public PicklistStateMergePatched ()
		{
		}

		public PicklistStateMergePatched (PicklistEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<PicklistRoleEventId, IPicklistRoleStateEvent> _picklistRoleEvents = new Dictionary<PicklistRoleEventId, IPicklistRoleStateEvent>();

        private IEnumerable<IPicklistRoleStateEvent> _readOnlyPicklistRoleEvents;
        
        public virtual IEnumerable<IPicklistRoleStateEvent> PicklistRoleEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._picklistRoleEvents.Values;
                }
                else
                {
                    if (_readOnlyPicklistRoleEvents != null) { return _readOnlyPicklistRoleEvents; }
                    var eventDao = PicklistRoleStateEventDao;
                    var eL = new List<IPicklistRoleStateEvent>();
                    foreach (var e in eventDao.FindByPicklistEventId(this.PicklistEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IPicklistRoleStateEvent)e);
                    }
                    return (_readOnlyPicklistRoleEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddPicklistRoleEvent(e);
                    }
                }
                else { this._picklistRoleEvents.Clear(); }
            }
        }

		public virtual void AddPicklistRoleEvent(IPicklistRoleStateEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._picklistRoleEvents[e.PicklistRoleEventId] = e;
		}

        public virtual IPicklistRoleStateCreated NewPicklistRoleStateCreated(PartyRoleId partyRoleId)
        {
            var stateEvent = new PicklistRoleStateCreated(NewPicklistRoleEventId(partyRoleId));
            return stateEvent;
        }

        public virtual IPicklistRoleStateMergePatched NewPicklistRoleStateMergePatched(PartyRoleId partyRoleId)
        {
            var stateEvent = new PicklistRoleStateMergePatched(NewPicklistRoleEventId(partyRoleId));
            return stateEvent;
        }

        public virtual IPicklistRoleStateRemoved NewPicklistRoleStateRemoved(PartyRoleId partyRoleId)
        {
            var stateEvent = new PicklistRoleStateRemoved(NewPicklistRoleEventId(partyRoleId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IPicklistRoleStateEvent e in this.PicklistRoleEvents) {
				PicklistRoleStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class PicklistStateDeleted : PicklistStateEventBase, IPicklistStateDeleted, ISaveable
	{
		public PicklistStateDeleted ()
		{
		}

		public PicklistStateDeleted (PicklistEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

		private Dictionary<PicklistRoleEventId, IPicklistRoleStateRemoved> _picklistRoleEvents = new Dictionary<PicklistRoleEventId, IPicklistRoleStateRemoved>();
		
        private IEnumerable<IPicklistRoleStateRemoved> _readOnlyPicklistRoleEvents;

        public virtual IEnumerable<IPicklistRoleStateRemoved> PicklistRoleEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._picklistRoleEvents.Values;
                }
                else
                {
                    if (_readOnlyPicklistRoleEvents != null) { return _readOnlyPicklistRoleEvents; }
                    var eventDao = PicklistRoleStateEventDao;
                    var eL = new List<IPicklistRoleStateRemoved>();
                    foreach (var e in eventDao.FindByPicklistEventId(this.PicklistEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IPicklistRoleStateRemoved)e);
                    }
                    return (_readOnlyPicklistRoleEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddPicklistRoleEvent(e);
                    }
                }
                else { this._picklistRoleEvents.Clear(); }
            }
        }
	
		public virtual void AddPicklistRoleEvent(IPicklistRoleStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._picklistRoleEvents[e.PicklistRoleEventId] = e;
		}

        public virtual IPicklistRoleStateRemoved NewPicklistRoleStateRemoved(PartyRoleId partyRoleId)
        {
            var stateEvent = new PicklistRoleStateRemoved(NewPicklistRoleEventId(partyRoleId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IPicklistRoleStateRemoved e in this.PicklistRoleEvents) {
				PicklistRoleStateEventDao.Save(e);
			}
		}


	}



}

