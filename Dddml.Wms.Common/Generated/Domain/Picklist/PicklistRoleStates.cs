// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Picklist;
using Dddml.Wms.Domain.PartyRole;

namespace Dddml.Wms.Domain.Picklist
{

    public class PicklistRoleStates : IPicklistRoleStates
    {
        
		protected IPicklistRoleStateDao PicklistRoleStateDao
		{
			get
			{
				return ApplicationContext.Current["PicklistRoleStateDao"] as IPicklistRoleStateDao;
			}
		}

		private Dictionary<PicklistRoleId, IPicklistRoleState> _loadedPicklistRoleStates = new Dictionary<PicklistRoleId, IPicklistRoleState>();

		private Dictionary<PicklistRoleId, IPicklistRoleState> _removedPicklistRoleStates = new Dictionary<PicklistRoleId, IPicklistRoleState>();

		protected virtual IEnumerable<IPicklistRoleState> LoadedPicklistRoleStates {
			get {
				return this._loadedPicklistRoleStates.Values;
			}
		}

        private IPicklistState _picklistState;

        private IEnumerable<IPicklistRoleState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return PicklistRoleStateDao.FindByPicklistId(_picklistState.PicklistId);
                }
                else
                {
                    return _loadedPicklistRoleStates.Values.Where(s => !(_removedPicklistRoleStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public PicklistRoleStates(IPicklistState outerState)
        {
            this._picklistState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IPicklistRoleState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IPicklistRoleState state)
        {
            this._removedPicklistRoleStates.Add(state.GlobalId, state);
        }

        public virtual IPicklistRoleState Get(PartyRoleId partyRoleId)
		{
			return Get(partyRoleId, false, false);
		}

        public virtual IPicklistRoleState Get(PartyRoleId partyRoleId, bool forCreation)
        {
			return Get(partyRoleId, forCreation, false);
        }

        public virtual IPicklistRoleState Get(PartyRoleId partyRoleId, bool forCreation, bool nullAllowed)
        {
            PicklistRoleId globalId = new PicklistRoleId(_picklistState.PicklistId, partyRoleId);
            if (_loadedPicklistRoleStates.ContainsKey(globalId)) {
                var state = _loadedPicklistRoleStates[globalId];
                if (this._picklistState != null && this._picklistState.ReadOnly == false) { ((IPicklistRoleState)state).ReadOnly = false; }
                return state;
            }
            if (forCreation || ForReapplying)
            {
                var state = new PicklistRoleState(ForReapplying);
                state.PicklistRoleId = globalId;
                _loadedPicklistRoleStates.Add(globalId, state);
                if (this._picklistState != null && this._picklistState.ReadOnly == false) { ((IPicklistRoleState)state).ReadOnly = false; }
                return state;
            }
            else
            {
                var state = PicklistRoleStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedPicklistRoleStates.Add(globalId, state);
                }
                if (this._picklistState != null && this._picklistState.ReadOnly == false) { ((IPicklistRoleState)state).ReadOnly = false; }
                return state;
            }
        }

        public virtual void AddToSave(IPicklistRoleState state)
        {
            this._loadedPicklistRoleStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IPicklistRoleState s in this.LoadedPicklistRoleStates) {
                PicklistRoleStateDao.Save(s);
			}
            foreach(IPicklistRoleState s in this._removedPicklistRoleStates.Values)
            {
                PicklistRoleStateDao.Delete(s);
            }
		}

		#endregion


    }



}


