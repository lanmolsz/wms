// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Picklist;
using Dddml.Wms.Domain.PartyRole;

namespace Dddml.Wms.Domain.Picklist
{

    public class PicklistStateEventDtoConverter
    {
        public virtual PicklistStateCreatedOrMergePatchedOrDeletedDto ToPicklistStateEventDto(IPicklistStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IPicklistStateCreated)stateEvent;
                return ToPicklistStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IPicklistStateMergePatched)stateEvent;
                return ToPicklistStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (IPicklistStateDeleted)stateEvent;
                return ToPicklistStateDeletedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual PicklistStateCreatedDto ToPicklistStateCreatedDto(IPicklistStateCreated e)
        {
            var dto = new PicklistStateCreatedDto();
            dto.PicklistEventId = e.PicklistEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.FacilityId = e.FacilityId;
            dto.ShipmentMethodTypeId = e.ShipmentMethodTypeId;
            dto.StatusId = e.StatusId;
            dto.PicklistDate = e.PicklistDate;
            dto.PickwaveId = e.PickwaveId;
            dto.Active = e.Active;
            var picklistRoleEvents = new List<PicklistRoleStateCreatedDto>();
            foreach (var ee in e.PicklistRoleEvents)
            {
                PicklistRoleStateCreatedDto eeDto = PicklistRoleStateEventDtoConverter.ToPicklistRoleStateCreatedDto(ee);
                picklistRoleEvents.Add(eeDto);
            }
            dto.PicklistRoleEvents = picklistRoleEvents.ToArray();

            return dto;
        }

        public virtual PicklistStateMergePatchedDto ToPicklistStateMergePatchedDto(IPicklistStateMergePatched e)
        {
            var dto = new PicklistStateMergePatchedDto();
            dto.PicklistEventId = e.PicklistEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.FacilityId = e.FacilityId;
            dto.ShipmentMethodTypeId = e.ShipmentMethodTypeId;
            dto.StatusId = e.StatusId;
            dto.PicklistDate = e.PicklistDate;
            dto.PickwaveId = e.PickwaveId;
            dto.Active = e.Active;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyFacilityIdRemoved = e.IsPropertyFacilityIdRemoved;
            dto.IsPropertyShipmentMethodTypeIdRemoved = e.IsPropertyShipmentMethodTypeIdRemoved;
            dto.IsPropertyStatusIdRemoved = e.IsPropertyStatusIdRemoved;
            dto.IsPropertyPicklistDateRemoved = e.IsPropertyPicklistDateRemoved;
            dto.IsPropertyPickwaveIdRemoved = e.IsPropertyPickwaveIdRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var picklistRoleEvents = new List<PicklistRoleStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.PicklistRoleEvents)
            {
                PicklistRoleStateCreatedOrMergePatchedOrRemovedDto eeDto = PicklistRoleStateEventDtoConverter.ToPicklistRoleStateEventDto(ee);
                picklistRoleEvents.Add(eeDto);
            }
            dto.PicklistRoleEvents = picklistRoleEvents.ToArray();


            return dto;
        }


        public virtual PicklistStateDeletedDto ToPicklistStateDeletedDto(IPicklistStateDeleted e)
        {
            var dto = new PicklistStateDeletedDto();
            dto.PicklistEventId = e.PicklistEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            var picklistRoleEvents = new List<PicklistRoleStateRemovedDto>();
            foreach (var ee in e.PicklistRoleEvents)
            {
                PicklistRoleStateRemovedDto eeDto = PicklistRoleStateEventDtoConverter.ToPicklistRoleStateRemovedDto(ee);
                picklistRoleEvents.Add(eeDto);
            }
            dto.PicklistRoleEvents = picklistRoleEvents.ToArray();


            return dto;
        }

        protected virtual PicklistRoleStateEventDtoConverter PicklistRoleStateEventDtoConverter
        {
            get
            {
                return new PicklistRoleStateEventDtoConverter();
            }
        }


    }


}

