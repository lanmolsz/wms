// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public partial class YearPlanState : YearPlanStateProperties, IYearPlanState, ISaveable
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

        private YearPlanId _yearPlanId = new YearPlanId();

        public virtual YearPlanId YearPlanId 
        {
            get { return this._yearPlanId; }
            set { this._yearPlanId = value; }
        }

		YearPlanId IGlobalIdentity<YearPlanId>.GlobalId {
			get {
				return  this.YearPlanId;
			}
		}

        int ILocalIdentity<int>.LocalId
        {
            get
            {
                return this.Year;
            }
        }


        public override PersonalName PersonalName {
			get {
				return this.YearPlanId.PersonalName;
			}
			set {
				this.YearPlanId.PersonalName = value;
			}
		}

        public override int Year {
			get {
				return this.YearPlanId.Year;
			}
			set {
				this.YearPlanId.Year = value;
			}
		}

		#endregion



		#region IActive implementation

		bool IActive.Active
		{
			get
			{
				return this.Active;
			}
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get
			{
				return this.UpdatedBy;
			}
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get
			{
				return this.UpdatedAt;
			}
		}

		#endregion

		#region IVersioned implementation

		long IVersioned<long>.Version
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IYearPlanState.IsUnsaved
        {
            get { return ((IVersioned<long>)this).Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        private IMonthPlanStates _monthPlans;
      
        public virtual IMonthPlanStates MonthPlans
        {
            get
            {
                return this._monthPlans;
            }
        }

        protected internal virtual void SetMonthPlans(IMonthPlanStates value)
        {
            this._monthPlans = value;
        }



		public YearPlanState ()
		{
            _monthPlans = new MonthPlanStates(this);

            InitializeProperties();
		}



		#region Saveable Implements

        public virtual void Save()
        {
            _monthPlans.Save();

        }


		#endregion


		public virtual void When(IYearPlanStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.Description = e.Description;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;

			foreach (IMonthPlanStateCreated innerEvent in e.MonthPlanEvents) {
				IMonthPlanState innerState = this.MonthPlans.Get(innerEvent.GlobalId.Month);
				innerState.Mutate (innerEvent);
			}

		}


		public virtual void When(IYearPlanStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.Description == null)
			{
				if (e.IsPropertyDescriptionRemoved)
				{
					this.Description = default(string);
				}
			}
			else
			{
				this.Description = e.Description;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


			foreach (IMonthPlanStateEvent innerEvent in e.MonthPlanEvents)
            {
                IMonthPlanState innerState = this.MonthPlans.Get(innerEvent.GlobalId.Month);

                innerState.Mutate(innerEvent);
                var removed = innerEvent as IMonthPlanStateRemoved;
                if (removed != null)
                {
                    this.MonthPlans.Remove(innerState);
                }
          
            }

		}

		public virtual void When(IYearPlanStateRemoved e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

            foreach (var innerState in this.MonthPlans)
            {
                this.MonthPlans.Remove(innerState);
                
                var innerE = e.NewMonthPlanStateRemoved(innerState.Month);
                ((MonthPlanStateEventBase)innerE).CreatedAt = e.CreatedAt;
                ((MonthPlanStateEventBase)innerE).CreatedBy = e.CreatedBy;
                innerState.When(innerE);
                //e.AddMonthPlanEvent(innerE);

            }

		}


		public virtual void Mutate(IEvent e)
		{
			((dynamic)this).When((dynamic)e);
		}

		protected void ThrowOnWrongEvent(IYearPlanStateEvent stateEvent)
		{
				var stateEntityIdPersonalName = (this as IGlobalIdentity<YearPlanId>).GlobalId.PersonalName;
				var eventEntityIdPersonalName = stateEvent.StateEventId.PersonalName;
				if (stateEntityIdPersonalName != eventEntityIdPersonalName)
				{
					throw DomainError.Named("mutateWrongEntity", "Entity Id PersonalName {0} in state but entity id PersonalName {1} in event", stateEntityIdPersonalName, eventEntityIdPersonalName);
				}

				var stateEntityIdYear = (this as IGlobalIdentity<YearPlanId>).GlobalId.Year;
				var eventEntityIdYear = stateEvent.StateEventId.Year;
				if (stateEntityIdYear != eventEntityIdYear)
				{
					throw DomainError.Named("mutateWrongEntity", "Entity Id Year {0} in state but entity id Year {1} in event", stateEntityIdYear, eventEntityIdYear);
				}

			var stateVersion = this.Version;
			var eventVersion = stateEvent.Version;
			if (YearPlanState.VersionZero == eventVersion)
			{
				eventVersion = stateEvent.Version = stateVersion;
			}
			if (stateVersion != eventVersion)
			{
				throw DomainError.Named("concurrencyConflict", "Conflict between state version {0} and event version {1}", stateVersion, eventVersion);
			}

		}
	}

}

