// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementType;

namespace Dddml.Wms.Domain.MovementType
{

	public static partial class MovementTypeStateInterfaceExtension
	{

        public static IMovementTypeCommand ToCreateOrMergePatchMovementType<TCreateMovementType, TMergePatchMovementType>(this IMovementTypeState state)
            where TCreateMovementType : ICreateMovementType, new()
            where TMergePatchMovementType : IMergePatchMovementType, new()
        {
            bool bUnsaved = ((IMovementTypeState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateMovementType<TCreateMovementType>();
            }
            else 
            {
                return state.ToMergePatchMovementType<TMergePatchMovementType>();
            }
        }

        public static TDeleteMovementType ToDeleteMovementType<TDeleteMovementType>(this IMovementTypeState state)
            where TDeleteMovementType : IDeleteMovementType, new()
        {
            var cmd = new TDeleteMovementType();
            cmd.MovementTypeId = state.MovementTypeId;
            cmd.Version = ((IMovementTypeStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchMovementType ToMergePatchMovementType<TMergePatchMovementType>(this IMovementTypeState state)
            where TMergePatchMovementType : IMergePatchMovementType, new()
        {
            var cmd = new TMergePatchMovementType();

            cmd.Version = ((IMovementTypeStateProperties)state).Version;

            cmd.MovementTypeId = state.MovementTypeId;
            cmd.Description = state.Description;
            cmd.Active = ((IMovementTypeStateProperties)state).Active;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreateMovementType ToCreateMovementType<TCreateMovementType>(this IMovementTypeState state)
            where TCreateMovementType : ICreateMovementType, new()
        {
            var cmd = new TCreateMovementType();

            cmd.Version = ((IMovementTypeStateProperties)state).Version;

            cmd.MovementTypeId = state.MovementTypeId;
            cmd.Description = state.Description;
            cmd.Active = ((IMovementTypeStateProperties)state).Active;
            return cmd;
        }
		

	}

}

