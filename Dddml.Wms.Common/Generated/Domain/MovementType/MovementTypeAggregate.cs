// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementType;

namespace Dddml.Wms.Domain.MovementType
{
    public partial class MovementTypeAggregate : AggregateBase, IMovementTypeAggregate
    {

        readonly IMovementTypeState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IMovementTypeState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public MovementTypeAggregate(IMovementTypeState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IMovementTypeStateProperties)_state).Version == MovementTypeState.VersionZero)
            {
                if (IsCommandCreate((IMovementTypeCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IMovementTypeCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IMovementTypeCommand c)
        {
            return c.Version == MovementTypeState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateMovementType c)
        {
            IMovementTypeStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchMovementType c)
        {
            IMovementTypeStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteMovementType c)
        {
            IMovementTypeStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IMovementTypeStateCreated Map(ICreateMovementType c)
        {
			var stateEventId = new MovementTypeStateEventId(c.MovementTypeId, c.Version);
            IMovementTypeStateCreated e = NewMovementTypeStateCreated(stateEventId);
		
            e.Description = c.Description;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var version = c.Version;


            return e;
        }

        protected virtual IMovementTypeStateMergePatched Map(IMergePatchMovementType c)
        {
			var stateEventId = new MovementTypeStateEventId(c.MovementTypeId, c.Version);
            IMovementTypeStateMergePatched e = NewMovementTypeStateMergePatched(stateEventId);

            e.Description = c.Description;
            e.Active = c.Active;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var version = c.Version;


            return e;
        }

        protected virtual IMovementTypeStateDeleted Map(IDeleteMovementType c)
        {
			var stateEventId = new MovementTypeStateEventId(c.MovementTypeId, c.Version);
            IMovementTypeStateDeleted e = NewMovementTypeStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected MovementTypeStateCreated NewMovementTypeStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new MovementTypeStateEventId(_state.MovementTypeId, ((IMovementTypeStateProperties)_state).Version);
            var e = NewMovementTypeStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected MovementTypeStateMergePatched NewMovementTypeStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new MovementTypeStateEventId(_state.MovementTypeId, ((IMovementTypeStateProperties)_state).Version);
            var e = NewMovementTypeStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


        protected MovementTypeStateDeleted NewMovementTypeStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new MovementTypeStateEventId(_state.MovementTypeId, ((IMovementTypeStateProperties)_state).Version);
            var e = NewMovementTypeStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private MovementTypeStateCreated NewMovementTypeStateCreated(MovementTypeStateEventId stateEventId)
		{
			return new MovementTypeStateCreated(stateEventId);			
		}

        private MovementTypeStateMergePatched NewMovementTypeStateMergePatched(MovementTypeStateEventId stateEventId)
		{
			return new MovementTypeStateMergePatched(stateEventId);
		}

        private MovementTypeStateDeleted NewMovementTypeStateDeleted(MovementTypeStateEventId stateEventId)
		{
			return new MovementTypeStateDeleted(stateEventId);
		}

    }

}

