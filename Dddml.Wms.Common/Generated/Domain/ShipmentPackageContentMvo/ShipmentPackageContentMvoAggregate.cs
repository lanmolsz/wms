// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentPackageContentMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentPackageContentMvo;
using Dddml.Wms.Domain.ShipmentPackage;

namespace Dddml.Wms.Domain.ShipmentPackageContentMvo
{
    public partial class ShipmentPackageContentMvoAggregate : AggregateBase, IShipmentPackageContentMvoAggregate
    {

        readonly IShipmentPackageContentMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IShipmentPackageContentMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        ShipmentPackageContentId IGlobalIdentity<ShipmentPackageContentId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public ShipmentPackageContentMvoAggregate(IShipmentPackageContentMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IShipmentPackageContentMvoStateProperties)_state).ShipmentPackageVersion == ShipmentPackageContentMvoState.VersionZero)
            {
                if (IsCommandCreate((IShipmentPackageContentMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IShipmentPackageContentMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IShipmentPackageContentMvoCommand c)
        {
            return c.ShipmentPackageVersion == ShipmentPackageContentMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateShipmentPackageContentMvo c)
        {
            IShipmentPackageContentMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchShipmentPackageContentMvo c)
        {
            IShipmentPackageContentMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteShipmentPackageContentMvo c)
        {
            IShipmentPackageContentMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IShipmentPackageContentMvoStateCreated Map(ICreateShipmentPackageContentMvo c)
        {
			var stateEventId = new ShipmentPackageContentMvoEventId(c.ShipmentPackageContentId, c.ShipmentPackageVersion);
            IShipmentPackageContentMvoStateCreated e = NewShipmentPackageContentMvoStateCreated(stateEventId);
		
            e.Quantity = c.Quantity;
            e.SubProductId = c.SubProductId;
            e.SubProductQuantity = c.SubProductQuantity;
            e.Version = c.Version;
            e.Active = c.Active;
            e.ShipmentPackageShipmentBoxTypeId = c.ShipmentPackageShipmentBoxTypeId;
            e.ShipmentPackageDateCreated = c.ShipmentPackageDateCreated;
            e.ShipmentPackageBoxLength = c.ShipmentPackageBoxLength;
            e.ShipmentPackageBoxHeight = c.ShipmentPackageBoxHeight;
            e.ShipmentPackageBoxWidth = c.ShipmentPackageBoxWidth;
            e.ShipmentPackageDimensionUomId = c.ShipmentPackageDimensionUomId;
            e.ShipmentPackageWeight = c.ShipmentPackageWeight;
            e.ShipmentPackageWeightUomId = c.ShipmentPackageWeightUomId;
            e.ShipmentPackageInsuredValue = c.ShipmentPackageInsuredValue;
            e.ShipmentPackageCreatedBy = c.ShipmentPackageCreatedBy;
            e.ShipmentPackageCreatedAt = c.ShipmentPackageCreatedAt;
            e.ShipmentPackageUpdatedBy = c.ShipmentPackageUpdatedBy;
            e.ShipmentPackageUpdatedAt = c.ShipmentPackageUpdatedAt;
            e.ShipmentPackageActive = c.ShipmentPackageActive;
            e.ShipmentPackageDeleted = c.ShipmentPackageDeleted;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var shipmentPackageVersion = c.ShipmentPackageVersion;


            return e;
        }

        protected virtual IShipmentPackageContentMvoStateMergePatched Map(IMergePatchShipmentPackageContentMvo c)
        {
			var stateEventId = new ShipmentPackageContentMvoEventId(c.ShipmentPackageContentId, c.ShipmentPackageVersion);
            IShipmentPackageContentMvoStateMergePatched e = NewShipmentPackageContentMvoStateMergePatched(stateEventId);

            e.Quantity = c.Quantity;
            e.SubProductId = c.SubProductId;
            e.SubProductQuantity = c.SubProductQuantity;
            e.Version = c.Version;
            e.Active = c.Active;
            e.ShipmentPackageShipmentBoxTypeId = c.ShipmentPackageShipmentBoxTypeId;
            e.ShipmentPackageDateCreated = c.ShipmentPackageDateCreated;
            e.ShipmentPackageBoxLength = c.ShipmentPackageBoxLength;
            e.ShipmentPackageBoxHeight = c.ShipmentPackageBoxHeight;
            e.ShipmentPackageBoxWidth = c.ShipmentPackageBoxWidth;
            e.ShipmentPackageDimensionUomId = c.ShipmentPackageDimensionUomId;
            e.ShipmentPackageWeight = c.ShipmentPackageWeight;
            e.ShipmentPackageWeightUomId = c.ShipmentPackageWeightUomId;
            e.ShipmentPackageInsuredValue = c.ShipmentPackageInsuredValue;
            e.ShipmentPackageCreatedBy = c.ShipmentPackageCreatedBy;
            e.ShipmentPackageCreatedAt = c.ShipmentPackageCreatedAt;
            e.ShipmentPackageUpdatedBy = c.ShipmentPackageUpdatedBy;
            e.ShipmentPackageUpdatedAt = c.ShipmentPackageUpdatedAt;
            e.ShipmentPackageActive = c.ShipmentPackageActive;
            e.ShipmentPackageDeleted = c.ShipmentPackageDeleted;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertySubProductIdRemoved = c.IsPropertySubProductIdRemoved;
            e.IsPropertySubProductQuantityRemoved = c.IsPropertySubProductQuantityRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyShipmentPackageShipmentBoxTypeIdRemoved = c.IsPropertyShipmentPackageShipmentBoxTypeIdRemoved;
            e.IsPropertyShipmentPackageDateCreatedRemoved = c.IsPropertyShipmentPackageDateCreatedRemoved;
            e.IsPropertyShipmentPackageBoxLengthRemoved = c.IsPropertyShipmentPackageBoxLengthRemoved;
            e.IsPropertyShipmentPackageBoxHeightRemoved = c.IsPropertyShipmentPackageBoxHeightRemoved;
            e.IsPropertyShipmentPackageBoxWidthRemoved = c.IsPropertyShipmentPackageBoxWidthRemoved;
            e.IsPropertyShipmentPackageDimensionUomIdRemoved = c.IsPropertyShipmentPackageDimensionUomIdRemoved;
            e.IsPropertyShipmentPackageWeightRemoved = c.IsPropertyShipmentPackageWeightRemoved;
            e.IsPropertyShipmentPackageWeightUomIdRemoved = c.IsPropertyShipmentPackageWeightUomIdRemoved;
            e.IsPropertyShipmentPackageInsuredValueRemoved = c.IsPropertyShipmentPackageInsuredValueRemoved;
            e.IsPropertyShipmentPackageCreatedByRemoved = c.IsPropertyShipmentPackageCreatedByRemoved;
            e.IsPropertyShipmentPackageCreatedAtRemoved = c.IsPropertyShipmentPackageCreatedAtRemoved;
            e.IsPropertyShipmentPackageUpdatedByRemoved = c.IsPropertyShipmentPackageUpdatedByRemoved;
            e.IsPropertyShipmentPackageUpdatedAtRemoved = c.IsPropertyShipmentPackageUpdatedAtRemoved;
            e.IsPropertyShipmentPackageActiveRemoved = c.IsPropertyShipmentPackageActiveRemoved;
            e.IsPropertyShipmentPackageDeletedRemoved = c.IsPropertyShipmentPackageDeletedRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var shipmentPackageVersion = c.ShipmentPackageVersion;


            return e;
        }

        protected virtual IShipmentPackageContentMvoStateDeleted Map(IDeleteShipmentPackageContentMvo c)
        {
			var stateEventId = new ShipmentPackageContentMvoEventId(c.ShipmentPackageContentId, c.ShipmentPackageVersion);
            IShipmentPackageContentMvoStateDeleted e = NewShipmentPackageContentMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected ShipmentPackageContentMvoStateCreated NewShipmentPackageContentMvoStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new ShipmentPackageContentMvoEventId(_state.ShipmentPackageContentId, version);
            var e = NewShipmentPackageContentMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected ShipmentPackageContentMvoStateMergePatched NewShipmentPackageContentMvoStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new ShipmentPackageContentMvoEventId(_state.ShipmentPackageContentId, version);
            var e = NewShipmentPackageContentMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected ShipmentPackageContentMvoStateDeleted NewShipmentPackageContentMvoStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new ShipmentPackageContentMvoEventId(_state.ShipmentPackageContentId, version);
            var e = NewShipmentPackageContentMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private ShipmentPackageContentMvoStateCreated NewShipmentPackageContentMvoStateCreated(ShipmentPackageContentMvoEventId stateEventId)
		{
			return new ShipmentPackageContentMvoStateCreated(stateEventId);			
		}

        private ShipmentPackageContentMvoStateMergePatched NewShipmentPackageContentMvoStateMergePatched(ShipmentPackageContentMvoEventId stateEventId)
		{
			return new ShipmentPackageContentMvoStateMergePatched(stateEventId);
		}

        private ShipmentPackageContentMvoStateDeleted NewShipmentPackageContentMvoStateDeleted(ShipmentPackageContentMvoEventId stateEventId)
		{
			return new ShipmentPackageContentMvoStateDeleted(stateEventId);
		}
    }

}

