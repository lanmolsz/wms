// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentPackageContentMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.ShipmentPackageContentMvo;
using Dddml.Wms.Domain.ShipmentPackage;

namespace Dddml.Wms.Domain.ShipmentPackageContentMvo
{

	public static partial class ShipmentPackageContentMvoStateInterfaceExtension
	{

        public static IShipmentPackageContentMvoCommand ToCreateOrMergePatchShipmentPackageContentMvo<TCreateShipmentPackageContentMvo, TMergePatchShipmentPackageContentMvo>(this IShipmentPackageContentMvoState state)
            where TCreateShipmentPackageContentMvo : ICreateShipmentPackageContentMvo, new()
            where TMergePatchShipmentPackageContentMvo : IMergePatchShipmentPackageContentMvo, new()
        {
            bool bUnsaved = ((IShipmentPackageContentMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateShipmentPackageContentMvo<TCreateShipmentPackageContentMvo>();
            }
            else 
            {
                return state.ToMergePatchShipmentPackageContentMvo<TMergePatchShipmentPackageContentMvo>();
            }
        }

        public static TDeleteShipmentPackageContentMvo ToDeleteShipmentPackageContentMvo<TDeleteShipmentPackageContentMvo>(this IShipmentPackageContentMvoState state)
            where TDeleteShipmentPackageContentMvo : IDeleteShipmentPackageContentMvo, new()
        {
            var cmd = new TDeleteShipmentPackageContentMvo();
            cmd.ShipmentPackageContentId = state.ShipmentPackageContentId;
            cmd.ShipmentPackageVersion = ((IShipmentPackageContentMvoStateProperties)state).ShipmentPackageVersion;

            return cmd;
        }

        public static TMergePatchShipmentPackageContentMvo ToMergePatchShipmentPackageContentMvo<TMergePatchShipmentPackageContentMvo>(this IShipmentPackageContentMvoState state)
            where TMergePatchShipmentPackageContentMvo : IMergePatchShipmentPackageContentMvo, new()
        {
            var cmd = new TMergePatchShipmentPackageContentMvo();

            cmd.ShipmentPackageVersion = ((IShipmentPackageContentMvoStateProperties)state).ShipmentPackageVersion;

            cmd.ShipmentPackageContentId = state.ShipmentPackageContentId;
            cmd.Quantity = state.Quantity;
            cmd.SubProductId = state.SubProductId;
            cmd.SubProductQuantity = state.SubProductQuantity;
            cmd.Version = ((IShipmentPackageContentMvoStateProperties)state).Version;
            cmd.Active = ((IShipmentPackageContentMvoStateProperties)state).Active;
            cmd.ShipmentPackageShipmentBoxTypeId = state.ShipmentPackageShipmentBoxTypeId;
            cmd.ShipmentPackageDateCreated = state.ShipmentPackageDateCreated;
            cmd.ShipmentPackageBoxLength = state.ShipmentPackageBoxLength;
            cmd.ShipmentPackageBoxHeight = state.ShipmentPackageBoxHeight;
            cmd.ShipmentPackageBoxWidth = state.ShipmentPackageBoxWidth;
            cmd.ShipmentPackageDimensionUomId = state.ShipmentPackageDimensionUomId;
            cmd.ShipmentPackageWeight = state.ShipmentPackageWeight;
            cmd.ShipmentPackageWeightUomId = state.ShipmentPackageWeightUomId;
            cmd.ShipmentPackageInsuredValue = state.ShipmentPackageInsuredValue;
            cmd.ShipmentPackageCreatedBy = state.ShipmentPackageCreatedBy;
            cmd.ShipmentPackageCreatedAt = state.ShipmentPackageCreatedAt;
            cmd.ShipmentPackageUpdatedBy = state.ShipmentPackageUpdatedBy;
            cmd.ShipmentPackageUpdatedAt = state.ShipmentPackageUpdatedAt;
            cmd.ShipmentPackageActive = state.ShipmentPackageActive;
            cmd.ShipmentPackageDeleted = state.ShipmentPackageDeleted;
            
            if (state.Quantity == null) { cmd.IsPropertyQuantityRemoved = true; }
            if (state.SubProductId == null) { cmd.IsPropertySubProductIdRemoved = true; }
            if (state.SubProductQuantity == null) { cmd.IsPropertySubProductQuantityRemoved = true; }
            if (state.ShipmentPackageShipmentBoxTypeId == null) { cmd.IsPropertyShipmentPackageShipmentBoxTypeIdRemoved = true; }
            if (state.ShipmentPackageDateCreated == null) { cmd.IsPropertyShipmentPackageDateCreatedRemoved = true; }
            if (state.ShipmentPackageBoxLength == null) { cmd.IsPropertyShipmentPackageBoxLengthRemoved = true; }
            if (state.ShipmentPackageBoxHeight == null) { cmd.IsPropertyShipmentPackageBoxHeightRemoved = true; }
            if (state.ShipmentPackageBoxWidth == null) { cmd.IsPropertyShipmentPackageBoxWidthRemoved = true; }
            if (state.ShipmentPackageDimensionUomId == null) { cmd.IsPropertyShipmentPackageDimensionUomIdRemoved = true; }
            if (state.ShipmentPackageWeight == null) { cmd.IsPropertyShipmentPackageWeightRemoved = true; }
            if (state.ShipmentPackageWeightUomId == null) { cmd.IsPropertyShipmentPackageWeightUomIdRemoved = true; }
            if (state.ShipmentPackageInsuredValue == null) { cmd.IsPropertyShipmentPackageInsuredValueRemoved = true; }
            if (state.ShipmentPackageCreatedBy == null) { cmd.IsPropertyShipmentPackageCreatedByRemoved = true; }
            if (state.ShipmentPackageUpdatedBy == null) { cmd.IsPropertyShipmentPackageUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateShipmentPackageContentMvo ToCreateShipmentPackageContentMvo<TCreateShipmentPackageContentMvo>(this IShipmentPackageContentMvoState state)
            where TCreateShipmentPackageContentMvo : ICreateShipmentPackageContentMvo, new()
        {
            var cmd = new TCreateShipmentPackageContentMvo();

            cmd.ShipmentPackageVersion = ((IShipmentPackageContentMvoStateProperties)state).ShipmentPackageVersion;

            cmd.ShipmentPackageContentId = state.ShipmentPackageContentId;
            cmd.Quantity = state.Quantity;
            cmd.SubProductId = state.SubProductId;
            cmd.SubProductQuantity = state.SubProductQuantity;
            cmd.Version = ((IShipmentPackageContentMvoStateProperties)state).Version;
            cmd.Active = ((IShipmentPackageContentMvoStateProperties)state).Active;
            cmd.ShipmentPackageShipmentBoxTypeId = state.ShipmentPackageShipmentBoxTypeId;
            cmd.ShipmentPackageDateCreated = state.ShipmentPackageDateCreated;
            cmd.ShipmentPackageBoxLength = state.ShipmentPackageBoxLength;
            cmd.ShipmentPackageBoxHeight = state.ShipmentPackageBoxHeight;
            cmd.ShipmentPackageBoxWidth = state.ShipmentPackageBoxWidth;
            cmd.ShipmentPackageDimensionUomId = state.ShipmentPackageDimensionUomId;
            cmd.ShipmentPackageWeight = state.ShipmentPackageWeight;
            cmd.ShipmentPackageWeightUomId = state.ShipmentPackageWeightUomId;
            cmd.ShipmentPackageInsuredValue = state.ShipmentPackageInsuredValue;
            cmd.ShipmentPackageCreatedBy = state.ShipmentPackageCreatedBy;
            cmd.ShipmentPackageCreatedAt = state.ShipmentPackageCreatedAt;
            cmd.ShipmentPackageUpdatedBy = state.ShipmentPackageUpdatedBy;
            cmd.ShipmentPackageUpdatedAt = state.ShipmentPackageUpdatedAt;
            cmd.ShipmentPackageActive = state.ShipmentPackageActive;
            cmd.ShipmentPackageDeleted = state.ShipmentPackageDeleted;
            return cmd;
        }
		

	}

}

