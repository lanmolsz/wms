// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Attribute;

namespace Dddml.Wms.Domain.Attribute
{

    public class AttributeStateEventDtoConverter
    {
        public virtual AttributeStateCreatedOrMergePatchedOrDeletedDto ToAttributeStateEventDto(IAttributeEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IAttributeStateCreated)stateEvent;
                return ToAttributeStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IAttributeStateMergePatched)stateEvent;
                return ToAttributeStateMergePatchedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.Deleted)
            {
                var e = (IAttributeStateDeleted)stateEvent;
                return ToAttributeStateDeletedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual AttributeStateCreatedDto ToAttributeStateCreatedDto(IAttributeStateCreated e)
        {
            var dto = new AttributeStateCreatedDto();
            dto.AttributeEventId = e.AttributeEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.AttributeName = e.AttributeName;
            dto.OrganizationId = e.OrganizationId;
            dto.Description = e.Description;
            dto.IsMandatory = e.IsMandatory;
            dto.AttributeValueType = e.AttributeValueType;
            dto.AttributeValueLength = e.AttributeValueLength;
            dto.IsList = e.IsList;
            dto.FieldName = e.FieldName;
            dto.ReferenceId = e.ReferenceId;
            dto.Active = e.Active;
            var attributeValueEvents = new List<AttributeValueStateCreatedDto>();
            foreach (var ee in e.AttributeValueEvents)
            {
                AttributeValueStateCreatedDto eeDto = AttributeValueStateEventDtoConverter.ToAttributeValueStateCreatedDto(ee);
                attributeValueEvents.Add(eeDto);
            }
            dto.AttributeValueEvents = attributeValueEvents.ToArray();

            var attributeAliasEvents = new List<AttributeAliasStateCreatedDto>();
            foreach (var ee in e.AttributeAliasEvents)
            {
                AttributeAliasStateCreatedDto eeDto = AttributeAliasStateEventDtoConverter.ToAttributeAliasStateCreatedDto(ee);
                attributeAliasEvents.Add(eeDto);
            }
            dto.AttributeAliasEvents = attributeAliasEvents.ToArray();

            return dto;
        }

        public virtual AttributeStateMergePatchedDto ToAttributeStateMergePatchedDto(IAttributeStateMergePatched e)
        {
            var dto = new AttributeStateMergePatchedDto();
            dto.AttributeEventId = e.AttributeEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.AttributeName = e.AttributeName;
            dto.OrganizationId = e.OrganizationId;
            dto.Description = e.Description;
            dto.IsMandatory = e.IsMandatory;
            dto.AttributeValueType = e.AttributeValueType;
            dto.AttributeValueLength = e.AttributeValueLength;
            dto.IsList = e.IsList;
            dto.FieldName = e.FieldName;
            dto.ReferenceId = e.ReferenceId;
            dto.Active = e.Active;
            dto.IsPropertyAttributeNameRemoved = e.IsPropertyAttributeNameRemoved;
            dto.IsPropertyOrganizationIdRemoved = e.IsPropertyOrganizationIdRemoved;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyIsMandatoryRemoved = e.IsPropertyIsMandatoryRemoved;
            dto.IsPropertyAttributeValueTypeRemoved = e.IsPropertyAttributeValueTypeRemoved;
            dto.IsPropertyAttributeValueLengthRemoved = e.IsPropertyAttributeValueLengthRemoved;
            dto.IsPropertyIsListRemoved = e.IsPropertyIsListRemoved;
            dto.IsPropertyFieldNameRemoved = e.IsPropertyFieldNameRemoved;
            dto.IsPropertyReferenceIdRemoved = e.IsPropertyReferenceIdRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var attributeValueEvents = new List<AttributeValueStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.AttributeValueEvents)
            {
                AttributeValueStateCreatedOrMergePatchedOrRemovedDto eeDto = AttributeValueStateEventDtoConverter.ToAttributeValueStateEventDto(ee);
                attributeValueEvents.Add(eeDto);
            }
            dto.AttributeValueEvents = attributeValueEvents.ToArray();

            var attributeAliasEvents = new List<AttributeAliasStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.AttributeAliasEvents)
            {
                AttributeAliasStateCreatedOrMergePatchedOrRemovedDto eeDto = AttributeAliasStateEventDtoConverter.ToAttributeAliasStateEventDto(ee);
                attributeAliasEvents.Add(eeDto);
            }
            dto.AttributeAliasEvents = attributeAliasEvents.ToArray();


            return dto;
        }


        public virtual AttributeStateDeletedDto ToAttributeStateDeletedDto(IAttributeStateDeleted e)
        {
            var dto = new AttributeStateDeletedDto();
            dto.AttributeEventId = e.AttributeEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            var attributeValueEvents = new List<AttributeValueStateRemovedDto>();
            foreach (var ee in e.AttributeValueEvents)
            {
                AttributeValueStateRemovedDto eeDto = AttributeValueStateEventDtoConverter.ToAttributeValueStateRemovedDto(ee);
                attributeValueEvents.Add(eeDto);
            }
            dto.AttributeValueEvents = attributeValueEvents.ToArray();

            var attributeAliasEvents = new List<AttributeAliasStateRemovedDto>();
            foreach (var ee in e.AttributeAliasEvents)
            {
                AttributeAliasStateRemovedDto eeDto = AttributeAliasStateEventDtoConverter.ToAttributeAliasStateRemovedDto(ee);
                attributeAliasEvents.Add(eeDto);
            }
            dto.AttributeAliasEvents = attributeAliasEvents.ToArray();


            return dto;
        }

        protected virtual AttributeValueStateEventDtoConverter AttributeValueStateEventDtoConverter
        {
            get
            {
                return new AttributeValueStateEventDtoConverter();
            }
        }

        protected virtual AttributeAliasStateEventDtoConverter AttributeAliasStateEventDtoConverter
        {
            get
            {
                return new AttributeAliasStateEventDtoConverter();
            }
        }


    }


}

