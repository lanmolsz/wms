// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Attribute;

namespace Dddml.Wms.Domain.Attribute
{

	public abstract class AttributeCommandBase : IAttributeCommand
	{
		public virtual string AttributeId { get; set; }


		string IAggregateCommand<string, long>.AggregateId
		{
			get
			{
				return this.AttributeId;
			}
		}


		long IAggregateCommand<string, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string AttributeName { get; set; }

		public virtual string OrganizationId { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? IsMandatory { get; set; }

		public virtual bool? IsInstanceAttribute { get; set; }

		public virtual string AttributeValueType { get; set; }

		public virtual int? AttributeValueLength { get; set; }

		public virtual bool? IsList { get; set; }

		public virtual string FieldName { get; set; }

		public virtual string ReferenceId { get; set; }

		public virtual bool? Active { get; set; }


		// //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();


	}


	public class CreateAttribute : AttributeCommandBase, ICreateAttribute
	{
		
		public CreateAttribute ()
		{
		}


        private CreateAttributeValueCommands _attributeValues = new CreateAttributeValueCommands();

        public ICreateAttributeValueCommands AttributeValues
        {
            get
            {
                return this._attributeValues;
            }
        }

        public CreateAttributeValue NewCreateAttributeValue()
        {
            var c = new CreateAttributeValue();
            c.AttributeId = this.AttributeId;

            return c;
        }

        ICreateAttributeValue ICreateAttribute.NewCreateAttributeValue()
        {
            return this.NewCreateAttributeValue();
        }



        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }
	}


	public class MergePatchAttribute :AttributeCommandBase, IMergePatchAttribute
	{

		public virtual bool IsPropertyAttributeNameRemoved { get; set; }

		public virtual bool IsPropertyOrganizationIdRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyIsMandatoryRemoved { get; set; }

		public virtual bool IsPropertyIsInstanceAttributeRemoved { get; set; }

		public virtual bool IsPropertyAttributeValueTypeRemoved { get; set; }

		public virtual bool IsPropertyAttributeValueLengthRemoved { get; set; }

		public virtual bool IsPropertyIsListRemoved { get; set; }

		public virtual bool IsPropertyFieldNameRemoved { get; set; }

		public virtual bool IsPropertyReferenceIdRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MergePatchAttribute ()
		{
		}

        private AttributeValueCommands _attributeValueCommands = new AttributeValueCommands();

        public IAttributeValueCommands AttributeValueCommands
        {
            get
            {
                return this._attributeValueCommands;
            }
        }


        public CreateAttributeValue NewCreateAttributeValue()
        {
            var c = new CreateAttributeValue();
            c.AttributeId = this.AttributeId;

            return c;
        }

        ICreateAttributeValue IMergePatchAttribute.NewCreateAttributeValue()
        {
            return this.NewCreateAttributeValue();
        }

        public MergePatchAttributeValue NewMergePatchAttributeValue()
        {
            var c = new MergePatchAttributeValue();
            c.AttributeId = this.AttributeId;

            return c;
        }

        IMergePatchAttributeValue IMergePatchAttribute.NewMergePatchAttributeValue()
        {
            return this.NewMergePatchAttributeValue();
        }


        public RemoveAttributeValue NewRemoveAttributeValue()
        {
            var c = new RemoveAttributeValue();
            c.AttributeId = this.AttributeId;

            return c;
        }

        IRemoveAttributeValue IMergePatchAttribute.NewRemoveAttributeValue()
        {
            return this.NewRemoveAttributeValue();
        }


        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteAttribute : AttributeCommandBase, IDeleteAttribute
	{
		public DeleteAttribute ()
		{
		}

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }

	}


    public class CreateAttributeValueCommands : ICreateAttributeValueCommands
    {
        private List<ICreateAttributeValue> _innerCommands = new List<ICreateAttributeValue>();

        public void Add(ICreateAttributeValue c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(ICreateAttributeValue c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<ICreateAttributeValue> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public class AttributeValueCommands : IAttributeValueCommands
    {
        private List<IAttributeValueCommand> _innerCommands = new List<IAttributeValueCommand>();

        public void Add(IAttributeValueCommand c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(IAttributeValueCommand c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<IAttributeValueCommand> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public static partial class AttributeCommands
    {
    }

}
