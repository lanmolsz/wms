// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Attribute;

namespace Dddml.Wms.Domain.Attribute
{

	public abstract class AttributeEventBase : IAttributeEvent
	{

		public virtual AttributeEventId AttributeEventId { get; set; }

        public virtual string AttributeId
        {
            get { return AttributeEventId.AttributeId; }
            set { AttributeEventId.AttributeId = value; }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		AttributeEventId IGlobalIdentity<AttributeEventId>.GlobalId {
			get
			{
				return this.AttributeEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IAttributeEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected AttributeEventBase()
        {
        }

        protected AttributeEventBase(AttributeEventId stateEventId)
        {
            this.AttributeEventId = stateEventId;
        }

		protected IAttributeValueEventDao AttributeValueEventDao
		{
			get { return ApplicationContext.Current["AttributeValueEventDao"] as IAttributeValueEventDao; }
		}

        protected AttributeValueEventId NewAttributeValueEventId(string value)
        {
            var stateEventId = new AttributeValueEventId(this.AttributeEventId.AttributeId, value, this.AttributeEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IAttributeValueEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IAttributeEvent oe, IAttributeValueEvent e)
		{
			if (!oe.AttributeEventId.AttributeId.Equals(e.AttributeValueEventId.AttributeId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id AttributeId {0} but inner id AttributeId {1}", 
					oe.AttributeEventId.AttributeId, e.AttributeValueEventId.AttributeId);
			}
		}


		protected IAttributeAliasEventDao AttributeAliasEventDao
		{
			get { return ApplicationContext.Current["AttributeAliasEventDao"] as IAttributeAliasEventDao; }
		}

        protected AttributeAliasEventId NewAttributeAliasEventId(string code)
        {
            var stateEventId = new AttributeAliasEventId(this.AttributeEventId.AttributeId, code, this.AttributeEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IAttributeAliasEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IAttributeEvent oe, IAttributeAliasEvent e)
		{
			if (!oe.AttributeEventId.AttributeId.Equals(e.AttributeAliasEventId.AttributeId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id AttributeId {0} but inner id AttributeId {1}", 
					oe.AttributeEventId.AttributeId, e.AttributeAliasEventId.AttributeId);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

    public abstract class AttributeStateEventBase : AttributeEventBase, IAttributeStateEvent
    {

		public virtual string AttributeName { get; set; }

		public virtual string OrganizationId { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? IsMandatory { get; set; }

		public virtual string AttributeValueType { get; set; }

		public virtual int? AttributeValueLength { get; set; }

		public virtual bool? IsList { get; set; }

		public virtual string FieldName { get; set; }

		public virtual string ReferenceId { get; set; }

		public virtual bool? Active { get; set; }

        protected AttributeStateEventBase() : base()
        {
        }

        protected AttributeStateEventBase(AttributeEventId stateEventId) : base(stateEventId)
        {
        }

    }

	public class AttributeStateCreated : AttributeStateEventBase, IAttributeStateCreated, ISaveable
	{
		public AttributeStateCreated () : this(new AttributeEventId())
		{
		}

		public AttributeStateCreated (AttributeEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<AttributeValueEventId, IAttributeValueStateCreated> _attributeValueEvents = new Dictionary<AttributeValueEventId, IAttributeValueStateCreated>();
        
        private IEnumerable<IAttributeValueStateCreated> _readOnlyAttributeValueEvents;

        public virtual IEnumerable<IAttributeValueStateCreated> AttributeValueEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeValueEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeValueEvents != null) { return _readOnlyAttributeValueEvents; }
                    var eventDao = AttributeValueEventDao;
                    var eL = new List<IAttributeValueStateCreated>();
                    foreach (var e in eventDao.FindByAttributeEventId(this.AttributeEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeValueStateCreated)e);
                    }
                    return (_readOnlyAttributeValueEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeValueEvent(e);
                    }
                }
                else { this._attributeValueEvents.Clear(); }
            }
        }
    
		public virtual void AddAttributeValueEvent(IAttributeValueStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeValueEvents[e.AttributeValueEventId] = e;
		}

        public virtual IAttributeValueStateCreated NewAttributeValueStateCreated(string value)
        {
            var stateEvent = new AttributeValueStateCreated(NewAttributeValueEventId(value));
            return stateEvent;
        }

		private Dictionary<AttributeAliasEventId, IAttributeAliasStateCreated> _attributeAliasEvents = new Dictionary<AttributeAliasEventId, IAttributeAliasStateCreated>();
        
        private IEnumerable<IAttributeAliasStateCreated> _readOnlyAttributeAliasEvents;

        public virtual IEnumerable<IAttributeAliasStateCreated> AttributeAliasEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeAliasEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeAliasEvents != null) { return _readOnlyAttributeAliasEvents; }
                    var eventDao = AttributeAliasEventDao;
                    var eL = new List<IAttributeAliasStateCreated>();
                    foreach (var e in eventDao.FindByAttributeEventId(this.AttributeEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeAliasStateCreated)e);
                    }
                    return (_readOnlyAttributeAliasEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeAliasEvent(e);
                    }
                }
                else { this._attributeAliasEvents.Clear(); }
            }
        }
    
		public virtual void AddAttributeAliasEvent(IAttributeAliasStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeAliasEvents[e.AttributeAliasEventId] = e;
		}

        public virtual IAttributeAliasStateCreated NewAttributeAliasStateCreated(string code)
        {
            var stateEvent = new AttributeAliasStateCreated(NewAttributeAliasEventId(code));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeValueStateCreated e in this.AttributeValueEvents) {
				AttributeValueEventDao.Save(e);
			}
			foreach (IAttributeAliasStateCreated e in this.AttributeAliasEvents) {
				AttributeAliasEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class AttributeStateMergePatched : AttributeStateEventBase, IAttributeStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyAttributeNameRemoved { get; set; }

		public virtual bool IsPropertyOrganizationIdRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyIsMandatoryRemoved { get; set; }

		public virtual bool IsPropertyAttributeValueTypeRemoved { get; set; }

		public virtual bool IsPropertyAttributeValueLengthRemoved { get; set; }

		public virtual bool IsPropertyIsListRemoved { get; set; }

		public virtual bool IsPropertyFieldNameRemoved { get; set; }

		public virtual bool IsPropertyReferenceIdRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public AttributeStateMergePatched ()
		{
		}

		public AttributeStateMergePatched (AttributeEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<AttributeValueEventId, IAttributeValueEvent> _attributeValueEvents = new Dictionary<AttributeValueEventId, IAttributeValueEvent>();

        private IEnumerable<IAttributeValueEvent> _readOnlyAttributeValueEvents;
        
        public virtual IEnumerable<IAttributeValueEvent> AttributeValueEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeValueEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeValueEvents != null) { return _readOnlyAttributeValueEvents; }
                    var eventDao = AttributeValueEventDao;
                    var eL = new List<IAttributeValueEvent>();
                    foreach (var e in eventDao.FindByAttributeEventId(this.AttributeEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeValueEvent)e);
                    }
                    return (_readOnlyAttributeValueEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeValueEvent(e);
                    }
                }
                else { this._attributeValueEvents.Clear(); }
            }
        }

		public virtual void AddAttributeValueEvent(IAttributeValueEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeValueEvents[e.AttributeValueEventId] = e;
		}

        public virtual IAttributeValueStateCreated NewAttributeValueStateCreated(string value)
        {
            var stateEvent = new AttributeValueStateCreated(NewAttributeValueEventId(value));
            return stateEvent;
        }

        public virtual IAttributeValueStateMergePatched NewAttributeValueStateMergePatched(string value)
        {
            var stateEvent = new AttributeValueStateMergePatched(NewAttributeValueEventId(value));
            return stateEvent;
        }

        public virtual IAttributeValueStateRemoved NewAttributeValueStateRemoved(string value)
        {
            var stateEvent = new AttributeValueStateRemoved(NewAttributeValueEventId(value));
            return stateEvent;
        }

		private Dictionary<AttributeAliasEventId, IAttributeAliasEvent> _attributeAliasEvents = new Dictionary<AttributeAliasEventId, IAttributeAliasEvent>();

        private IEnumerable<IAttributeAliasEvent> _readOnlyAttributeAliasEvents;
        
        public virtual IEnumerable<IAttributeAliasEvent> AttributeAliasEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeAliasEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeAliasEvents != null) { return _readOnlyAttributeAliasEvents; }
                    var eventDao = AttributeAliasEventDao;
                    var eL = new List<IAttributeAliasEvent>();
                    foreach (var e in eventDao.FindByAttributeEventId(this.AttributeEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeAliasEvent)e);
                    }
                    return (_readOnlyAttributeAliasEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeAliasEvent(e);
                    }
                }
                else { this._attributeAliasEvents.Clear(); }
            }
        }

		public virtual void AddAttributeAliasEvent(IAttributeAliasEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeAliasEvents[e.AttributeAliasEventId] = e;
		}

        public virtual IAttributeAliasStateCreated NewAttributeAliasStateCreated(string code)
        {
            var stateEvent = new AttributeAliasStateCreated(NewAttributeAliasEventId(code));
            return stateEvent;
        }

        public virtual IAttributeAliasStateMergePatched NewAttributeAliasStateMergePatched(string code)
        {
            var stateEvent = new AttributeAliasStateMergePatched(NewAttributeAliasEventId(code));
            return stateEvent;
        }

        public virtual IAttributeAliasStateRemoved NewAttributeAliasStateRemoved(string code)
        {
            var stateEvent = new AttributeAliasStateRemoved(NewAttributeAliasEventId(code));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeValueEvent e in this.AttributeValueEvents) {
				AttributeValueEventDao.Save(e);
			}
			foreach (IAttributeAliasEvent e in this.AttributeAliasEvents) {
				AttributeAliasEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class AttributeStateDeleted : AttributeStateEventBase, IAttributeStateDeleted, ISaveable
	{
		public AttributeStateDeleted ()
		{
		}

		public AttributeStateDeleted (AttributeEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

		private Dictionary<AttributeValueEventId, IAttributeValueStateRemoved> _attributeValueEvents = new Dictionary<AttributeValueEventId, IAttributeValueStateRemoved>();
		
        private IEnumerable<IAttributeValueStateRemoved> _readOnlyAttributeValueEvents;

        public virtual IEnumerable<IAttributeValueStateRemoved> AttributeValueEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeValueEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeValueEvents != null) { return _readOnlyAttributeValueEvents; }
                    var eventDao = AttributeValueEventDao;
                    var eL = new List<IAttributeValueStateRemoved>();
                    foreach (var e in eventDao.FindByAttributeEventId(this.AttributeEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeValueStateRemoved)e);
                    }
                    return (_readOnlyAttributeValueEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeValueEvent(e);
                    }
                }
                else { this._attributeValueEvents.Clear(); }
            }
        }
	
		public virtual void AddAttributeValueEvent(IAttributeValueStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeValueEvents[e.AttributeValueEventId] = e;
		}

        public virtual IAttributeValueStateRemoved NewAttributeValueStateRemoved(string value)
        {
            var stateEvent = new AttributeValueStateRemoved(NewAttributeValueEventId(value));
            return stateEvent;
        }

		private Dictionary<AttributeAliasEventId, IAttributeAliasStateRemoved> _attributeAliasEvents = new Dictionary<AttributeAliasEventId, IAttributeAliasStateRemoved>();
		
        private IEnumerable<IAttributeAliasStateRemoved> _readOnlyAttributeAliasEvents;

        public virtual IEnumerable<IAttributeAliasStateRemoved> AttributeAliasEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeAliasEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeAliasEvents != null) { return _readOnlyAttributeAliasEvents; }
                    var eventDao = AttributeAliasEventDao;
                    var eL = new List<IAttributeAliasStateRemoved>();
                    foreach (var e in eventDao.FindByAttributeEventId(this.AttributeEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeAliasStateRemoved)e);
                    }
                    return (_readOnlyAttributeAliasEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeAliasEvent(e);
                    }
                }
                else { this._attributeAliasEvents.Clear(); }
            }
        }
	
		public virtual void AddAttributeAliasEvent(IAttributeAliasStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeAliasEvents[e.AttributeAliasEventId] = e;
		}

        public virtual IAttributeAliasStateRemoved NewAttributeAliasStateRemoved(string code)
        {
            var stateEvent = new AttributeAliasStateRemoved(NewAttributeAliasEventId(code));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeValueStateRemoved e in this.AttributeValueEvents) {
				AttributeValueEventDao.Save(e);
			}
			foreach (IAttributeAliasStateRemoved e in this.AttributeAliasEvents) {
				AttributeAliasEventDao.Save(e);
			}
		}


	}



}

