// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Attribute;

namespace Dddml.Wms.Domain.Attribute
{

    public class AttributeAliasStates : IAttributeAliasStates
    {
        
		protected IAttributeAliasStateDao AttributeAliasStateDao
		{
			get
			{
				return ApplicationContext.Current["AttributeAliasStateDao"] as IAttributeAliasStateDao;
			}
		}

		private Dictionary<AttributeAliasId, IAttributeAliasState> _loadedAttributeAliasStates = new Dictionary<AttributeAliasId, IAttributeAliasState>();

		private Dictionary<AttributeAliasId, IAttributeAliasState> _removedAttributeAliasStates = new Dictionary<AttributeAliasId, IAttributeAliasState>();

		protected virtual IEnumerable<IAttributeAliasState> LoadedAttributeAliasStates {
			get {
				return this._loadedAttributeAliasStates.Values;
			}
		}

        private IAttributeState _attributeState;

        private IEnumerable<IAttributeAliasState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return AttributeAliasStateDao.FindByAttributeId(_attributeState.AttributeId);
                }
                else
                {
                    return _loadedAttributeAliasStates.Values.Where(s => !(_removedAttributeAliasStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public AttributeAliasStates(IAttributeState outerState)
        {
            this._attributeState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IAttributeAliasState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IAttributeAliasState state)
        {
            this._removedAttributeAliasStates.Add(state.GlobalId, state);
        }

        public virtual IAttributeAliasState Get(string code)
		{
			return Get(code, false, false);
		}

        public virtual IAttributeAliasState Get(string code, bool forCreation)
        {
			return Get(code, forCreation, false);
        }

        public virtual IAttributeAliasState Get(string code, bool forCreation, bool nullAllowed)
        {
            AttributeAliasId globalId = new AttributeAliasId(_attributeState.AttributeId, code);
            if (_loadedAttributeAliasStates.ContainsKey(globalId)) {
                return _loadedAttributeAliasStates[globalId];
            }
            if (forCreation || ForReapplying)
            {
                var state = new AttributeAliasState(ForReapplying);
                state.AttributeAliasId = globalId;
                _loadedAttributeAliasStates.Add(globalId, state);
                return state;
            }
            else
            {
                var state = AttributeAliasStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedAttributeAliasStates.Add(globalId, state);
                }
                return state;
            }
        }

        public virtual void AddToSave(IAttributeAliasState state)
        {
            this._loadedAttributeAliasStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IAttributeAliasState s in this.LoadedAttributeAliasStates) {
                AttributeAliasStateDao.Save(s);
			}
            foreach(IAttributeAliasState s in this._removedAttributeAliasStates.Values)
            {
                AttributeAliasStateDao.Delete(s);
            }
		}

		#endregion


    }



}


