// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Attribute;

namespace Dddml.Wms.Domain.Attribute
{

	public static partial class AttributeAliasStateInterfaceExtension
	{

        public static IAttributeAliasCommand ToCreateOrMergePatchAttributeAlias<TCreateAttributeAlias, TMergePatchAttributeAlias>(this IAttributeAliasState state)
            where TCreateAttributeAlias : ICreateAttributeAlias, new()
            where TMergePatchAttributeAlias : IMergePatchAttributeAlias, new()
        {
            bool bUnsaved = ((IAttributeAliasState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateAttributeAlias<TCreateAttributeAlias>();
            }
            else 
            {
                return state.ToMergePatchAttributeAlias<TMergePatchAttributeAlias>();
            }
        }

        public static TRemoveAttributeAlias ToRemoveAttributeAlias<TRemoveAttributeAlias>(this IAttributeAliasState state)
            where TRemoveAttributeAlias : IRemoveAttributeAlias, new()
        {
            var cmd = new TRemoveAttributeAlias();
            cmd.Code = state.Code;
            return cmd;
        }

        public static TMergePatchAttributeAlias ToMergePatchAttributeAlias<TMergePatchAttributeAlias>(this IAttributeAliasState state)
            where TMergePatchAttributeAlias : IMergePatchAttributeAlias, new()
        {
            var cmd = new TMergePatchAttributeAlias();

            cmd.Code = state.Code;
            cmd.Name = state.Name;
            cmd.Active = ((IAttributeAliasStateProperties)state).Active;
            cmd.AttributeId = state.AttributeId;
            
            if (state.Name == null) { cmd.IsPropertyNameRemoved = true; }
            return cmd;
        }

        public static TCreateAttributeAlias ToCreateAttributeAlias<TCreateAttributeAlias>(this IAttributeAliasState state)
            where TCreateAttributeAlias : ICreateAttributeAlias, new()
        {
            var cmd = new TCreateAttributeAlias();

            cmd.Code = state.Code;
            cmd.Name = state.Name;
            cmd.Active = ((IAttributeAliasStateProperties)state).Active;
            cmd.AttributeId = state.AttributeId;
            return cmd;
        }
		

	}

}

