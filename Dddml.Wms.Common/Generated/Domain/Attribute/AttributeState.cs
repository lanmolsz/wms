// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Attribute;

namespace Dddml.Wms.Domain.Attribute
{

	public partial class AttributeState : AttributeStateProperties, IAttributeState, ISaveable
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get
			{
				return this.AttributeId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IAttributeState.IsUnsaved
        {
            get { return this.Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        private IAttributeValueStates _attributeValues;
      
        public virtual IAttributeValueStates AttributeValues
        {
            get
            {
                return this._attributeValues;
            }
            set
            {
                this._attributeValues = value;
            }
        }


        private IAttributeAliasStates _aliases;
      
        public virtual IAttributeAliasStates Aliases
        {
            get
            {
                return this._aliases;
            }
            set
            {
                this._aliases = value;
            }
        }


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public AttributeState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.AttributeId = ((IAttributeStateEvent)events.First()).StateEventId.AttributeId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.Version += 1;
                }
            }
        }

        public AttributeState() : this(false)
        {
        }

        public AttributeState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            _attributeValues = new AttributeValueStates(this);

            _aliases = new AttributeAliasStates(this);

            InitializeProperties();
        }


		#region Saveable Implements

        public virtual void Save()
        {
            _attributeValues.Save();

            _aliases.Save();

        }


		#endregion


		public virtual void When(IAttributeStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.AttributeName = e.AttributeName;

			this.OrganizationId = e.OrganizationId;

			this.Description = e.Description;

            this.IsMandatory = (e.IsMandatory != null && e.IsMandatory.HasValue) ? e.IsMandatory.Value : default(bool);

			this.AttributeValueType = e.AttributeValueType;

			this.AttributeValueLength = e.AttributeValueLength;

            this.IsList = (e.IsList != null && e.IsList.HasValue) ? e.IsList.Value : default(bool);

			this.FieldName = e.FieldName;

			this.ReferenceId = e.ReferenceId;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;

			foreach (IAttributeValueStateCreated innerEvent in e.AttributeValueEvents) {
				IAttributeValueState innerState = this.AttributeValues.Get(innerEvent.GlobalId.Value, true);
				innerState.Mutate (innerEvent);
			}
			foreach (IAttributeAliasStateCreated innerEvent in e.AttributeAliasEvents) {
				IAttributeAliasState innerState = this.Aliases.Get(innerEvent.GlobalId.Code, true);
				innerState.Mutate (innerEvent);
			}

		}


		public virtual void When(IAttributeStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.AttributeName == null)
			{
				if (e.IsPropertyAttributeNameRemoved)
				{
					this.AttributeName = default(string);
				}
			}
			else
			{
				this.AttributeName = e.AttributeName;
			}

			if (e.OrganizationId == null)
			{
				if (e.IsPropertyOrganizationIdRemoved)
				{
					this.OrganizationId = default(string);
				}
			}
			else
			{
				this.OrganizationId = e.OrganizationId;
			}

			if (e.Description == null)
			{
				if (e.IsPropertyDescriptionRemoved)
				{
					this.Description = default(string);
				}
			}
			else
			{
				this.Description = e.Description;
			}

			if (e.IsMandatory == null)
			{
				if (e.IsPropertyIsMandatoryRemoved)
				{
					this.IsMandatory = default(bool);
				}
			}
			else
			{
				this.IsMandatory = (e.IsMandatory != null && e.IsMandatory.HasValue) ? e.IsMandatory.Value : default(bool);
			}

			if (e.AttributeValueType == null)
			{
				if (e.IsPropertyAttributeValueTypeRemoved)
				{
					this.AttributeValueType = default(string);
				}
			}
			else
			{
				this.AttributeValueType = e.AttributeValueType;
			}

			if (e.AttributeValueLength == null)
			{
				if (e.IsPropertyAttributeValueLengthRemoved)
				{
					this.AttributeValueLength = default(int?);
				}
			}
			else
			{
				this.AttributeValueLength = e.AttributeValueLength;
			}

			if (e.IsList == null)
			{
				if (e.IsPropertyIsListRemoved)
				{
					this.IsList = default(bool);
				}
			}
			else
			{
				this.IsList = (e.IsList != null && e.IsList.HasValue) ? e.IsList.Value : default(bool);
			}

			if (e.FieldName == null)
			{
				if (e.IsPropertyFieldNameRemoved)
				{
					this.FieldName = default(string);
				}
			}
			else
			{
				this.FieldName = e.FieldName;
			}

			if (e.ReferenceId == null)
			{
				if (e.IsPropertyReferenceIdRemoved)
				{
					this.ReferenceId = default(string);
				}
			}
			else
			{
				this.ReferenceId = e.ReferenceId;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


			foreach (IAttributeValueStateEvent innerEvent in e.AttributeValueEvents)
            {
                IAttributeValueState innerState = this.AttributeValues.Get(innerEvent.GlobalId.Value);

                innerState.Mutate(innerEvent);
                var removed = innerEvent as IAttributeValueStateRemoved;
                if (removed != null)
                {
                    this.AttributeValues.Remove(innerState);
                }
          
            }

			foreach (IAttributeAliasStateEvent innerEvent in e.AttributeAliasEvents)
            {
                IAttributeAliasState innerState = this.Aliases.Get(innerEvent.GlobalId.Code);

                innerState.Mutate(innerEvent);
                var removed = innerEvent as IAttributeAliasStateRemoved;
                if (removed != null)
                {
                    this.Aliases.Remove(innerState);
                }
          
            }

		}

		public virtual void When(IAttributeStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

            foreach (var innerState in this.AttributeValues)
            {
                this.AttributeValues.Remove(innerState);
                
                var innerE = e.NewAttributeValueStateRemoved(innerState.Value);
                ((AttributeValueStateEventBase)innerE).CreatedAt = e.CreatedAt;
                ((AttributeValueStateEventBase)innerE).CreatedBy = e.CreatedBy;
                innerState.When(innerE);
                //e.AddAttributeValueEvent(innerE);

            }

            foreach (var innerState in this.Aliases)
            {
                this.Aliases.Remove(innerState);
                
                var innerE = e.NewAttributeAliasStateRemoved(innerState.Code);
                ((AttributeAliasStateEventBase)innerE).CreatedAt = e.CreatedAt;
                ((AttributeAliasStateEventBase)innerE).CreatedBy = e.CreatedBy;
                innerState.When(innerE);
                //e.AddAttributeAliasEvent(innerE);

            }

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IAttributeStateEvent stateEvent)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("Attribute|");

            var stateEntityId = this.AttributeId; // Aggregate Id
            var eventEntityId = stateEvent.StateEventId.AttributeId; // EntityBase.Aggregate.GetStateEventIdPropertyIdName();
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.Version;
            var eventVersion = stateEvent.StateEventId.Version;
            if (stateVersion > eventVersion)//!=
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

}

