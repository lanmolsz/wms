// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Order;

namespace Dddml.Wms.Domain.Order
{

	public abstract class OrderStateEventBase : IOrderStateEvent
	{

		public virtual OrderStateEventId StateEventId { get; set; }

        public virtual string OrderId
        {
            get { return StateEventId.OrderId; }
            set { StateEventId.OrderId = value; }
        }

		public virtual string OrderTypeId { get; set; }

		public virtual string OrderName { get; set; }

		public virtual string ExternalId { get; set; }

		public virtual string SalesChannelEnumId { get; set; }

		public virtual DateTime? OrderDate { get; set; }

		public virtual string Priority { get; set; }

		public virtual DateTime? EntryDate { get; set; }

		public virtual DateTime? PickSheetPrintedDate { get; set; }

		public virtual string StatusId { get; set; }

		public virtual string CurrencyUom { get; set; }

		public virtual string SyncStatusId { get; set; }

		public virtual string BillingAccountId { get; set; }

		public virtual string OriginFacilityId { get; set; }

		public virtual string WebSiteId { get; set; }

		public virtual string ProductStoreId { get; set; }

		public virtual string TerminalId { get; set; }

		public virtual string TransactionId { get; set; }

		public virtual string AutoOrderShoppingListId { get; set; }

		public virtual string NeedsInventoryIssuance { get; set; }

		public virtual string IsRushOrder { get; set; }

		public virtual string InternalCode { get; set; }

		public virtual decimal? RemainingSubTotal { get; set; }

		public virtual decimal? GrandTotal { get; set; }

		public virtual string InvoicePerShipment { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		OrderStateEventId IGlobalIdentity<OrderStateEventId>.GlobalId {
			get
			{
				return this.StateEventId;
			}
		}

        public virtual bool StateEventReadOnly { get; set; }

        bool IOrderStateEvent.ReadOnly
        {
            get
            {
                return this.StateEventReadOnly;
            }
            set
            {
                this.StateEventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected OrderStateEventBase()
        {
        }

        protected OrderStateEventBase(OrderStateEventId stateEventId)
        {
            this.StateEventId = stateEventId;
        }

		protected IOrderItemStateEventDao OrderItemStateEventDao
		{
			get { return ApplicationContext.Current["OrderItemStateEventDao"] as IOrderItemStateEventDao; }
		}

        protected OrderItemStateEventId NewOrderItemStateEventId(string orderItemSeqId)
        {
            var stateEventId = new OrderItemStateEventId(this.StateEventId.OrderId, orderItemSeqId, this.StateEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IOrderItemStateEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IOrderStateEvent oe, IOrderItemStateEvent e)
		{
			if (!oe.StateEventId.OrderId.Equals(e.StateEventId.OrderId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id OrderId {0} but inner id OrderId {1}", 
					oe.StateEventId.OrderId, e.StateEventId.OrderId);
			}
		}



        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class OrderStateCreated : OrderStateEventBase, IOrderStateCreated, ISaveable
	{
		public OrderStateCreated () : this(new OrderStateEventId())
		{
		}

		public OrderStateCreated (OrderStateEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<OrderItemStateEventId, IOrderItemStateCreated> _orderItemEvents = new Dictionary<OrderItemStateEventId, IOrderItemStateCreated>();
        
        private IEnumerable<IOrderItemStateCreated> _readOnlyOrderItemEvents;

        public virtual IEnumerable<IOrderItemStateCreated> OrderItemEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._orderItemEvents.Values;
                }
                else
                {
                    if (_readOnlyOrderItemEvents != null) { return _readOnlyOrderItemEvents; }
                    var eventDao = OrderItemStateEventDao;
                    var eL = new List<IOrderItemStateCreated>();
                    foreach (var e in eventDao.FindByOrderStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IOrderItemStateCreated)e);
                    }
                    return (_readOnlyOrderItemEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddOrderItemEvent(e);
                    }
                }
                else { this._orderItemEvents.Clear(); }
            }
        }
    
		public virtual void AddOrderItemEvent(IOrderItemStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._orderItemEvents[e.StateEventId] = e;
		}

        public virtual IOrderItemStateCreated NewOrderItemStateCreated(string orderItemSeqId)
        {
            var stateEvent = new OrderItemStateCreated(NewOrderItemStateEventId(orderItemSeqId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IOrderItemStateCreated e in this.OrderItemEvents) {
				OrderItemStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class OrderStateMergePatched : OrderStateEventBase, IOrderStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyOrderTypeIdRemoved { get; set; }

		public virtual bool IsPropertyOrderNameRemoved { get; set; }

		public virtual bool IsPropertyExternalIdRemoved { get; set; }

		public virtual bool IsPropertySalesChannelEnumIdRemoved { get; set; }

		public virtual bool IsPropertyOrderDateRemoved { get; set; }

		public virtual bool IsPropertyPriorityRemoved { get; set; }

		public virtual bool IsPropertyEntryDateRemoved { get; set; }

		public virtual bool IsPropertyPickSheetPrintedDateRemoved { get; set; }

		public virtual bool IsPropertyStatusIdRemoved { get; set; }

		public virtual bool IsPropertyCurrencyUomRemoved { get; set; }

		public virtual bool IsPropertySyncStatusIdRemoved { get; set; }

		public virtual bool IsPropertyBillingAccountIdRemoved { get; set; }

		public virtual bool IsPropertyOriginFacilityIdRemoved { get; set; }

		public virtual bool IsPropertyWebSiteIdRemoved { get; set; }

		public virtual bool IsPropertyProductStoreIdRemoved { get; set; }

		public virtual bool IsPropertyTerminalIdRemoved { get; set; }

		public virtual bool IsPropertyTransactionIdRemoved { get; set; }

		public virtual bool IsPropertyAutoOrderShoppingListIdRemoved { get; set; }

		public virtual bool IsPropertyNeedsInventoryIssuanceRemoved { get; set; }

		public virtual bool IsPropertyIsRushOrderRemoved { get; set; }

		public virtual bool IsPropertyInternalCodeRemoved { get; set; }

		public virtual bool IsPropertyRemainingSubTotalRemoved { get; set; }

		public virtual bool IsPropertyGrandTotalRemoved { get; set; }

		public virtual bool IsPropertyInvoicePerShipmentRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public OrderStateMergePatched ()
		{
		}

		public OrderStateMergePatched (OrderStateEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<OrderItemStateEventId, IOrderItemStateEvent> _orderItemEvents = new Dictionary<OrderItemStateEventId, IOrderItemStateEvent>();

        private IEnumerable<IOrderItemStateEvent> _readOnlyOrderItemEvents;
        
        public virtual IEnumerable<IOrderItemStateEvent> OrderItemEvents
        {
            get
            {
                if (!StateEventReadOnly)
                {
                    return this._orderItemEvents.Values;
                }
                else
                {
                    if (_readOnlyOrderItemEvents != null) { return _readOnlyOrderItemEvents; }
                    var eventDao = OrderItemStateEventDao;
                    var eL = new List<IOrderItemStateEvent>();
                    foreach (var e in eventDao.FindByOrderStateEventId(this.StateEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IOrderItemStateEvent)e);
                    }
                    return (_readOnlyOrderItemEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddOrderItemEvent(e);
                    }
                }
                else { this._orderItemEvents.Clear(); }
            }
        }

		public virtual void AddOrderItemEvent(IOrderItemStateEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._orderItemEvents[e.StateEventId] = e;
		}

        public virtual IOrderItemStateCreated NewOrderItemStateCreated(string orderItemSeqId)
        {
            var stateEvent = new OrderItemStateCreated(NewOrderItemStateEventId(orderItemSeqId));
            return stateEvent;
        }

        public virtual IOrderItemStateMergePatched NewOrderItemStateMergePatched(string orderItemSeqId)
        {
            var stateEvent = new OrderItemStateMergePatched(NewOrderItemStateEventId(orderItemSeqId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IOrderItemStateEvent e in this.OrderItemEvents) {
				OrderItemStateEventDao.Save(e);
			}
		}

        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

