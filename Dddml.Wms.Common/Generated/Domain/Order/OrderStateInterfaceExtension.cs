// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Order;

namespace Dddml.Wms.Domain.Order
{

	public static partial class OrderStateInterfaceExtension
	{

        public static IOrderCommand ToCreateOrMergePatchOrder<TCreateOrder, TMergePatchOrder, TCreateOrderItem, TMergePatchOrderItem>(this IOrderState state)
            where TCreateOrder : ICreateOrder, new()
            where TMergePatchOrder : IMergePatchOrder, new()
            where TCreateOrderItem : ICreateOrderItem, new()
            where TMergePatchOrderItem : IMergePatchOrderItem, new()
        {
            bool bUnsaved = ((IOrderState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateOrder<TCreateOrder, TCreateOrderItem>();
            }
            else 
            {
                return state.ToMergePatchOrder<TMergePatchOrder, TCreateOrderItem, TMergePatchOrderItem>();
            }
        }

        public static TDeleteOrder ToDeleteOrder<TDeleteOrder>(this IOrderState state)
            where TDeleteOrder : IDeleteOrder, new()
        {
            var cmd = new TDeleteOrder();
            cmd.OrderId = state.OrderId;
            cmd.Version = ((IOrderStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchOrder ToMergePatchOrder<TMergePatchOrder, TCreateOrderItem, TMergePatchOrderItem>(this IOrderState state)
            where TMergePatchOrder : IMergePatchOrder, new()
            where TCreateOrderItem : ICreateOrderItem, new()
            where TMergePatchOrderItem : IMergePatchOrderItem, new()
        {
            var cmd = new TMergePatchOrder();

            cmd.Version = ((IOrderStateProperties)state).Version;

            cmd.OrderId = state.OrderId;
            cmd.OrderTypeId = state.OrderTypeId;
            cmd.OrderName = state.OrderName;
            cmd.ExternalId = state.ExternalId;
            cmd.SalesChannelEnumId = state.SalesChannelEnumId;
            cmd.OrderDate = state.OrderDate;
            cmd.Priority = state.Priority;
            cmd.EntryDate = state.EntryDate;
            cmd.PickSheetPrintedDate = state.PickSheetPrintedDate;
            cmd.StatusId = state.StatusId;
            cmd.CurrencyUom = state.CurrencyUom;
            cmd.SyncStatusId = state.SyncStatusId;
            cmd.BillingAccountId = state.BillingAccountId;
            cmd.OriginFacilityId = state.OriginFacilityId;
            cmd.WebSiteId = state.WebSiteId;
            cmd.ProductStoreId = state.ProductStoreId;
            cmd.TerminalId = state.TerminalId;
            cmd.TransactionId = state.TransactionId;
            cmd.AutoOrderShoppingListId = state.AutoOrderShoppingListId;
            cmd.NeedsInventoryIssuance = state.NeedsInventoryIssuance;
            cmd.IsRushOrder = state.IsRushOrder;
            cmd.InternalCode = state.InternalCode;
            cmd.RemainingSubTotal = state.RemainingSubTotal;
            cmd.GrandTotal = state.GrandTotal;
            cmd.InvoicePerShipment = state.InvoicePerShipment;
            cmd.Active = ((IOrderStateProperties)state).Active;
            
            if (state.OrderTypeId == null) { cmd.IsPropertyOrderTypeIdRemoved = true; }
            if (state.OrderName == null) { cmd.IsPropertyOrderNameRemoved = true; }
            if (state.ExternalId == null) { cmd.IsPropertyExternalIdRemoved = true; }
            if (state.SalesChannelEnumId == null) { cmd.IsPropertySalesChannelEnumIdRemoved = true; }
            if (state.OrderDate == null) { cmd.IsPropertyOrderDateRemoved = true; }
            if (state.Priority == null) { cmd.IsPropertyPriorityRemoved = true; }
            if (state.EntryDate == null) { cmd.IsPropertyEntryDateRemoved = true; }
            if (state.PickSheetPrintedDate == null) { cmd.IsPropertyPickSheetPrintedDateRemoved = true; }
            if (state.StatusId == null) { cmd.IsPropertyStatusIdRemoved = true; }
            if (state.CurrencyUom == null) { cmd.IsPropertyCurrencyUomRemoved = true; }
            if (state.SyncStatusId == null) { cmd.IsPropertySyncStatusIdRemoved = true; }
            if (state.BillingAccountId == null) { cmd.IsPropertyBillingAccountIdRemoved = true; }
            if (state.OriginFacilityId == null) { cmd.IsPropertyOriginFacilityIdRemoved = true; }
            if (state.WebSiteId == null) { cmd.IsPropertyWebSiteIdRemoved = true; }
            if (state.ProductStoreId == null) { cmd.IsPropertyProductStoreIdRemoved = true; }
            if (state.TerminalId == null) { cmd.IsPropertyTerminalIdRemoved = true; }
            if (state.TransactionId == null) { cmd.IsPropertyTransactionIdRemoved = true; }
            if (state.AutoOrderShoppingListId == null) { cmd.IsPropertyAutoOrderShoppingListIdRemoved = true; }
            if (state.NeedsInventoryIssuance == null) { cmd.IsPropertyNeedsInventoryIssuanceRemoved = true; }
            if (state.IsRushOrder == null) { cmd.IsPropertyIsRushOrderRemoved = true; }
            if (state.InternalCode == null) { cmd.IsPropertyInternalCodeRemoved = true; }
            if (state.RemainingSubTotal == null) { cmd.IsPropertyRemainingSubTotalRemoved = true; }
            if (state.GrandTotal == null) { cmd.IsPropertyGrandTotalRemoved = true; }
            if (state.InvoicePerShipment == null) { cmd.IsPropertyInvoicePerShipmentRemoved = true; }
            foreach (var d in state.OrderItems)
            {
                var c = d.ToCreateOrMergePatchOrderItem<TCreateOrderItem, TMergePatchOrderItem>();
                cmd.OrderItemCommands.Add(c);
            }
            return cmd;
        }

        public static TCreateOrder ToCreateOrder<TCreateOrder, TCreateOrderItem>(this IOrderState state)
            where TCreateOrder : ICreateOrder, new()
            where TCreateOrderItem : ICreateOrderItem, new()
        {
            var cmd = new TCreateOrder();

            cmd.Version = ((IOrderStateProperties)state).Version;

            cmd.OrderId = state.OrderId;
            cmd.OrderTypeId = state.OrderTypeId;
            cmd.OrderName = state.OrderName;
            cmd.ExternalId = state.ExternalId;
            cmd.SalesChannelEnumId = state.SalesChannelEnumId;
            cmd.OrderDate = state.OrderDate;
            cmd.Priority = state.Priority;
            cmd.EntryDate = state.EntryDate;
            cmd.PickSheetPrintedDate = state.PickSheetPrintedDate;
            cmd.StatusId = state.StatusId;
            cmd.CurrencyUom = state.CurrencyUom;
            cmd.SyncStatusId = state.SyncStatusId;
            cmd.BillingAccountId = state.BillingAccountId;
            cmd.OriginFacilityId = state.OriginFacilityId;
            cmd.WebSiteId = state.WebSiteId;
            cmd.ProductStoreId = state.ProductStoreId;
            cmd.TerminalId = state.TerminalId;
            cmd.TransactionId = state.TransactionId;
            cmd.AutoOrderShoppingListId = state.AutoOrderShoppingListId;
            cmd.NeedsInventoryIssuance = state.NeedsInventoryIssuance;
            cmd.IsRushOrder = state.IsRushOrder;
            cmd.InternalCode = state.InternalCode;
            cmd.RemainingSubTotal = state.RemainingSubTotal;
            cmd.GrandTotal = state.GrandTotal;
            cmd.InvoicePerShipment = state.InvoicePerShipment;
            cmd.Active = ((IOrderStateProperties)state).Active;
            foreach (var d in state.OrderItems)
            {
                var c = d.ToCreateOrderItem<TCreateOrderItem>();
                cmd.OrderItems.Add(c);
            }
            return cmd;
        }
		

	}

}

