// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Order;
using Dddml.Wms.Domain.PartyRole;

namespace Dddml.Wms.Domain.Order
{

	public static partial class OrderRoleStateInterfaceExtension
	{

        public static IOrderRoleCommand ToCreateOrMergePatchOrderRole<TCreateOrderRole, TMergePatchOrderRole>(this IOrderRoleState state)
            where TCreateOrderRole : ICreateOrderRole, new()
            where TMergePatchOrderRole : IMergePatchOrderRole, new()
        {
            bool bUnsaved = ((IOrderRoleState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateOrderRole<TCreateOrderRole>();
            }
            else 
            {
                return state.ToMergePatchOrderRole<TMergePatchOrderRole>();
            }
        }

        public static TRemoveOrderRole ToRemoveOrderRole<TRemoveOrderRole>(this IOrderRoleState state)
            where TRemoveOrderRole : IRemoveOrderRole, new()
        {
            var cmd = new TRemoveOrderRole();
            cmd.PartyRoleId = state.PartyRoleId;
            return cmd;
        }

        public static TMergePatchOrderRole ToMergePatchOrderRole<TMergePatchOrderRole>(this IOrderRoleState state)
            where TMergePatchOrderRole : IMergePatchOrderRole, new()
        {
            var cmd = new TMergePatchOrderRole();

            cmd.PartyRoleId = state.PartyRoleId;
            cmd.Active = ((IOrderRoleStateProperties)state).Active;
            cmd.OrderId = state.OrderId;
            
            return cmd;
        }

        public static TCreateOrderRole ToCreateOrderRole<TCreateOrderRole>(this IOrderRoleState state)
            where TCreateOrderRole : ICreateOrderRole, new()
        {
            var cmd = new TCreateOrderRole();

            cmd.PartyRoleId = state.PartyRoleId;
            cmd.Active = ((IOrderRoleStateProperties)state).Active;
            cmd.OrderId = state.OrderId;
            return cmd;
        }
		

	}

}

