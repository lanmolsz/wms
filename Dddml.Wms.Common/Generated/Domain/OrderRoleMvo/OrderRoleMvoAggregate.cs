// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderRoleMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderRoleMvo;
using Dddml.Wms.Domain.Order;

namespace Dddml.Wms.Domain.OrderRoleMvo
{
    public partial class OrderRoleMvoAggregate : AggregateBase, IOrderRoleMvoAggregate
    {

        readonly IOrderRoleMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IOrderRoleMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        OrderRoleId IGlobalIdentity<OrderRoleId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public OrderRoleMvoAggregate(IOrderRoleMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IOrderRoleMvoStateProperties)_state).OrderVersion == OrderRoleMvoState.VersionZero)
            {
                if (IsCommandCreate((IOrderRoleMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IOrderRoleMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IOrderRoleMvoCommand c)
        {
            return c.OrderVersion == OrderRoleMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateOrderRoleMvo c)
        {
            IOrderRoleMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchOrderRoleMvo c)
        {
            IOrderRoleMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteOrderRoleMvo c)
        {
            IOrderRoleMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IOrderRoleMvoStateCreated Map(ICreateOrderRoleMvo c)
        {
			var stateEventId = new OrderRoleMvoEventId(c.OrderRoleId, c.OrderVersion);
            IOrderRoleMvoStateCreated e = NewOrderRoleMvoStateCreated(stateEventId);
		
            e.Version = c.Version;
            e.Active = c.Active;
            e.OrderOrderTypeId = c.OrderOrderTypeId;
            e.OrderOrderName = c.OrderOrderName;
            e.OrderExternalId = c.OrderExternalId;
            e.OrderSalesChannelEnumId = c.OrderSalesChannelEnumId;
            e.OrderOrderDate = c.OrderOrderDate;
            e.OrderPriority = c.OrderPriority;
            e.OrderEntryDate = c.OrderEntryDate;
            e.OrderPickSheetPrintedDate = c.OrderPickSheetPrintedDate;
            e.OrderStatusId = c.OrderStatusId;
            e.OrderCurrencyUom = c.OrderCurrencyUom;
            e.OrderSyncStatusId = c.OrderSyncStatusId;
            e.OrderBillingAccountId = c.OrderBillingAccountId;
            e.OrderOriginFacilityId = c.OrderOriginFacilityId;
            e.OrderWebSiteId = c.OrderWebSiteId;
            e.OrderProductStoreId = c.OrderProductStoreId;
            e.OrderTerminalId = c.OrderTerminalId;
            e.OrderTransactionId = c.OrderTransactionId;
            e.OrderAutoOrderShoppingListId = c.OrderAutoOrderShoppingListId;
            e.OrderNeedsInventoryIssuance = c.OrderNeedsInventoryIssuance;
            e.OrderIsRushOrder = c.OrderIsRushOrder;
            e.OrderInternalCode = c.OrderInternalCode;
            e.OrderRemainingSubTotal = c.OrderRemainingSubTotal;
            e.OrderGrandTotal = c.OrderGrandTotal;
            e.OrderInvoicePerShipment = c.OrderInvoicePerShipment;
            e.OrderCreatedBy = c.OrderCreatedBy;
            e.OrderCreatedAt = c.OrderCreatedAt;
            e.OrderUpdatedBy = c.OrderUpdatedBy;
            e.OrderUpdatedAt = c.OrderUpdatedAt;
            e.OrderActive = c.OrderActive;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var orderVersion = c.OrderVersion;


            return e;
        }

        protected virtual IOrderRoleMvoStateMergePatched Map(IMergePatchOrderRoleMvo c)
        {
			var stateEventId = new OrderRoleMvoEventId(c.OrderRoleId, c.OrderVersion);
            IOrderRoleMvoStateMergePatched e = NewOrderRoleMvoStateMergePatched(stateEventId);

            e.Version = c.Version;
            e.Active = c.Active;
            e.OrderOrderTypeId = c.OrderOrderTypeId;
            e.OrderOrderName = c.OrderOrderName;
            e.OrderExternalId = c.OrderExternalId;
            e.OrderSalesChannelEnumId = c.OrderSalesChannelEnumId;
            e.OrderOrderDate = c.OrderOrderDate;
            e.OrderPriority = c.OrderPriority;
            e.OrderEntryDate = c.OrderEntryDate;
            e.OrderPickSheetPrintedDate = c.OrderPickSheetPrintedDate;
            e.OrderStatusId = c.OrderStatusId;
            e.OrderCurrencyUom = c.OrderCurrencyUom;
            e.OrderSyncStatusId = c.OrderSyncStatusId;
            e.OrderBillingAccountId = c.OrderBillingAccountId;
            e.OrderOriginFacilityId = c.OrderOriginFacilityId;
            e.OrderWebSiteId = c.OrderWebSiteId;
            e.OrderProductStoreId = c.OrderProductStoreId;
            e.OrderTerminalId = c.OrderTerminalId;
            e.OrderTransactionId = c.OrderTransactionId;
            e.OrderAutoOrderShoppingListId = c.OrderAutoOrderShoppingListId;
            e.OrderNeedsInventoryIssuance = c.OrderNeedsInventoryIssuance;
            e.OrderIsRushOrder = c.OrderIsRushOrder;
            e.OrderInternalCode = c.OrderInternalCode;
            e.OrderRemainingSubTotal = c.OrderRemainingSubTotal;
            e.OrderGrandTotal = c.OrderGrandTotal;
            e.OrderInvoicePerShipment = c.OrderInvoicePerShipment;
            e.OrderCreatedBy = c.OrderCreatedBy;
            e.OrderCreatedAt = c.OrderCreatedAt;
            e.OrderUpdatedBy = c.OrderUpdatedBy;
            e.OrderUpdatedAt = c.OrderUpdatedAt;
            e.OrderActive = c.OrderActive;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyOrderOrderTypeIdRemoved = c.IsPropertyOrderOrderTypeIdRemoved;
            e.IsPropertyOrderOrderNameRemoved = c.IsPropertyOrderOrderNameRemoved;
            e.IsPropertyOrderExternalIdRemoved = c.IsPropertyOrderExternalIdRemoved;
            e.IsPropertyOrderSalesChannelEnumIdRemoved = c.IsPropertyOrderSalesChannelEnumIdRemoved;
            e.IsPropertyOrderOrderDateRemoved = c.IsPropertyOrderOrderDateRemoved;
            e.IsPropertyOrderPriorityRemoved = c.IsPropertyOrderPriorityRemoved;
            e.IsPropertyOrderEntryDateRemoved = c.IsPropertyOrderEntryDateRemoved;
            e.IsPropertyOrderPickSheetPrintedDateRemoved = c.IsPropertyOrderPickSheetPrintedDateRemoved;
            e.IsPropertyOrderStatusIdRemoved = c.IsPropertyOrderStatusIdRemoved;
            e.IsPropertyOrderCurrencyUomRemoved = c.IsPropertyOrderCurrencyUomRemoved;
            e.IsPropertyOrderSyncStatusIdRemoved = c.IsPropertyOrderSyncStatusIdRemoved;
            e.IsPropertyOrderBillingAccountIdRemoved = c.IsPropertyOrderBillingAccountIdRemoved;
            e.IsPropertyOrderOriginFacilityIdRemoved = c.IsPropertyOrderOriginFacilityIdRemoved;
            e.IsPropertyOrderWebSiteIdRemoved = c.IsPropertyOrderWebSiteIdRemoved;
            e.IsPropertyOrderProductStoreIdRemoved = c.IsPropertyOrderProductStoreIdRemoved;
            e.IsPropertyOrderTerminalIdRemoved = c.IsPropertyOrderTerminalIdRemoved;
            e.IsPropertyOrderTransactionIdRemoved = c.IsPropertyOrderTransactionIdRemoved;
            e.IsPropertyOrderAutoOrderShoppingListIdRemoved = c.IsPropertyOrderAutoOrderShoppingListIdRemoved;
            e.IsPropertyOrderNeedsInventoryIssuanceRemoved = c.IsPropertyOrderNeedsInventoryIssuanceRemoved;
            e.IsPropertyOrderIsRushOrderRemoved = c.IsPropertyOrderIsRushOrderRemoved;
            e.IsPropertyOrderInternalCodeRemoved = c.IsPropertyOrderInternalCodeRemoved;
            e.IsPropertyOrderRemainingSubTotalRemoved = c.IsPropertyOrderRemainingSubTotalRemoved;
            e.IsPropertyOrderGrandTotalRemoved = c.IsPropertyOrderGrandTotalRemoved;
            e.IsPropertyOrderInvoicePerShipmentRemoved = c.IsPropertyOrderInvoicePerShipmentRemoved;
            e.IsPropertyOrderCreatedByRemoved = c.IsPropertyOrderCreatedByRemoved;
            e.IsPropertyOrderCreatedAtRemoved = c.IsPropertyOrderCreatedAtRemoved;
            e.IsPropertyOrderUpdatedByRemoved = c.IsPropertyOrderUpdatedByRemoved;
            e.IsPropertyOrderUpdatedAtRemoved = c.IsPropertyOrderUpdatedAtRemoved;
            e.IsPropertyOrderActiveRemoved = c.IsPropertyOrderActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var orderVersion = c.OrderVersion;


            return e;
        }

        protected virtual IOrderRoleMvoStateDeleted Map(IDeleteOrderRoleMvo c)
        {
			var stateEventId = new OrderRoleMvoEventId(c.OrderRoleId, c.OrderVersion);
            IOrderRoleMvoStateDeleted e = NewOrderRoleMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected OrderRoleMvoStateCreated NewOrderRoleMvoStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderRoleMvoEventId(_state.OrderRoleId, version);
            var e = NewOrderRoleMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected OrderRoleMvoStateMergePatched NewOrderRoleMvoStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderRoleMvoEventId(_state.OrderRoleId, version);
            var e = NewOrderRoleMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected OrderRoleMvoStateDeleted NewOrderRoleMvoStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderRoleMvoEventId(_state.OrderRoleId, version);
            var e = NewOrderRoleMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private OrderRoleMvoStateCreated NewOrderRoleMvoStateCreated(OrderRoleMvoEventId stateEventId)
		{
			return new OrderRoleMvoStateCreated(stateEventId);			
		}

        private OrderRoleMvoStateMergePatched NewOrderRoleMvoStateMergePatched(OrderRoleMvoEventId stateEventId)
		{
			return new OrderRoleMvoStateMergePatched(stateEventId);
		}

        private OrderRoleMvoStateDeleted NewOrderRoleMvoStateDeleted(OrderRoleMvoEventId stateEventId)
		{
			return new OrderRoleMvoStateDeleted(stateEventId);
		}
    }

}

