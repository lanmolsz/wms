// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderRoleMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderRoleMvo;
using Dddml.Wms.Domain.Order;

namespace Dddml.Wms.Domain.OrderRoleMvo
{

	public static partial class OrderRoleMvoStateInterfaceExtension
	{

        public static IOrderRoleMvoCommand ToCreateOrMergePatchOrderRoleMvo<TCreateOrderRoleMvo, TMergePatchOrderRoleMvo>(this IOrderRoleMvoState state)
            where TCreateOrderRoleMvo : ICreateOrderRoleMvo, new()
            where TMergePatchOrderRoleMvo : IMergePatchOrderRoleMvo, new()
        {
            bool bUnsaved = ((IOrderRoleMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateOrderRoleMvo<TCreateOrderRoleMvo>();
            }
            else 
            {
                return state.ToMergePatchOrderRoleMvo<TMergePatchOrderRoleMvo>();
            }
        }

        public static TDeleteOrderRoleMvo ToDeleteOrderRoleMvo<TDeleteOrderRoleMvo>(this IOrderRoleMvoState state)
            where TDeleteOrderRoleMvo : IDeleteOrderRoleMvo, new()
        {
            var cmd = new TDeleteOrderRoleMvo();
            cmd.OrderRoleId = state.OrderRoleId;
            cmd.OrderVersion = ((IOrderRoleMvoStateProperties)state).OrderVersion;

            return cmd;
        }

        public static TMergePatchOrderRoleMvo ToMergePatchOrderRoleMvo<TMergePatchOrderRoleMvo>(this IOrderRoleMvoState state)
            where TMergePatchOrderRoleMvo : IMergePatchOrderRoleMvo, new()
        {
            var cmd = new TMergePatchOrderRoleMvo();

            cmd.OrderVersion = ((IOrderRoleMvoStateProperties)state).OrderVersion;

            cmd.OrderRoleId = state.OrderRoleId;
            cmd.Version = ((IOrderRoleMvoStateProperties)state).Version;
            cmd.Active = ((IOrderRoleMvoStateProperties)state).Active;
            cmd.OrderOrderTypeId = state.OrderOrderTypeId;
            cmd.OrderOrderName = state.OrderOrderName;
            cmd.OrderExternalId = state.OrderExternalId;
            cmd.OrderSalesChannelEnumId = state.OrderSalesChannelEnumId;
            cmd.OrderOrderDate = state.OrderOrderDate;
            cmd.OrderPriority = state.OrderPriority;
            cmd.OrderEntryDate = state.OrderEntryDate;
            cmd.OrderPickSheetPrintedDate = state.OrderPickSheetPrintedDate;
            cmd.OrderStatusId = state.OrderStatusId;
            cmd.OrderCurrencyUom = state.OrderCurrencyUom;
            cmd.OrderSyncStatusId = state.OrderSyncStatusId;
            cmd.OrderBillingAccountId = state.OrderBillingAccountId;
            cmd.OrderOriginFacilityId = state.OrderOriginFacilityId;
            cmd.OrderWebSiteId = state.OrderWebSiteId;
            cmd.OrderProductStoreId = state.OrderProductStoreId;
            cmd.OrderTerminalId = state.OrderTerminalId;
            cmd.OrderTransactionId = state.OrderTransactionId;
            cmd.OrderAutoOrderShoppingListId = state.OrderAutoOrderShoppingListId;
            cmd.OrderNeedsInventoryIssuance = state.OrderNeedsInventoryIssuance;
            cmd.OrderIsRushOrder = state.OrderIsRushOrder;
            cmd.OrderInternalCode = state.OrderInternalCode;
            cmd.OrderRemainingSubTotal = state.OrderRemainingSubTotal;
            cmd.OrderGrandTotal = state.OrderGrandTotal;
            cmd.OrderInvoicePerShipment = state.OrderInvoicePerShipment;
            cmd.OrderCreatedBy = state.OrderCreatedBy;
            cmd.OrderCreatedAt = state.OrderCreatedAt;
            cmd.OrderUpdatedBy = state.OrderUpdatedBy;
            cmd.OrderUpdatedAt = state.OrderUpdatedAt;
            cmd.OrderActive = state.OrderActive;
            
            if (state.OrderOrderTypeId == null) { cmd.IsPropertyOrderOrderTypeIdRemoved = true; }
            if (state.OrderOrderName == null) { cmd.IsPropertyOrderOrderNameRemoved = true; }
            if (state.OrderExternalId == null) { cmd.IsPropertyOrderExternalIdRemoved = true; }
            if (state.OrderSalesChannelEnumId == null) { cmd.IsPropertyOrderSalesChannelEnumIdRemoved = true; }
            if (state.OrderOrderDate == null) { cmd.IsPropertyOrderOrderDateRemoved = true; }
            if (state.OrderPriority == null) { cmd.IsPropertyOrderPriorityRemoved = true; }
            if (state.OrderEntryDate == null) { cmd.IsPropertyOrderEntryDateRemoved = true; }
            if (state.OrderPickSheetPrintedDate == null) { cmd.IsPropertyOrderPickSheetPrintedDateRemoved = true; }
            if (state.OrderStatusId == null) { cmd.IsPropertyOrderStatusIdRemoved = true; }
            if (state.OrderCurrencyUom == null) { cmd.IsPropertyOrderCurrencyUomRemoved = true; }
            if (state.OrderSyncStatusId == null) { cmd.IsPropertyOrderSyncStatusIdRemoved = true; }
            if (state.OrderBillingAccountId == null) { cmd.IsPropertyOrderBillingAccountIdRemoved = true; }
            if (state.OrderOriginFacilityId == null) { cmd.IsPropertyOrderOriginFacilityIdRemoved = true; }
            if (state.OrderWebSiteId == null) { cmd.IsPropertyOrderWebSiteIdRemoved = true; }
            if (state.OrderProductStoreId == null) { cmd.IsPropertyOrderProductStoreIdRemoved = true; }
            if (state.OrderTerminalId == null) { cmd.IsPropertyOrderTerminalIdRemoved = true; }
            if (state.OrderTransactionId == null) { cmd.IsPropertyOrderTransactionIdRemoved = true; }
            if (state.OrderAutoOrderShoppingListId == null) { cmd.IsPropertyOrderAutoOrderShoppingListIdRemoved = true; }
            if (state.OrderNeedsInventoryIssuance == null) { cmd.IsPropertyOrderNeedsInventoryIssuanceRemoved = true; }
            if (state.OrderIsRushOrder == null) { cmd.IsPropertyOrderIsRushOrderRemoved = true; }
            if (state.OrderInternalCode == null) { cmd.IsPropertyOrderInternalCodeRemoved = true; }
            if (state.OrderRemainingSubTotal == null) { cmd.IsPropertyOrderRemainingSubTotalRemoved = true; }
            if (state.OrderGrandTotal == null) { cmd.IsPropertyOrderGrandTotalRemoved = true; }
            if (state.OrderInvoicePerShipment == null) { cmd.IsPropertyOrderInvoicePerShipmentRemoved = true; }
            if (state.OrderCreatedBy == null) { cmd.IsPropertyOrderCreatedByRemoved = true; }
            if (state.OrderUpdatedBy == null) { cmd.IsPropertyOrderUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateOrderRoleMvo ToCreateOrderRoleMvo<TCreateOrderRoleMvo>(this IOrderRoleMvoState state)
            where TCreateOrderRoleMvo : ICreateOrderRoleMvo, new()
        {
            var cmd = new TCreateOrderRoleMvo();

            cmd.OrderVersion = ((IOrderRoleMvoStateProperties)state).OrderVersion;

            cmd.OrderRoleId = state.OrderRoleId;
            cmd.Version = ((IOrderRoleMvoStateProperties)state).Version;
            cmd.Active = ((IOrderRoleMvoStateProperties)state).Active;
            cmd.OrderOrderTypeId = state.OrderOrderTypeId;
            cmd.OrderOrderName = state.OrderOrderName;
            cmd.OrderExternalId = state.OrderExternalId;
            cmd.OrderSalesChannelEnumId = state.OrderSalesChannelEnumId;
            cmd.OrderOrderDate = state.OrderOrderDate;
            cmd.OrderPriority = state.OrderPriority;
            cmd.OrderEntryDate = state.OrderEntryDate;
            cmd.OrderPickSheetPrintedDate = state.OrderPickSheetPrintedDate;
            cmd.OrderStatusId = state.OrderStatusId;
            cmd.OrderCurrencyUom = state.OrderCurrencyUom;
            cmd.OrderSyncStatusId = state.OrderSyncStatusId;
            cmd.OrderBillingAccountId = state.OrderBillingAccountId;
            cmd.OrderOriginFacilityId = state.OrderOriginFacilityId;
            cmd.OrderWebSiteId = state.OrderWebSiteId;
            cmd.OrderProductStoreId = state.OrderProductStoreId;
            cmd.OrderTerminalId = state.OrderTerminalId;
            cmd.OrderTransactionId = state.OrderTransactionId;
            cmd.OrderAutoOrderShoppingListId = state.OrderAutoOrderShoppingListId;
            cmd.OrderNeedsInventoryIssuance = state.OrderNeedsInventoryIssuance;
            cmd.OrderIsRushOrder = state.OrderIsRushOrder;
            cmd.OrderInternalCode = state.OrderInternalCode;
            cmd.OrderRemainingSubTotal = state.OrderRemainingSubTotal;
            cmd.OrderGrandTotal = state.OrderGrandTotal;
            cmd.OrderInvoicePerShipment = state.OrderInvoicePerShipment;
            cmd.OrderCreatedBy = state.OrderCreatedBy;
            cmd.OrderCreatedAt = state.OrderCreatedAt;
            cmd.OrderUpdatedBy = state.OrderUpdatedBy;
            cmd.OrderUpdatedAt = state.OrderUpdatedAt;
            cmd.OrderActive = state.OrderActive;
            return cmd;
        }
		

	}

}

