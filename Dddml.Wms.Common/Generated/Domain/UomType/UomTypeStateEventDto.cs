// <autogenerated>
//   This file was generated by T4 code generator GenerateUomTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.UomType;

namespace Dddml.Wms.Domain.UomType
{

	public abstract class UomTypeStateEventDtoBase : IEventDto, IUomTypeStateCreated, IUomTypeStateMergePatched, IUomTypeStateDeleted
	{

        private UomTypeEventId _uomTypeEventId;

		protected internal virtual UomTypeEventId UomTypeEventId 
        {
            get 
            {
                if (_uomTypeEventId == null) { _uomTypeEventId = new UomTypeEventId(); }
                return _uomTypeEventId;
            }
            set
            {
                _uomTypeEventId = value;
            }
        }

        public virtual string UomTypeId
        {
            get { return UomTypeEventId.UomTypeId; }
            set { UomTypeEventId.UomTypeId = value; }
        }

        public virtual long Version
        {
            get { return UomTypeEventId.Version; }
            set { UomTypeEventId.Version = value; }
        }

		public virtual string ParentTypeId { get; set; }

		public virtual string HasTable { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		UomTypeEventId IGlobalIdentity<UomTypeEventId>.GlobalId {
			get 
			{
				return this.UomTypeEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IUomTypeEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }

		public virtual bool? IsPropertyParentTypeIdRemoved { get; set; }

        bool IUomTypeStateMergePatched.IsPropertyParentTypeIdRemoved
        {
            get 
            {
                var b = this.IsPropertyParentTypeIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyParentTypeIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyHasTableRemoved { get; set; }

        bool IUomTypeStateMergePatched.IsPropertyHasTableRemoved
        {
            get 
            {
                var b = this.IsPropertyHasTableRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyHasTableRemoved = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IUomTypeStateMergePatched.IsPropertyDescriptionRemoved
        {
            get 
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IUomTypeStateMergePatched.IsPropertyActiveRemoved
        {
            get 
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        UomTypeEventId IUomTypeEvent.UomTypeEventId
        {
            get { return this.UomTypeEventId; }
        }

        protected UomTypeStateEventDtoBase()
        {
        }

        protected UomTypeStateEventDtoBase(UomTypeEventId stateEventId)
        {
            this.UomTypeEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IEventDto.EventType 
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}


    public class UomTypeStateCreatedOrMergePatchedOrDeletedDto : UomTypeStateEventDtoBase
    {
        private string _eventType;

        public virtual string EventType
        {
            get { return _eventType; }
            set { _eventType = value; }
        }

        protected override string GetEventType()
        {
            return this._eventType;
        }

    }



	public class UomTypeStateCreatedDto : UomTypeStateCreatedOrMergePatchedOrDeletedDto
	{
		public UomTypeStateCreatedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class UomTypeStateMergePatchedDto : UomTypeStateCreatedOrMergePatchedOrDeletedDto
	{
		public UomTypeStateMergePatchedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class UomTypeStateDeletedDto : UomTypeStateCreatedOrMergePatchedOrDeletedDto
	{
		public UomTypeStateDeletedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

	}


    public partial class UomTypeStateCreatedOrMergePatchedOrDeletedDtos : IEnumerable<IUomTypeStateCreated>, IEnumerable<IUomTypeStateMergePatched>, IEnumerable<IUomTypeStateDeleted>
    {
        private List<UomTypeStateCreatedOrMergePatchedOrDeletedDto> _innerStateEvents = new List<UomTypeStateCreatedOrMergePatchedOrDeletedDto>();

        public virtual UomTypeStateCreatedOrMergePatchedOrDeletedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<UomTypeStateCreatedOrMergePatchedOrDeletedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IUomTypeStateCreated> IEnumerable<IUomTypeStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IUomTypeStateMergePatched> IEnumerable<IUomTypeStateMergePatched>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IUomTypeStateDeleted> IEnumerable<IUomTypeStateDeleted>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        public void AddUomTypeEvent(IUomTypeStateCreated e)
        {
            _innerStateEvents.Add((UomTypeStateCreatedDto)e);
        }

        public void AddUomTypeEvent(IUomTypeEvent e)
        {
            _innerStateEvents.Add((UomTypeStateCreatedOrMergePatchedOrDeletedDto)e);
        }

        public void AddUomTypeEvent(IUomTypeStateDeleted e)
        {
            _innerStateEvents.Add((UomTypeStateDeletedDto)e);
        }

    }


}

