// <autogenerated>
//   This file was generated by T4 code generator GenerateDocumentTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DocumentType;

namespace Dddml.Wms.Domain.DocumentType
{

	public static partial class DocumentTypeStateInterfaceExtension
	{

        public static IDocumentTypeCommand ToCreateOrMergePatchDocumentType<TCreateDocumentType, TMergePatchDocumentType>(this IDocumentTypeState state)
            where TCreateDocumentType : ICreateDocumentType, new()
            where TMergePatchDocumentType : IMergePatchDocumentType, new()
        {
            bool bUnsaved = ((IDocumentTypeState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateDocumentType<TCreateDocumentType>();
            }
            else 
            {
                return state.ToMergePatchDocumentType<TMergePatchDocumentType>();
            }
        }

        public static TDeleteDocumentType ToDeleteDocumentType<TDeleteDocumentType>(this IDocumentTypeState state)
            where TDeleteDocumentType : IDeleteDocumentType, new()
        {
            var cmd = new TDeleteDocumentType();
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Version = ((IDocumentTypeStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchDocumentType ToMergePatchDocumentType<TMergePatchDocumentType>(this IDocumentTypeState state)
            where TMergePatchDocumentType : IMergePatchDocumentType, new()
        {
            var cmd = new TMergePatchDocumentType();

            cmd.Version = ((IDocumentTypeStateProperties)state).Version;

            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Description = state.Description;
            cmd.ParentDocumentTypeId = state.ParentDocumentTypeId;
            cmd.Active = ((IDocumentTypeStateProperties)state).Active;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.ParentDocumentTypeId == null) { cmd.IsPropertyParentDocumentTypeIdRemoved = true; }
            return cmd;
        }

        public static TCreateDocumentType ToCreateDocumentType<TCreateDocumentType>(this IDocumentTypeState state)
            where TCreateDocumentType : ICreateDocumentType, new()
        {
            var cmd = new TCreateDocumentType();

            cmd.Version = ((IDocumentTypeStateProperties)state).Version;

            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Description = state.Description;
            cmd.ParentDocumentTypeId = state.ParentDocumentTypeId;
            cmd.Active = ((IDocumentTypeStateProperties)state).Active;
            return cmd;
        }
		

	}

}

