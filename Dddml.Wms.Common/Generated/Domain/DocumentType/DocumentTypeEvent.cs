// <autogenerated>
//   This file was generated by T4 code generator GenerateDocumentTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DocumentType;

namespace Dddml.Wms.Domain.DocumentType
{

	public abstract class DocumentTypeEventBase : IDocumentTypeEvent
	{

		public virtual DocumentTypeEventId DocumentTypeEventId { get; set; }

        public virtual string DocumentTypeId
        {
            get { return DocumentTypeEventId.DocumentTypeId; }
            set { DocumentTypeEventId.DocumentTypeId = value; }
        }

		public virtual string Description { get; set; }

		public virtual string ParentDocumentTypeId { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		DocumentTypeEventId IGlobalIdentity<DocumentTypeEventId>.GlobalId {
			get
			{
				return this.DocumentTypeEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IDocumentTypeEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected DocumentTypeEventBase()
        {
        }

        protected DocumentTypeEventBase(DocumentTypeEventId stateEventId)
        {
            this.DocumentTypeEventId = stateEventId;
        }


        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

	public class DocumentTypeStateCreated : DocumentTypeEventBase, IDocumentTypeStateCreated
	{
		public DocumentTypeStateCreated () : this(new DocumentTypeEventId())
		{
		}

		public DocumentTypeStateCreated (DocumentTypeEventId stateEventId) : base(stateEventId)
		{
		}


        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class DocumentTypeStateMergePatched : DocumentTypeEventBase, IDocumentTypeStateMergePatched
	{
		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyParentDocumentTypeIdRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public DocumentTypeStateMergePatched ()
		{
		}

		public DocumentTypeStateMergePatched (DocumentTypeEventId stateEventId) : base(stateEventId)
		{
		}


        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class DocumentTypeStateDeleted : DocumentTypeEventBase, IDocumentTypeStateDeleted
	{
		public DocumentTypeStateDeleted ()
		{
		}

		public DocumentTypeStateDeleted (DocumentTypeEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }



	}



}

