// <autogenerated>
//   This file was generated by T4 code generator GenerateDocumentTypeDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DocumentType;

namespace Dddml.Wms.Domain.DocumentType
{

	public abstract class DocumentTypeStateEventDtoBase : IEventDto, IDocumentTypeStateCreated, IDocumentTypeStateMergePatched, IDocumentTypeStateDeleted
	{

        private DocumentTypeEventId _documentTypeEventId;

		protected internal virtual DocumentTypeEventId DocumentTypeEventId 
        {
            get 
            {
                if (_documentTypeEventId == null) { _documentTypeEventId = new DocumentTypeEventId(); }
                return _documentTypeEventId;
            }
            set
            {
                _documentTypeEventId = value;
            }
        }

        public virtual string DocumentTypeId
        {
            get { return DocumentTypeEventId.DocumentTypeId; }
            set { DocumentTypeEventId.DocumentTypeId = value; }
        }

        public virtual long Version
        {
            get { return DocumentTypeEventId.Version; }
            set { DocumentTypeEventId.Version = value; }
        }

		public virtual string Description { get; set; }

		public virtual string ParentDocumentTypeId { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		DocumentTypeEventId IGlobalIdentity<DocumentTypeEventId>.GlobalId {
			get 
			{
				return this.DocumentTypeEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IDocumentTypeEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IDocumentTypeStateMergePatched.IsPropertyDescriptionRemoved
        {
            get 
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyParentDocumentTypeIdRemoved { get; set; }

        bool IDocumentTypeStateMergePatched.IsPropertyParentDocumentTypeIdRemoved
        {
            get 
            {
                var b = this.IsPropertyParentDocumentTypeIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyParentDocumentTypeIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IDocumentTypeStateMergePatched.IsPropertyActiveRemoved
        {
            get 
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return default(bool);
            }
            set 
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        DocumentTypeEventId IDocumentTypeEvent.DocumentTypeEventId
        {
            get { return this.DocumentTypeEventId; }
        }

        protected DocumentTypeStateEventDtoBase()
        {
        }

        protected DocumentTypeStateEventDtoBase(DocumentTypeEventId stateEventId)
        {
            this.DocumentTypeEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IEventDto.EventType 
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}


    public class DocumentTypeStateCreatedOrMergePatchedOrDeletedDto : DocumentTypeStateEventDtoBase
    {
        private string _eventType;

        public virtual string EventType
        {
            get { return _eventType; }
            set { _eventType = value; }
        }

        protected override string GetEventType()
        {
            return this._eventType;
        }

    }



	public class DocumentTypeStateCreatedDto : DocumentTypeStateCreatedOrMergePatchedOrDeletedDto
	{
		public DocumentTypeStateCreatedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class DocumentTypeStateMergePatchedDto : DocumentTypeStateCreatedOrMergePatchedOrDeletedDto
	{
		public DocumentTypeStateMergePatchedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class DocumentTypeStateDeletedDto : DocumentTypeStateCreatedOrMergePatchedOrDeletedDto
	{
		public DocumentTypeStateDeletedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

	}


    public partial class DocumentTypeStateCreatedOrMergePatchedOrDeletedDtos : IEnumerable<IDocumentTypeStateCreated>, IEnumerable<IDocumentTypeStateMergePatched>, IEnumerable<IDocumentTypeStateDeleted>
    {
        private List<DocumentTypeStateCreatedOrMergePatchedOrDeletedDto> _innerStateEvents = new List<DocumentTypeStateCreatedOrMergePatchedOrDeletedDto>();

        public virtual DocumentTypeStateCreatedOrMergePatchedOrDeletedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<DocumentTypeStateCreatedOrMergePatchedOrDeletedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IDocumentTypeStateCreated> IEnumerable<IDocumentTypeStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IDocumentTypeStateMergePatched> IEnumerable<IDocumentTypeStateMergePatched>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IDocumentTypeStateDeleted> IEnumerable<IDocumentTypeStateDeleted>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        public void AddDocumentTypeEvent(IDocumentTypeStateCreated e)
        {
            _innerStateEvents.Add((DocumentTypeStateCreatedDto)e);
        }

        public void AddDocumentTypeEvent(IDocumentTypeEvent e)
        {
            _innerStateEvents.Add((DocumentTypeStateCreatedOrMergePatchedOrDeletedDto)e);
        }

        public void AddDocumentTypeEvent(IDocumentTypeStateDeleted e)
        {
            _innerStateEvents.Add((DocumentTypeStateDeletedDto)e);
        }

    }


}

