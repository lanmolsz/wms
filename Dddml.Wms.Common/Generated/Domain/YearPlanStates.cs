// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class YearPlanStates : IYearPlanStates
    {
        
		protected IYearPlanStateDao YearPlanStateDao
		{
			get
			{
				return ApplicationContext.Current["YearPlanStateDao"] as IYearPlanStateDao;
			}
		}

		private Dictionary<YearPlanId, IYearPlanState> _loadedYearPlanStates = new Dictionary<YearPlanId, IYearPlanState>();

        private List<IYearPlanState> _removedYearPlanStates = new List<IYearPlanState>();

		protected virtual IEnumerable<IYearPlanState> LoadedYearPlanStates {
			get {
				return this._loadedYearPlanStates.Values;
			}
		}

        private IPersonState _personState;

        private IEnumerable<IYearPlanState> _innerEnumerable;

        private IEnumerable<IYearPlanState> InnerEnumeralbe
        {
            get
            {
                if (_innerEnumerable == null)
                {
                    _innerEnumerable = YearPlanStateDao.FindByPersonalName(_personState.PersonalName);
                }
                return _innerEnumerable;
            }
        }

        public YearPlanStates(IPersonState outerState)
        {
            this._personState = outerState;
        }

        public IEnumerator<IYearPlanState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IYearPlanState state)
        {
            this._removedYearPlanStates.Add(state);
        }

        public virtual IYearPlanState Get(int year)
		{
			YearPlanId globalId = new YearPlanId(_personState.PersonalName, year);
            if (_loadedYearPlanStates.ContainsKey(globalId)) {
                return _loadedYearPlanStates[globalId];
            }
            var state = YearPlanStateDao.Get(globalId);
			_loadedYearPlanStates.Add (globalId, state);
			return state;
		}

        public virtual void AddToSave(IYearPlanState state)
        {
            this._loadedYearPlanStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IYearPlanState s in this.LoadedYearPlanStates) {
                YearPlanStateDao.Save(s);
			}
            foreach(IYearPlanState s in this._removedYearPlanStates)
            {
                YearPlanStateDao.Delete(s);
            }
		}

		#endregion


    }



}


