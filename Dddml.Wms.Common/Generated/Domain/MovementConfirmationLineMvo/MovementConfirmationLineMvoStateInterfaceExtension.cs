// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementConfirmationLineMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementConfirmationLineMvo;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.MovementConfirmationLineMvo
{

	public static partial class MovementConfirmationLineMvoStateInterfaceExtension
	{

        public static IMovementConfirmationLineMvoCommand ToCreateOrMergePatchMovementConfirmationLineMvo<TCreateMovementConfirmationLineMvo, TMergePatchMovementConfirmationLineMvo>(this IMovementConfirmationLineMvoState state)
            where TCreateMovementConfirmationLineMvo : ICreateMovementConfirmationLineMvo, new()
            where TMergePatchMovementConfirmationLineMvo : IMergePatchMovementConfirmationLineMvo, new()
        {
            bool bUnsaved = ((IMovementConfirmationLineMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateMovementConfirmationLineMvo<TCreateMovementConfirmationLineMvo>();
            }
            else 
            {
                return state.ToMergePatchMovementConfirmationLineMvo<TMergePatchMovementConfirmationLineMvo>();
            }
        }

        public static TDeleteMovementConfirmationLineMvo ToDeleteMovementConfirmationLineMvo<TDeleteMovementConfirmationLineMvo>(this IMovementConfirmationLineMvoState state)
            where TDeleteMovementConfirmationLineMvo : IDeleteMovementConfirmationLineMvo, new()
        {
            var cmd = new TDeleteMovementConfirmationLineMvo();
            cmd.MovementConfirmationLineId = state.MovementConfirmationLineId;
            cmd.MovementVersion = ((IMovementConfirmationLineMvoStateProperties)state).MovementVersion;

            return cmd;
        }

        public static TMergePatchMovementConfirmationLineMvo ToMergePatchMovementConfirmationLineMvo<TMergePatchMovementConfirmationLineMvo>(this IMovementConfirmationLineMvoState state)
            where TMergePatchMovementConfirmationLineMvo : IMergePatchMovementConfirmationLineMvo, new()
        {
            var cmd = new TMergePatchMovementConfirmationLineMvo();

            cmd.MovementVersion = ((IMovementConfirmationLineMvoStateProperties)state).MovementVersion;

            cmd.MovementConfirmationLineId = state.MovementConfirmationLineId;
            cmd.TargetQuantity = state.TargetQuantity;
            cmd.ConfirmedQuantity = state.ConfirmedQuantity;
            cmd.DifferenceQuantity = state.DifferenceQuantity;
            cmd.ScrappedQuantity = state.ScrappedQuantity;
            cmd.Version = ((IMovementConfirmationLineMvoStateProperties)state).Version;
            cmd.Active = ((IMovementConfirmationLineMvoStateProperties)state).Active;
            cmd.MovementDocumentTypeId = state.MovementDocumentTypeId;
            cmd.MovementMovementTypeId = state.MovementMovementTypeId;
            cmd.MovementDescription = state.MovementDescription;
            cmd.MovementCreatedBy = state.MovementCreatedBy;
            cmd.MovementCreatedAt = state.MovementCreatedAt;
            cmd.MovementUpdatedBy = state.MovementUpdatedBy;
            cmd.MovementUpdatedAt = state.MovementUpdatedAt;
            cmd.MovementActive = state.MovementActive;
            cmd.MovementDeleted = state.MovementDeleted;
            
            if (state.MovementDocumentTypeId == null) { cmd.IsPropertyMovementDocumentTypeIdRemoved = true; }
            if (state.MovementMovementTypeId == null) { cmd.IsPropertyMovementMovementTypeIdRemoved = true; }
            if (state.MovementDescription == null) { cmd.IsPropertyMovementDescriptionRemoved = true; }
            if (state.MovementCreatedBy == null) { cmd.IsPropertyMovementCreatedByRemoved = true; }
            if (state.MovementUpdatedBy == null) { cmd.IsPropertyMovementUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateMovementConfirmationLineMvo ToCreateMovementConfirmationLineMvo<TCreateMovementConfirmationLineMvo>(this IMovementConfirmationLineMvoState state)
            where TCreateMovementConfirmationLineMvo : ICreateMovementConfirmationLineMvo, new()
        {
            var cmd = new TCreateMovementConfirmationLineMvo();

            cmd.MovementVersion = ((IMovementConfirmationLineMvoStateProperties)state).MovementVersion;

            cmd.MovementConfirmationLineId = state.MovementConfirmationLineId;
            cmd.TargetQuantity = state.TargetQuantity;
            cmd.ConfirmedQuantity = state.ConfirmedQuantity;
            cmd.DifferenceQuantity = state.DifferenceQuantity;
            cmd.ScrappedQuantity = state.ScrappedQuantity;
            cmd.Version = ((IMovementConfirmationLineMvoStateProperties)state).Version;
            cmd.Active = ((IMovementConfirmationLineMvoStateProperties)state).Active;
            cmd.MovementDocumentTypeId = state.MovementDocumentTypeId;
            cmd.MovementMovementTypeId = state.MovementMovementTypeId;
            cmd.MovementDescription = state.MovementDescription;
            cmd.MovementCreatedBy = state.MovementCreatedBy;
            cmd.MovementCreatedAt = state.MovementCreatedAt;
            cmd.MovementUpdatedBy = state.MovementUpdatedBy;
            cmd.MovementUpdatedAt = state.MovementUpdatedAt;
            cmd.MovementActive = state.MovementActive;
            cmd.MovementDeleted = state.MovementDeleted;
            return cmd;
        }
		

	}

}

