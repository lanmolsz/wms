// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementConfirmationLineMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementConfirmationLineMvo;
using Dddml.Wms.Domain.MovementConfirmation;

namespace Dddml.Wms.Domain.MovementConfirmationLineMvo
{

	public static partial class MovementConfirmationLineMvoStateInterfaceExtension
	{

        public static IMovementConfirmationLineMvoCommand ToCreateOrMergePatchMovementConfirmationLineMvo<TCreateMovementConfirmationLineMvo, TMergePatchMovementConfirmationLineMvo>(this IMovementConfirmationLineMvoState state)
            where TCreateMovementConfirmationLineMvo : ICreateMovementConfirmationLineMvo, new()
            where TMergePatchMovementConfirmationLineMvo : IMergePatchMovementConfirmationLineMvo, new()
        {
            bool bUnsaved = ((IMovementConfirmationLineMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateMovementConfirmationLineMvo<TCreateMovementConfirmationLineMvo>();
            }
            else 
            {
                return state.ToMergePatchMovementConfirmationLineMvo<TMergePatchMovementConfirmationLineMvo>();
            }
        }

        public static TDeleteMovementConfirmationLineMvo ToDeleteMovementConfirmationLineMvo<TDeleteMovementConfirmationLineMvo>(this IMovementConfirmationLineMvoState state)
            where TDeleteMovementConfirmationLineMvo : IDeleteMovementConfirmationLineMvo, new()
        {
            var cmd = new TDeleteMovementConfirmationLineMvo();
            cmd.MovementConfirmationLineId = state.MovementConfirmationLineId;
            cmd.MovementConfirmationVersion = ((IMovementConfirmationLineMvoStateProperties)state).MovementConfirmationVersion;

            return cmd;
        }

        public static TMergePatchMovementConfirmationLineMvo ToMergePatchMovementConfirmationLineMvo<TMergePatchMovementConfirmationLineMvo>(this IMovementConfirmationLineMvoState state)
            where TMergePatchMovementConfirmationLineMvo : IMergePatchMovementConfirmationLineMvo, new()
        {
            var cmd = new TMergePatchMovementConfirmationLineMvo();

            cmd.MovementConfirmationVersion = ((IMovementConfirmationLineMvoStateProperties)state).MovementConfirmationVersion;

            cmd.MovementConfirmationLineId = state.MovementConfirmationLineId;
            cmd.MovementLineNumber = state.MovementLineNumber;
            cmd.TargetQuantity = state.TargetQuantity;
            cmd.ConfirmedQuantity = state.ConfirmedQuantity;
            cmd.DifferenceQuantity = state.DifferenceQuantity;
            cmd.ScrappedQuantity = state.ScrappedQuantity;
            cmd.Description = state.Description;
            cmd.Processed = state.Processed;
            cmd.Version = ((IMovementConfirmationLineMvoStateProperties)state).Version;
            cmd.Active = ((IMovementConfirmationLineMvoStateProperties)state).Active;
            cmd.MovementConfirmationDocumentTypeId = state.MovementConfirmationDocumentTypeId;
            cmd.MovementConfirmationMovementDocumentNumber = state.MovementConfirmationMovementDocumentNumber;
            cmd.MovementConfirmationIsApproved = state.MovementConfirmationIsApproved;
            cmd.MovementConfirmationApprovalAmount = state.MovementConfirmationApprovalAmount;
            cmd.MovementConfirmationProcessing = state.MovementConfirmationProcessing;
            cmd.MovementConfirmationProcessed = state.MovementConfirmationProcessed;
            cmd.MovementConfirmationDescription = state.MovementConfirmationDescription;
            cmd.MovementConfirmationCreatedBy = state.MovementConfirmationCreatedBy;
            cmd.MovementConfirmationCreatedAt = state.MovementConfirmationCreatedAt;
            cmd.MovementConfirmationUpdatedBy = state.MovementConfirmationUpdatedBy;
            cmd.MovementConfirmationUpdatedAt = state.MovementConfirmationUpdatedAt;
            cmd.MovementConfirmationActive = state.MovementConfirmationActive;
            cmd.MovementConfirmationDeleted = state.MovementConfirmationDeleted;
            
            if (state.MovementLineNumber == null) { cmd.IsPropertyMovementLineNumberRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.MovementConfirmationDocumentTypeId == null) { cmd.IsPropertyMovementConfirmationDocumentTypeIdRemoved = true; }
            if (state.MovementConfirmationMovementDocumentNumber == null) { cmd.IsPropertyMovementConfirmationMovementDocumentNumberRemoved = true; }
            if (state.MovementConfirmationProcessing == null) { cmd.IsPropertyMovementConfirmationProcessingRemoved = true; }
            if (state.MovementConfirmationDescription == null) { cmd.IsPropertyMovementConfirmationDescriptionRemoved = true; }
            if (state.MovementConfirmationCreatedBy == null) { cmd.IsPropertyMovementConfirmationCreatedByRemoved = true; }
            if (state.MovementConfirmationUpdatedBy == null) { cmd.IsPropertyMovementConfirmationUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateMovementConfirmationLineMvo ToCreateMovementConfirmationLineMvo<TCreateMovementConfirmationLineMvo>(this IMovementConfirmationLineMvoState state)
            where TCreateMovementConfirmationLineMvo : ICreateMovementConfirmationLineMvo, new()
        {
            var cmd = new TCreateMovementConfirmationLineMvo();

            cmd.MovementConfirmationVersion = ((IMovementConfirmationLineMvoStateProperties)state).MovementConfirmationVersion;

            cmd.MovementConfirmationLineId = state.MovementConfirmationLineId;
            cmd.MovementLineNumber = state.MovementLineNumber;
            cmd.TargetQuantity = state.TargetQuantity;
            cmd.ConfirmedQuantity = state.ConfirmedQuantity;
            cmd.DifferenceQuantity = state.DifferenceQuantity;
            cmd.ScrappedQuantity = state.ScrappedQuantity;
            cmd.Description = state.Description;
            cmd.Processed = state.Processed;
            cmd.Version = ((IMovementConfirmationLineMvoStateProperties)state).Version;
            cmd.Active = ((IMovementConfirmationLineMvoStateProperties)state).Active;
            cmd.MovementConfirmationDocumentTypeId = state.MovementConfirmationDocumentTypeId;
            cmd.MovementConfirmationMovementDocumentNumber = state.MovementConfirmationMovementDocumentNumber;
            cmd.MovementConfirmationIsApproved = state.MovementConfirmationIsApproved;
            cmd.MovementConfirmationApprovalAmount = state.MovementConfirmationApprovalAmount;
            cmd.MovementConfirmationProcessing = state.MovementConfirmationProcessing;
            cmd.MovementConfirmationProcessed = state.MovementConfirmationProcessed;
            cmd.MovementConfirmationDescription = state.MovementConfirmationDescription;
            cmd.MovementConfirmationCreatedBy = state.MovementConfirmationCreatedBy;
            cmd.MovementConfirmationCreatedAt = state.MovementConfirmationCreatedAt;
            cmd.MovementConfirmationUpdatedBy = state.MovementConfirmationUpdatedBy;
            cmd.MovementConfirmationUpdatedAt = state.MovementConfirmationUpdatedAt;
            cmd.MovementConfirmationActive = state.MovementConfirmationActive;
            cmd.MovementConfirmationDeleted = state.MovementConfirmationDeleted;
            return cmd;
        }
		

	}

}

