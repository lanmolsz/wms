// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementConfirmationLineMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementConfirmationLineMvo;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.MovementConfirmationLineMvo
{

    public class MovementConfirmationLineMvoStateEventDtoConverter
    {
        public virtual MovementConfirmationLineMvoStateCreatedOrMergePatchedOrDeletedDto ToMovementConfirmationLineMvoStateEventDto(IMovementConfirmationLineMvoStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IMovementConfirmationLineMvoStateCreated)stateEvent;
                return ToMovementConfirmationLineMvoStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IMovementConfirmationLineMvoStateMergePatched)stateEvent;
                return ToMovementConfirmationLineMvoStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (IMovementConfirmationLineMvoStateDeleted)stateEvent;
                return ToMovementConfirmationLineMvoStateDeletedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual MovementConfirmationLineMvoStateCreatedDto ToMovementConfirmationLineMvoStateCreatedDto(IMovementConfirmationLineMvoStateCreated e)
        {
            var dto = new MovementConfirmationLineMvoStateCreatedDto();
            dto.StateEventId = new MovementConfirmationLineMvoStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.TargetQuantity = e.TargetQuantity;
            dto.ConfirmedQuantity = e.ConfirmedQuantity;
            dto.DifferenceQuantity = e.DifferenceQuantity;
            dto.ScrappedQuantity = e.ScrappedQuantity;
            dto.Version = e.Version;
            dto.Active = e.Active;
            dto.MovementDocumentTypeId = e.MovementDocumentTypeId;
            dto.MovementDocumentStatusId = e.MovementDocumentStatusId;
            dto.MovementMovementTypeId = e.MovementMovementTypeId;
            dto.MovementDescription = e.MovementDescription;
            dto.MovementCreatedBy = e.MovementCreatedBy;
            dto.MovementCreatedAt = e.MovementCreatedAt;
            dto.MovementUpdatedBy = e.MovementUpdatedBy;
            dto.MovementUpdatedAt = e.MovementUpdatedAt;
            dto.MovementActive = e.MovementActive;
            dto.MovementDeleted = e.MovementDeleted;
            return dto;
        }

        public virtual MovementConfirmationLineMvoStateMergePatchedDto ToMovementConfirmationLineMvoStateMergePatchedDto(IMovementConfirmationLineMvoStateMergePatched e)
        {
            var dto = new MovementConfirmationLineMvoStateMergePatchedDto();
            dto.StateEventId = new MovementConfirmationLineMvoStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.TargetQuantity = e.TargetQuantity;
            dto.ConfirmedQuantity = e.ConfirmedQuantity;
            dto.DifferenceQuantity = e.DifferenceQuantity;
            dto.ScrappedQuantity = e.ScrappedQuantity;
            dto.Version = e.Version;
            dto.Active = e.Active;
            dto.MovementDocumentTypeId = e.MovementDocumentTypeId;
            dto.MovementDocumentStatusId = e.MovementDocumentStatusId;
            dto.MovementMovementTypeId = e.MovementMovementTypeId;
            dto.MovementDescription = e.MovementDescription;
            dto.MovementCreatedBy = e.MovementCreatedBy;
            dto.MovementCreatedAt = e.MovementCreatedAt;
            dto.MovementUpdatedBy = e.MovementUpdatedBy;
            dto.MovementUpdatedAt = e.MovementUpdatedAt;
            dto.MovementActive = e.MovementActive;
            dto.MovementDeleted = e.MovementDeleted;
            dto.IsPropertyTargetQuantityRemoved = e.IsPropertyTargetQuantityRemoved;
            dto.IsPropertyConfirmedQuantityRemoved = e.IsPropertyConfirmedQuantityRemoved;
            dto.IsPropertyDifferenceQuantityRemoved = e.IsPropertyDifferenceQuantityRemoved;
            dto.IsPropertyScrappedQuantityRemoved = e.IsPropertyScrappedQuantityRemoved;
            dto.IsPropertyVersionRemoved = e.IsPropertyVersionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            dto.IsPropertyMovementDocumentTypeIdRemoved = e.IsPropertyMovementDocumentTypeIdRemoved;
            dto.IsPropertyMovementDocumentStatusIdRemoved = e.IsPropertyMovementDocumentStatusIdRemoved;
            dto.IsPropertyMovementMovementTypeIdRemoved = e.IsPropertyMovementMovementTypeIdRemoved;
            dto.IsPropertyMovementDescriptionRemoved = e.IsPropertyMovementDescriptionRemoved;
            dto.IsPropertyMovementCreatedByRemoved = e.IsPropertyMovementCreatedByRemoved;
            dto.IsPropertyMovementCreatedAtRemoved = e.IsPropertyMovementCreatedAtRemoved;
            dto.IsPropertyMovementUpdatedByRemoved = e.IsPropertyMovementUpdatedByRemoved;
            dto.IsPropertyMovementUpdatedAtRemoved = e.IsPropertyMovementUpdatedAtRemoved;
            dto.IsPropertyMovementActiveRemoved = e.IsPropertyMovementActiveRemoved;
            dto.IsPropertyMovementDeletedRemoved = e.IsPropertyMovementDeletedRemoved;

            return dto;
        }


        public virtual MovementConfirmationLineMvoStateDeletedDto ToMovementConfirmationLineMvoStateDeletedDto(IMovementConfirmationLineMvoStateDeleted e)
        {
            var dto = new MovementConfirmationLineMvoStateDeletedDto();
            dto.StateEventId = new MovementConfirmationLineMvoStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

