// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutLineMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOutLineMvo;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOutLineMvo
{

	public static partial class InOutLineMvoStateInterfaceExtension
	{

        public static IInOutLineMvoCommand ToCreateOrMergePatchInOutLineMvo<TCreateInOutLineMvo, TMergePatchInOutLineMvo>(this IInOutLineMvoState state)
            where TCreateInOutLineMvo : ICreateInOutLineMvo, new()
            where TMergePatchInOutLineMvo : IMergePatchInOutLineMvo, new()
        {
            bool bUnsaved = ((IInOutLineMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateInOutLineMvo<TCreateInOutLineMvo>();
            }
            else 
            {
                return state.ToMergePatchInOutLineMvo<TMergePatchInOutLineMvo>();
            }
        }

        public static TDeleteInOutLineMvo ToDeleteInOutLineMvo<TDeleteInOutLineMvo>(this IInOutLineMvoState state)
            where TDeleteInOutLineMvo : IDeleteInOutLineMvo, new()
        {
            var cmd = new TDeleteInOutLineMvo();
            cmd.InOutLineId = state.InOutLineId;
            cmd.InOutVersion = ((IInOutLineMvoStateProperties)state).InOutVersion;

            return cmd;
        }

        public static TMergePatchInOutLineMvo ToMergePatchInOutLineMvo<TMergePatchInOutLineMvo>(this IInOutLineMvoState state)
            where TMergePatchInOutLineMvo : IMergePatchInOutLineMvo, new()
        {
            var cmd = new TMergePatchInOutLineMvo();

            cmd.InOutVersion = ((IInOutLineMvoStateProperties)state).InOutVersion;

            cmd.InOutLineId = state.InOutLineId;
            cmd.LocatorId = state.LocatorId;
            cmd.ProductId = state.ProductId;
            cmd.AttributeSetInstanceId = state.AttributeSetInstanceId;
            cmd.Description = state.Description;
            cmd.QuantityUomId = state.QuantityUomId;
            cmd.MovementQuantity = state.MovementQuantity;
            cmd.PickedQuantity = state.PickedQuantity;
            cmd.IsInvoiced = state.IsInvoiced;
            cmd.Processed = state.Processed;
            cmd.RmaLineNumber = state.RmaLineNumber;
            cmd.ReversalLineNumber = state.ReversalLineNumber;
            cmd.Version = ((IInOutLineMvoStateProperties)state).Version;
            cmd.Active = ((IInOutLineMvoStateProperties)state).Active;
            cmd.InOutPosted = state.InOutPosted;
            cmd.InOutProcessed = state.InOutProcessed;
            cmd.InOutProcessing = state.InOutProcessing;
            cmd.InOutDocumentTypeId = state.InOutDocumentTypeId;
            cmd.InOutDescription = state.InOutDescription;
            cmd.InOutOrderId = state.InOutOrderId;
            cmd.InOutDateOrdered = state.InOutDateOrdered;
            cmd.InOutIsPrinted = state.InOutIsPrinted;
            cmd.InOutMovementTypeId = state.InOutMovementTypeId;
            cmd.InOutMovementDate = state.InOutMovementDate;
            cmd.InOutBusinessPartnerId = state.InOutBusinessPartnerId;
            cmd.InOutWarehouseId = state.InOutWarehouseId;
            cmd.InOutPOReference = state.InOutPOReference;
            cmd.InOutFreightAmount = state.InOutFreightAmount;
            cmd.InOutShipperId = state.InOutShipperId;
            cmd.InOutChargeAmount = state.InOutChargeAmount;
            cmd.InOutDatePrinted = state.InOutDatePrinted;
            cmd.InOutCreatedFrom = state.InOutCreatedFrom;
            cmd.InOutSalesRepresentativeId = state.InOutSalesRepresentativeId;
            cmd.InOutNumberOfPackages = state.InOutNumberOfPackages;
            cmd.InOutPickDate = state.InOutPickDate;
            cmd.InOutShipDate = state.InOutShipDate;
            cmd.InOutTrackingNumber = state.InOutTrackingNumber;
            cmd.InOutDateReceived = state.InOutDateReceived;
            cmd.InOutIsInTransit = state.InOutIsInTransit;
            cmd.InOutIsApproved = state.InOutIsApproved;
            cmd.InOutIsInDispute = state.InOutIsInDispute;
            cmd.InOutRmaDocumentNumber = state.InOutRmaDocumentNumber;
            cmd.InOutReversalDocumentNumber = state.InOutReversalDocumentNumber;
            cmd.InOutCreatedBy = state.InOutCreatedBy;
            cmd.InOutCreatedAt = state.InOutCreatedAt;
            cmd.InOutUpdatedBy = state.InOutUpdatedBy;
            cmd.InOutUpdatedAt = state.InOutUpdatedAt;
            cmd.InOutActive = state.InOutActive;
            cmd.InOutDeleted = state.InOutDeleted;
            
            if (state.LocatorId == null) { cmd.IsPropertyLocatorIdRemoved = true; }
            if (state.ProductId == null) { cmd.IsPropertyProductIdRemoved = true; }
            if (state.AttributeSetInstanceId == null) { cmd.IsPropertyAttributeSetInstanceIdRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.QuantityUomId == null) { cmd.IsPropertyQuantityUomIdRemoved = true; }
            if (state.InOutProcessing == null) { cmd.IsPropertyInOutProcessingRemoved = true; }
            if (state.InOutDocumentTypeId == null) { cmd.IsPropertyInOutDocumentTypeIdRemoved = true; }
            if (state.InOutDescription == null) { cmd.IsPropertyInOutDescriptionRemoved = true; }
            if (state.InOutOrderId == null) { cmd.IsPropertyInOutOrderIdRemoved = true; }
            if (state.InOutDateOrdered == null) { cmd.IsPropertyInOutDateOrderedRemoved = true; }
            if (state.InOutMovementTypeId == null) { cmd.IsPropertyInOutMovementTypeIdRemoved = true; }
            if (state.InOutMovementDate == null) { cmd.IsPropertyInOutMovementDateRemoved = true; }
            if (state.InOutBusinessPartnerId == null) { cmd.IsPropertyInOutBusinessPartnerIdRemoved = true; }
            if (state.InOutWarehouseId == null) { cmd.IsPropertyInOutWarehouseIdRemoved = true; }
            if (state.InOutPOReference == null) { cmd.IsPropertyInOutPOReferenceRemoved = true; }
            if (state.InOutShipperId == null) { cmd.IsPropertyInOutShipperIdRemoved = true; }
            if (state.InOutDatePrinted == null) { cmd.IsPropertyInOutDatePrintedRemoved = true; }
            if (state.InOutCreatedFrom == null) { cmd.IsPropertyInOutCreatedFromRemoved = true; }
            if (state.InOutSalesRepresentativeId == null) { cmd.IsPropertyInOutSalesRepresentativeIdRemoved = true; }
            if (state.InOutPickDate == null) { cmd.IsPropertyInOutPickDateRemoved = true; }
            if (state.InOutShipDate == null) { cmd.IsPropertyInOutShipDateRemoved = true; }
            if (state.InOutTrackingNumber == null) { cmd.IsPropertyInOutTrackingNumberRemoved = true; }
            if (state.InOutDateReceived == null) { cmd.IsPropertyInOutDateReceivedRemoved = true; }
            if (state.InOutRmaDocumentNumber == null) { cmd.IsPropertyInOutRmaDocumentNumberRemoved = true; }
            if (state.InOutReversalDocumentNumber == null) { cmd.IsPropertyInOutReversalDocumentNumberRemoved = true; }
            if (state.InOutCreatedBy == null) { cmd.IsPropertyInOutCreatedByRemoved = true; }
            if (state.InOutUpdatedBy == null) { cmd.IsPropertyInOutUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateInOutLineMvo ToCreateInOutLineMvo<TCreateInOutLineMvo>(this IInOutLineMvoState state)
            where TCreateInOutLineMvo : ICreateInOutLineMvo, new()
        {
            var cmd = new TCreateInOutLineMvo();

            cmd.InOutVersion = ((IInOutLineMvoStateProperties)state).InOutVersion;

            cmd.InOutLineId = state.InOutLineId;
            cmd.LocatorId = state.LocatorId;
            cmd.ProductId = state.ProductId;
            cmd.AttributeSetInstanceId = state.AttributeSetInstanceId;
            cmd.Description = state.Description;
            cmd.QuantityUomId = state.QuantityUomId;
            cmd.MovementQuantity = state.MovementQuantity;
            cmd.PickedQuantity = state.PickedQuantity;
            cmd.IsInvoiced = state.IsInvoiced;
            cmd.Processed = state.Processed;
            cmd.RmaLineNumber = state.RmaLineNumber;
            cmd.ReversalLineNumber = state.ReversalLineNumber;
            cmd.Version = ((IInOutLineMvoStateProperties)state).Version;
            cmd.Active = ((IInOutLineMvoStateProperties)state).Active;
            cmd.InOutPosted = state.InOutPosted;
            cmd.InOutProcessed = state.InOutProcessed;
            cmd.InOutProcessing = state.InOutProcessing;
            cmd.InOutDocumentTypeId = state.InOutDocumentTypeId;
            cmd.InOutDescription = state.InOutDescription;
            cmd.InOutOrderId = state.InOutOrderId;
            cmd.InOutDateOrdered = state.InOutDateOrdered;
            cmd.InOutIsPrinted = state.InOutIsPrinted;
            cmd.InOutMovementTypeId = state.InOutMovementTypeId;
            cmd.InOutMovementDate = state.InOutMovementDate;
            cmd.InOutBusinessPartnerId = state.InOutBusinessPartnerId;
            cmd.InOutWarehouseId = state.InOutWarehouseId;
            cmd.InOutPOReference = state.InOutPOReference;
            cmd.InOutFreightAmount = state.InOutFreightAmount;
            cmd.InOutShipperId = state.InOutShipperId;
            cmd.InOutChargeAmount = state.InOutChargeAmount;
            cmd.InOutDatePrinted = state.InOutDatePrinted;
            cmd.InOutCreatedFrom = state.InOutCreatedFrom;
            cmd.InOutSalesRepresentativeId = state.InOutSalesRepresentativeId;
            cmd.InOutNumberOfPackages = state.InOutNumberOfPackages;
            cmd.InOutPickDate = state.InOutPickDate;
            cmd.InOutShipDate = state.InOutShipDate;
            cmd.InOutTrackingNumber = state.InOutTrackingNumber;
            cmd.InOutDateReceived = state.InOutDateReceived;
            cmd.InOutIsInTransit = state.InOutIsInTransit;
            cmd.InOutIsApproved = state.InOutIsApproved;
            cmd.InOutIsInDispute = state.InOutIsInDispute;
            cmd.InOutRmaDocumentNumber = state.InOutRmaDocumentNumber;
            cmd.InOutReversalDocumentNumber = state.InOutReversalDocumentNumber;
            cmd.InOutCreatedBy = state.InOutCreatedBy;
            cmd.InOutCreatedAt = state.InOutCreatedAt;
            cmd.InOutUpdatedBy = state.InOutUpdatedBy;
            cmd.InOutUpdatedAt = state.InOutUpdatedAt;
            cmd.InOutActive = state.InOutActive;
            cmd.InOutDeleted = state.InOutDeleted;
            return cmd;
        }
		

	}

}

