// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

    public class YearPlanStateEventDtoConverter
    {
        public virtual YearPlanStateCreatedOrMergePatchedOrRemovedDto ToYearPlanStateEventDto(IYearPlanStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IYearPlanStateCreated)stateEvent;
                return ToYearPlanStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IYearPlanStateMergePatched)stateEvent;
                return ToYearPlanStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Removed)
            {
                var e = (IYearPlanStateRemoved)stateEvent;
                return ToYearPlanStateRemovedDto(e);
            }

            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual YearPlanStateCreatedDto ToYearPlanStateCreatedDto(IYearPlanStateCreated e)
        {
            var dto = new YearPlanStateCreatedDto();
            dto.StateEventId = new YearPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            var monthPlanEvents = new List<MonthPlanStateCreatedDto>();
            foreach (var ee in e.MonthPlanEvents)
            {
                MonthPlanStateCreatedDto eeDto = MonthPlanStateEventDtoConverter.ToMonthPlanStateCreatedDto(ee);
                monthPlanEvents.Add(eeDto);
            }
            dto.MonthPlanEvents = monthPlanEvents.ToArray();

            return dto;
        }

        public virtual YearPlanStateMergePatchedDto ToYearPlanStateMergePatchedDto(IYearPlanStateMergePatched e)
        {
            var dto = new YearPlanStateMergePatchedDto();
            dto.StateEventId = new YearPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.Active = e.Active;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var monthPlanEvents = new List<MonthPlanStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.MonthPlanEvents)
            {
                MonthPlanStateCreatedOrMergePatchedOrRemovedDto eeDto = MonthPlanStateEventDtoConverter.ToMonthPlanStateEventDto(ee);
                monthPlanEvents.Add(eeDto);
            }
            dto.MonthPlanEvents = monthPlanEvents.ToArray();


            return dto;
        }


        public virtual YearPlanStateRemovedDto ToYearPlanStateRemovedDto(IYearPlanStateRemoved e)
        {
            var dto = new YearPlanStateRemovedDto();
            dto.StateEventId = new YearPlanStateEventIdDto(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            var monthPlanEvents = new List<MonthPlanStateRemovedDto>();
            foreach (var ee in e.MonthPlanEvents)
            {
                MonthPlanStateRemovedDto eeDto = MonthPlanStateEventDtoConverter.ToMonthPlanStateRemovedDto(ee);
                monthPlanEvents.Add(eeDto);
            }
            dto.MonthPlanEvents = monthPlanEvents.ToArray();


            return dto;
        }

        protected virtual MonthPlanStateEventDtoConverter MonthPlanStateEventDtoConverter
        {
            get
            {
                return new MonthPlanStateEventDtoConverter();
            }
        }


    }


}

