// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderHeaderDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderHeader;

namespace Dddml.Wms.Domain.OrderHeader
{

    public class OrderHeaderStateEventDtoConverter
    {
        public virtual OrderHeaderStateCreatedOrMergePatchedOrDeletedDto ToOrderHeaderStateEventDto(IOrderHeaderStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IOrderHeaderStateCreated)stateEvent;
                return ToOrderHeaderStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IOrderHeaderStateMergePatched)stateEvent;
                return ToOrderHeaderStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual OrderHeaderStateCreatedDto ToOrderHeaderStateCreatedDto(IOrderHeaderStateCreated e)
        {
            var dto = new OrderHeaderStateCreatedDto();
            dto.StateEventId = new OrderHeaderStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.OrderTypeId = e.OrderTypeId;
            dto.OrderName = e.OrderName;
            dto.ExternalId = e.ExternalId;
            dto.SalesChannelEnumId = e.SalesChannelEnumId;
            dto.OrderDate = e.OrderDate;
            dto.Priority = e.Priority;
            dto.EntryDate = e.EntryDate;
            dto.PickSheetPrintedDate = e.PickSheetPrintedDate;
            dto.StatusId = e.StatusId;
            dto.CurrencyUom = e.CurrencyUom;
            dto.SyncStatusId = e.SyncStatusId;
            dto.BillingAccountId = e.BillingAccountId;
            dto.OriginFacilityId = e.OriginFacilityId;
            dto.WebSiteId = e.WebSiteId;
            dto.ProductStoreId = e.ProductStoreId;
            dto.TerminalId = e.TerminalId;
            dto.TransactionId = e.TransactionId;
            dto.AutoOrderShoppingListId = e.AutoOrderShoppingListId;
            dto.NeedsInventoryIssuance = e.NeedsInventoryIssuance;
            dto.IsRushOrder = e.IsRushOrder;
            dto.InternalCode = e.InternalCode;
            dto.RemainingSubTotal = e.RemainingSubTotal;
            dto.GrandTotal = e.GrandTotal;
            dto.InvoicePerShipment = e.InvoicePerShipment;
            dto.Active = e.Active;
            return dto;
        }

        public virtual OrderHeaderStateMergePatchedDto ToOrderHeaderStateMergePatchedDto(IOrderHeaderStateMergePatched e)
        {
            var dto = new OrderHeaderStateMergePatchedDto();
            dto.StateEventId = new OrderHeaderStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.OrderTypeId = e.OrderTypeId;
            dto.OrderName = e.OrderName;
            dto.ExternalId = e.ExternalId;
            dto.SalesChannelEnumId = e.SalesChannelEnumId;
            dto.OrderDate = e.OrderDate;
            dto.Priority = e.Priority;
            dto.EntryDate = e.EntryDate;
            dto.PickSheetPrintedDate = e.PickSheetPrintedDate;
            dto.StatusId = e.StatusId;
            dto.CurrencyUom = e.CurrencyUom;
            dto.SyncStatusId = e.SyncStatusId;
            dto.BillingAccountId = e.BillingAccountId;
            dto.OriginFacilityId = e.OriginFacilityId;
            dto.WebSiteId = e.WebSiteId;
            dto.ProductStoreId = e.ProductStoreId;
            dto.TerminalId = e.TerminalId;
            dto.TransactionId = e.TransactionId;
            dto.AutoOrderShoppingListId = e.AutoOrderShoppingListId;
            dto.NeedsInventoryIssuance = e.NeedsInventoryIssuance;
            dto.IsRushOrder = e.IsRushOrder;
            dto.InternalCode = e.InternalCode;
            dto.RemainingSubTotal = e.RemainingSubTotal;
            dto.GrandTotal = e.GrandTotal;
            dto.InvoicePerShipment = e.InvoicePerShipment;
            dto.Active = e.Active;
            dto.IsPropertyOrderTypeIdRemoved = e.IsPropertyOrderTypeIdRemoved;
            dto.IsPropertyOrderNameRemoved = e.IsPropertyOrderNameRemoved;
            dto.IsPropertyExternalIdRemoved = e.IsPropertyExternalIdRemoved;
            dto.IsPropertySalesChannelEnumIdRemoved = e.IsPropertySalesChannelEnumIdRemoved;
            dto.IsPropertyOrderDateRemoved = e.IsPropertyOrderDateRemoved;
            dto.IsPropertyPriorityRemoved = e.IsPropertyPriorityRemoved;
            dto.IsPropertyEntryDateRemoved = e.IsPropertyEntryDateRemoved;
            dto.IsPropertyPickSheetPrintedDateRemoved = e.IsPropertyPickSheetPrintedDateRemoved;
            dto.IsPropertyStatusIdRemoved = e.IsPropertyStatusIdRemoved;
            dto.IsPropertyCurrencyUomRemoved = e.IsPropertyCurrencyUomRemoved;
            dto.IsPropertySyncStatusIdRemoved = e.IsPropertySyncStatusIdRemoved;
            dto.IsPropertyBillingAccountIdRemoved = e.IsPropertyBillingAccountIdRemoved;
            dto.IsPropertyOriginFacilityIdRemoved = e.IsPropertyOriginFacilityIdRemoved;
            dto.IsPropertyWebSiteIdRemoved = e.IsPropertyWebSiteIdRemoved;
            dto.IsPropertyProductStoreIdRemoved = e.IsPropertyProductStoreIdRemoved;
            dto.IsPropertyTerminalIdRemoved = e.IsPropertyTerminalIdRemoved;
            dto.IsPropertyTransactionIdRemoved = e.IsPropertyTransactionIdRemoved;
            dto.IsPropertyAutoOrderShoppingListIdRemoved = e.IsPropertyAutoOrderShoppingListIdRemoved;
            dto.IsPropertyNeedsInventoryIssuanceRemoved = e.IsPropertyNeedsInventoryIssuanceRemoved;
            dto.IsPropertyIsRushOrderRemoved = e.IsPropertyIsRushOrderRemoved;
            dto.IsPropertyInternalCodeRemoved = e.IsPropertyInternalCodeRemoved;
            dto.IsPropertyRemainingSubTotalRemoved = e.IsPropertyRemainingSubTotalRemoved;
            dto.IsPropertyGrandTotalRemoved = e.IsPropertyGrandTotalRemoved;
            dto.IsPropertyInvoicePerShipmentRemoved = e.IsPropertyInvoicePerShipmentRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }



    }


}

