// <autogenerated>
//   This file was generated by T4 code generator GeneratePickwaveDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Pickwave;

namespace Dddml.Wms.Domain.Pickwave
{
    public partial class PickwaveAggregate : AggregateBase, IPickwaveAggregate
    {

        readonly IPickwaveState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IPickwaveState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        long? IGlobalIdentity<long?>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public PickwaveAggregate(IPickwaveState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IPickwaveStateProperties)_state).Version == PickwaveState.VersionZero)
            {
                if (IsCommandCreate((IPickwaveCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IPickwaveCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IPickwaveCommand c)
        {
            return c.Version == PickwaveState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreatePickwave c)
        {
            IPickwaveStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchPickwave c)
        {
            IPickwaveStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeletePickwave c)
        {
            IPickwaveStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IPickwaveStateCreated Map(ICreatePickwave c)
        {
			var stateEventId = new PickwaveEventId(c.PickwaveId, c.Version);
            IPickwaveStateCreated e = NewPickwaveStateCreated(stateEventId);
		
            e.StatusId = c.StatusId;
            e.Description = c.Description;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;


            return e;
        }

        protected virtual IPickwaveStateMergePatched Map(IMergePatchPickwave c)
        {
			var stateEventId = new PickwaveEventId(c.PickwaveId, c.Version);
            IPickwaveStateMergePatched e = NewPickwaveStateMergePatched(stateEventId);

            e.StatusId = c.StatusId;
            e.Description = c.Description;
            e.Active = c.Active;
            e.IsPropertyStatusIdRemoved = c.IsPropertyStatusIdRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;


            return e;
        }

        protected virtual IPickwaveStateDeleted Map(IDeletePickwave c)
        {
			var stateEventId = new PickwaveEventId(c.PickwaveId, c.Version);
            IPickwaveStateDeleted e = NewPickwaveStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected PickwaveStateCreated NewPickwaveStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new PickwaveEventId(_state.PickwaveId, version);
            var e = NewPickwaveStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected PickwaveStateMergePatched NewPickwaveStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new PickwaveEventId(_state.PickwaveId, version);
            var e = NewPickwaveStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected PickwaveStateDeleted NewPickwaveStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new PickwaveEventId(_state.PickwaveId, version);
            var e = NewPickwaveStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private PickwaveStateCreated NewPickwaveStateCreated(PickwaveEventId stateEventId)
		{
			return new PickwaveStateCreated(stateEventId);			
		}

        private PickwaveStateMergePatched NewPickwaveStateMergePatched(PickwaveEventId stateEventId)
		{
			return new PickwaveStateMergePatched(stateEventId);
		}

        private PickwaveStateDeleted NewPickwaveStateDeleted(PickwaveEventId stateEventId)
		{
			return new PickwaveStateDeleted(stateEventId);
		}
    }

}

