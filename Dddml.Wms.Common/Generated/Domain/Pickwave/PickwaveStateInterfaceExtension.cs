// <autogenerated>
//   This file was generated by T4 code generator GeneratePickwaveDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Pickwave;

namespace Dddml.Wms.Domain.Pickwave
{

	public static partial class PickwaveStateInterfaceExtension
	{

        public static IPickwaveCommand ToCreateOrMergePatchPickwave<TCreatePickwave, TMergePatchPickwave>(this IPickwaveState state)
            where TCreatePickwave : ICreatePickwave, new()
            where TMergePatchPickwave : IMergePatchPickwave, new()
        {
            bool bUnsaved = ((IPickwaveState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreatePickwave<TCreatePickwave>();
            }
            else 
            {
                return state.ToMergePatchPickwave<TMergePatchPickwave>();
            }
        }

        public static TDeletePickwave ToDeletePickwave<TDeletePickwave>(this IPickwaveState state)
            where TDeletePickwave : IDeletePickwave, new()
        {
            var cmd = new TDeletePickwave();
            cmd.PickwaveId = state.PickwaveId;
            cmd.Version = ((IPickwaveStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchPickwave ToMergePatchPickwave<TMergePatchPickwave>(this IPickwaveState state)
            where TMergePatchPickwave : IMergePatchPickwave, new()
        {
            var cmd = new TMergePatchPickwave();

            cmd.Version = ((IPickwaveStateProperties)state).Version;

            cmd.PickwaveId = state.PickwaveId;
            cmd.StatusId = state.StatusId;
            cmd.Description = state.Description;
            cmd.Active = ((IPickwaveStateProperties)state).Active;
            
            if (state.StatusId == null) { cmd.IsPropertyStatusIdRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            return cmd;
        }

        public static TCreatePickwave ToCreatePickwave<TCreatePickwave>(this IPickwaveState state)
            where TCreatePickwave : ICreatePickwave, new()
        {
            var cmd = new TCreatePickwave();

            cmd.Version = ((IPickwaveStateProperties)state).Version;

            cmd.PickwaveId = state.PickwaveId;
            cmd.StatusId = state.StatusId;
            cmd.Description = state.Description;
            cmd.Active = ((IPickwaveStateProperties)state).Active;
            return cmd;
        }
		

	}

}

