// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public partial class AttributeUseStateDtoWrapper : StateDtoWrapperBase, IAttributeUseStateDto, IAttributeUseState
	{

        internal static IList<string> _collectionFieldNames = new string[] {  };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IAttributeUseState _state;

        public AttributeUseStateDtoWrapper()
        {
            this._state = new AttributeUseState();
        }

		public AttributeUseStateDtoWrapper(IAttributeUseState state)
		{
            this._state = state;
		}

		public IAttributeUseState ToAttributeUseState()
		{
			return this._state;
		}

		public virtual string AttributeId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("AttributeId"))
                {
                    return _state.AttributeId;
                }
                return null;
            }
            set
            {
                _state.AttributeId = value;
            }
        }

        string IAttributeUseStateProperties.AttributeId
        {
            get 
            {
                return (this._state as IAttributeUseStateProperties).AttributeId;
            }
            set 
            {
                (this._state as IAttributeUseStateProperties).AttributeId = value;
            }
        }

		public virtual int? SequenceNumber
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SequenceNumber"))
                {
                    return _state.SequenceNumber;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.SequenceNumber = value.Value;
                }
            }
        }

        int IAttributeUseStateProperties.SequenceNumber
        {
            get 
            {
                return (this._state as IAttributeUseStateProperties).SequenceNumber;
            }
            set 
            {
                (this._state as IAttributeUseStateProperties).SequenceNumber = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Active"))
                {
                    return (this._state as IAttributeUseStateProperties).Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IAttributeUseStateProperties).Active = value.Value;
                }
            }
        }

        bool IAttributeUseStateProperties.Active
        {
            get 
            {
                return (this._state as IAttributeUseStateProperties).Active;
            }
            set 
            {
                (this._state as IAttributeUseStateProperties).Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IAttributeUseStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IAttributeUseStateProperties).Version = value.Value;
                }
            }
        }

        long IAttributeUseStateProperties.Version
        {
            get 
            {
                return (this._state as IAttributeUseStateProperties).Version;
            }
            set 
            {
                (this._state as IAttributeUseStateProperties).Version = value;
            }
        }

		public virtual string AttributeSetId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("AttributeSetId"))
                {
                    return _state.AttributeSetId;
                }
                return null;
            }
            set
            {
                _state.AttributeSetId = value;
            }
        }

        string IAttributeUseStateProperties.AttributeSetId
        {
            get 
            {
                return (this._state as IAttributeUseStateProperties).AttributeSetId;
            }
            set 
            {
                (this._state as IAttributeUseStateProperties).AttributeSetId = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }
		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }
		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }
		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation


		AttributeSetAttributeUseId IGlobalIdentity<AttributeSetAttributeUseId>.GlobalId {
			get { return (_state as IAttributeUseState).GlobalId; }
		}

        string ILocalIdentity<string>.LocalId
        {
			get { return (_state as IAttributeUseState).LocalId; }
        }

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
            return (_state as IActive).IsActive();
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IAttributeUseState).CreatedBy; }
            set { (_state as IAttributeUseState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IAttributeUseState).CreatedAt; }
            set { (_state as IAttributeUseState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IAttributeUseState).UpdatedBy; }
            set { (_state as IAttributeUseState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IAttributeUseState).UpdatedAt; }
            set { (_state as IAttributeUseState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IEntityVersioned<long>.EntityVersion
		{
            get { return (_state as IAttributeUseStateProperties).Version; }
		}

		#endregion

        bool IAttributeUseState.IsUnsaved
        {
            get { return this.Version == AttributeUseState.VersionZero; }
        }


		void IAttributeUseState.When(IAttributeUseStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IAttributeUseState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void IAttributeUseState.When(IAttributeUseStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IAttributeUseState.When(IAttributeUseStateRemoved e)
		{
            throw new NotSupportedException();
		}


		void IAttributeUseState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////


	}

    partial class AttributeUseStateDtoWrapperCollection : StateDtoWrapperCollectionBase<AttributeUseStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(AttributeUseStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

