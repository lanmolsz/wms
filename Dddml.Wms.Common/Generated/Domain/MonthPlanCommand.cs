// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public abstract class MonthPlanCommandBase : IMonthPlanCommand
	{
		public virtual int Month { get; set; }


		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

		// Outer Id:

		public virtual PersonalName PersonalName { get; set; }

		// Outer Id:

		public virtual int Year { get; set; }


		// //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();


	}


    public abstract class MonthPlanIdGeneratorBase : IIdGenerator<int, ICreateMonthPlan>
    {
        public abstract int GenerateId(ICreateMonthPlan command);

        public abstract int GetNextId();

        public virtual int GetOrGenerateId(ICreateMonthPlan command, out bool reused)
        {
            throw new NotSupportedException();
        }

    }

	public class CreateMonthPlan : MonthPlanCommandBase, ICreateMonthPlan
	{
		
		public CreateMonthPlan ()
		{
		}


        private CreateDayPlanCommands _dayPlans = new CreateDayPlanCommands();

        public ICreateDayPlanCommands DayPlans
        {
            get
            {
                return this._dayPlans;
            }
        }

        public CreateDayPlan NewCreateDayPlan()
        {
            var c = new CreateDayPlan();
            c.PersonalName = this.PersonalName;

            c.Year = this.Year;

            c.Month = this.Month;

            return c;
        }

        ICreateDayPlan ICreateMonthPlan.NewCreateDayPlan()
        {
            return this.NewCreateDayPlan();
        }



        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }
	}


	public class MergePatchMonthPlan :MonthPlanCommandBase, IMergePatchMonthPlan
	{

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MergePatchMonthPlan ()
		{
		}

        private DayPlanCommands _dayPlanCommands = new DayPlanCommands();

        public IDayPlanCommands DayPlanCommands
        {
            get
            {
                return this._dayPlanCommands;
            }
        }


        public CreateDayPlan NewCreateDayPlan()
        {
            var c = new CreateDayPlan();
            c.PersonalName = this.PersonalName;

            c.Year = this.Year;

            c.Month = this.Month;

            return c;
        }

        ICreateDayPlan IMergePatchMonthPlan.NewCreateDayPlan()
        {
            return this.NewCreateDayPlan();
        }

        public MergePatchDayPlan NewMergePatchDayPlan()
        {
            var c = new MergePatchDayPlan();
            c.PersonalName = this.PersonalName;

            c.Year = this.Year;

            c.Month = this.Month;

            return c;
        }

        IMergePatchDayPlan IMergePatchMonthPlan.NewMergePatchDayPlan()
        {
            return this.NewMergePatchDayPlan();
        }


        public RemoveDayPlan NewRemoveDayPlan()
        {
            var c = new RemoveDayPlan();
            c.PersonalName = this.PersonalName;

            c.Year = this.Year;

            c.Month = this.Month;

            return c;
        }

        IRemoveDayPlan IMergePatchMonthPlan.NewRemoveDayPlan()
        {
            return this.NewRemoveDayPlan();
        }


        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class RemoveMonthPlan : MonthPlanCommandBase, IRemoveMonthPlan
	{
		public RemoveMonthPlan ()
		{
		}

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Remove;
        }
	}


    public class CreateDayPlanCommands : ICreateDayPlanCommands
    {
        private List<ICreateDayPlan> _innerCommands = new List<ICreateDayPlan>();

        public void Add(ICreateDayPlan c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(ICreateDayPlan c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<ICreateDayPlan> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public class DayPlanCommands : IDayPlanCommands
    {
        private List<IDayPlanCommand> _innerCommands = new List<IDayPlanCommand>();

        public void Add(IDayPlanCommand c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(IDayPlanCommand c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<IDayPlanCommand> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }




}

