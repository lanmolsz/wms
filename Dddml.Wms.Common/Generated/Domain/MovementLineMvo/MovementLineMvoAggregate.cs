// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementLineMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.MovementLineMvo;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.MovementLineMvo
{
    public partial class MovementLineMvoAggregate : AggregateBase, IMovementLineMvoAggregate
    {

        readonly IMovementLineMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IMovementLineMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        MovementLineId IGlobalIdentity<MovementLineId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public MovementLineMvoAggregate(IMovementLineMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IMovementLineMvoStateProperties)_state).MovementVersion == MovementLineMvoState.VersionZero)
            {
                if (IsCommandCreate((IMovementLineMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IMovementLineMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IMovementLineMvoCommand c)
        {
            return c.MovementVersion == MovementLineMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateMovementLineMvo c)
        {
            IMovementLineMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchMovementLineMvo c)
        {
            IMovementLineMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteMovementLineMvo c)
        {
            IMovementLineMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IMovementLineMvoStateCreated Map(ICreateMovementLineMvo c)
        {
			var stateEventId = new MovementLineMvoStateEventId(c.MovementLineId, c.MovementVersion);
            IMovementLineMvoStateCreated e = NewMovementLineMvoStateCreated(stateEventId);
		
            e.MovementQuantity = c.MovementQuantity;
            e.Version = c.Version;
            e.Active = c.Active;
            e.MovementDocumentTypeId = c.MovementDocumentTypeId;
            NewMovementLineMvoDocumentActionCommandAndExecute(c, _state, e);
            e.MovementMovementTypeId = c.MovementMovementTypeId;
            e.MovementDescription = c.MovementDescription;
            e.MovementCreatedBy = c.MovementCreatedBy;
            e.MovementCreatedAt = c.MovementCreatedAt;
            e.MovementUpdatedBy = c.MovementUpdatedBy;
            e.MovementUpdatedAt = c.MovementUpdatedAt;
            e.MovementActive = c.MovementActive;
            e.MovementDeleted = c.MovementDeleted;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var movementVersion = c.MovementVersion;


            return e;
        }

        protected virtual IMovementLineMvoStateMergePatched Map(IMergePatchMovementLineMvo c)
        {
			var stateEventId = new MovementLineMvoStateEventId(c.MovementLineId, c.MovementVersion);
            IMovementLineMvoStateMergePatched e = NewMovementLineMvoStateMergePatched(stateEventId);

            e.MovementQuantity = c.MovementQuantity;
            e.Version = c.Version;
            e.Active = c.Active;
            e.MovementDocumentTypeId = c.MovementDocumentTypeId;
            NewMovementLineMvoDocumentActionCommandAndExecute(c, _state, e);
            e.MovementMovementTypeId = c.MovementMovementTypeId;
            e.MovementDescription = c.MovementDescription;
            e.MovementCreatedBy = c.MovementCreatedBy;
            e.MovementCreatedAt = c.MovementCreatedAt;
            e.MovementUpdatedBy = c.MovementUpdatedBy;
            e.MovementUpdatedAt = c.MovementUpdatedAt;
            e.MovementActive = c.MovementActive;
            e.MovementDeleted = c.MovementDeleted;
            e.IsPropertyMovementQuantityRemoved = c.IsPropertyMovementQuantityRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyMovementDocumentTypeIdRemoved = c.IsPropertyMovementDocumentTypeIdRemoved;
            e.IsPropertyMovementMovementTypeIdRemoved = c.IsPropertyMovementMovementTypeIdRemoved;
            e.IsPropertyMovementDescriptionRemoved = c.IsPropertyMovementDescriptionRemoved;
            e.IsPropertyMovementCreatedByRemoved = c.IsPropertyMovementCreatedByRemoved;
            e.IsPropertyMovementCreatedAtRemoved = c.IsPropertyMovementCreatedAtRemoved;
            e.IsPropertyMovementUpdatedByRemoved = c.IsPropertyMovementUpdatedByRemoved;
            e.IsPropertyMovementUpdatedAtRemoved = c.IsPropertyMovementUpdatedAtRemoved;
            e.IsPropertyMovementActiveRemoved = c.IsPropertyMovementActiveRemoved;
            e.IsPropertyMovementDeletedRemoved = c.IsPropertyMovementDeletedRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var movementVersion = c.MovementVersion;


            return e;
        }

        protected virtual IMovementLineMvoStateDeleted Map(IDeleteMovementLineMvo c)
        {
			var stateEventId = new MovementLineMvoStateEventId(c.MovementLineId, c.MovementVersion);
            IMovementLineMvoStateDeleted e = NewMovementLineMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;


            return e;
        }

        protected void NewMovementLineMvoDocumentActionCommandAndExecute(IMergePatchMovementLineMvo c, IMovementLineMvoState s, IMovementLineMvoStateMergePatched e)
        {
            var pCommandHandler = this.MovementLineMvoDocumentActionCommandHandler;
            var pCmdContent = c.DocumentAction;
            var pCmd = new PropertyCommand<string, string> { Content = pCmdContent, GetState = () => s.MovementDocumentStatusId, SetState = p => e.MovementDocumentStatusId = p, OuterCommandType = CommandType.MergePatch };
            pCommandHandler.Execute(pCmd);
        }

        protected void NewMovementLineMvoDocumentActionCommandAndExecute(ICreateMovementLineMvo c, IMovementLineMvoState s, IMovementLineMvoStateCreated e)
        {
            var pCommandHandler = this.MovementLineMvoDocumentActionCommandHandler;
            var pCmdContent = c.DocumentAction;
            var pCmd = new PropertyCommand<string, string> { Content = pCmdContent, GetState = () => s.MovementDocumentStatusId, SetState = p => e.MovementDocumentStatusId = p, OuterCommandType = CommandType.Create };
            pCommandHandler.Execute(pCmd);
        }

        protected IPropertyCommandHandler<string, string> MovementLineMvoDocumentActionCommandHandler
        {
            get
            {
                return ApplicationContext.Current["MovementLineMvoDocumentActionCommandHandler"] as IPropertyCommandHandler<string, string>;
            }
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected MovementLineMvoStateCreated NewMovementLineMvoStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new MovementLineMvoStateEventId(_state.MovementLineId, ((IMovementLineMvoStateProperties)_state).MovementVersion);
            var e = NewMovementLineMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected MovementLineMvoStateMergePatched NewMovementLineMvoStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new MovementLineMvoStateEventId(_state.MovementLineId, ((IMovementLineMvoStateProperties)_state).MovementVersion);
            var e = NewMovementLineMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


        protected MovementLineMvoStateDeleted NewMovementLineMvoStateDeleted(string commandId, string requesterId)
        {
            var stateEventId = new MovementLineMvoStateEventId(_state.MovementLineId, ((IMovementLineMvoStateProperties)_state).MovementVersion);
            var e = NewMovementLineMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

////////////////////////

		private MovementLineMvoStateCreated NewMovementLineMvoStateCreated(MovementLineMvoStateEventId stateEventId)
		{
			return new MovementLineMvoStateCreated(stateEventId);			
		}

        private MovementLineMvoStateMergePatched NewMovementLineMvoStateMergePatched(MovementLineMvoStateEventId stateEventId)
		{
			return new MovementLineMvoStateMergePatched(stateEventId);
		}

        private MovementLineMvoStateDeleted NewMovementLineMvoStateDeleted(MovementLineMvoStateEventId stateEventId)
		{
			return new MovementLineMvoStateDeleted(stateEventId);
		}

    }

}

