// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public abstract class TeamCommandDtoBase : ICommandDto, ICreateTeam, IMergePatchTeam, IDeleteTeam
	{

		string IAggregateCommand<string, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteTeam)this).TeamName;
			}
		}


		long IAggregateCommand<string, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string TeamName { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

        public virtual PersonalNameDto[] Players { get; set; }

        ISet<PersonalName> ICreateOrMergePatchOrDeleteTeam.Players 
        {
            get
            {
                if (this.Players != null)
                {
                    var set = new HashSet<PersonalName>();
                    foreach (var i in this.Players)
                    {
                        set.Add(i.ToPersonalName());
                    }
                    return set;
                } else { return null; }
            }
            set
            {
                if (value != null)
                {
                    var list = new List<PersonalNameDto>();
                    foreach (var i in value)
                    {
                        list.Add(new PersonalNameDto(i));
                    }
                    this.Players = list.ToArray();
                } else { this.Players = null; }
            }
        }

        public virtual string[] Mascots { get; set; }

        ISet<string> ICreateOrMergePatchOrDeleteTeam.Mascots 
        {
            get
            {
                if (this.Mascots != null)
                {
                    var set = new HashSet<string>();
                    foreach (var i in this.Mascots)
                    {
                        set.Add(i);
                    }
                    return set;
                } else { return null; }
            }
            set
            {
                if (value != null)
                {
                    var list = new List<string>();
                    foreach (var i in value)
                    {
                        list.Add(i);
                    }
                    this.Mascots = list.ToArray();
                } else { this.Mascots = null; }
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IMergePatchTeam.IsPropertyDescriptionRemoved
        {
            get
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyPlayersRemoved { get; set; }

        bool IMergePatchTeam.IsPropertyPlayersRemoved
        {
            get
            {
                var b = this.IsPropertyPlayersRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyPlayersRemoved = value;
            }
        }

		public virtual bool? IsPropertyMascotsRemoved { get; set; }

        bool IMergePatchTeam.IsPropertyMascotsRemoved
        {
            get
            {
                var b = this.IsPropertyMascotsRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyMascotsRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchTeam.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteTeamDto : TeamCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateTeamDto : CreateOrMergePatchOrDeleteTeamDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchTeamDto : CreateOrMergePatchOrDeleteTeamDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteTeamDto : CreateOrMergePatchOrDeleteTeamDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}





}

