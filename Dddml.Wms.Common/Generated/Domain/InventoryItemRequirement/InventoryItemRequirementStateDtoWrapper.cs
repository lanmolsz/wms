// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirement
{

	public partial class InventoryItemRequirementStateDtoWrapper : StateDtoWrapperBase, IInventoryItemRequirementStateDto, IInventoryItemRequirementState
	{

        internal static IList<string> _collectionFieldNames = new string[] { "Entries" };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IInventoryItemRequirementState _state;

        public InventoryItemRequirementStateDtoWrapper()
        {
            this._state = new InventoryItemRequirementState();
        }

		public InventoryItemRequirementStateDtoWrapper(IInventoryItemRequirementState state)
		{
            this._state = state;
		}

		public IInventoryItemRequirementState ToInventoryItemRequirementState()
		{
			return this._state;
		}

        public InventoryItemIdDto InventoryItemRequirementId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("InventoryItemRequirementId"))
                {
					return (_state.InventoryItemRequirementId == null) ? null : new InventoryItemIdDtoWrapper(_state.InventoryItemRequirementId);
                }
                return null;
            }
            set
            {
                _state.InventoryItemRequirementId = (value == null) ? null : value.ToInventoryItemId();
            }
        }

        InventoryItemId IInventoryItemRequirementStateProperties.InventoryItemRequirementId
        {
            get 
            {
                return (this._state as IInventoryItemRequirementStateProperties).InventoryItemRequirementId;
            }
            set 
            {
                (this._state as IInventoryItemRequirementStateProperties).InventoryItemRequirementId = value;
            }
        }

		public virtual decimal? Quantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Quantity"))
                {
                    return _state.Quantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Quantity = value.Value;
                }
            }
        }

        decimal IInventoryItemRequirementStateProperties.Quantity
        {
            get 
            {
                return (this._state as IInventoryItemRequirementStateProperties).Quantity;
            }
            set 
            {
                (this._state as IInventoryItemRequirementStateProperties).Quantity = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IInventoryItemRequirementStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IInventoryItemRequirementStateProperties).Version = value.Value;
                }
            }
        }

        long IInventoryItemRequirementStateProperties.Version
        {
            get 
            {
                return (this._state as IInventoryItemRequirementStateProperties).Version;
            }
            set 
            {
                (this._state as IInventoryItemRequirementStateProperties).Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		InventoryItemId IGlobalIdentity<InventoryItemId>.GlobalId
		{
			get { return (_state as IInventoryItemRequirementState).GlobalId; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IInventoryItemRequirementState).CreatedBy; }
            set { (_state as IInventoryItemRequirementState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IInventoryItemRequirementState).CreatedAt; }
            set { (_state as IInventoryItemRequirementState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IInventoryItemRequirementState).UpdatedBy; }
            set { (_state as IInventoryItemRequirementState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IInventoryItemRequirementState).UpdatedAt; }
            set { (_state as IInventoryItemRequirementState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as IInventoryItemRequirementStateProperties).Version; }
		}

		#endregion

        bool IInventoryItemRequirementState.IsUnsaved
        {
            get { return this.Version == InventoryItemRequirementState.VersionZero; }
        }

        public virtual IInventoryItemRequirementEntryStateDto[] Entries
        {
            get 
            {
                if (!(this as IStateDtoWrapper).ReturnedFieldsContains("Entries"))
                {
                    return null;
                }
                var dtos = new List<IInventoryItemRequirementEntryStateDto>();
                if (this._state.Entries != null)
                {
                    foreach (var s in this._state.Entries)
                    {
                        var dto = new InventoryItemRequirementEntryStateDtoWrapper((InventoryItemRequirementEntryState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "Entries");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDtoWrapper).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDtoWrapper).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new InventoryItemRequirementEntryStateDtoWrapper[0]; }
                var states = new List<IInventoryItemRequirementEntryState>();
                foreach (var s in value)
                {
                    states.Add(s.ToInventoryItemRequirementEntryState());
                }
                this._state.Entries = new DtoInventoryItemRequirementEntryStates(this._state, states);
            }
        }

        IInventoryItemRequirementEntryStates IInventoryItemRequirementState.Entries
        {
            get { return _state.Entries; }
            set { _state.Entries = value; }
        }

		void IInventoryItemRequirementState.When(IInventoryItemRequirementStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IInventoryItemRequirementState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

        public virtual string CommandId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CommandId"))
                {
                    return _state.CommandId; 
                }
                return null;
            }
            set { _state.CommandId = value; }
        }

		void IInventoryItemRequirementState.When(IInventoryItemRequirementStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IInventoryItemRequirementState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

        public class DtoInventoryItemRequirementEntryStates : IInventoryItemRequirementEntryStates
        {

            private IInventoryItemRequirementState _outerState;

            private IEnumerable<IInventoryItemRequirementEntryState> _innerStates;

            public DtoInventoryItemRequirementEntryStates(IInventoryItemRequirementState outerState, IEnumerable<IInventoryItemRequirementEntryState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new IInventoryItemRequirementEntryState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<IInventoryItemRequirementEntryState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public IInventoryItemRequirementEntryState Get(long entrySeqId)
            {
                throw new NotSupportedException();
            }

            public IInventoryItemRequirementEntryState Get(long entrySeqId, bool forCreation)
            {
                throw new NotSupportedException();
            }

            public IInventoryItemRequirementEntryState Get(long entrySeqId, bool forCreation, bool nullAllowed)
            {
                throw new NotSupportedException();
            }

            public void Remove(IInventoryItemRequirementEntryState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(IInventoryItemRequirementEntryState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

	}

    partial class InventoryItemRequirementStateDtoWrapperCollection : StateDtoWrapperCollectionBase<InventoryItemRequirementStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(InventoryItemRequirementStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

