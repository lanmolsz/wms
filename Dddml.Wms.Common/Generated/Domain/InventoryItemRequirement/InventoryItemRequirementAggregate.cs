// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirement
{
    public partial class InventoryItemRequirementAggregate : AggregateBase, IInventoryItemRequirementAggregate
    {

        readonly IInventoryItemRequirementState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IInventoryItemRequirementState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        InventoryItemId IGlobalIdentity<InventoryItemId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public InventoryItemRequirementAggregate(IInventoryItemRequirementState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IInventoryItemRequirementStateProperties)_state).Version == InventoryItemRequirementState.VersionZero)
            {
                if (IsCommandCreate((IInventoryItemRequirementCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (IsCommandCreate((IInventoryItemRequirementCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IInventoryItemRequirementCommand c)
        {
            return c.Version == InventoryItemRequirementState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateInventoryItemRequirement c)
        {
            IInventoryItemRequirementStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchInventoryItemRequirement c)
        {
            IInventoryItemRequirementStateMergePatched e = Map(c);
            Apply(e);
        }


        protected virtual IInventoryItemRequirementStateCreated Map(ICreateInventoryItemRequirement c)
        {
			var stateEventId = new InventoryItemRequirementStateEventId(c.InventoryItemRequirementId, c.Version);
            IInventoryItemRequirementStateCreated e = NewInventoryItemRequirementStateCreated(stateEventId);
		
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var version = c.Version;

            decimal quantity = default(decimal);
            foreach (ICreateInventoryItemRequirementEntry innerCommand in c.Entries)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IInventoryItemRequirementEntryStateCreated innerEvent = MapCreate(innerCommand, c, version, _state);
                e.AddInventoryItemRequirementEntryEvent(innerEvent);
                quantity = quantity + (innerEvent.Quantity != null ? innerEvent.Quantity.GetValueOrDefault() : default(decimal));
            }

            e.Quantity = quantity;

            return e;
        }

        protected virtual IInventoryItemRequirementStateMergePatched Map(IMergePatchInventoryItemRequirement c)
        {
			var stateEventId = new InventoryItemRequirementStateEventId(c.InventoryItemRequirementId, c.Version);
            IInventoryItemRequirementStateMergePatched e = NewInventoryItemRequirementStateMergePatched(stateEventId);


            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var version = c.Version;

            decimal quantity = _state.Quantity;
            foreach (IInventoryItemRequirementEntryCommand innerCommand in c.InventoryItemRequirementEntryCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IInventoryItemRequirementEntryStateEvent innerEvent = Map(innerCommand, c, version, _state);
                e.AddInventoryItemRequirementEntryEvent(innerEvent);
                // ////////////////
                if (!(innerEvent is IInventoryItemRequirementEntryStateCreated)) { continue; }
                var entryCreated = (IInventoryItemRequirementEntryStateCreated)innerEvent;
                quantity = quantity + (entryCreated.Quantity != null ? entryCreated.Quantity.GetValueOrDefault() : default(decimal));
                // ////////////////
            }

            e.Quantity = quantity;

            return e;
        }


        protected void ThrowOnInconsistentCommands(IInventoryItemRequirementCommand command, IInventoryItemRequirementEntryCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrDeleteInventoryItemRequirement;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemoveInventoryItemRequirementEntry;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.InventoryItemRequirementId == default(InventoryItemId))
            {
                innerProperties.InventoryItemRequirementId = properties.InventoryItemRequirementId;
            }
            else
            {
                var outerInventoryItemRequirementIdName = "InventoryItemRequirementId";
                var outerInventoryItemRequirementIdValue = properties.InventoryItemRequirementId;
                var innerInventoryItemRequirementIdName = "InventoryItemRequirementId";
                var innerInventoryItemRequirementIdValue = innerProperties.InventoryItemRequirementId;
                ThrowOnInconsistentIds(innerProperties, innerInventoryItemRequirementIdName, innerInventoryItemRequirementIdValue, outerInventoryItemRequirementIdName, outerInventoryItemRequirementIdValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected virtual IInventoryItemRequirementEntryStateEvent Map(IInventoryItemRequirementEntryCommand c, IInventoryItemRequirementCommand outerCommand, long version, IInventoryItemRequirementState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreateInventoryItemRequirementEntry) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            throw new NotSupportedException();
        }


        protected virtual IInventoryItemRequirementEntryStateCreated MapCreate(ICreateInventoryItemRequirementEntry c, IInventoryItemRequirementCommand outerCommand, long version, IInventoryItemRequirementState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InventoryItemRequirementEntryStateEventId(c.InventoryItemRequirementId, c.EntrySeqId, version);
            IInventoryItemRequirementEntryStateCreated e = NewInventoryItemRequirementEntryStateCreated(stateEventId);
            var s = outerState.Entries.Get(c.EntrySeqId, true);

            e.Quantity = c.Quantity;
            e.SourceEventId = c.SourceEventId;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
            return e;

        }// END Map(ICreate... ////////////////////////////



        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected InventoryItemRequirementStateCreated NewInventoryItemRequirementStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new InventoryItemRequirementStateEventId(_state.InventoryItemRequirementId, ((IInventoryItemRequirementStateProperties)_state).Version);
            var e = NewInventoryItemRequirementStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected InventoryItemRequirementStateMergePatched NewInventoryItemRequirementStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new InventoryItemRequirementStateEventId(_state.InventoryItemRequirementId, ((IInventoryItemRequirementStateProperties)_state).Version);
            var e = NewInventoryItemRequirementStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


////////////////////////

		private InventoryItemRequirementStateCreated NewInventoryItemRequirementStateCreated(InventoryItemRequirementStateEventId stateEventId)
		{
			return new InventoryItemRequirementStateCreated(stateEventId);			
		}

        private InventoryItemRequirementStateMergePatched NewInventoryItemRequirementStateMergePatched(InventoryItemRequirementStateEventId stateEventId)
		{
			return new InventoryItemRequirementStateMergePatched(stateEventId);
		}


		private InventoryItemRequirementEntryStateCreated NewInventoryItemRequirementEntryStateCreated(InventoryItemRequirementEntryStateEventId stateEventId)
		{
			return new InventoryItemRequirementEntryStateCreated(stateEventId);
		}


    }

}

