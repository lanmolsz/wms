// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirement
{

    public class InventoryItemRequirementStateEventDtoConverter
    {
        public virtual InventoryItemRequirementStateCreatedOrMergePatchedOrDeletedDto ToInventoryItemRequirementStateEventDto(IInventoryItemRequirementStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IInventoryItemRequirementStateCreated)stateEvent;
                return ToInventoryItemRequirementStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IInventoryItemRequirementStateMergePatched)stateEvent;
                return ToInventoryItemRequirementStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual InventoryItemRequirementStateCreatedDto ToInventoryItemRequirementStateCreatedDto(IInventoryItemRequirementStateCreated e)
        {
            var dto = new InventoryItemRequirementStateCreatedDto();
            dto.InventoryItemRequirementEventId = new InventoryItemRequirementEventIdDtoWrapper(e.InventoryItemRequirementEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Quantity = e.Quantity;
            var inventoryItemRequirementEntryEvents = new List<InventoryItemRequirementEntryStateCreatedDto>();
            foreach (var ee in e.InventoryItemRequirementEntryEvents)
            {
                InventoryItemRequirementEntryStateCreatedDto eeDto = InventoryItemRequirementEntryStateEventDtoConverter.ToInventoryItemRequirementEntryStateCreatedDto(ee);
                inventoryItemRequirementEntryEvents.Add(eeDto);
            }
            dto.InventoryItemRequirementEntryEvents = inventoryItemRequirementEntryEvents.ToArray();

            return dto;
        }

        public virtual InventoryItemRequirementStateMergePatchedDto ToInventoryItemRequirementStateMergePatchedDto(IInventoryItemRequirementStateMergePatched e)
        {
            var dto = new InventoryItemRequirementStateMergePatchedDto();
            dto.InventoryItemRequirementEventId = new InventoryItemRequirementEventIdDtoWrapper(e.InventoryItemRequirementEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Quantity = e.Quantity;
            dto.IsPropertyQuantityRemoved = e.IsPropertyQuantityRemoved;
            var inventoryItemRequirementEntryEvents = new List<InventoryItemRequirementEntryStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.InventoryItemRequirementEntryEvents)
            {
                InventoryItemRequirementEntryStateCreatedOrMergePatchedOrRemovedDto eeDto = InventoryItemRequirementEntryStateEventDtoConverter.ToInventoryItemRequirementEntryStateEventDto(ee);
                inventoryItemRequirementEntryEvents.Add(eeDto);
            }
            dto.InventoryItemRequirementEntryEvents = inventoryItemRequirementEntryEvents.ToArray();


            return dto;
        }


        protected virtual InventoryItemRequirementEntryStateEventDtoConverter InventoryItemRequirementEntryStateEventDtoConverter
        {
            get
            {
                return new InventoryItemRequirementEntryStateEventDtoConverter();
            }
        }


    }


}

