// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirement
{

	public abstract class InventoryItemRequirementStateEventBase : IInventoryItemRequirementStateEvent
	{

		public virtual InventoryItemRequirementEventId InventoryItemRequirementEventId { get; set; }

        public virtual InventoryItemId InventoryItemRequirementId
        {
            get { return InventoryItemRequirementEventId.InventoryItemRequirementId; }
            set { InventoryItemRequirementEventId.InventoryItemRequirementId = value; }
        }

		public virtual decimal? Quantity { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		InventoryItemRequirementEventId IGlobalIdentity<InventoryItemRequirementEventId>.GlobalId {
			get
			{
				return this.InventoryItemRequirementEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IInventoryItemRequirementStateEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected InventoryItemRequirementStateEventBase()
        {
        }

        protected InventoryItemRequirementStateEventBase(InventoryItemRequirementEventId stateEventId)
        {
            this.InventoryItemRequirementEventId = stateEventId;
        }

        protected InventoryItemRequirementEntryEventId NewInventoryItemRequirementEntryEventId(long entrySeqId)
        {
            var stateEventId = new InventoryItemRequirementEntryEventId(this.InventoryItemRequirementEventId.InventoryItemRequirementId, entrySeqId, this.InventoryItemRequirementEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IInventoryItemRequirementEntryStateEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IInventoryItemRequirementStateEvent oe, IInventoryItemRequirementEntryStateEvent e)
		{
			if (!oe.InventoryItemRequirementEventId.InventoryItemRequirementId.Equals(e.InventoryItemRequirementEntryEventId.InventoryItemRequirementId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id InventoryItemRequirementId {0} but inner id InventoryItemRequirementId {1}", 
					oe.InventoryItemRequirementEventId.InventoryItemRequirementId, e.InventoryItemRequirementEntryEventId.InventoryItemRequirementId);
			}
		}



        string IStateEventDto.StateEventType
        {
            get { return this.GetStateEventType(); }
        }

        protected abstract string GetStateEventType();

	}

	public class InventoryItemRequirementStateCreated : InventoryItemRequirementStateEventBase, IInventoryItemRequirementStateCreated
	{
		public InventoryItemRequirementStateCreated () : this(new InventoryItemRequirementEventId())
		{
		}

		public InventoryItemRequirementStateCreated (InventoryItemRequirementEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<InventoryItemRequirementEntryEventId, IInventoryItemRequirementEntryStateCreated> _inventoryItemRequirementEntryEvents = new Dictionary<InventoryItemRequirementEntryEventId, IInventoryItemRequirementEntryStateCreated>();
        
        private IEnumerable<IInventoryItemRequirementEntryStateCreated> _readOnlyInventoryItemRequirementEntryEvents;

        public virtual IEnumerable<IInventoryItemRequirementEntryStateCreated> InventoryItemRequirementEntryEvents
        {
            get
            {
                return this._inventoryItemRequirementEntryEvents.Values;
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddInventoryItemRequirementEntryEvent(e);
                    }
                }
                else { this._inventoryItemRequirementEntryEvents.Clear(); }
            }
        }
    
		public virtual void AddInventoryItemRequirementEntryEvent(IInventoryItemRequirementEntryStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._inventoryItemRequirementEntryEvents[e.InventoryItemRequirementEntryEventId] = e;
		}

        public virtual IInventoryItemRequirementEntryStateCreated NewInventoryItemRequirementEntryStateCreated(long entrySeqId)
        {
            var stateEvent = new InventoryItemRequirementEntryStateCreated(NewInventoryItemRequirementEntryEventId(entrySeqId));
            return stateEvent;
        }


        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class InventoryItemRequirementStateMergePatched : InventoryItemRequirementStateEventBase, IInventoryItemRequirementStateMergePatched
	{
		public virtual bool IsPropertyQuantityRemoved { get; set; }


		public InventoryItemRequirementStateMergePatched ()
		{
		}

		public InventoryItemRequirementStateMergePatched (InventoryItemRequirementEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<InventoryItemRequirementEntryEventId, IInventoryItemRequirementEntryStateEvent> _inventoryItemRequirementEntryEvents = new Dictionary<InventoryItemRequirementEntryEventId, IInventoryItemRequirementEntryStateEvent>();

        private IEnumerable<IInventoryItemRequirementEntryStateEvent> _readOnlyInventoryItemRequirementEntryEvents;
        
        public virtual IEnumerable<IInventoryItemRequirementEntryStateEvent> InventoryItemRequirementEntryEvents
        {
            get
            {
                return this._inventoryItemRequirementEntryEvents.Values;
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddInventoryItemRequirementEntryEvent(e);
                    }
                }
                else { this._inventoryItemRequirementEntryEvents.Clear(); }
            }
        }

		public virtual void AddInventoryItemRequirementEntryEvent(IInventoryItemRequirementEntryStateEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._inventoryItemRequirementEntryEvents[e.InventoryItemRequirementEntryEventId] = e;
		}

        public virtual IInventoryItemRequirementEntryStateCreated NewInventoryItemRequirementEntryStateCreated(long entrySeqId)
        {
            var stateEvent = new InventoryItemRequirementEntryStateCreated(NewInventoryItemRequirementEntryEventId(entrySeqId));
            return stateEvent;
        }


        protected override string GetStateEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

