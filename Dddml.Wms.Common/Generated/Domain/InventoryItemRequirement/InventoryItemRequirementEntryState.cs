// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirement
{

	public partial class InventoryItemRequirementEntryState : InventoryItemRequirementEntryStateProperties, IInventoryItemRequirementEntryState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }

        public virtual string CommandId { get; set; }


		#region IIdentity implementation

        private InventoryItemRequirementEntryId _inventoryItemRequirementEntryId = new InventoryItemRequirementEntryId();

        public virtual InventoryItemRequirementEntryId InventoryItemRequirementEntryId 
        {
            get { return this._inventoryItemRequirementEntryId; }
            set { this._inventoryItemRequirementEntryId = value; }
        }

		InventoryItemRequirementEntryId IGlobalIdentity<InventoryItemRequirementEntryId>.GlobalId {
			get {
				return  this.InventoryItemRequirementEntryId;
			}
		}

        long ILocalIdentity<long>.LocalId
        {
            get
            {
                return this.EntrySeqId;
            }
        }


        public override InventoryItemId InventoryItemRequirementId {
			get {
				return this.InventoryItemRequirementEntryId.InventoryItemRequirementId;
			}
			set {
				this.InventoryItemRequirementEntryId.InventoryItemRequirementId = value;
			}
		}

        public override long EntrySeqId {
			get {
				return this.InventoryItemRequirementEntryId.EntrySeqId;
			}
			set {
				this.InventoryItemRequirementEntryId.EntrySeqId = value;
			}
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IEntityVersioned<long>.EntityVersion
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IInventoryItemRequirementEntryState.IsUnsaved
        {
            get { return this.Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public InventoryItemRequirementEntryState() : this(false)
        {
        }

        public InventoryItemRequirementEntryState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IInventoryItemRequirementEntryStateCreated e)
		{
			ThrowOnWrongEvent(e);
            this.Quantity = (e.Quantity != null && e.Quantity.HasValue) ? e.Quantity.Value : default(decimal);

			this.SourceEventId = e.SourceEventId;

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}



		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IInventoryItemRequirementEntryEvent e)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("InventoryItemRequirementEntry|");

            var stateEntityIdInventoryItemRequirementId = (this as IGlobalIdentity<InventoryItemRequirementEntryId>).GlobalId.InventoryItemRequirementId;
            var eventEntityIdInventoryItemRequirementId = e.InventoryItemRequirementEntryEventId.InventoryItemRequirementId;
            if (stateEntityIdInventoryItemRequirementId != eventEntityIdInventoryItemRequirementId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id InventoryItemRequirementId {0} in state but entity id InventoryItemRequirementId {1} in event", stateEntityIdInventoryItemRequirementId, eventEntityIdInventoryItemRequirementId);
            }
            id.Append(stateEntityIdInventoryItemRequirementId).Append(",");

            var stateEntityIdEntrySeqId = (this as IGlobalIdentity<InventoryItemRequirementEntryId>).GlobalId.EntrySeqId;
            var eventEntityIdEntrySeqId = e.InventoryItemRequirementEntryEventId.EntrySeqId;
            if (stateEntityIdEntrySeqId != eventEntityIdEntrySeqId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id EntrySeqId {0} in state but entity id EntrySeqId {1} in event", stateEntityIdEntrySeqId, eventEntityIdEntrySeqId);
            }
            id.Append(stateEntityIdEntrySeqId).Append(",");

            id.Append("]");

            if (ForReapplying) { return; }
            var stateVersion = this.Version;
            var stateEvent = e is IInventoryItemRequirementEntryStateEvent ? (IInventoryItemRequirementEntryStateEvent)e : null;
            if (e == null) { return; }
            stateEvent.Version = stateVersion;
            //var stateEventStateVersion = stateEvent.Version;
            //if (InventoryItemRequirementEntryState.VersionZero == stateEventStateVersion)
            //{
            //    stateEventStateVersion = stateEvent.Version = stateVersion;
            //}
            //if (stateVersion != stateEventStateVersion)
            //{
            //    throw OptimisticConcurrencyException.Create(stateVersion, stateEventStateVersion, id.ToString());
            //}
        }
    }

}

