// <autogenerated>
//   This file was generated by T4 code generator GenerateBoundedContextDomainAggregates.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;

namespace Dddml.Wms.Domain
{

	public abstract class PersonCommandBase : IPersonCommand
	{
		public virtual PersonalName PersonalName { get; set; }


		PersonalName IAggregateCommand<PersonalName, long>.AggregateId
		{
			get
			{
				return this.PersonalName;
			}
		}


		long IAggregateCommand<PersonalName, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual DateTime? BirthDate { get; set; }

		public virtual PersonalName Loves { get; set; }

		public virtual Contact EmergencyContact { get; set; }

		public virtual string Email { get; set; }

		public virtual bool? Active { get; set; }


		// //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();


	}


    public abstract class PersonIdGeneratorBase : IIdGenerator<PersonalName, ICreatePerson>
    {
        public abstract PersonalName GenerateId(ICreatePerson command);

        public abstract PersonalName GetNextId();

        public virtual PersonalName GetOrGenerateId(ICreatePerson command, out bool reused)
        {
            throw new NotSupportedException();
        }

    }

	public class CreatePerson : PersonCommandBase, ICreatePerson
	{
		
		public CreatePerson ()
		{
		}


        private CreateYearPlanCommands _yearPlans = new CreateYearPlanCommands();

        public ICreateYearPlanCommands YearPlans
        {
            get
            {
                return this._yearPlans;
            }
        }

        public CreateYearPlan NewCreateYearPlan()
        {
            var c = new CreateYearPlan();
            c.PersonalName = this.PersonalName;

            return c;
        }

        ICreateYearPlan ICreatePerson.NewCreateYearPlan()
        {
            return this.NewCreateYearPlan();
        }



        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }
	}


	public class MergePatchPerson :PersonCommandBase, IMergePatchPerson
	{

		public virtual bool IsPropertyBirthDateRemoved { get; set; }

		public virtual bool IsPropertyLovesRemoved { get; set; }

		public virtual bool IsPropertyEmergencyContactRemoved { get; set; }

		public virtual bool IsPropertyEmailRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MergePatchPerson ()
		{
		}

        private YearPlanCommands _yearPlanCommands = new YearPlanCommands();

        public IYearPlanCommands YearPlanCommands
        {
            get
            {
                return this._yearPlanCommands;
            }
        }


        public CreateYearPlan NewCreateYearPlan()
        {
            var c = new CreateYearPlan();
            c.PersonalName = this.PersonalName;

            return c;
        }

        ICreateYearPlan IMergePatchPerson.NewCreateYearPlan()
        {
            return this.NewCreateYearPlan();
        }

        public MergePatchYearPlan NewMergePatchYearPlan()
        {
            var c = new MergePatchYearPlan();
            c.PersonalName = this.PersonalName;

            return c;
        }

        IMergePatchYearPlan IMergePatchPerson.NewMergePatchYearPlan()
        {
            return this.NewMergePatchYearPlan();
        }


        public RemoveYearPlan NewRemoveYearPlan()
        {
            var c = new RemoveYearPlan();
            c.PersonalName = this.PersonalName;

            return c;
        }

        IRemoveYearPlan IMergePatchPerson.NewRemoveYearPlan()
        {
            return this.NewRemoveYearPlan();
        }


        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeletePerson : PersonCommandBase, IDeletePerson
	{
		public DeletePerson ()
		{
		}

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }

	}


    public class CreateYearPlanCommands : ICreateYearPlanCommands
    {
        private List<ICreateYearPlan> _innerCommands = new List<ICreateYearPlan>();

        public void Add(ICreateYearPlan c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(ICreateYearPlan c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<ICreateYearPlan> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public class YearPlanCommands : IYearPlanCommands
    {
        private List<IYearPlanCommand> _innerCommands = new List<IYearPlanCommand>();

        public void Add(IYearPlanCommand c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(IYearPlanCommand c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<IYearPlanCommand> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }




}

