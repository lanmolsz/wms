// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeSetDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.AttributeSet;

namespace Dddml.Wms.Domain.AttributeSet
{

	public abstract class AttributeSetEventBase : IAttributeSetEvent
	{

		public virtual AttributeSetEventId AttributeSetEventId { get; set; }

        public virtual string AttributeSetId
        {
            get { return AttributeSetEventId.AttributeSetId; }
            set { AttributeSetEventId.AttributeSetId = value; }
        }

		public virtual string AttributeSetName { get; set; }

		public virtual string OrganizationId { get; set; }

		public virtual string Description { get; set; }

		public virtual string ReferenceId { get; set; }

		public virtual bool? IsInstanceAttributeSet { get; set; }

		public virtual bool? IsMandatory { get; set; }

		public virtual bool? Active { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		AttributeSetEventId IGlobalIdentity<AttributeSetEventId>.GlobalId {
			get
			{
				return this.AttributeSetEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IAttributeSetEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected AttributeSetEventBase()
        {
        }

        protected AttributeSetEventBase(AttributeSetEventId stateEventId)
        {
            this.AttributeSetEventId = stateEventId;
        }

		protected IAttributeUseEventDao AttributeUseEventDao
		{
			get { return ApplicationContext.Current["AttributeUseEventDao"] as IAttributeUseEventDao; }
		}

        protected AttributeUseEventId NewAttributeUseEventId(string attributeId)
        {
            var stateEventId = new AttributeUseEventId(this.AttributeSetEventId.AttributeSetId, attributeId, this.AttributeSetEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IAttributeUseEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IAttributeSetEvent oe, IAttributeUseEvent e)
		{
			if (!oe.AttributeSetEventId.AttributeSetId.Equals(e.AttributeUseEventId.AttributeSetId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id AttributeSetId {0} but inner id AttributeSetId {1}", 
					oe.AttributeSetEventId.AttributeSetId, e.AttributeUseEventId.AttributeSetId);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

	public class AttributeSetStateCreated : AttributeSetEventBase, IAttributeSetStateCreated, ISaveable
	{
		public AttributeSetStateCreated () : this(new AttributeSetEventId())
		{
		}

		public AttributeSetStateCreated (AttributeSetEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<AttributeUseEventId, IAttributeUseStateCreated> _attributeUseEvents = new Dictionary<AttributeUseEventId, IAttributeUseStateCreated>();
        
        private IEnumerable<IAttributeUseStateCreated> _readOnlyAttributeUseEvents;

        public virtual IEnumerable<IAttributeUseStateCreated> AttributeUseEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeUseEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeUseEvents != null) { return _readOnlyAttributeUseEvents; }
                    var eventDao = AttributeUseEventDao;
                    var eL = new List<IAttributeUseStateCreated>();
                    foreach (var e in eventDao.FindByAttributeSetEventId(this.AttributeSetEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeUseStateCreated)e);
                    }
                    return (_readOnlyAttributeUseEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeUseEvent(e);
                    }
                }
                else { this._attributeUseEvents.Clear(); }
            }
        }
    
		public virtual void AddAttributeUseEvent(IAttributeUseStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeUseEvents[e.AttributeUseEventId] = e;
		}

        public virtual IAttributeUseStateCreated NewAttributeUseStateCreated(string attributeId)
        {
            var stateEvent = new AttributeUseStateCreated(NewAttributeUseEventId(attributeId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeUseStateCreated e in this.AttributeUseEvents) {
				AttributeUseEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class AttributeSetStateMergePatched : AttributeSetEventBase, IAttributeSetStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyAttributeSetNameRemoved { get; set; }

		public virtual bool IsPropertyOrganizationIdRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyReferenceIdRemoved { get; set; }

		public virtual bool IsPropertyIsInstanceAttributeSetRemoved { get; set; }

		public virtual bool IsPropertyIsMandatoryRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public AttributeSetStateMergePatched ()
		{
		}

		public AttributeSetStateMergePatched (AttributeSetEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<AttributeUseEventId, IAttributeUseEvent> _attributeUseEvents = new Dictionary<AttributeUseEventId, IAttributeUseEvent>();

        private IEnumerable<IAttributeUseEvent> _readOnlyAttributeUseEvents;
        
        public virtual IEnumerable<IAttributeUseEvent> AttributeUseEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeUseEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeUseEvents != null) { return _readOnlyAttributeUseEvents; }
                    var eventDao = AttributeUseEventDao;
                    var eL = new List<IAttributeUseEvent>();
                    foreach (var e in eventDao.FindByAttributeSetEventId(this.AttributeSetEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeUseEvent)e);
                    }
                    return (_readOnlyAttributeUseEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeUseEvent(e);
                    }
                }
                else { this._attributeUseEvents.Clear(); }
            }
        }

		public virtual void AddAttributeUseEvent(IAttributeUseEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeUseEvents[e.AttributeUseEventId] = e;
		}

        public virtual IAttributeUseStateCreated NewAttributeUseStateCreated(string attributeId)
        {
            var stateEvent = new AttributeUseStateCreated(NewAttributeUseEventId(attributeId));
            return stateEvent;
        }

        public virtual IAttributeUseStateMergePatched NewAttributeUseStateMergePatched(string attributeId)
        {
            var stateEvent = new AttributeUseStateMergePatched(NewAttributeUseEventId(attributeId));
            return stateEvent;
        }

        public virtual IAttributeUseStateRemoved NewAttributeUseStateRemoved(string attributeId)
        {
            var stateEvent = new AttributeUseStateRemoved(NewAttributeUseEventId(attributeId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeUseEvent e in this.AttributeUseEvents) {
				AttributeUseEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class AttributeSetStateDeleted : AttributeSetEventBase, IAttributeSetStateDeleted, ISaveable
	{
		public AttributeSetStateDeleted ()
		{
		}

		public AttributeSetStateDeleted (AttributeSetEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

		private Dictionary<AttributeUseEventId, IAttributeUseStateRemoved> _attributeUseEvents = new Dictionary<AttributeUseEventId, IAttributeUseStateRemoved>();
		
        private IEnumerable<IAttributeUseStateRemoved> _readOnlyAttributeUseEvents;

        public virtual IEnumerable<IAttributeUseStateRemoved> AttributeUseEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._attributeUseEvents.Values;
                }
                else
                {
                    if (_readOnlyAttributeUseEvents != null) { return _readOnlyAttributeUseEvents; }
                    var eventDao = AttributeUseEventDao;
                    var eL = new List<IAttributeUseStateRemoved>();
                    foreach (var e in eventDao.FindByAttributeSetEventId(this.AttributeSetEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IAttributeUseStateRemoved)e);
                    }
                    return (_readOnlyAttributeUseEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddAttributeUseEvent(e);
                    }
                }
                else { this._attributeUseEvents.Clear(); }
            }
        }
	
		public virtual void AddAttributeUseEvent(IAttributeUseStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._attributeUseEvents[e.AttributeUseEventId] = e;
		}

        public virtual IAttributeUseStateRemoved NewAttributeUseStateRemoved(string attributeId)
        {
            var stateEvent = new AttributeUseStateRemoved(NewAttributeUseEventId(attributeId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IAttributeUseStateRemoved e in this.AttributeUseEvents) {
				AttributeUseEventDao.Save(e);
			}
		}


	}



}

