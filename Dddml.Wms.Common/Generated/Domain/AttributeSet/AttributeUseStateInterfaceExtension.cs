// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeSetDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.AttributeSet;

namespace Dddml.Wms.Domain.AttributeSet
{

	public static partial class AttributeUseStateInterfaceExtension
	{

        public static IAttributeUseCommand ToCreateOrMergePatchAttributeUse<TCreateAttributeUse, TMergePatchAttributeUse>(this IAttributeUseState state)
            where TCreateAttributeUse : ICreateAttributeUse, new()
            where TMergePatchAttributeUse : IMergePatchAttributeUse, new()
        {
            bool bUnsaved = ((IAttributeUseState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateAttributeUse<TCreateAttributeUse>();
            }
            else 
            {
                return state.ToMergePatchAttributeUse<TMergePatchAttributeUse>();
            }
        }

        public static TRemoveAttributeUse ToRemoveAttributeUse<TRemoveAttributeUse>(this IAttributeUseState state)
            where TRemoveAttributeUse : IRemoveAttributeUse, new()
        {
            var cmd = new TRemoveAttributeUse();
            cmd.AttributeId = state.AttributeId;
            return cmd;
        }

        public static TMergePatchAttributeUse ToMergePatchAttributeUse<TMergePatchAttributeUse>(this IAttributeUseState state)
            where TMergePatchAttributeUse : IMergePatchAttributeUse, new()
        {
            var cmd = new TMergePatchAttributeUse();

            cmd.AttributeId = state.AttributeId;
            cmd.SequenceNumber = state.SequenceNumber;
            cmd.Active = ((IAttributeUseStateProperties)state).Active;
            cmd.AttributeSetId = state.AttributeSetId;
            
            return cmd;
        }

        public static TCreateAttributeUse ToCreateAttributeUse<TCreateAttributeUse>(this IAttributeUseState state)
            where TCreateAttributeUse : ICreateAttributeUse, new()
        {
            var cmd = new TCreateAttributeUse();

            cmd.AttributeId = state.AttributeId;
            cmd.SequenceNumber = state.SequenceNumber;
            cmd.Active = ((IAttributeUseStateProperties)state).Active;
            cmd.AttributeSetId = state.AttributeSetId;
            return cmd;
        }
		

	}

}

