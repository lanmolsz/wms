// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeSetDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.AttributeSet;

namespace Dddml.Wms.Domain.AttributeSet
{
	public interface IAttributeSetStateEvent : IEvent, IStateEventDto, IGlobalIdentity<AttributeSetStateEventId>, ICreated<string>
	{
		AttributeSetStateEventId StateEventId { get; }

        bool ReadOnly { get; set; }

		string AttributeSetName { get; set; }

		string OrganizationId { get; set; }

		string Description { get; set; }

		string SerialNumberAttributeId { get; set; }

		string LotAttributeId { get; set; }

		string ReferenceId { get; set; }

		bool? IsInstanceAttributeSet { get; set; }

		bool? IsMandatory { get; set; }

		bool? Active { get; set; }

	}

	public interface IAttributeSetStateCreated : IAttributeSetStateEvent//, IAttributeSetStateProperties
	{
		IEnumerable<IAttributeUseStateCreated> AttributeUseEvents { get; }
		
		void AddAttributeUseEvent(IAttributeUseStateCreated e);

		IAttributeUseStateCreated NewAttributeUseStateCreated(string attributeId);

	
	}


	public interface IAttributeSetStateMergePatched : IAttributeSetStateEvent//, IAttributeSetStateProperties
	{
		bool IsPropertyAttributeSetNameRemoved { get; set; }

		bool IsPropertyOrganizationIdRemoved { get; set; }

		bool IsPropertyDescriptionRemoved { get; set; }

		bool IsPropertySerialNumberAttributeIdRemoved { get; set; }

		bool IsPropertyLotAttributeIdRemoved { get; set; }

		bool IsPropertyReferenceIdRemoved { get; set; }

		bool IsPropertyIsInstanceAttributeSetRemoved { get; set; }

		bool IsPropertyIsMandatoryRemoved { get; set; }

		bool IsPropertyActiveRemoved { get; set; }

		IEnumerable<IAttributeUseStateEvent> AttributeUseEvents { get; }
		
		void AddAttributeUseEvent(IAttributeUseStateEvent e);

		IAttributeUseStateCreated NewAttributeUseStateCreated(string attributeId);

		IAttributeUseStateMergePatched NewAttributeUseStateMergePatched(string attributeId);

		IAttributeUseStateRemoved NewAttributeUseStateRemoved(string attributeId);


	}

	public interface IAttributeSetStateDeleted : IAttributeSetStateEvent
	{
		IEnumerable<IAttributeUseStateRemoved> AttributeUseEvents { get; }
		
		void AddAttributeUseEvent(IAttributeUseStateRemoved e);
		
		IAttributeUseStateRemoved NewAttributeUseStateRemoved(string attributeId);

	}


}

