// <autogenerated>
//   This file was generated by T4 code generator GenerateAttributeSetDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.AttributeSet;

namespace Dddml.Wms.Domain.AttributeSet
{

    public class AttributeSetStateEventDtoConverter
    {
        public virtual AttributeSetStateCreatedOrMergePatchedOrDeletedDto ToAttributeSetStateEventDto(IAttributeSetStateEvent stateEvent)
        {
            if (stateEvent.StateEventType == StateEventType.Created)
            {
                var e = (IAttributeSetStateCreated)stateEvent;
                return ToAttributeSetStateCreatedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.MergePatched)
            {
                var e = (IAttributeSetStateMergePatched)stateEvent;
                return ToAttributeSetStateMergePatchedDto(e);
            }
            else if (stateEvent.StateEventType == StateEventType.Deleted)
            {
                var e = (IAttributeSetStateDeleted)stateEvent;
                return ToAttributeSetStateDeletedDto(e);
            }
            throw DomainError.Named("invalidStateEventType", String.Format("Invalid state event type: {0}", stateEvent.StateEventType));
        }

        public virtual AttributeSetStateCreatedDto ToAttributeSetStateCreatedDto(IAttributeSetStateCreated e)
        {
            var dto = new AttributeSetStateCreatedDto();
            dto.StateEventId = new AttributeSetStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Name = e.Name;
            dto.OrganizationId = e.OrganizationId;
            dto.Description = e.Description;
            dto.SerialNumberAttributeId = e.SerialNumberAttributeId;
            dto.LotAttributeId = e.LotAttributeId;
            dto.ReferenceId = e.ReferenceId;
            dto.Active = e.Active;
            var attributeUseEvents = new List<AttributeUseStateCreatedDto>();
            foreach (var ee in e.AttributeUseEvents)
            {
                AttributeUseStateCreatedDto eeDto = AttributeUseStateEventDtoConverter.ToAttributeUseStateCreatedDto(ee);
                attributeUseEvents.Add(eeDto);
            }
            dto.AttributeUseEvents = attributeUseEvents.ToArray();

            return dto;
        }

        public virtual AttributeSetStateMergePatchedDto ToAttributeSetStateMergePatchedDto(IAttributeSetStateMergePatched e)
        {
            var dto = new AttributeSetStateMergePatchedDto();
            dto.StateEventId = new AttributeSetStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Name = e.Name;
            dto.OrganizationId = e.OrganizationId;
            dto.Description = e.Description;
            dto.SerialNumberAttributeId = e.SerialNumberAttributeId;
            dto.LotAttributeId = e.LotAttributeId;
            dto.ReferenceId = e.ReferenceId;
            dto.Active = e.Active;
            dto.IsPropertyNameRemoved = e.IsPropertyNameRemoved;
            dto.IsPropertyOrganizationIdRemoved = e.IsPropertyOrganizationIdRemoved;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertySerialNumberAttributeIdRemoved = e.IsPropertySerialNumberAttributeIdRemoved;
            dto.IsPropertyLotAttributeIdRemoved = e.IsPropertyLotAttributeIdRemoved;
            dto.IsPropertyReferenceIdRemoved = e.IsPropertyReferenceIdRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var attributeUseEvents = new List<AttributeUseStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.AttributeUseEvents)
            {
                AttributeUseStateCreatedOrMergePatchedOrRemovedDto eeDto = AttributeUseStateEventDtoConverter.ToAttributeUseStateEventDto(ee);
                attributeUseEvents.Add(eeDto);
            }
            dto.AttributeUseEvents = attributeUseEvents.ToArray();


            return dto;
        }


        public virtual AttributeSetStateDeletedDto ToAttributeSetStateDeletedDto(IAttributeSetStateDeleted e)
        {
            var dto = new AttributeSetStateDeletedDto();
            dto.StateEventId = new AttributeSetStateEventIdDtoWrapper(e.StateEventId);
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            var attributeUseEvents = new List<AttributeUseStateRemovedDto>();
            foreach (var ee in e.AttributeUseEvents)
            {
                AttributeUseStateRemovedDto eeDto = AttributeUseStateEventDtoConverter.ToAttributeUseStateRemovedDto(ee);
                attributeUseEvents.Add(eeDto);
            }
            dto.AttributeUseEvents = attributeUseEvents.ToArray();


            return dto;
        }

        protected virtual AttributeUseStateEventDtoConverter AttributeUseStateEventDtoConverter
        {
            get
            {
                return new AttributeUseStateEventDtoConverter();
            }
        }


    }


}

