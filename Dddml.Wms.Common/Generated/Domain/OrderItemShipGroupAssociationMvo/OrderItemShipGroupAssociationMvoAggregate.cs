// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderItemShipGroupAssociationMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderItemShipGroupAssociationMvo;
using Dddml.Wms.Domain.Order;

namespace Dddml.Wms.Domain.OrderItemShipGroupAssociationMvo
{
    public partial class OrderItemShipGroupAssociationMvoAggregate : AggregateBase, IOrderItemShipGroupAssociationMvoAggregate
    {

        readonly IOrderItemShipGroupAssociationMvoState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IOrderItemShipGroupAssociationMvoState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        OrderItemShipGroupAssociationId IGlobalIdentity<OrderItemShipGroupAssociationId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public OrderItemShipGroupAssociationMvoAggregate(IOrderItemShipGroupAssociationMvoState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IOrderItemShipGroupAssociationMvoStateProperties)_state).OrderVersion == OrderItemShipGroupAssociationMvoState.VersionZero)
            {
                if (IsCommandCreate((IOrderItemShipGroupAssociationMvoCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IOrderItemShipGroupAssociationMvoCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IOrderItemShipGroupAssociationMvoCommand c)
        {
            return c.OrderVersion == OrderItemShipGroupAssociationMvoState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateOrderItemShipGroupAssociationMvo c)
        {
            IOrderItemShipGroupAssociationMvoStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchOrderItemShipGroupAssociationMvo c)
        {
            IOrderItemShipGroupAssociationMvoStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteOrderItemShipGroupAssociationMvo c)
        {
            IOrderItemShipGroupAssociationMvoStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IOrderItemShipGroupAssociationMvoStateCreated Map(ICreateOrderItemShipGroupAssociationMvo c)
        {
			var stateEventId = new OrderItemShipGroupAssociationMvoEventId(c.OrderItemShipGroupAssociationId, c.OrderVersion);
            IOrderItemShipGroupAssociationMvoStateCreated e = NewOrderItemShipGroupAssociationMvoStateCreated(stateEventId);
		
            e.Quantity = c.Quantity;
            e.CancelQuantity = c.CancelQuantity;
            e.Version = c.Version;
            e.Active = c.Active;
            e.OrderShipGroupShipmentMethodTypeId = c.OrderShipGroupShipmentMethodTypeId;
            e.OrderShipGroupSupplierPartyId = c.OrderShipGroupSupplierPartyId;
            e.OrderShipGroupVendorPartyId = c.OrderShipGroupVendorPartyId;
            e.OrderShipGroupCarrierPartyId = c.OrderShipGroupCarrierPartyId;
            e.OrderShipGroupCarrierRoleTypeId = c.OrderShipGroupCarrierRoleTypeId;
            e.OrderShipGroupFacilityId = c.OrderShipGroupFacilityId;
            e.OrderShipGroupContactMechId = c.OrderShipGroupContactMechId;
            e.OrderShipGroupTelecomContactMechId = c.OrderShipGroupTelecomContactMechId;
            e.OrderShipGroupTrackingNumber = c.OrderShipGroupTrackingNumber;
            e.OrderShipGroupShippingInstructions = c.OrderShipGroupShippingInstructions;
            e.OrderShipGroupMaySplit = c.OrderShipGroupMaySplit;
            e.OrderShipGroupGiftMessage = c.OrderShipGroupGiftMessage;
            e.OrderShipGroupIsGift = c.OrderShipGroupIsGift;
            e.OrderShipGroupShipAfterDate = c.OrderShipGroupShipAfterDate;
            e.OrderShipGroupShipByDate = c.OrderShipGroupShipByDate;
            e.OrderShipGroupEstimatedShipDate = c.OrderShipGroupEstimatedShipDate;
            e.OrderShipGroupEstimatedDeliveryDate = c.OrderShipGroupEstimatedDeliveryDate;
            e.OrderShipGroupPickwaveId = c.OrderShipGroupPickwaveId;
            e.OrderShipGroupVersion = c.OrderShipGroupVersion;
            e.OrderShipGroupCreatedBy = c.OrderShipGroupCreatedBy;
            e.OrderShipGroupCreatedAt = c.OrderShipGroupCreatedAt;
            e.OrderShipGroupUpdatedBy = c.OrderShipGroupUpdatedBy;
            e.OrderShipGroupUpdatedAt = c.OrderShipGroupUpdatedAt;
            e.OrderShipGroupActive = c.OrderShipGroupActive;
            e.OrderShipGroupDeleted = c.OrderShipGroupDeleted;
            e.OrderOrderTypeId = c.OrderOrderTypeId;
            e.OrderOrderName = c.OrderOrderName;
            e.OrderExternalId = c.OrderExternalId;
            e.OrderSalesChannelEnumId = c.OrderSalesChannelEnumId;
            e.OrderOrderDate = c.OrderOrderDate;
            e.OrderPriority = c.OrderPriority;
            e.OrderEntryDate = c.OrderEntryDate;
            e.OrderPickSheetPrintedDate = c.OrderPickSheetPrintedDate;
            e.OrderStatusId = c.OrderStatusId;
            e.OrderCurrencyUom = c.OrderCurrencyUom;
            e.OrderSyncStatusId = c.OrderSyncStatusId;
            e.OrderBillingAccountId = c.OrderBillingAccountId;
            e.OrderOriginFacilityId = c.OrderOriginFacilityId;
            e.OrderWebSiteId = c.OrderWebSiteId;
            e.OrderProductStoreId = c.OrderProductStoreId;
            e.OrderTerminalId = c.OrderTerminalId;
            e.OrderTransactionId = c.OrderTransactionId;
            e.OrderAutoOrderShoppingListId = c.OrderAutoOrderShoppingListId;
            e.OrderNeedsInventoryIssuance = c.OrderNeedsInventoryIssuance;
            e.OrderIsRushOrder = c.OrderIsRushOrder;
            e.OrderInternalCode = c.OrderInternalCode;
            e.OrderRemainingSubTotal = c.OrderRemainingSubTotal;
            e.OrderGrandTotal = c.OrderGrandTotal;
            e.OrderInvoicePerShipment = c.OrderInvoicePerShipment;
            e.OrderCreatedBy = c.OrderCreatedBy;
            e.OrderCreatedAt = c.OrderCreatedAt;
            e.OrderUpdatedBy = c.OrderUpdatedBy;
            e.OrderUpdatedAt = c.OrderUpdatedAt;
            e.OrderActive = c.OrderActive;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var orderVersion = c.OrderVersion;


            return e;
        }

        protected virtual IOrderItemShipGroupAssociationMvoStateMergePatched Map(IMergePatchOrderItemShipGroupAssociationMvo c)
        {
			var stateEventId = new OrderItemShipGroupAssociationMvoEventId(c.OrderItemShipGroupAssociationId, c.OrderVersion);
            IOrderItemShipGroupAssociationMvoStateMergePatched e = NewOrderItemShipGroupAssociationMvoStateMergePatched(stateEventId);

            e.Quantity = c.Quantity;
            e.CancelQuantity = c.CancelQuantity;
            e.Version = c.Version;
            e.Active = c.Active;
            e.OrderShipGroupShipmentMethodTypeId = c.OrderShipGroupShipmentMethodTypeId;
            e.OrderShipGroupSupplierPartyId = c.OrderShipGroupSupplierPartyId;
            e.OrderShipGroupVendorPartyId = c.OrderShipGroupVendorPartyId;
            e.OrderShipGroupCarrierPartyId = c.OrderShipGroupCarrierPartyId;
            e.OrderShipGroupCarrierRoleTypeId = c.OrderShipGroupCarrierRoleTypeId;
            e.OrderShipGroupFacilityId = c.OrderShipGroupFacilityId;
            e.OrderShipGroupContactMechId = c.OrderShipGroupContactMechId;
            e.OrderShipGroupTelecomContactMechId = c.OrderShipGroupTelecomContactMechId;
            e.OrderShipGroupTrackingNumber = c.OrderShipGroupTrackingNumber;
            e.OrderShipGroupShippingInstructions = c.OrderShipGroupShippingInstructions;
            e.OrderShipGroupMaySplit = c.OrderShipGroupMaySplit;
            e.OrderShipGroupGiftMessage = c.OrderShipGroupGiftMessage;
            e.OrderShipGroupIsGift = c.OrderShipGroupIsGift;
            e.OrderShipGroupShipAfterDate = c.OrderShipGroupShipAfterDate;
            e.OrderShipGroupShipByDate = c.OrderShipGroupShipByDate;
            e.OrderShipGroupEstimatedShipDate = c.OrderShipGroupEstimatedShipDate;
            e.OrderShipGroupEstimatedDeliveryDate = c.OrderShipGroupEstimatedDeliveryDate;
            e.OrderShipGroupPickwaveId = c.OrderShipGroupPickwaveId;
            e.OrderShipGroupVersion = c.OrderShipGroupVersion;
            e.OrderShipGroupCreatedBy = c.OrderShipGroupCreatedBy;
            e.OrderShipGroupCreatedAt = c.OrderShipGroupCreatedAt;
            e.OrderShipGroupUpdatedBy = c.OrderShipGroupUpdatedBy;
            e.OrderShipGroupUpdatedAt = c.OrderShipGroupUpdatedAt;
            e.OrderShipGroupActive = c.OrderShipGroupActive;
            e.OrderShipGroupDeleted = c.OrderShipGroupDeleted;
            e.OrderOrderTypeId = c.OrderOrderTypeId;
            e.OrderOrderName = c.OrderOrderName;
            e.OrderExternalId = c.OrderExternalId;
            e.OrderSalesChannelEnumId = c.OrderSalesChannelEnumId;
            e.OrderOrderDate = c.OrderOrderDate;
            e.OrderPriority = c.OrderPriority;
            e.OrderEntryDate = c.OrderEntryDate;
            e.OrderPickSheetPrintedDate = c.OrderPickSheetPrintedDate;
            e.OrderStatusId = c.OrderStatusId;
            e.OrderCurrencyUom = c.OrderCurrencyUom;
            e.OrderSyncStatusId = c.OrderSyncStatusId;
            e.OrderBillingAccountId = c.OrderBillingAccountId;
            e.OrderOriginFacilityId = c.OrderOriginFacilityId;
            e.OrderWebSiteId = c.OrderWebSiteId;
            e.OrderProductStoreId = c.OrderProductStoreId;
            e.OrderTerminalId = c.OrderTerminalId;
            e.OrderTransactionId = c.OrderTransactionId;
            e.OrderAutoOrderShoppingListId = c.OrderAutoOrderShoppingListId;
            e.OrderNeedsInventoryIssuance = c.OrderNeedsInventoryIssuance;
            e.OrderIsRushOrder = c.OrderIsRushOrder;
            e.OrderInternalCode = c.OrderInternalCode;
            e.OrderRemainingSubTotal = c.OrderRemainingSubTotal;
            e.OrderGrandTotal = c.OrderGrandTotal;
            e.OrderInvoicePerShipment = c.OrderInvoicePerShipment;
            e.OrderCreatedBy = c.OrderCreatedBy;
            e.OrderCreatedAt = c.OrderCreatedAt;
            e.OrderUpdatedBy = c.OrderUpdatedBy;
            e.OrderUpdatedAt = c.OrderUpdatedAt;
            e.OrderActive = c.OrderActive;
            e.IsPropertyQuantityRemoved = c.IsPropertyQuantityRemoved;
            e.IsPropertyCancelQuantityRemoved = c.IsPropertyCancelQuantityRemoved;
            e.IsPropertyVersionRemoved = c.IsPropertyVersionRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;
            e.IsPropertyOrderShipGroupShipmentMethodTypeIdRemoved = c.IsPropertyOrderShipGroupShipmentMethodTypeIdRemoved;
            e.IsPropertyOrderShipGroupSupplierPartyIdRemoved = c.IsPropertyOrderShipGroupSupplierPartyIdRemoved;
            e.IsPropertyOrderShipGroupVendorPartyIdRemoved = c.IsPropertyOrderShipGroupVendorPartyIdRemoved;
            e.IsPropertyOrderShipGroupCarrierPartyIdRemoved = c.IsPropertyOrderShipGroupCarrierPartyIdRemoved;
            e.IsPropertyOrderShipGroupCarrierRoleTypeIdRemoved = c.IsPropertyOrderShipGroupCarrierRoleTypeIdRemoved;
            e.IsPropertyOrderShipGroupFacilityIdRemoved = c.IsPropertyOrderShipGroupFacilityIdRemoved;
            e.IsPropertyOrderShipGroupContactMechIdRemoved = c.IsPropertyOrderShipGroupContactMechIdRemoved;
            e.IsPropertyOrderShipGroupTelecomContactMechIdRemoved = c.IsPropertyOrderShipGroupTelecomContactMechIdRemoved;
            e.IsPropertyOrderShipGroupTrackingNumberRemoved = c.IsPropertyOrderShipGroupTrackingNumberRemoved;
            e.IsPropertyOrderShipGroupShippingInstructionsRemoved = c.IsPropertyOrderShipGroupShippingInstructionsRemoved;
            e.IsPropertyOrderShipGroupMaySplitRemoved = c.IsPropertyOrderShipGroupMaySplitRemoved;
            e.IsPropertyOrderShipGroupGiftMessageRemoved = c.IsPropertyOrderShipGroupGiftMessageRemoved;
            e.IsPropertyOrderShipGroupIsGiftRemoved = c.IsPropertyOrderShipGroupIsGiftRemoved;
            e.IsPropertyOrderShipGroupShipAfterDateRemoved = c.IsPropertyOrderShipGroupShipAfterDateRemoved;
            e.IsPropertyOrderShipGroupShipByDateRemoved = c.IsPropertyOrderShipGroupShipByDateRemoved;
            e.IsPropertyOrderShipGroupEstimatedShipDateRemoved = c.IsPropertyOrderShipGroupEstimatedShipDateRemoved;
            e.IsPropertyOrderShipGroupEstimatedDeliveryDateRemoved = c.IsPropertyOrderShipGroupEstimatedDeliveryDateRemoved;
            e.IsPropertyOrderShipGroupPickwaveIdRemoved = c.IsPropertyOrderShipGroupPickwaveIdRemoved;
            e.IsPropertyOrderShipGroupVersionRemoved = c.IsPropertyOrderShipGroupVersionRemoved;
            e.IsPropertyOrderShipGroupCreatedByRemoved = c.IsPropertyOrderShipGroupCreatedByRemoved;
            e.IsPropertyOrderShipGroupCreatedAtRemoved = c.IsPropertyOrderShipGroupCreatedAtRemoved;
            e.IsPropertyOrderShipGroupUpdatedByRemoved = c.IsPropertyOrderShipGroupUpdatedByRemoved;
            e.IsPropertyOrderShipGroupUpdatedAtRemoved = c.IsPropertyOrderShipGroupUpdatedAtRemoved;
            e.IsPropertyOrderShipGroupActiveRemoved = c.IsPropertyOrderShipGroupActiveRemoved;
            e.IsPropertyOrderShipGroupDeletedRemoved = c.IsPropertyOrderShipGroupDeletedRemoved;
            e.IsPropertyOrderOrderTypeIdRemoved = c.IsPropertyOrderOrderTypeIdRemoved;
            e.IsPropertyOrderOrderNameRemoved = c.IsPropertyOrderOrderNameRemoved;
            e.IsPropertyOrderExternalIdRemoved = c.IsPropertyOrderExternalIdRemoved;
            e.IsPropertyOrderSalesChannelEnumIdRemoved = c.IsPropertyOrderSalesChannelEnumIdRemoved;
            e.IsPropertyOrderOrderDateRemoved = c.IsPropertyOrderOrderDateRemoved;
            e.IsPropertyOrderPriorityRemoved = c.IsPropertyOrderPriorityRemoved;
            e.IsPropertyOrderEntryDateRemoved = c.IsPropertyOrderEntryDateRemoved;
            e.IsPropertyOrderPickSheetPrintedDateRemoved = c.IsPropertyOrderPickSheetPrintedDateRemoved;
            e.IsPropertyOrderStatusIdRemoved = c.IsPropertyOrderStatusIdRemoved;
            e.IsPropertyOrderCurrencyUomRemoved = c.IsPropertyOrderCurrencyUomRemoved;
            e.IsPropertyOrderSyncStatusIdRemoved = c.IsPropertyOrderSyncStatusIdRemoved;
            e.IsPropertyOrderBillingAccountIdRemoved = c.IsPropertyOrderBillingAccountIdRemoved;
            e.IsPropertyOrderOriginFacilityIdRemoved = c.IsPropertyOrderOriginFacilityIdRemoved;
            e.IsPropertyOrderWebSiteIdRemoved = c.IsPropertyOrderWebSiteIdRemoved;
            e.IsPropertyOrderProductStoreIdRemoved = c.IsPropertyOrderProductStoreIdRemoved;
            e.IsPropertyOrderTerminalIdRemoved = c.IsPropertyOrderTerminalIdRemoved;
            e.IsPropertyOrderTransactionIdRemoved = c.IsPropertyOrderTransactionIdRemoved;
            e.IsPropertyOrderAutoOrderShoppingListIdRemoved = c.IsPropertyOrderAutoOrderShoppingListIdRemoved;
            e.IsPropertyOrderNeedsInventoryIssuanceRemoved = c.IsPropertyOrderNeedsInventoryIssuanceRemoved;
            e.IsPropertyOrderIsRushOrderRemoved = c.IsPropertyOrderIsRushOrderRemoved;
            e.IsPropertyOrderInternalCodeRemoved = c.IsPropertyOrderInternalCodeRemoved;
            e.IsPropertyOrderRemainingSubTotalRemoved = c.IsPropertyOrderRemainingSubTotalRemoved;
            e.IsPropertyOrderGrandTotalRemoved = c.IsPropertyOrderGrandTotalRemoved;
            e.IsPropertyOrderInvoicePerShipmentRemoved = c.IsPropertyOrderInvoicePerShipmentRemoved;
            e.IsPropertyOrderCreatedByRemoved = c.IsPropertyOrderCreatedByRemoved;
            e.IsPropertyOrderCreatedAtRemoved = c.IsPropertyOrderCreatedAtRemoved;
            e.IsPropertyOrderUpdatedByRemoved = c.IsPropertyOrderUpdatedByRemoved;
            e.IsPropertyOrderUpdatedAtRemoved = c.IsPropertyOrderUpdatedAtRemoved;
            e.IsPropertyOrderActiveRemoved = c.IsPropertyOrderActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var orderVersion = c.OrderVersion;


            return e;
        }

        protected virtual IOrderItemShipGroupAssociationMvoStateDeleted Map(IDeleteOrderItemShipGroupAssociationMvo c)
        {
			var stateEventId = new OrderItemShipGroupAssociationMvoEventId(c.OrderItemShipGroupAssociationId, c.OrderVersion);
            IOrderItemShipGroupAssociationMvoStateDeleted e = NewOrderItemShipGroupAssociationMvoStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected OrderItemShipGroupAssociationMvoStateCreated NewOrderItemShipGroupAssociationMvoStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderItemShipGroupAssociationMvoEventId(_state.OrderItemShipGroupAssociationId, version);
            var e = NewOrderItemShipGroupAssociationMvoStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected OrderItemShipGroupAssociationMvoStateMergePatched NewOrderItemShipGroupAssociationMvoStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderItemShipGroupAssociationMvoEventId(_state.OrderItemShipGroupAssociationId, version);
            var e = NewOrderItemShipGroupAssociationMvoStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected OrderItemShipGroupAssociationMvoStateDeleted NewOrderItemShipGroupAssociationMvoStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new OrderItemShipGroupAssociationMvoEventId(_state.OrderItemShipGroupAssociationId, version);
            var e = NewOrderItemShipGroupAssociationMvoStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private OrderItemShipGroupAssociationMvoStateCreated NewOrderItemShipGroupAssociationMvoStateCreated(OrderItemShipGroupAssociationMvoEventId stateEventId)
		{
			return new OrderItemShipGroupAssociationMvoStateCreated(stateEventId);			
		}

        private OrderItemShipGroupAssociationMvoStateMergePatched NewOrderItemShipGroupAssociationMvoStateMergePatched(OrderItemShipGroupAssociationMvoEventId stateEventId)
		{
			return new OrderItemShipGroupAssociationMvoStateMergePatched(stateEventId);
		}

        private OrderItemShipGroupAssociationMvoStateDeleted NewOrderItemShipGroupAssociationMvoStateDeleted(OrderItemShipGroupAssociationMvoEventId stateEventId)
		{
			return new OrderItemShipGroupAssociationMvoStateDeleted(stateEventId);
		}
    }

}

