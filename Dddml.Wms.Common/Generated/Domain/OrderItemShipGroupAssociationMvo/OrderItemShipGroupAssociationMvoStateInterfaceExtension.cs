// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderItemShipGroupAssociationMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderItemShipGroupAssociationMvo;
using Dddml.Wms.Domain.Order;

namespace Dddml.Wms.Domain.OrderItemShipGroupAssociationMvo
{

	public static partial class OrderItemShipGroupAssociationMvoStateInterfaceExtension
	{

        public static IOrderItemShipGroupAssociationMvoCommand ToCreateOrMergePatchOrderItemShipGroupAssociationMvo<TCreateOrderItemShipGroupAssociationMvo, TMergePatchOrderItemShipGroupAssociationMvo>(this IOrderItemShipGroupAssociationMvoState state)
            where TCreateOrderItemShipGroupAssociationMvo : ICreateOrderItemShipGroupAssociationMvo, new()
            where TMergePatchOrderItemShipGroupAssociationMvo : IMergePatchOrderItemShipGroupAssociationMvo, new()
        {
            bool bUnsaved = ((IOrderItemShipGroupAssociationMvoState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateOrderItemShipGroupAssociationMvo<TCreateOrderItemShipGroupAssociationMvo>();
            }
            else 
            {
                return state.ToMergePatchOrderItemShipGroupAssociationMvo<TMergePatchOrderItemShipGroupAssociationMvo>();
            }
        }

        public static TDeleteOrderItemShipGroupAssociationMvo ToDeleteOrderItemShipGroupAssociationMvo<TDeleteOrderItemShipGroupAssociationMvo>(this IOrderItemShipGroupAssociationMvoState state)
            where TDeleteOrderItemShipGroupAssociationMvo : IDeleteOrderItemShipGroupAssociationMvo, new()
        {
            var cmd = new TDeleteOrderItemShipGroupAssociationMvo();
            cmd.OrderItemShipGroupAssociationId = state.OrderItemShipGroupAssociationId;
            cmd.OrderVersion = ((IOrderItemShipGroupAssociationMvoStateProperties)state).OrderVersion;

            return cmd;
        }

        public static TMergePatchOrderItemShipGroupAssociationMvo ToMergePatchOrderItemShipGroupAssociationMvo<TMergePatchOrderItemShipGroupAssociationMvo>(this IOrderItemShipGroupAssociationMvoState state)
            where TMergePatchOrderItemShipGroupAssociationMvo : IMergePatchOrderItemShipGroupAssociationMvo, new()
        {
            var cmd = new TMergePatchOrderItemShipGroupAssociationMvo();

            cmd.OrderVersion = ((IOrderItemShipGroupAssociationMvoStateProperties)state).OrderVersion;

            cmd.OrderItemShipGroupAssociationId = state.OrderItemShipGroupAssociationId;
            cmd.Quantity = state.Quantity;
            cmd.CancelQuantity = state.CancelQuantity;
            cmd.Version = ((IOrderItemShipGroupAssociationMvoStateProperties)state).Version;
            cmd.Active = ((IOrderItemShipGroupAssociationMvoStateProperties)state).Active;
            cmd.OrderShipGroupShipmentMethodTypeId = state.OrderShipGroupShipmentMethodTypeId;
            cmd.OrderShipGroupSupplierPartyId = state.OrderShipGroupSupplierPartyId;
            cmd.OrderShipGroupVendorPartyId = state.OrderShipGroupVendorPartyId;
            cmd.OrderShipGroupCarrierPartyId = state.OrderShipGroupCarrierPartyId;
            cmd.OrderShipGroupCarrierRoleTypeId = state.OrderShipGroupCarrierRoleTypeId;
            cmd.OrderShipGroupFacilityId = state.OrderShipGroupFacilityId;
            cmd.OrderShipGroupContactMechId = state.OrderShipGroupContactMechId;
            cmd.OrderShipGroupTelecomContactMechId = state.OrderShipGroupTelecomContactMechId;
            cmd.OrderShipGroupTrackingNumber = state.OrderShipGroupTrackingNumber;
            cmd.OrderShipGroupShippingInstructions = state.OrderShipGroupShippingInstructions;
            cmd.OrderShipGroupMaySplit = state.OrderShipGroupMaySplit;
            cmd.OrderShipGroupGiftMessage = state.OrderShipGroupGiftMessage;
            cmd.OrderShipGroupIsGift = state.OrderShipGroupIsGift;
            cmd.OrderShipGroupShipAfterDate = state.OrderShipGroupShipAfterDate;
            cmd.OrderShipGroupShipByDate = state.OrderShipGroupShipByDate;
            cmd.OrderShipGroupEstimatedShipDate = state.OrderShipGroupEstimatedShipDate;
            cmd.OrderShipGroupEstimatedDeliveryDate = state.OrderShipGroupEstimatedDeliveryDate;
            cmd.OrderShipGroupPickwaveId = state.OrderShipGroupPickwaveId;
            cmd.OrderShipGroupVersion = state.OrderShipGroupVersion;
            cmd.OrderShipGroupCreatedBy = state.OrderShipGroupCreatedBy;
            cmd.OrderShipGroupCreatedAt = state.OrderShipGroupCreatedAt;
            cmd.OrderShipGroupUpdatedBy = state.OrderShipGroupUpdatedBy;
            cmd.OrderShipGroupUpdatedAt = state.OrderShipGroupUpdatedAt;
            cmd.OrderShipGroupActive = state.OrderShipGroupActive;
            cmd.OrderShipGroupDeleted = state.OrderShipGroupDeleted;
            cmd.OrderOrderTypeId = state.OrderOrderTypeId;
            cmd.OrderOrderName = state.OrderOrderName;
            cmd.OrderExternalId = state.OrderExternalId;
            cmd.OrderSalesChannelEnumId = state.OrderSalesChannelEnumId;
            cmd.OrderOrderDate = state.OrderOrderDate;
            cmd.OrderPriority = state.OrderPriority;
            cmd.OrderEntryDate = state.OrderEntryDate;
            cmd.OrderPickSheetPrintedDate = state.OrderPickSheetPrintedDate;
            cmd.OrderStatusId = state.OrderStatusId;
            cmd.OrderCurrencyUom = state.OrderCurrencyUom;
            cmd.OrderSyncStatusId = state.OrderSyncStatusId;
            cmd.OrderBillingAccountId = state.OrderBillingAccountId;
            cmd.OrderOriginFacilityId = state.OrderOriginFacilityId;
            cmd.OrderWebSiteId = state.OrderWebSiteId;
            cmd.OrderProductStoreId = state.OrderProductStoreId;
            cmd.OrderTerminalId = state.OrderTerminalId;
            cmd.OrderTransactionId = state.OrderTransactionId;
            cmd.OrderAutoOrderShoppingListId = state.OrderAutoOrderShoppingListId;
            cmd.OrderNeedsInventoryIssuance = state.OrderNeedsInventoryIssuance;
            cmd.OrderIsRushOrder = state.OrderIsRushOrder;
            cmd.OrderInternalCode = state.OrderInternalCode;
            cmd.OrderRemainingSubTotal = state.OrderRemainingSubTotal;
            cmd.OrderGrandTotal = state.OrderGrandTotal;
            cmd.OrderInvoicePerShipment = state.OrderInvoicePerShipment;
            cmd.OrderCreatedBy = state.OrderCreatedBy;
            cmd.OrderCreatedAt = state.OrderCreatedAt;
            cmd.OrderUpdatedBy = state.OrderUpdatedBy;
            cmd.OrderUpdatedAt = state.OrderUpdatedAt;
            cmd.OrderActive = state.OrderActive;
            
            if (state.Quantity == null) { cmd.IsPropertyQuantityRemoved = true; }
            if (state.CancelQuantity == null) { cmd.IsPropertyCancelQuantityRemoved = true; }
            if (state.OrderShipGroupShipmentMethodTypeId == null) { cmd.IsPropertyOrderShipGroupShipmentMethodTypeIdRemoved = true; }
            if (state.OrderShipGroupSupplierPartyId == null) { cmd.IsPropertyOrderShipGroupSupplierPartyIdRemoved = true; }
            if (state.OrderShipGroupVendorPartyId == null) { cmd.IsPropertyOrderShipGroupVendorPartyIdRemoved = true; }
            if (state.OrderShipGroupCarrierPartyId == null) { cmd.IsPropertyOrderShipGroupCarrierPartyIdRemoved = true; }
            if (state.OrderShipGroupCarrierRoleTypeId == null) { cmd.IsPropertyOrderShipGroupCarrierRoleTypeIdRemoved = true; }
            if (state.OrderShipGroupFacilityId == null) { cmd.IsPropertyOrderShipGroupFacilityIdRemoved = true; }
            if (state.OrderShipGroupContactMechId == null) { cmd.IsPropertyOrderShipGroupContactMechIdRemoved = true; }
            if (state.OrderShipGroupTelecomContactMechId == null) { cmd.IsPropertyOrderShipGroupTelecomContactMechIdRemoved = true; }
            if (state.OrderShipGroupTrackingNumber == null) { cmd.IsPropertyOrderShipGroupTrackingNumberRemoved = true; }
            if (state.OrderShipGroupShippingInstructions == null) { cmd.IsPropertyOrderShipGroupShippingInstructionsRemoved = true; }
            if (state.OrderShipGroupMaySplit == null) { cmd.IsPropertyOrderShipGroupMaySplitRemoved = true; }
            if (state.OrderShipGroupGiftMessage == null) { cmd.IsPropertyOrderShipGroupGiftMessageRemoved = true; }
            if (state.OrderShipGroupIsGift == null) { cmd.IsPropertyOrderShipGroupIsGiftRemoved = true; }
            if (state.OrderShipGroupShipAfterDate == null) { cmd.IsPropertyOrderShipGroupShipAfterDateRemoved = true; }
            if (state.OrderShipGroupShipByDate == null) { cmd.IsPropertyOrderShipGroupShipByDateRemoved = true; }
            if (state.OrderShipGroupEstimatedShipDate == null) { cmd.IsPropertyOrderShipGroupEstimatedShipDateRemoved = true; }
            if (state.OrderShipGroupEstimatedDeliveryDate == null) { cmd.IsPropertyOrderShipGroupEstimatedDeliveryDateRemoved = true; }
            if (state.OrderShipGroupPickwaveId == null) { cmd.IsPropertyOrderShipGroupPickwaveIdRemoved = true; }
            if (state.OrderShipGroupCreatedBy == null) { cmd.IsPropertyOrderShipGroupCreatedByRemoved = true; }
            if (state.OrderShipGroupUpdatedBy == null) { cmd.IsPropertyOrderShipGroupUpdatedByRemoved = true; }
            if (state.OrderOrderTypeId == null) { cmd.IsPropertyOrderOrderTypeIdRemoved = true; }
            if (state.OrderOrderName == null) { cmd.IsPropertyOrderOrderNameRemoved = true; }
            if (state.OrderExternalId == null) { cmd.IsPropertyOrderExternalIdRemoved = true; }
            if (state.OrderSalesChannelEnumId == null) { cmd.IsPropertyOrderSalesChannelEnumIdRemoved = true; }
            if (state.OrderOrderDate == null) { cmd.IsPropertyOrderOrderDateRemoved = true; }
            if (state.OrderPriority == null) { cmd.IsPropertyOrderPriorityRemoved = true; }
            if (state.OrderEntryDate == null) { cmd.IsPropertyOrderEntryDateRemoved = true; }
            if (state.OrderPickSheetPrintedDate == null) { cmd.IsPropertyOrderPickSheetPrintedDateRemoved = true; }
            if (state.OrderStatusId == null) { cmd.IsPropertyOrderStatusIdRemoved = true; }
            if (state.OrderCurrencyUom == null) { cmd.IsPropertyOrderCurrencyUomRemoved = true; }
            if (state.OrderSyncStatusId == null) { cmd.IsPropertyOrderSyncStatusIdRemoved = true; }
            if (state.OrderBillingAccountId == null) { cmd.IsPropertyOrderBillingAccountIdRemoved = true; }
            if (state.OrderOriginFacilityId == null) { cmd.IsPropertyOrderOriginFacilityIdRemoved = true; }
            if (state.OrderWebSiteId == null) { cmd.IsPropertyOrderWebSiteIdRemoved = true; }
            if (state.OrderProductStoreId == null) { cmd.IsPropertyOrderProductStoreIdRemoved = true; }
            if (state.OrderTerminalId == null) { cmd.IsPropertyOrderTerminalIdRemoved = true; }
            if (state.OrderTransactionId == null) { cmd.IsPropertyOrderTransactionIdRemoved = true; }
            if (state.OrderAutoOrderShoppingListId == null) { cmd.IsPropertyOrderAutoOrderShoppingListIdRemoved = true; }
            if (state.OrderNeedsInventoryIssuance == null) { cmd.IsPropertyOrderNeedsInventoryIssuanceRemoved = true; }
            if (state.OrderIsRushOrder == null) { cmd.IsPropertyOrderIsRushOrderRemoved = true; }
            if (state.OrderInternalCode == null) { cmd.IsPropertyOrderInternalCodeRemoved = true; }
            if (state.OrderRemainingSubTotal == null) { cmd.IsPropertyOrderRemainingSubTotalRemoved = true; }
            if (state.OrderGrandTotal == null) { cmd.IsPropertyOrderGrandTotalRemoved = true; }
            if (state.OrderInvoicePerShipment == null) { cmd.IsPropertyOrderInvoicePerShipmentRemoved = true; }
            if (state.OrderCreatedBy == null) { cmd.IsPropertyOrderCreatedByRemoved = true; }
            if (state.OrderUpdatedBy == null) { cmd.IsPropertyOrderUpdatedByRemoved = true; }
            return cmd;
        }

        public static TCreateOrderItemShipGroupAssociationMvo ToCreateOrderItemShipGroupAssociationMvo<TCreateOrderItemShipGroupAssociationMvo>(this IOrderItemShipGroupAssociationMvoState state)
            where TCreateOrderItemShipGroupAssociationMvo : ICreateOrderItemShipGroupAssociationMvo, new()
        {
            var cmd = new TCreateOrderItemShipGroupAssociationMvo();

            cmd.OrderVersion = ((IOrderItemShipGroupAssociationMvoStateProperties)state).OrderVersion;

            cmd.OrderItemShipGroupAssociationId = state.OrderItemShipGroupAssociationId;
            cmd.Quantity = state.Quantity;
            cmd.CancelQuantity = state.CancelQuantity;
            cmd.Version = ((IOrderItemShipGroupAssociationMvoStateProperties)state).Version;
            cmd.Active = ((IOrderItemShipGroupAssociationMvoStateProperties)state).Active;
            cmd.OrderShipGroupShipmentMethodTypeId = state.OrderShipGroupShipmentMethodTypeId;
            cmd.OrderShipGroupSupplierPartyId = state.OrderShipGroupSupplierPartyId;
            cmd.OrderShipGroupVendorPartyId = state.OrderShipGroupVendorPartyId;
            cmd.OrderShipGroupCarrierPartyId = state.OrderShipGroupCarrierPartyId;
            cmd.OrderShipGroupCarrierRoleTypeId = state.OrderShipGroupCarrierRoleTypeId;
            cmd.OrderShipGroupFacilityId = state.OrderShipGroupFacilityId;
            cmd.OrderShipGroupContactMechId = state.OrderShipGroupContactMechId;
            cmd.OrderShipGroupTelecomContactMechId = state.OrderShipGroupTelecomContactMechId;
            cmd.OrderShipGroupTrackingNumber = state.OrderShipGroupTrackingNumber;
            cmd.OrderShipGroupShippingInstructions = state.OrderShipGroupShippingInstructions;
            cmd.OrderShipGroupMaySplit = state.OrderShipGroupMaySplit;
            cmd.OrderShipGroupGiftMessage = state.OrderShipGroupGiftMessage;
            cmd.OrderShipGroupIsGift = state.OrderShipGroupIsGift;
            cmd.OrderShipGroupShipAfterDate = state.OrderShipGroupShipAfterDate;
            cmd.OrderShipGroupShipByDate = state.OrderShipGroupShipByDate;
            cmd.OrderShipGroupEstimatedShipDate = state.OrderShipGroupEstimatedShipDate;
            cmd.OrderShipGroupEstimatedDeliveryDate = state.OrderShipGroupEstimatedDeliveryDate;
            cmd.OrderShipGroupPickwaveId = state.OrderShipGroupPickwaveId;
            cmd.OrderShipGroupVersion = state.OrderShipGroupVersion;
            cmd.OrderShipGroupCreatedBy = state.OrderShipGroupCreatedBy;
            cmd.OrderShipGroupCreatedAt = state.OrderShipGroupCreatedAt;
            cmd.OrderShipGroupUpdatedBy = state.OrderShipGroupUpdatedBy;
            cmd.OrderShipGroupUpdatedAt = state.OrderShipGroupUpdatedAt;
            cmd.OrderShipGroupActive = state.OrderShipGroupActive;
            cmd.OrderShipGroupDeleted = state.OrderShipGroupDeleted;
            cmd.OrderOrderTypeId = state.OrderOrderTypeId;
            cmd.OrderOrderName = state.OrderOrderName;
            cmd.OrderExternalId = state.OrderExternalId;
            cmd.OrderSalesChannelEnumId = state.OrderSalesChannelEnumId;
            cmd.OrderOrderDate = state.OrderOrderDate;
            cmd.OrderPriority = state.OrderPriority;
            cmd.OrderEntryDate = state.OrderEntryDate;
            cmd.OrderPickSheetPrintedDate = state.OrderPickSheetPrintedDate;
            cmd.OrderStatusId = state.OrderStatusId;
            cmd.OrderCurrencyUom = state.OrderCurrencyUom;
            cmd.OrderSyncStatusId = state.OrderSyncStatusId;
            cmd.OrderBillingAccountId = state.OrderBillingAccountId;
            cmd.OrderOriginFacilityId = state.OrderOriginFacilityId;
            cmd.OrderWebSiteId = state.OrderWebSiteId;
            cmd.OrderProductStoreId = state.OrderProductStoreId;
            cmd.OrderTerminalId = state.OrderTerminalId;
            cmd.OrderTransactionId = state.OrderTransactionId;
            cmd.OrderAutoOrderShoppingListId = state.OrderAutoOrderShoppingListId;
            cmd.OrderNeedsInventoryIssuance = state.OrderNeedsInventoryIssuance;
            cmd.OrderIsRushOrder = state.OrderIsRushOrder;
            cmd.OrderInternalCode = state.OrderInternalCode;
            cmd.OrderRemainingSubTotal = state.OrderRemainingSubTotal;
            cmd.OrderGrandTotal = state.OrderGrandTotal;
            cmd.OrderInvoicePerShipment = state.OrderInvoicePerShipment;
            cmd.OrderCreatedBy = state.OrderCreatedBy;
            cmd.OrderCreatedAt = state.OrderCreatedAt;
            cmd.OrderUpdatedBy = state.OrderUpdatedBy;
            cmd.OrderUpdatedAt = state.OrderUpdatedAt;
            cmd.OrderActive = state.OrderActive;
            return cmd;
        }
		

	}

}

