// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.SellableInventoryItem
{

	public abstract class SellableInventoryItemEventBase : ISellableInventoryItemEvent
	{

		public virtual SellableInventoryItemEventId SellableInventoryItemEventId { get; set; }

        public virtual InventoryItemId SellableInventoryItemId
        {
            get { return SellableInventoryItemEventId.SellableInventoryItemId; }
            set { SellableInventoryItemEventId.SellableInventoryItemId = value; }
        }

		public virtual decimal? SellableQuantity { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		SellableInventoryItemEventId IGlobalIdentity<SellableInventoryItemEventId>.GlobalId {
			get
			{
				return this.SellableInventoryItemEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool ISellableInventoryItemEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected SellableInventoryItemEventBase()
        {
        }

        protected SellableInventoryItemEventBase(SellableInventoryItemEventId stateEventId)
        {
            this.SellableInventoryItemEventId = stateEventId;
        }

        protected SellableInventoryItemEntryEventId NewSellableInventoryItemEntryEventId(long entrySeqId)
        {
            var stateEventId = new SellableInventoryItemEntryEventId(this.SellableInventoryItemEventId.SellableInventoryItemId, entrySeqId, this.SellableInventoryItemEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(ISellableInventoryItemEntryEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(ISellableInventoryItemEvent oe, ISellableInventoryItemEntryEvent e)
		{
			if (!oe.SellableInventoryItemEventId.SellableInventoryItemId.Equals(e.SellableInventoryItemEntryEventId.SellableInventoryItemId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id SellableInventoryItemId {0} but inner id SellableInventoryItemId {1}", 
					oe.SellableInventoryItemEventId.SellableInventoryItemId, e.SellableInventoryItemEntryEventId.SellableInventoryItemId);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

	public class SellableInventoryItemStateCreated : SellableInventoryItemEventBase, ISellableInventoryItemStateCreated
	{
		public SellableInventoryItemStateCreated () : this(new SellableInventoryItemEventId())
		{
		}

		public SellableInventoryItemStateCreated (SellableInventoryItemEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<SellableInventoryItemEntryEventId, ISellableInventoryItemEntryStateCreated> _sellableInventoryItemEntryEvents = new Dictionary<SellableInventoryItemEntryEventId, ISellableInventoryItemEntryStateCreated>();
        
        private IEnumerable<ISellableInventoryItemEntryStateCreated> _readOnlySellableInventoryItemEntryEvents;

        public virtual IEnumerable<ISellableInventoryItemEntryStateCreated> SellableInventoryItemEntryEvents
        {
            get
            {
                return this._sellableInventoryItemEntryEvents.Values;
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddSellableInventoryItemEntryEvent(e);
                    }
                }
                else { this._sellableInventoryItemEntryEvents.Clear(); }
            }
        }
    
		public virtual void AddSellableInventoryItemEntryEvent(ISellableInventoryItemEntryStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._sellableInventoryItemEntryEvents[e.SellableInventoryItemEntryEventId] = e;
		}

        public virtual ISellableInventoryItemEntryStateCreated NewSellableInventoryItemEntryStateCreated(long entrySeqId)
        {
            var stateEvent = new SellableInventoryItemEntryStateCreated(NewSellableInventoryItemEntryEventId(entrySeqId));
            return stateEvent;
        }


        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class SellableInventoryItemStateMergePatched : SellableInventoryItemEventBase, ISellableInventoryItemStateMergePatched
	{
		public virtual bool IsPropertySellableQuantityRemoved { get; set; }


		public SellableInventoryItemStateMergePatched ()
		{
		}

		public SellableInventoryItemStateMergePatched (SellableInventoryItemEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<SellableInventoryItemEntryEventId, ISellableInventoryItemEntryEvent> _sellableInventoryItemEntryEvents = new Dictionary<SellableInventoryItemEntryEventId, ISellableInventoryItemEntryEvent>();

        private IEnumerable<ISellableInventoryItemEntryEvent> _readOnlySellableInventoryItemEntryEvents;
        
        public virtual IEnumerable<ISellableInventoryItemEntryEvent> SellableInventoryItemEntryEvents
        {
            get
            {
                return this._sellableInventoryItemEntryEvents.Values;
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddSellableInventoryItemEntryEvent(e);
                    }
                }
                else { this._sellableInventoryItemEntryEvents.Clear(); }
            }
        }

		public virtual void AddSellableInventoryItemEntryEvent(ISellableInventoryItemEntryEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._sellableInventoryItemEntryEvents[e.SellableInventoryItemEntryEventId] = e;
		}

        public virtual ISellableInventoryItemEntryStateCreated NewSellableInventoryItemEntryStateCreated(long entrySeqId)
        {
            var stateEvent = new SellableInventoryItemEntryStateCreated(NewSellableInventoryItemEntryEventId(entrySeqId));
            return stateEvent;
        }


        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

