// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.SellableInventoryItem
{

	public abstract class SellableInventoryItemEntryStateEventDtoBase : IEventDto, ISellableInventoryItemEntryStateCreated
	{

        private SellableInventoryItemEntryEventId _sellableInventoryItemEntryEventId;

		protected internal virtual SellableInventoryItemEntryEventId SellableInventoryItemEntryEventId 
        {
            get 
            {
                if (_sellableInventoryItemEntryEventId == null) { _sellableInventoryItemEntryEventId = new SellableInventoryItemEntryEventId(); }
                return _sellableInventoryItemEntryEventId;
            }
            set
            {
                _sellableInventoryItemEntryEventId = value;
            }
        }

        public virtual long EntrySeqId
        {
            get { return SellableInventoryItemEntryEventId.EntrySeqId; }
            set { SellableInventoryItemEntryEventId.EntrySeqId = value; }
        }

		public virtual decimal? SellableQuantity { get; set; }

		public virtual InventoryPRTriggeredId SourceEventId { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		SellableInventoryItemEntryEventId IGlobalIdentity<SellableInventoryItemEntryEventId>.GlobalId {
			get 
			{
				return this.SellableInventoryItemEntryEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool ISellableInventoryItemEntryEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }

		public virtual long Version { get; set; }

		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        SellableInventoryItemEntryEventId ISellableInventoryItemEntryEvent.SellableInventoryItemEntryEventId
        {
            get { return this.SellableInventoryItemEntryEventId; }
        }

        protected SellableInventoryItemEntryStateEventDtoBase()
        {
        }

        protected SellableInventoryItemEntryStateEventDtoBase(SellableInventoryItemEntryEventId stateEventId)
        {
            this.SellableInventoryItemEntryEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IEventDto.EventType 
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}


    public class SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto : SellableInventoryItemEntryStateEventDtoBase
    {
        private string _eventType;

        public virtual string EventType
        {
            get { return _eventType; }
            set { _eventType = value; }
        }

        protected override string GetEventType()
        {
            return this._eventType;
        }

    }



	public class SellableInventoryItemEntryStateCreatedDto : SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto
	{
		public SellableInventoryItemEntryStateCreatedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class SellableInventoryItemEntryStateMergePatchedDto : SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto
	{
		public SellableInventoryItemEntryStateMergePatchedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class SellableInventoryItemEntryStateRemovedDto : SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto
	{
		public SellableInventoryItemEntryStateRemovedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Removed;
        }

	}


    public partial class SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDtos : IEnumerable<ISellableInventoryItemEntryStateCreated>
    {
        private List<SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto> _innerStateEvents = new List<SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto>();

        public virtual SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<ISellableInventoryItemEntryStateCreated> IEnumerable<ISellableInventoryItemEntryStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }


        public void AddSellableInventoryItemEntryEvent(ISellableInventoryItemEntryStateCreated e)
        {
            _innerStateEvents.Add((SellableInventoryItemEntryStateCreatedDto)e);
        }

        public void AddSellableInventoryItemEntryEvent(ISellableInventoryItemEntryEvent e)
        {
            _innerStateEvents.Add((SellableInventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto)e);
        }


    }


}

