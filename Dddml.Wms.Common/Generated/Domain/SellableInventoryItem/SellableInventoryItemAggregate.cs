// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.SellableInventoryItem
{
    public partial class SellableInventoryItemAggregate : AggregateBase, ISellableInventoryItemAggregate
    {

        readonly ISellableInventoryItemState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public ISellableInventoryItemState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        InventoryItemId IGlobalIdentity<InventoryItemId>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public SellableInventoryItemAggregate(ISellableInventoryItemState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((ISellableInventoryItemStateProperties)_state).Version == SellableInventoryItemState.VersionZero)
            {
                if (IsCommandCreate((ISellableInventoryItemCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (IsCommandCreate((ISellableInventoryItemCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(ISellableInventoryItemCommand c)
        {
            return c.Version == SellableInventoryItemState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateSellableInventoryItem c)
        {
            ISellableInventoryItemStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchSellableInventoryItem c)
        {
            ISellableInventoryItemStateMergePatched e = Map(c);
            Apply(e);
        }


        protected virtual ISellableInventoryItemStateCreated Map(ICreateSellableInventoryItem c)
        {
			var stateEventId = new SellableInventoryItemStateEventId(c.SellableInventoryItemId, c.Version);
            ISellableInventoryItemStateCreated e = NewSellableInventoryItemStateCreated(stateEventId);
		
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
			var version = c.Version;

            decimal quantitySellable = default(decimal);
            foreach (ICreateSellableInventoryItemEntry innerCommand in c.Entries)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                ISellableInventoryItemEntryStateCreated innerEvent = MapCreate(innerCommand, c, version, _state);
                e.AddSellableInventoryItemEntryEvent(innerEvent);
                quantitySellable = quantitySellable + (innerEvent.QuantitySellable != null ? innerEvent.QuantitySellable.GetValueOrDefault() : default(decimal));
            }

            e.QuantitySellable = quantitySellable;

            return e;
        }

        protected virtual ISellableInventoryItemStateMergePatched Map(IMergePatchSellableInventoryItem c)
        {
			var stateEventId = new SellableInventoryItemStateEventId(c.SellableInventoryItemId, c.Version);
            ISellableInventoryItemStateMergePatched e = NewSellableInventoryItemStateMergePatched(stateEventId);


            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;

			var version = c.Version;

            decimal quantitySellable = _state.QuantitySellable;
            foreach (ISellableInventoryItemEntryCommand innerCommand in c.SellableInventoryItemEntryCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                ISellableInventoryItemEntryStateEvent innerEvent = Map(innerCommand, c, version, _state);
                e.AddSellableInventoryItemEntryEvent(innerEvent);
                // ////////////////
                if (!(innerEvent is ISellableInventoryItemEntryStateCreated)) { continue; }
                var entryCreated = (ISellableInventoryItemEntryStateCreated)innerEvent;
                quantitySellable = quantitySellable + (entryCreated.QuantitySellable != null ? entryCreated.QuantitySellable.GetValueOrDefault() : default(decimal));
                // ////////////////
            }

            e.QuantitySellable = quantitySellable;

            return e;
        }


        protected void ThrowOnInconsistentCommands(ISellableInventoryItemCommand command, ISellableInventoryItemEntryCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrDeleteSellableInventoryItem;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemoveSellableInventoryItemEntry;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.SellableInventoryItemId == default(InventoryItemId))
            {
                innerProperties.SellableInventoryItemId = properties.SellableInventoryItemId;
            }
            else
            {
                var outerSellableInventoryItemIdName = "SellableInventoryItemId";
                var outerSellableInventoryItemIdValue = properties.SellableInventoryItemId;
                var innerSellableInventoryItemIdName = "SellableInventoryItemId";
                var innerSellableInventoryItemIdValue = innerProperties.SellableInventoryItemId;
                ThrowOnInconsistentIds(innerProperties, innerSellableInventoryItemIdName, innerSellableInventoryItemIdValue, outerSellableInventoryItemIdName, outerSellableInventoryItemIdValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected virtual ISellableInventoryItemEntryStateEvent Map(ISellableInventoryItemEntryCommand c, ISellableInventoryItemCommand outerCommand, long version, ISellableInventoryItemState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreateSellableInventoryItemEntry) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            throw new NotSupportedException();
        }


        protected virtual ISellableInventoryItemEntryStateCreated MapCreate(ICreateSellableInventoryItemEntry c, ISellableInventoryItemCommand outerCommand, long version, ISellableInventoryItemState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new SellableInventoryItemEntryStateEventId(c.SellableInventoryItemId, c.EntrySeqId, version);
            ISellableInventoryItemEntryStateCreated e = NewSellableInventoryItemEntryStateCreated(stateEventId);
            var s = outerState.Entries.Get(c.EntrySeqId, true);

            e.QuantitySellable = c.QuantitySellable;
            e.SourceEventId = c.SourceEventId;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = DateTime.Now;
            return e;

        }// END Map(ICreate... ////////////////////////////



        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected SellableInventoryItemStateCreated NewSellableInventoryItemStateCreated(string commandId, string requesterId)
        {
            var stateEventId = new SellableInventoryItemStateEventId(_state.SellableInventoryItemId, ((ISellableInventoryItemStateProperties)_state).Version);
            var e = NewSellableInventoryItemStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }

        protected SellableInventoryItemStateMergePatched NewSellableInventoryItemStateMergePatched(string commandId, string requesterId)
        {
            var stateEventId = new SellableInventoryItemStateEventId(_state.SellableInventoryItemId, ((ISellableInventoryItemStateProperties)_state).Version);
            var e = NewSellableInventoryItemStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = DateTime.Now;

            return e;
        }


////////////////////////

		private SellableInventoryItemStateCreated NewSellableInventoryItemStateCreated(SellableInventoryItemStateEventId stateEventId)
		{
			return new SellableInventoryItemStateCreated(stateEventId);			
		}

        private SellableInventoryItemStateMergePatched NewSellableInventoryItemStateMergePatched(SellableInventoryItemStateEventId stateEventId)
		{
			return new SellableInventoryItemStateMergePatched(stateEventId);
		}


		private SellableInventoryItemEntryStateCreated NewSellableInventoryItemEntryStateCreated(SellableInventoryItemEntryStateEventId stateEventId)
		{
			return new SellableInventoryItemEntryStateCreated(stateEventId);
		}


    }

}

