// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.SellableInventoryItem
{

	public abstract class SellableInventoryItemCommandBase : ISellableInventoryItemCommand
	{
		public virtual InventoryItemId SellableInventoryItemId { get; set; }


		InventoryItemId IAggregateCommand<InventoryItemId, long>.AggregateId
		{
			get
			{
				return this.SellableInventoryItemId;
			}
		}


		long IAggregateCommand<InventoryItemId, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual bool? Active { get; set; }


		// //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();


	}


	public class CreateSellableInventoryItem : SellableInventoryItemCommandBase, ICreateSellableInventoryItem
	{
		
		public CreateSellableInventoryItem ()
		{
		}


        private CreateSellableInventoryItemEntryCommands _entries = new CreateSellableInventoryItemEntryCommands();

        public ICreateSellableInventoryItemEntryCommands Entries
        {
            get
            {
                return this._entries;
            }
        }

        public CreateSellableInventoryItemEntry NewCreateSellableInventoryItemEntry()
        {
            var c = new CreateSellableInventoryItemEntry();
            c.SellableInventoryItemId = this.SellableInventoryItemId;

            return c;
        }

        ICreateSellableInventoryItemEntry ICreateSellableInventoryItem.NewCreateSellableInventoryItemEntry()
        {
            return this.NewCreateSellableInventoryItemEntry();
        }



        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }
	}


	public class MergePatchSellableInventoryItem :SellableInventoryItemCommandBase, IMergePatchSellableInventoryItem
	{

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MergePatchSellableInventoryItem ()
		{
		}

        private SellableInventoryItemEntryCommands _sellableInventoryItemEntryCommands = new SellableInventoryItemEntryCommands();

        public ISellableInventoryItemEntryCommands SellableInventoryItemEntryCommands
        {
            get
            {
                return this._sellableInventoryItemEntryCommands;
            }
        }


        public CreateSellableInventoryItemEntry NewCreateSellableInventoryItemEntry()
        {
            var c = new CreateSellableInventoryItemEntry();
            c.SellableInventoryItemId = this.SellableInventoryItemId;

            return c;
        }

        ICreateSellableInventoryItemEntry IMergePatchSellableInventoryItem.NewCreateSellableInventoryItemEntry()
        {
            return this.NewCreateSellableInventoryItemEntry();
        }


        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteSellableInventoryItem : SellableInventoryItemCommandBase, IDeleteSellableInventoryItem
	{
		public DeleteSellableInventoryItem ()
		{
		}

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }

	}


    public class CreateSellableInventoryItemEntryCommands : ICreateSellableInventoryItemEntryCommands
    {
        private List<ICreateSellableInventoryItemEntry> _innerCommands = new List<ICreateSellableInventoryItemEntry>();

        public void Add(ICreateSellableInventoryItemEntry c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(ICreateSellableInventoryItemEntry c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<ICreateSellableInventoryItemEntry> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public class SellableInventoryItemEntryCommands : ISellableInventoryItemEntryCommands
    {
        private List<ISellableInventoryItemEntryCommand> _innerCommands = new List<ISellableInventoryItemEntryCommand>();

        public void Add(ISellableInventoryItemEntryCommand c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(ISellableInventoryItemEntryCommand c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<ISellableInventoryItemEntryCommand> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public static partial class SellableInventoryItemCommands
    {
    }

}
