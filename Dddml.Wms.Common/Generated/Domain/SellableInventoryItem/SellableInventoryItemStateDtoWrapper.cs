// <autogenerated>
//   This file was generated by T4 code generator GenerateSellableInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.SellableInventoryItem
{

	public partial class SellableInventoryItemStateDtoWrapper : StateDtoWrapperBase, ISellableInventoryItemStateDto, ISellableInventoryItemState
	{

        internal static IList<string> _collectionFieldNames = new string[] { "Entries" };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private ISellableInventoryItemState _state;

        public SellableInventoryItemStateDtoWrapper()
        {
            this._state = new SellableInventoryItemState();
        }

		public SellableInventoryItemStateDtoWrapper(ISellableInventoryItemState state)
		{
            this._state = state;
		}

		public ISellableInventoryItemState ToSellableInventoryItemState()
		{
			return this._state;
		}

        public InventoryItemIdDto SellableInventoryItemId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableInventoryItemId"))
                {
					return (_state.SellableInventoryItemId == null) ? null : new InventoryItemIdDtoWrapper(_state.SellableInventoryItemId);
                }
                return null;
            }
            set
            {
                _state.SellableInventoryItemId = (value == null) ? null : value.ToInventoryItemId();
            }
        }

        InventoryItemId ISellableInventoryItemStateProperties.SellableInventoryItemId
        {
            get 
            {
                return (this._state as ISellableInventoryItemStateProperties).SellableInventoryItemId;
            }
            set 
            {
                (this._state as ISellableInventoryItemStateProperties).SellableInventoryItemId = value;
            }
        }

		public virtual decimal? SellableQuantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("SellableQuantity"))
                {
                    return _state.SellableQuantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.SellableQuantity = value.Value;
                }
            }
        }

        decimal ISellableInventoryItemStateProperties.SellableQuantity
        {
            get 
            {
                return (this._state as ISellableInventoryItemStateProperties).SellableQuantity;
            }
            set 
            {
                (this._state as ISellableInventoryItemStateProperties).SellableQuantity = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as ISellableInventoryItemStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as ISellableInventoryItemStateProperties).Version = value.Value;
                }
            }
        }

        long ISellableInventoryItemStateProperties.Version
        {
            get 
            {
                return (this._state as ISellableInventoryItemStateProperties).Version;
            }
            set 
            {
                (this._state as ISellableInventoryItemStateProperties).Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		InventoryItemId IGlobalIdentity<InventoryItemId>.GlobalId
		{
			get { return (_state as ISellableInventoryItemState).GlobalId; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as ISellableInventoryItemState).CreatedBy; }
            set { (_state as ISellableInventoryItemState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as ISellableInventoryItemState).CreatedAt; }
            set { (_state as ISellableInventoryItemState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as ISellableInventoryItemState).UpdatedBy; }
            set { (_state as ISellableInventoryItemState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as ISellableInventoryItemState).UpdatedAt; }
            set { (_state as ISellableInventoryItemState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as ISellableInventoryItemStateProperties).Version; }
		}

		#endregion

        bool ISellableInventoryItemState.IsUnsaved
        {
            get { return this.Version == SellableInventoryItemState.VersionZero; }
        }

        public virtual ISellableInventoryItemEntryStateDto[] Entries
        {
            get 
            {
                if (!(this as IStateDtoWrapper).ReturnedFieldsContains("Entries"))
                {
                    return null;
                }
                var dtos = new List<ISellableInventoryItemEntryStateDto>();
                if (this._state.Entries != null)
                {
                    foreach (var s in this._state.Entries)
                    {
                        var dto = new SellableInventoryItemEntryStateDtoWrapper((SellableInventoryItemEntryState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "Entries");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDtoWrapper).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDtoWrapper).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new SellableInventoryItemEntryStateDtoWrapper[0]; }
                var states = new List<ISellableInventoryItemEntryState>();
                foreach (var s in value)
                {
                    states.Add(s.ToSellableInventoryItemEntryState());
                }
                this._state.Entries = new DtoSellableInventoryItemEntryStates(this._state, states);
            }
        }

        ISellableInventoryItemEntryStates ISellableInventoryItemState.Entries
        {
            get { return _state.Entries; }
            set { _state.Entries = value; }
        }

		void ISellableInventoryItemState.When(ISellableInventoryItemStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool ISellableInventoryItemState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

        public virtual string CommandId
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CommandId"))
                {
                    return _state.CommandId; 
                }
                return null;
            }
            set { _state.CommandId = value; }
        }

		void ISellableInventoryItemState.When(ISellableInventoryItemStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void ISellableInventoryItemState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

        public class DtoSellableInventoryItemEntryStates : ISellableInventoryItemEntryStates
        {

            private ISellableInventoryItemState _outerState;

            private IEnumerable<ISellableInventoryItemEntryState> _innerStates;

            public DtoSellableInventoryItemEntryStates(ISellableInventoryItemState outerState, IEnumerable<ISellableInventoryItemEntryState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new ISellableInventoryItemEntryState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<ISellableInventoryItemEntryState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public ISellableInventoryItemEntryState Get(long entrySeqId)
            {
                throw new NotSupportedException();
            }

            public ISellableInventoryItemEntryState Get(long entrySeqId, bool forCreation)
            {
                throw new NotSupportedException();
            }

            public ISellableInventoryItemEntryState Get(long entrySeqId, bool forCreation, bool nullAllowed)
            {
                throw new NotSupportedException();
            }

            public void Remove(ISellableInventoryItemEntryState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(ISellableInventoryItemEntryState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

	}

    partial class SellableInventoryItemStateDtoWrapperCollection : StateDtoWrapperCollectionBase<SellableInventoryItemStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(SellableInventoryItemStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

