// <autogenerated>
//   This file was generated by T4 code generator GenerateDamageReasonDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DamageReason;

namespace Dddml.Wms.Domain.DamageReason
{

    public class DamageReasonStateEventDtoConverter
    {
        public virtual DamageReasonStateCreatedOrMergePatchedOrDeletedDto ToDamageReasonStateEventDto(IDamageReasonEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IDamageReasonStateCreated)stateEvent;
                return ToDamageReasonStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IDamageReasonStateMergePatched)stateEvent;
                return ToDamageReasonStateMergePatchedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.Deleted)
            {
                var e = (IDamageReasonStateDeleted)stateEvent;
                return ToDamageReasonStateDeletedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual DamageReasonStateCreatedDto ToDamageReasonStateCreatedDto(IDamageReasonStateCreated e)
        {
            var dto = new DamageReasonStateCreatedDto();
            dto.DamageReasonEventId = e.DamageReasonEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.SequenceId = e.SequenceId;
            dto.Active = e.Active;
            return dto;
        }

        public virtual DamageReasonStateMergePatchedDto ToDamageReasonStateMergePatchedDto(IDamageReasonStateMergePatched e)
        {
            var dto = new DamageReasonStateMergePatchedDto();
            dto.DamageReasonEventId = e.DamageReasonEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.Description = e.Description;
            dto.SequenceId = e.SequenceId;
            dto.Active = e.Active;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertySequenceIdRemoved = e.IsPropertySequenceIdRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;

            return dto;
        }


        public virtual DamageReasonStateDeletedDto ToDamageReasonStateDeletedDto(IDamageReasonStateDeleted e)
        {
            var dto = new DamageReasonStateDeletedDto();
            dto.DamageReasonEventId = e.DamageReasonEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;

            return dto;
        }


    }


}

