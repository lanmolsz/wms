// <autogenerated>
//   This file was generated by T4 code generator GenerateDamageReasonDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.DamageReason;

namespace Dddml.Wms.Domain.DamageReason
{

	public static partial class DamageReasonStateInterfaceExtension
	{

        public static IDamageReasonCommand ToCreateOrMergePatchDamageReason<TCreateDamageReason, TMergePatchDamageReason>(this IDamageReasonState state)
            where TCreateDamageReason : ICreateDamageReason, new()
            where TMergePatchDamageReason : IMergePatchDamageReason, new()
        {
            bool bUnsaved = ((IDamageReasonState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateDamageReason<TCreateDamageReason>();
            }
            else 
            {
                return state.ToMergePatchDamageReason<TMergePatchDamageReason>();
            }
        }

        public static TDeleteDamageReason ToDeleteDamageReason<TDeleteDamageReason>(this IDamageReasonState state)
            where TDeleteDamageReason : IDeleteDamageReason, new()
        {
            var cmd = new TDeleteDamageReason();
            cmd.DamageReasonId = state.DamageReasonId;
            cmd.Version = ((IDamageReasonStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchDamageReason ToMergePatchDamageReason<TMergePatchDamageReason>(this IDamageReasonState state)
            where TMergePatchDamageReason : IMergePatchDamageReason, new()
        {
            var cmd = new TMergePatchDamageReason();

            cmd.Version = ((IDamageReasonStateProperties)state).Version;

            cmd.DamageReasonId = state.DamageReasonId;
            cmd.Description = state.Description;
            cmd.SequenceId = state.SequenceId;
            cmd.Active = ((IDamageReasonStateProperties)state).Active;
            
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.SequenceId == null) { cmd.IsPropertySequenceIdRemoved = true; }
            return cmd;
        }

        public static TCreateDamageReason ToCreateDamageReason<TCreateDamageReason>(this IDamageReasonState state)
            where TCreateDamageReason : ICreateDamageReason, new()
        {
            var cmd = new TCreateDamageReason();

            cmd.Version = ((IDamageReasonStateProperties)state).Version;

            cmd.DamageReasonId = state.DamageReasonId;
            cmd.Description = state.Description;
            cmd.SequenceId = state.SequenceId;
            cmd.Active = ((IDamageReasonStateProperties)state).Active;
            return cmd;
        }
		

	}

}

