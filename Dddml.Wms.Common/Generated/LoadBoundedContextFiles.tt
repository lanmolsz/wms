<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Core\bin\Debug\Dddml.Core.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Serialization\bin\Debug\Dddml.Serialization.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.T4\bin\Debug\Dddml.T4.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\packages\YamlDotNet.3.8.0\lib\net35\YamlDotNet.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Dddml.Core.Domain" #>
<#@ import namespace="Dddml.Serialization" #>
<#@ import namespace="Dddml.T4" #>
<#@ import namespace="Dddml.T4.Extensions" #>
<#@ include file="T4Toolbox.tt" #>
<#

    var boundedContext = LoadBoundedContextFiles();
	boundedContext.Refresh();
	ReplacePropertyTypesWithBaseTypes(boundedContext);
#>
<#+
	private void ReplacePropertyTypesWithBaseTypes(BoundedContext boundedContext)
	{
		boundedContext.ReplacePropertyTypesWithBaseTypes();	
	}

    private BoundedContext LoadBoundedContextFiles()
    {
        string projectFile = TransformationContext.Current.GetPropertyValue("MSBuildProjectFullPath");
		string projectDir = System.IO.Path.GetDirectoryName(projectFile);
		string filePath1 = System.IO.Path.Combine(projectDir, "../Dddml.Wms.Metadata/AttributeSetInstanceDddml.yaml");
		string filePath2 = System.IO.Path.Combine(projectDir, "../Dddml.Wms.Metadata/AttributeSetInstanceExtensionFieldGroupDddml.yaml");
		var files = new List<string>();
		files.Add(filePath1);
		files.Add(filePath2);
		var excludedFiles = new List<string>();
		foreach(var f in System.IO.Directory.GetFiles(System.IO.Path.Combine(projectDir, "..\\dddml"), "*.yaml"))
		{
			if(!excludedFiles.Contains(System.IO.Path.GetFileName(f)))
			{
				files.Add(f);
			}
			else
			{
				//System.Diagnostics.Debug.WriteLine(f + " is excluded.");
			}
		}
		BoundedContext boundedContext = BoundedContextUtils.LoadFromFiles(files);
        return boundedContext; 
    }
#>