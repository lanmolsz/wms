<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ include file="DddmlSerializationForT4.tc" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Dddml.Core.Domain" #>
<#@ import namespace="Dddml.Serialization" #>
<#@ import namespace="Dddml.T4" #>
<#@ import namespace="Dddml.T4.Extensions" #>
<#@ include file="T4Toolbox.tt" #>
<#

    var boundedContext = LoadBoundedContextFiles();
	boundedContext.Refresh();
	ReplacePropertyTypesWithBaseTypes(boundedContext);
#>
<#+
	private void ReplacePropertyTypesWithBaseTypes(BoundedContext boundedContext)
	{
		boundedContext.ReplacePropertyTypesWithBaseTypes();	
	}

    private BoundedContext LoadBoundedContextFiles()
    {
        string projectFile = TransformationContext.Current.GetPropertyValue("MSBuildProjectFullPath");
		string projectDir = System.IO.Path.GetDirectoryName(projectFile);

		var excludedFiles = new List<string>();

		string filePath1 = System.IO.Path.Combine(projectDir, "../Dddml.Wms.Metadata/AttributeSetInstanceDddml.yaml");
		string filePath2 = System.IO.Path.Combine(projectDir, "../Dddml.Wms.Metadata/AttributeSetInstanceExtensionFieldGroupDddml.yaml");
		var additionalFiles = new List<string>();
		additionalFiles.Add(filePath1);
		additionalFiles.Add(filePath2);

		var dddmlDir = System.IO.Path.Combine(projectDir, "..\\dddml");

		BoundedContext boundedContext = BoundedContextUtils.LoadFromDirectory(dddmlDir, "*.yaml", excludedFiles, additionalFiles);

        return boundedContext; 
    }
#>