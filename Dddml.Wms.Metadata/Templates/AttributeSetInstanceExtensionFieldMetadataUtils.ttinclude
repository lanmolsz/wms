<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Core\bin\Debug\Dddml.Core.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Serialization\bin\Debug\Dddml.Serialization.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.T4\bin\Debug\Dddml.T4.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\packages\YamlDotNet.3.8.0\lib\net35\YamlDotNet.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Dddml.Core.Dom" #>
<#@ import namespace="Dddml.Serialization" #>
<#@ import namespace="Dddml.T4" #>
<#@ import namespace="Dddml.T4.Extensions" #>
<#@ import namespace="Dddml.T4.Generator" #>

<#+

    public static class AttributeSetInstanceExtensionFieldMetadataUtils
    {
      
		static IList<ExtensionFieldGroupMetadata> extensionFieldGroups = new ExtensionFieldGroupMetadata[] {
                new ExtensionFieldGroupMetadata("_F_B_", "_", "bool?", 50, null),
                new ExtensionFieldGroupMetadata("_F_I_", "_", "int?", 50, null),
                new ExtensionFieldGroupMetadata("_F_L_", "_", "long?", 30, null),
                new ExtensionFieldGroupMetadata("_F_DT_", "_", "DateTime?", 20, null),
                new ExtensionFieldGroupMetadata("_F_N_", "_", "decimal?", 50, null),
                new ExtensionFieldGroupMetadata("_F_C5_", "_", "string", 50, 5),
                new ExtensionFieldGroupMetadata("_F_C10_", "_", "string", 50, 10),
                new ExtensionFieldGroupMetadata("_F_C20_", "_", "string", 50, 20),
                new ExtensionFieldGroupMetadata("_F_C50_", "_", "string", 50, 50),
                new ExtensionFieldGroupMetadata("_F_C100_", "_", "string", 20, 100),
                new ExtensionFieldGroupMetadata("_F_C200_", "_", "string", 20, 200),
                new ExtensionFieldGroupMetadata("_F_C500_", "_", "string", 10, 500),
                new ExtensionFieldGroupMetadata("_F_C1000_", "_", "string", 5, 1000)
            };    

        public static ICollection<ExtensionFieldGroupMetadata> GetExtensionFieldGroups()
		{
			return extensionFieldGroups;
		}

        public static ICollection<ExtensionFieldMetadata> GetAllExtensionFields()
        {

            var fields = new List<ExtensionFieldMetadata>();

            for (int i = 0; i < 1000; i++)
            {
                for (int iG = 0; iG < extensionFieldGroups.Count; iG++)
                {
                    var group = extensionFieldGroups[iG];
                    if (i < group.FieldCount)
                    {
                        fields.Add(group.CreateExtensionFieldMetadata(i));
                    }
                }
            }

            return fields;

        }

    }
#>
